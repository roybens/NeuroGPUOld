#include "CudaStuff.cuh"
#include "AllModels.cu"
#include "AllModels.cuh"


#ifdef ILP1
	#define SUPERILPMACRO(x) ; ## x ## (1);
#endif
#ifdef ILP2
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2);
#endif
#ifdef ILP3
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3);
#endif
#ifdef ILP4
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); 
#endif
#ifdef ILP5
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); 
#endif
#ifdef ILP6
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6);
#endif
#ifdef ILP7
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7);
#endif
#ifdef ILP8
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8);
#endif
#ifdef ILP9
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9);
#endif
#ifdef ILP10
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10);
#endif
#ifdef ILP11
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11);
#endif
#ifdef ILP12
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12);
#endif
#ifdef ILP13
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13);
#endif
#ifdef ILP14
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14);
#endif
#ifdef ILP15
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15);
#endif
#ifdef ILP16
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16);
#endif
#ifdef ILP17
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17);
#endif
#ifdef ILP18
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18);
#endif
#ifdef ILP19
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19);
#endif
#ifdef ILP20
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20);
#endif
#ifdef ILP21
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21);
#endif
#ifdef ILP22
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22);
#endif
#ifdef ILP23
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23);
#endif
#ifdef ILP24
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24);
#endif
#ifdef ILP25
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25);
#endif
#ifdef ILP26
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26);
#endif
#ifdef ILP27
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27);
#endif
#ifdef ILP28
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28);
#endif
#ifdef ILP29
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29);
#endif
#ifdef ILP30
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30);
#endif
#ifdef ILP31
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31);
#endif
#ifdef ILP32
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); 
#endif
#ifdef ILP33
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33);
#endif
#ifdef ILP34
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34);
#endif
#ifdef ILP35
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35);
#endif
#ifdef ILP36
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36);
#endif
#ifdef ILP37
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37);
#endif
#ifdef ILP38
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38);
#endif
#ifdef ILP39
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39);
#endif
#ifdef ILP40
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40);
#endif
#ifdef ILP41
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41);
#endif
#ifdef ILP42
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42);
#endif
#ifdef ILP43
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43);
#endif
#ifdef ILP44
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44);
#endif
#ifdef ILP45
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44); ## x ## (45);
#endif
#ifdef ILP46
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44); ## x ## (45); ## x ## (46);
#endif
#ifdef ILP47
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44); ## x ## (45); ## x ## (46); ## x ## (47);
#endif
#ifdef ILP48
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44); ## x ## (45); ## x ## (46); ## x ## (47); ## x ## (48);
#endif
#ifdef ILP49
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44); ## x ## (45); ## x ## (46); ## x ## (47); ## x ## (48); ## x ## (49);
#endif
#ifdef ILP50
	#define SUPERILPMACRO(x) ; ## x ## (1); ## x ## (2); ## x ## (3); ## x ## (4); ## x ## (5); ## x ## (6); ## x ## (7); ## x ## (8); ## x ## (9); ## x ## (10); ## x ## (11); ## x ## (12); ## x ## (13); ## x ## (14); ## x ## (15); ## x ## (16); ## x ## (17); ## x ## (18); ## x ## (19); ## x ## (20); ## x ## (21); ## x ## (22); ## x ## (23); ## x ## (24); ## x ## (25); ## x ## (26); ## x ## (27); ## x ## (28); ## x ## (29); ## x ## (30); ## x ## (31); ## x ## (32); ## x ## (33); ## x ## (34); ## x ## (35); ## x ## (36); ## x ## (37); ## x ## (38); ## x ## (39); ## x ## (40); ## x ## (41); ## x ## (42); ## x ## (43); ## x ## (44); ## x ## (45); ## x ## (46); ## x ## (47); ## x ## (48); ## x ## (49); ## x ## (50);
#endif


__device__ void BeforeLU(HMat InMat, MYFTYPE* uHP, MYFTYPE* bHP, MYDTYPE Depth)
{
	MYDTYPE PIdx=threadIdx.x;
	MYDTYPE i,j,CurJ,CurB,t, CurLevel,LRelIndex;
	MYDTYPE JumctionI;
	CurJ = InMat.CompByLevel32[2]-1;
	LRelIndex=InMat.LRelStarts[CurLevel];
	LRelIndex=LRelIndex+InMat.LRelEnds[CurLevel];
	for(CurLevel=0;CurLevel<=Depth;CurLevel++) {
		
		for(LRelIndex=InMat.LRelStarts[CurLevel];LRelIndex<=InMat.LRelEnds[CurLevel];LRelIndex++){ 
		//for(LRelIndex=InMat.LRelStarts[CurLevel];LRelIndex<=InMat.LRelEnds[CurLevel];LRelIndex++){ 
			JumctionI=InMat.CompByLevel32[LRelIndex*WARPSIZE+PIdx]-1;
			for(i=InMat.SegStartI[JumctionI]-1;i<InMat.SegEndI[JumctionI];i++) {
				MYFTYPE uHPm1=uHP[i-1];
			
				uHP[i]=uHP[i]-InMat.e[i]*(InMat.f[i-1]/uHPm1); // So far same as paper parallel
				uHPm1=uHP[i-1];
				MYFTYPE bHPm1=bHP[i-1];
				bHP[i]=bHP[i]-bHPm1*InMat.e[i]/uHPm1; // bH is y
			}
		}
		if(CurLevel<Depth) {
			for(LRelIndex=InMat.FLRelStarts[CurLevel];LRelIndex<=InMat.FLRelEnds[CurLevel];LRelIndex++){ 
				CurB=InMat.CompByFLevel32[(LRelIndex)*WARPSIZE+PIdx]-1;//RB i inserted another  -1 into the index RB 2 i removed the-1 from the curlevel 
				CurJ=InMat.Fathers[CurB]-1;
				MYDTYPE St=InMat.RelStarts[CurB];
				MYDTYPE En=InMat.RelEnds[CurB];
				for(j=St;j<=En;j++) {
					t=InMat.RelVec[j-1]-1;
					MYFTYPE uHPm1=uHP[t-1];
					uHP[CurJ]-=InMat.e[t]*(InMat.f[t-1]/uHPm1); 
					uHPm1=uHP[t-1];
					MYFTYPE bHPm1=bHP[t-1];
					bHP[CurJ]-=bHPm1*InMat.e[t]/uHPm1; 
				}
			}
		}	
	}
}

#ifdef BKSUB1
__device__ void BkSub(HMat InMat, MYFTYPE* PX, MYFTYPE* PF,MYFTYPE* uHP, MYFTYPE* bHP, MYDTYPE LognDepth)
{
	// MYDTYPE PIdx_1=threadIdx.x; // MYDTYPE NextID_1;
#define THISCOMMANDHERE1(VARILP) MYDTYPE PIdx_ ## VARILP =threadIdx.x+(WARPSIZE*(## VARILP -1)); MYDTYPE NextID_ ## VARILP ;
	MYDTYPE PIdx_1 =threadIdx.x+(WARPSIZE*(1 -1)); MYDTYPE NextID_1 ;MYDTYPE PIdx_2 =threadIdx.x+(WARPSIZE*(2 -1)); MYDTYPE NextID_2 ;MYDTYPE PIdx_3 =threadIdx.x+(WARPSIZE*(3 -1)); MYDTYPE NextID_3 ;MYDTYPE PIdx_4 =threadIdx.x+(WARPSIZE*(4 -1)); MYDTYPE NextID_4 ;MYDTYPE PIdx_5 =threadIdx.x+(WARPSIZE*(5 -1)); MYDTYPE NextID_5 ;MYDTYPE PIdx_6 =threadIdx.x+(WARPSIZE*(6 -1)); MYDTYPE NextID_6 ;MYDTYPE PIdx_7 =threadIdx.x+(WARPSIZE*(7 -1)); MYDTYPE NextID_7 ;MYDTYPE PIdx_8 =threadIdx.x+(WARPSIZE*(8 -1)); MYDTYPE NextID_8 ;MYDTYPE PIdx_9 =threadIdx.x+(WARPSIZE*(9 -1)); MYDTYPE NextID_9 ;MYDTYPE PIdx_10 =threadIdx.x+(WARPSIZE*(10 -1)); MYDTYPE NextID_10 ;MYDTYPE PIdx_11 =threadIdx.x+(WARPSIZE*(11 -1)); MYDTYPE NextID_11 ;MYDTYPE PIdx_12 =threadIdx.x+(WARPSIZE*(12 -1)); MYDTYPE NextID_12 ;MYDTYPE PIdx_13 =threadIdx.x+(WARPSIZE*(13 -1)); MYDTYPE NextID_13 ;MYDTYPE PIdx_14 =threadIdx.x+(WARPSIZE*(14 -1)); MYDTYPE NextID_14 ;MYDTYPE PIdx_15 =threadIdx.x+(WARPSIZE*(15 -1)); MYDTYPE NextID_15 ;MYDTYPE PIdx_16 =threadIdx.x+(WARPSIZE*(16 -1)); MYDTYPE NextID_16 ;MYDTYPE PIdx_17 =threadIdx.x+(WARPSIZE*(17 -1)); MYDTYPE NextID_17 ;MYDTYPE PIdx_18 =threadIdx.x+(WARPSIZE*(18 -1)); MYDTYPE NextID_18 ;MYDTYPE PIdx_19 =threadIdx.x+(WARPSIZE*(19 -1)); MYDTYPE NextID_19 ;MYDTYPE PIdx_20 =threadIdx.x+(WARPSIZE*(20 -1)); MYDTYPE NextID_20 ;MYDTYPE PIdx_21 =threadIdx.x+(WARPSIZE*(21 -1)); MYDTYPE NextID_21 ;MYDTYPE PIdx_22 =threadIdx.x+(WARPSIZE*(22 -1)); MYDTYPE NextID_22 ;MYDTYPE PIdx_23 =threadIdx.x+(WARPSIZE*(23 -1)); MYDTYPE NextID_23 ;MYDTYPE PIdx_24 =threadIdx.x+(WARPSIZE*(24 -1)); MYDTYPE NextID_24 ;MYDTYPE PIdx_25 =threadIdx.x+(WARPSIZE*(25 -1)); MYDTYPE NextID_25 ;MYDTYPE PIdx_26 =threadIdx.x+(WARPSIZE*(26 -1)); MYDTYPE NextID_26 ;
	MYDTYPE i;
	
	PX=bHP;
	PF=uHP;
	// PX[PIdx_1]=PX[PIdx_1]/PF[PIdx_1]; // PF[PIdx_1]=-InMat.f[PIdx_1]/PF[PIdx_1];
#define THISCOMMANDHERE2(VARILP) PX[PIdx_ ## VARILP ]=PX[PIdx_ ## VARILP ]/PF[PIdx_ ## VARILP ]; PF[PIdx_ ## VARILP ]=-InMat.f[PIdx_ ## VARILP ]/PF[PIdx_ ## VARILP ];
	PX[PIdx_1 ]=PX[PIdx_1 ]/PF[PIdx_1 ]; PF[PIdx_1 ]=-InMat.f[PIdx_1 ]/PF[PIdx_1 ];PX[PIdx_2 ]=PX[PIdx_2 ]/PF[PIdx_2 ]; PF[PIdx_2 ]=-InMat.f[PIdx_2 ]/PF[PIdx_2 ];PX[PIdx_3 ]=PX[PIdx_3 ]/PF[PIdx_3 ]; PF[PIdx_3 ]=-InMat.f[PIdx_3 ]/PF[PIdx_3 ];PX[PIdx_4 ]=PX[PIdx_4 ]/PF[PIdx_4 ]; PF[PIdx_4 ]=-InMat.f[PIdx_4 ]/PF[PIdx_4 ];PX[PIdx_5 ]=PX[PIdx_5 ]/PF[PIdx_5 ]; PF[PIdx_5 ]=-InMat.f[PIdx_5 ]/PF[PIdx_5 ];PX[PIdx_6 ]=PX[PIdx_6 ]/PF[PIdx_6 ]; PF[PIdx_6 ]=-InMat.f[PIdx_6 ]/PF[PIdx_6 ];PX[PIdx_7 ]=PX[PIdx_7 ]/PF[PIdx_7 ]; PF[PIdx_7 ]=-InMat.f[PIdx_7 ]/PF[PIdx_7 ];PX[PIdx_8 ]=PX[PIdx_8 ]/PF[PIdx_8 ]; PF[PIdx_8 ]=-InMat.f[PIdx_8 ]/PF[PIdx_8 ];PX[PIdx_9 ]=PX[PIdx_9 ]/PF[PIdx_9 ]; PF[PIdx_9 ]=-InMat.f[PIdx_9 ]/PF[PIdx_9 ];PX[PIdx_10 ]=PX[PIdx_10 ]/PF[PIdx_10 ]; PF[PIdx_10 ]=-InMat.f[PIdx_10 ]/PF[PIdx_10 ];PX[PIdx_11 ]=PX[PIdx_11 ]/PF[PIdx_11 ]; PF[PIdx_11 ]=-InMat.f[PIdx_11 ]/PF[PIdx_11 ];PX[PIdx_12 ]=PX[PIdx_12 ]/PF[PIdx_12 ]; PF[PIdx_12 ]=-InMat.f[PIdx_12 ]/PF[PIdx_12 ];PX[PIdx_13 ]=PX[PIdx_13 ]/PF[PIdx_13 ]; PF[PIdx_13 ]=-InMat.f[PIdx_13 ]/PF[PIdx_13 ];PX[PIdx_14 ]=PX[PIdx_14 ]/PF[PIdx_14 ]; PF[PIdx_14 ]=-InMat.f[PIdx_14 ]/PF[PIdx_14 ];PX[PIdx_15 ]=PX[PIdx_15 ]/PF[PIdx_15 ]; PF[PIdx_15 ]=-InMat.f[PIdx_15 ]/PF[PIdx_15 ];PX[PIdx_16 ]=PX[PIdx_16 ]/PF[PIdx_16 ]; PF[PIdx_16 ]=-InMat.f[PIdx_16 ]/PF[PIdx_16 ];PX[PIdx_17 ]=PX[PIdx_17 ]/PF[PIdx_17 ]; PF[PIdx_17 ]=-InMat.f[PIdx_17 ]/PF[PIdx_17 ];PX[PIdx_18 ]=PX[PIdx_18 ]/PF[PIdx_18 ]; PF[PIdx_18 ]=-InMat.f[PIdx_18 ]/PF[PIdx_18 ];PX[PIdx_19 ]=PX[PIdx_19 ]/PF[PIdx_19 ]; PF[PIdx_19 ]=-InMat.f[PIdx_19 ]/PF[PIdx_19 ];PX[PIdx_20 ]=PX[PIdx_20 ]/PF[PIdx_20 ]; PF[PIdx_20 ]=-InMat.f[PIdx_20 ]/PF[PIdx_20 ];PX[PIdx_21 ]=PX[PIdx_21 ]/PF[PIdx_21 ]; PF[PIdx_21 ]=-InMat.f[PIdx_21 ]/PF[PIdx_21 ];PX[PIdx_22 ]=PX[PIdx_22 ]/PF[PIdx_22 ]; PF[PIdx_22 ]=-InMat.f[PIdx_22 ]/PF[PIdx_22 ];PX[PIdx_23 ]=PX[PIdx_23 ]/PF[PIdx_23 ]; PF[PIdx_23 ]=-InMat.f[PIdx_23 ]/PF[PIdx_23 ];PX[PIdx_24 ]=PX[PIdx_24 ]/PF[PIdx_24 ]; PF[PIdx_24 ]=-InMat.f[PIdx_24 ]/PF[PIdx_24 ];PX[PIdx_25 ]=PX[PIdx_25 ]/PF[PIdx_25 ]; PF[PIdx_25 ]=-InMat.f[PIdx_25 ]/PF[PIdx_25 ];PX[PIdx_26 ]=PX[PIdx_26 ]/PF[PIdx_26 ]; PF[PIdx_26 ]=-InMat.f[PIdx_26 ]/PF[PIdx_26 ];

	PX[InMat.N]=0;
	PF[InMat.N]=1;
	for(i=0;i<LognDepth;i++) {	
		// NextID_1=InMat.FIdxs[i*InMat.N+PIdx_1]-1; // MYFTYPE OldPXj_1=PX[PIdx_1]; // MYFTYPE OldPXNextID_1=PX[NextID_1]; // PX[PIdx_1]=OldPXj_1+OldPXNextID_1*PF[PIdx_1];
#define THISCOMMANDHERE3(VARILP) NextID_ ## VARILP =InMat.FIdxs[i*InMat.N+PIdx_ ## VARILP ]-1; MYFTYPE OldPXj_ ## VARILP =PX[PIdx_ ## VARILP ]; MYFTYPE OldPXNextID_ ## VARILP =PX[NextID_ ## VARILP ]; PX[PIdx_ ## VARILP ]=OldPXj_ ## VARILP +OldPXNextID_ ## VARILP *PF[PIdx_ ## VARILP ];
	NextID_1 =InMat.FIdxs[i*InMat.N+PIdx_1 ]-1; MYFTYPE OldPXj_1 =PX[PIdx_1 ]; MYFTYPE OldPXNextID_1 =PX[NextID_1 ]; PX[PIdx_1 ]=OldPXj_1 +OldPXNextID_1 *PF[PIdx_1 ];NextID_2 =InMat.FIdxs[i*InMat.N+PIdx_2 ]-1; MYFTYPE OldPXj_2 =PX[PIdx_2 ]; MYFTYPE OldPXNextID_2 =PX[NextID_2 ]; PX[PIdx_2 ]=OldPXj_2 +OldPXNextID_2 *PF[PIdx_2 ];NextID_3 =InMat.FIdxs[i*InMat.N+PIdx_3 ]-1; MYFTYPE OldPXj_3 =PX[PIdx_3 ]; MYFTYPE OldPXNextID_3 =PX[NextID_3 ]; PX[PIdx_3 ]=OldPXj_3 +OldPXNextID_3 *PF[PIdx_3 ];NextID_4 =InMat.FIdxs[i*InMat.N+PIdx_4 ]-1; MYFTYPE OldPXj_4 =PX[PIdx_4 ]; MYFTYPE OldPXNextID_4 =PX[NextID_4 ]; PX[PIdx_4 ]=OldPXj_4 +OldPXNextID_4 *PF[PIdx_4 ];NextID_5 =InMat.FIdxs[i*InMat.N+PIdx_5 ]-1; MYFTYPE OldPXj_5 =PX[PIdx_5 ]; MYFTYPE OldPXNextID_5 =PX[NextID_5 ]; PX[PIdx_5 ]=OldPXj_5 +OldPXNextID_5 *PF[PIdx_5 ];NextID_6 =InMat.FIdxs[i*InMat.N+PIdx_6 ]-1; MYFTYPE OldPXj_6 =PX[PIdx_6 ]; MYFTYPE OldPXNextID_6 =PX[NextID_6 ]; PX[PIdx_6 ]=OldPXj_6 +OldPXNextID_6 *PF[PIdx_6 ];NextID_7 =InMat.FIdxs[i*InMat.N+PIdx_7 ]-1; MYFTYPE OldPXj_7 =PX[PIdx_7 ]; MYFTYPE OldPXNextID_7 =PX[NextID_7 ]; PX[PIdx_7 ]=OldPXj_7 +OldPXNextID_7 *PF[PIdx_7 ];NextID_8 =InMat.FIdxs[i*InMat.N+PIdx_8 ]-1; MYFTYPE OldPXj_8 =PX[PIdx_8 ]; MYFTYPE OldPXNextID_8 =PX[NextID_8 ]; PX[PIdx_8 ]=OldPXj_8 +OldPXNextID_8 *PF[PIdx_8 ];NextID_9 =InMat.FIdxs[i*InMat.N+PIdx_9 ]-1; MYFTYPE OldPXj_9 =PX[PIdx_9 ]; MYFTYPE OldPXNextID_9 =PX[NextID_9 ]; PX[PIdx_9 ]=OldPXj_9 +OldPXNextID_9 *PF[PIdx_9 ];NextID_10 =InMat.FIdxs[i*InMat.N+PIdx_10 ]-1; MYFTYPE OldPXj_10 =PX[PIdx_10 ]; MYFTYPE OldPXNextID_10 =PX[NextID_10 ]; PX[PIdx_10 ]=OldPXj_10 +OldPXNextID_10 *PF[PIdx_10 ];NextID_11 =InMat.FIdxs[i*InMat.N+PIdx_11 ]-1; MYFTYPE OldPXj_11 =PX[PIdx_11 ]; MYFTYPE OldPXNextID_11 =PX[NextID_11 ]; PX[PIdx_11 ]=OldPXj_11 +OldPXNextID_11 *PF[PIdx_11 ];NextID_12 =InMat.FIdxs[i*InMat.N+PIdx_12 ]-1; MYFTYPE OldPXj_12 =PX[PIdx_12 ]; MYFTYPE OldPXNextID_12 =PX[NextID_12 ]; PX[PIdx_12 ]=OldPXj_12 +OldPXNextID_12 *PF[PIdx_12 ];NextID_13 =InMat.FIdxs[i*InMat.N+PIdx_13 ]-1; MYFTYPE OldPXj_13 =PX[PIdx_13 ]; MYFTYPE OldPXNextID_13 =PX[NextID_13 ]; PX[PIdx_13 ]=OldPXj_13 +OldPXNextID_13 *PF[PIdx_13 ];NextID_14 =InMat.FIdxs[i*InMat.N+PIdx_14 ]-1; MYFTYPE OldPXj_14 =PX[PIdx_14 ]; MYFTYPE OldPXNextID_14 =PX[NextID_14 ]; PX[PIdx_14 ]=OldPXj_14 +OldPXNextID_14 *PF[PIdx_14 ];NextID_15 =InMat.FIdxs[i*InMat.N+PIdx_15 ]-1; MYFTYPE OldPXj_15 =PX[PIdx_15 ]; MYFTYPE OldPXNextID_15 =PX[NextID_15 ]; PX[PIdx_15 ]=OldPXj_15 +OldPXNextID_15 *PF[PIdx_15 ];NextID_16 =InMat.FIdxs[i*InMat.N+PIdx_16 ]-1; MYFTYPE OldPXj_16 =PX[PIdx_16 ]; MYFTYPE OldPXNextID_16 =PX[NextID_16 ]; PX[PIdx_16 ]=OldPXj_16 +OldPXNextID_16 *PF[PIdx_16 ];NextID_17 =InMat.FIdxs[i*InMat.N+PIdx_17 ]-1; MYFTYPE OldPXj_17 =PX[PIdx_17 ]; MYFTYPE OldPXNextID_17 =PX[NextID_17 ]; PX[PIdx_17 ]=OldPXj_17 +OldPXNextID_17 *PF[PIdx_17 ];NextID_18 =InMat.FIdxs[i*InMat.N+PIdx_18 ]-1; MYFTYPE OldPXj_18 =PX[PIdx_18 ]; MYFTYPE OldPXNextID_18 =PX[NextID_18 ]; PX[PIdx_18 ]=OldPXj_18 +OldPXNextID_18 *PF[PIdx_18 ];NextID_19 =InMat.FIdxs[i*InMat.N+PIdx_19 ]-1; MYFTYPE OldPXj_19 =PX[PIdx_19 ]; MYFTYPE OldPXNextID_19 =PX[NextID_19 ]; PX[PIdx_19 ]=OldPXj_19 +OldPXNextID_19 *PF[PIdx_19 ];NextID_20 =InMat.FIdxs[i*InMat.N+PIdx_20 ]-1; MYFTYPE OldPXj_20 =PX[PIdx_20 ]; MYFTYPE OldPXNextID_20 =PX[NextID_20 ]; PX[PIdx_20 ]=OldPXj_20 +OldPXNextID_20 *PF[PIdx_20 ];NextID_21 =InMat.FIdxs[i*InMat.N+PIdx_21 ]-1; MYFTYPE OldPXj_21 =PX[PIdx_21 ]; MYFTYPE OldPXNextID_21 =PX[NextID_21 ]; PX[PIdx_21 ]=OldPXj_21 +OldPXNextID_21 *PF[PIdx_21 ];NextID_22 =InMat.FIdxs[i*InMat.N+PIdx_22 ]-1; MYFTYPE OldPXj_22 =PX[PIdx_22 ]; MYFTYPE OldPXNextID_22 =PX[NextID_22 ]; PX[PIdx_22 ]=OldPXj_22 +OldPXNextID_22 *PF[PIdx_22 ];NextID_23 =InMat.FIdxs[i*InMat.N+PIdx_23 ]-1; MYFTYPE OldPXj_23 =PX[PIdx_23 ]; MYFTYPE OldPXNextID_23 =PX[NextID_23 ]; PX[PIdx_23 ]=OldPXj_23 +OldPXNextID_23 *PF[PIdx_23 ];NextID_24 =InMat.FIdxs[i*InMat.N+PIdx_24 ]-1; MYFTYPE OldPXj_24 =PX[PIdx_24 ]; MYFTYPE OldPXNextID_24 =PX[NextID_24 ]; PX[PIdx_24 ]=OldPXj_24 +OldPXNextID_24 *PF[PIdx_24 ];NextID_25 =InMat.FIdxs[i*InMat.N+PIdx_25 ]-1; MYFTYPE OldPXj_25 =PX[PIdx_25 ]; MYFTYPE OldPXNextID_25 =PX[NextID_25 ]; PX[PIdx_25 ]=OldPXj_25 +OldPXNextID_25 *PF[PIdx_25 ];NextID_26 =InMat.FIdxs[i*InMat.N+PIdx_26 ]-1; MYFTYPE OldPXj_26 =PX[PIdx_26 ]; MYFTYPE OldPXNextID_26 =PX[NextID_26 ]; PX[PIdx_26 ]=OldPXj_26 +OldPXNextID_26 *PF[PIdx_26 ];

		// PX[j]=PX[j]+PX[NextID]*PF[j];
		// PF[j]=PF[j]*PF[NextID];
		
		// MYFTYPE OldPFj_1=PF[PIdx_1]; // MYFTYPE OldPFNextID_1=PF[NextID_1]; // PF[PIdx_1]=OldPFj_1*OldPFNextID_1;
#define THISCOMMANDHERE4(VARILP) MYFTYPE OldPFj_ ## VARILP =PF[PIdx_ ## VARILP ]; MYFTYPE OldPFNextID_ ## VARILP =PF[NextID_ ## VARILP ]; PF[PIdx_ ## VARILP ]=OldPFj_ ## VARILP *OldPFNextID_ ## VARILP ;
	MYFTYPE OldPFj_1 =PF[PIdx_1 ]; MYFTYPE OldPFNextID_1 =PF[NextID_1 ]; PF[PIdx_1 ]=OldPFj_1 *OldPFNextID_1 ;MYFTYPE OldPFj_2 =PF[PIdx_2 ]; MYFTYPE OldPFNextID_2 =PF[NextID_2 ]; PF[PIdx_2 ]=OldPFj_2 *OldPFNextID_2 ;MYFTYPE OldPFj_3 =PF[PIdx_3 ]; MYFTYPE OldPFNextID_3 =PF[NextID_3 ]; PF[PIdx_3 ]=OldPFj_3 *OldPFNextID_3 ;MYFTYPE OldPFj_4 =PF[PIdx_4 ]; MYFTYPE OldPFNextID_4 =PF[NextID_4 ]; PF[PIdx_4 ]=OldPFj_4 *OldPFNextID_4 ;MYFTYPE OldPFj_5 =PF[PIdx_5 ]; MYFTYPE OldPFNextID_5 =PF[NextID_5 ]; PF[PIdx_5 ]=OldPFj_5 *OldPFNextID_5 ;MYFTYPE OldPFj_6 =PF[PIdx_6 ]; MYFTYPE OldPFNextID_6 =PF[NextID_6 ]; PF[PIdx_6 ]=OldPFj_6 *OldPFNextID_6 ;MYFTYPE OldPFj_7 =PF[PIdx_7 ]; MYFTYPE OldPFNextID_7 =PF[NextID_7 ]; PF[PIdx_7 ]=OldPFj_7 *OldPFNextID_7 ;MYFTYPE OldPFj_8 =PF[PIdx_8 ]; MYFTYPE OldPFNextID_8 =PF[NextID_8 ]; PF[PIdx_8 ]=OldPFj_8 *OldPFNextID_8 ;MYFTYPE OldPFj_9 =PF[PIdx_9 ]; MYFTYPE OldPFNextID_9 =PF[NextID_9 ]; PF[PIdx_9 ]=OldPFj_9 *OldPFNextID_9 ;MYFTYPE OldPFj_10 =PF[PIdx_10 ]; MYFTYPE OldPFNextID_10 =PF[NextID_10 ]; PF[PIdx_10 ]=OldPFj_10 *OldPFNextID_10 ;MYFTYPE OldPFj_11 =PF[PIdx_11 ]; MYFTYPE OldPFNextID_11 =PF[NextID_11 ]; PF[PIdx_11 ]=OldPFj_11 *OldPFNextID_11 ;MYFTYPE OldPFj_12 =PF[PIdx_12 ]; MYFTYPE OldPFNextID_12 =PF[NextID_12 ]; PF[PIdx_12 ]=OldPFj_12 *OldPFNextID_12 ;MYFTYPE OldPFj_13 =PF[PIdx_13 ]; MYFTYPE OldPFNextID_13 =PF[NextID_13 ]; PF[PIdx_13 ]=OldPFj_13 *OldPFNextID_13 ;MYFTYPE OldPFj_14 =PF[PIdx_14 ]; MYFTYPE OldPFNextID_14 =PF[NextID_14 ]; PF[PIdx_14 ]=OldPFj_14 *OldPFNextID_14 ;MYFTYPE OldPFj_15 =PF[PIdx_15 ]; MYFTYPE OldPFNextID_15 =PF[NextID_15 ]; PF[PIdx_15 ]=OldPFj_15 *OldPFNextID_15 ;MYFTYPE OldPFj_16 =PF[PIdx_16 ]; MYFTYPE OldPFNextID_16 =PF[NextID_16 ]; PF[PIdx_16 ]=OldPFj_16 *OldPFNextID_16 ;MYFTYPE OldPFj_17 =PF[PIdx_17 ]; MYFTYPE OldPFNextID_17 =PF[NextID_17 ]; PF[PIdx_17 ]=OldPFj_17 *OldPFNextID_17 ;MYFTYPE OldPFj_18 =PF[PIdx_18 ]; MYFTYPE OldPFNextID_18 =PF[NextID_18 ]; PF[PIdx_18 ]=OldPFj_18 *OldPFNextID_18 ;MYFTYPE OldPFj_19 =PF[PIdx_19 ]; MYFTYPE OldPFNextID_19 =PF[NextID_19 ]; PF[PIdx_19 ]=OldPFj_19 *OldPFNextID_19 ;MYFTYPE OldPFj_20 =PF[PIdx_20 ]; MYFTYPE OldPFNextID_20 =PF[NextID_20 ]; PF[PIdx_20 ]=OldPFj_20 *OldPFNextID_20 ;MYFTYPE OldPFj_21 =PF[PIdx_21 ]; MYFTYPE OldPFNextID_21 =PF[NextID_21 ]; PF[PIdx_21 ]=OldPFj_21 *OldPFNextID_21 ;MYFTYPE OldPFj_22 =PF[PIdx_22 ]; MYFTYPE OldPFNextID_22 =PF[NextID_22 ]; PF[PIdx_22 ]=OldPFj_22 *OldPFNextID_22 ;MYFTYPE OldPFj_23 =PF[PIdx_23 ]; MYFTYPE OldPFNextID_23 =PF[NextID_23 ]; PF[PIdx_23 ]=OldPFj_23 *OldPFNextID_23 ;MYFTYPE OldPFj_24 =PF[PIdx_24 ]; MYFTYPE OldPFNextID_24 =PF[NextID_24 ]; PF[PIdx_24 ]=OldPFj_24 *OldPFNextID_24 ;MYFTYPE OldPFj_25 =PF[PIdx_25 ]; MYFTYPE OldPFNextID_25 =PF[NextID_25 ]; PF[PIdx_25 ]=OldPFj_25 *OldPFNextID_25 ;MYFTYPE OldPFj_26 =PF[PIdx_26 ]; MYFTYPE OldPFNextID_26 =PF[NextID_26 ]; PF[PIdx_26 ]=OldPFj_26 *OldPFNextID_26 ;
	}
}
#endif

#ifdef BKSUB2
__device__ void BkSub(HMat InMat, MYFTYPE* uHP, MYFTYPE* bHP,MYFTYPE* Out, MYDTYPE Depth)
{
	// MYDTYPE PIdx_3=threadIdx.x+(WARPSIZE*2); Out[PIdx_2]=0; // might be useless?
#define THISCOMMANDHEREB1(VARILP) MYDTYPE PIdx_ ## VARILP =threadIdx.x+(WARPSIZE*( ## VARILP -1)); Out[PIdx_ ## VARILP ]=0;
	MYDTYPE PIdx_1 =threadIdx.x+(WARPSIZE*(1 -1)); Out[PIdx_1 ]=0;MYDTYPE PIdx_2 =threadIdx.x+(WARPSIZE*(2 -1)); Out[PIdx_2 ]=0;MYDTYPE PIdx_3 =threadIdx.x+(WARPSIZE*(3 -1)); Out[PIdx_3 ]=0;MYDTYPE PIdx_4 =threadIdx.x+(WARPSIZE*(4 -1)); Out[PIdx_4 ]=0;MYDTYPE PIdx_5 =threadIdx.x+(WARPSIZE*(5 -1)); Out[PIdx_5 ]=0;MYDTYPE PIdx_6 =threadIdx.x+(WARPSIZE*(6 -1)); Out[PIdx_6 ]=0;MYDTYPE PIdx_7 =threadIdx.x+(WARPSIZE*(7 -1)); Out[PIdx_7 ]=0;MYDTYPE PIdx_8 =threadIdx.x+(WARPSIZE*(8 -1)); Out[PIdx_8 ]=0;MYDTYPE PIdx_9 =threadIdx.x+(WARPSIZE*(9 -1)); Out[PIdx_9 ]=0;MYDTYPE PIdx_10 =threadIdx.x+(WARPSIZE*(10 -1)); Out[PIdx_10 ]=0;MYDTYPE PIdx_11 =threadIdx.x+(WARPSIZE*(11 -1)); Out[PIdx_11 ]=0;MYDTYPE PIdx_12 =threadIdx.x+(WARPSIZE*(12 -1)); Out[PIdx_12 ]=0;MYDTYPE PIdx_13 =threadIdx.x+(WARPSIZE*(13 -1)); Out[PIdx_13 ]=0;MYDTYPE PIdx_14 =threadIdx.x+(WARPSIZE*(14 -1)); Out[PIdx_14 ]=0;MYDTYPE PIdx_15 =threadIdx.x+(WARPSIZE*(15 -1)); Out[PIdx_15 ]=0;MYDTYPE PIdx_16 =threadIdx.x+(WARPSIZE*(16 -1)); Out[PIdx_16 ]=0;MYDTYPE PIdx_17 =threadIdx.x+(WARPSIZE*(17 -1)); Out[PIdx_17 ]=0;MYDTYPE PIdx_18 =threadIdx.x+(WARPSIZE*(18 -1)); Out[PIdx_18 ]=0;MYDTYPE PIdx_19 =threadIdx.x+(WARPSIZE*(19 -1)); Out[PIdx_19 ]=0;MYDTYPE PIdx_20 =threadIdx.x+(WARPSIZE*(20 -1)); Out[PIdx_20 ]=0;MYDTYPE PIdx_21 =threadIdx.x+(WARPSIZE*(21 -1)); Out[PIdx_21 ]=0;MYDTYPE PIdx_22 =threadIdx.x+(WARPSIZE*(22 -1)); Out[PIdx_22 ]=0;MYDTYPE PIdx_23 =threadIdx.x+(WARPSIZE*(23 -1)); Out[PIdx_23 ]=0;MYDTYPE PIdx_24 =threadIdx.x+(WARPSIZE*(24 -1)); Out[PIdx_24 ]=0;MYDTYPE PIdx_25 =threadIdx.x+(WARPSIZE*(25 -1)); Out[PIdx_25 ]=0;MYDTYPE PIdx_26 =threadIdx.x+(WARPSIZE*(26 -1)); Out[PIdx_26 ]=0;

	MYDTYPE j,CurJ,CurB,t;
	MYDTYPE JumctionI;
	short CurLevel,i;

	// get KsB from MATLAB (this comes instead of FIdxsX)
	// KsB=Ks; // do in matlab

	// bPX=zeros(1,N); // might be useless
	// for CurLevel=Depth:-1:0
	MYDTYPE LRelIndex,k;
	MYFTYPE temp;
 for(CurLevel=Depth;CurLevel>=0;CurLevel--) {
  //     Run all independent set for this level, in parallel
  // for JumctionI=find(Level==CurLevel) % in parallel
  for(LRelIndex=InMat.LRelStarts[CurLevel];LRelIndex<=InMat.LRelEnds[CurLevel];LRelIndex++){ 
   JumctionI=InMat.CompByLevel32[LRelIndex*WARPSIZE+PIdx_1]-1;
   // for i=(SegEndI(JumctionI)):-1:(SegStartI(JumctionI)-1)
   for(i=InMat.SegEndI[JumctionI]-1;i>=(InMat.SegStartI[JumctionI]-2);i--) {
    // k=KsB(i+1);
     k=InMat.KsB[i+1];
	 
    // bPX(i)=(bH(i)-bPX(k)*f(i))/uH(i);
   Out[i]=(bHP[i]-Out[k]*InMat.f[i])/uHP[i];
   }
  }
 }
 } 

#endif
int testCode(MYFTYPE* orig, MYFTYPE* sim,int N){
	int i=0,iErr,iRel;
	MYFTYPE absErr,relErr,currErr,currRel;
	absErr = abs(orig[0]-sim[0]);
	relErr = absErr/abs(orig[0]);
	for(i=0;i<N;i++) {
		currErr = abs(orig[i]-sim[i]);
		currRel = currErr/abs(orig[i]);
		if (currErr>absErr){
			absErr=currErr;
			iErr=i;
		}
		if (currRel>relErr){
			relErr=currRel;
			iRel=i;

		}
	}
	printf("Absolute Error is %g at the %d index and Relative Error is %g at the %d index\n",absErr,iErr,relErr,iRel);
	return 1;
}
// RRR
__global__ void stEfork2TimeLoopGPUKernel(Stim stim, MYFTYPE* ParamsM, Sim sim, HMat InMat, MYFTYPE *V,MYFTYPE* VHotGlobal,MYDTYPE CompDepth,MYDTYPE CompFDepth)
{
	MYDTYPE StimID=threadIdx.y;
	MYFTYPE stimDel = stim.dels[StimID];
	MYFTYPE stimDur = stim.durs[StimID];
	MYFTYPE stimAmp = stim.amps[StimID];
	MYDTYPE stimLoc = stim.loc;
	MYFTYPE stimArea = stim.area;
	
	// MYDTYPE PIdx_3=threadIdx.x+(WARPSIZE*2);
#define THISCOMMANDHEREE1(VARILP) MYDTYPE PIdx_ ## VARILP =threadIdx.x+(WARPSIZE*( ## VARILP -1));
	MYDTYPE PIdx_1 =threadIdx.x+(WARPSIZE*(1 -1));MYDTYPE PIdx_2 =threadIdx.x+(WARPSIZE*(2 -1));MYDTYPE PIdx_3 =threadIdx.x+(WARPSIZE*(3 -1));MYDTYPE PIdx_4 =threadIdx.x+(WARPSIZE*(4 -1));MYDTYPE PIdx_5 =threadIdx.x+(WARPSIZE*(5 -1));MYDTYPE PIdx_6 =threadIdx.x+(WARPSIZE*(6 -1));MYDTYPE PIdx_7 =threadIdx.x+(WARPSIZE*(7 -1));MYDTYPE PIdx_8 =threadIdx.x+(WARPSIZE*(8 -1));MYDTYPE PIdx_9 =threadIdx.x+(WARPSIZE*(9 -1));MYDTYPE PIdx_10 =threadIdx.x+(WARPSIZE*(10 -1));MYDTYPE PIdx_11 =threadIdx.x+(WARPSIZE*(11 -1));MYDTYPE PIdx_12 =threadIdx.x+(WARPSIZE*(12 -1));MYDTYPE PIdx_13 =threadIdx.x+(WARPSIZE*(13 -1));MYDTYPE PIdx_14 =threadIdx.x+(WARPSIZE*(14 -1));MYDTYPE PIdx_15 =threadIdx.x+(WARPSIZE*(15 -1));MYDTYPE PIdx_16 =threadIdx.x+(WARPSIZE*(16 -1));MYDTYPE PIdx_17 =threadIdx.x+(WARPSIZE*(17 -1));MYDTYPE PIdx_18 =threadIdx.x+(WARPSIZE*(18 -1));MYDTYPE PIdx_19 =threadIdx.x+(WARPSIZE*(19 -1));MYDTYPE PIdx_20 =threadIdx.x+(WARPSIZE*(20 -1));MYDTYPE PIdx_21 =threadIdx.x+(WARPSIZE*(21 -1));MYDTYPE PIdx_22 =threadIdx.x+(WARPSIZE*(22 -1));MYDTYPE PIdx_23 =threadIdx.x+(WARPSIZE*(23 -1));MYDTYPE PIdx_24 =threadIdx.x+(WARPSIZE*(24 -1));MYDTYPE PIdx_25 =threadIdx.x+(WARPSIZE*(25 -1));MYDTYPE PIdx_26 =threadIdx.x+(WARPSIZE*(26 -1));

	cudaError cudaStatus;
	MYFTYPE t=0;
	
	// MYFTYPE isModel_3, dVec_3, Vmid_3; // MYFTYPE ModelStates_3[NSTATES]; // MYFTYPE v_3=V[PIdx_3]; // RRR -65?
#ifdef HH
#define THISCOMMANDHEREE2(VARILP) MYFTYPE isModel_ ## VARILP , dVec_ ## VARILP , Vmid_ ## VARILP ; MYFTYPE ModelStates_ ## VARILP [NSTATES]; MYFTYPE v_ ## VARILP =V[PIdx_ ## VARILP ];
	MYFTYPE isModel_1 , dVec_1 , Vmid_1 ; MYFTYPE ModelStates_1 [NSTATES]; MYFTYPE v_1 =V[PIdx_1 ];MYFTYPE isModel_2 , dVec_2 , Vmid_2 ; MYFTYPE ModelStates_2 [NSTATES]; MYFTYPE v_2 =V[PIdx_2 ];MYFTYPE isModel_3 , dVec_3 , Vmid_3 ; MYFTYPE ModelStates_3 [NSTATES]; MYFTYPE v_3 =V[PIdx_3 ];MYFTYPE isModel_4 , dVec_4 , Vmid_4 ; MYFTYPE ModelStates_4 [NSTATES]; MYFTYPE v_4 =V[PIdx_4 ];MYFTYPE isModel_5 , dVec_5 , Vmid_5 ; MYFTYPE ModelStates_5 [NSTATES]; MYFTYPE v_5 =V[PIdx_5 ];MYFTYPE isModel_6 , dVec_6 , Vmid_6 ; MYFTYPE ModelStates_6 [NSTATES]; MYFTYPE v_6 =V[PIdx_6 ];MYFTYPE isModel_7 , dVec_7 , Vmid_7 ; MYFTYPE ModelStates_7 [NSTATES]; MYFTYPE v_7 =V[PIdx_7 ];MYFTYPE isModel_8 , dVec_8 , Vmid_8 ; MYFTYPE ModelStates_8 [NSTATES]; MYFTYPE v_8 =V[PIdx_8 ];MYFTYPE isModel_9 , dVec_9 , Vmid_9 ; MYFTYPE ModelStates_9 [NSTATES]; MYFTYPE v_9 =V[PIdx_9 ];MYFTYPE isModel_10 , dVec_10 , Vmid_10 ; MYFTYPE ModelStates_10 [NSTATES]; MYFTYPE v_10 =V[PIdx_10 ];MYFTYPE isModel_11 , dVec_11 , Vmid_11 ; MYFTYPE ModelStates_11 [NSTATES]; MYFTYPE v_11 =V[PIdx_11 ];MYFTYPE isModel_12 , dVec_12 , Vmid_12 ; MYFTYPE ModelStates_12 [NSTATES]; MYFTYPE v_12 =V[PIdx_12 ];MYFTYPE isModel_13 , dVec_13 , Vmid_13 ; MYFTYPE ModelStates_13 [NSTATES]; MYFTYPE v_13 =V[PIdx_13 ];MYFTYPE isModel_14 , dVec_14 , Vmid_14 ; MYFTYPE ModelStates_14 [NSTATES]; MYFTYPE v_14 =V[PIdx_14 ];MYFTYPE isModel_15 , dVec_15 , Vmid_15 ; MYFTYPE ModelStates_15 [NSTATES]; MYFTYPE v_15 =V[PIdx_15 ];MYFTYPE isModel_16 , dVec_16 , Vmid_16 ; MYFTYPE ModelStates_16 [NSTATES]; MYFTYPE v_16 =V[PIdx_16 ];MYFTYPE isModel_17 , dVec_17 , Vmid_17 ; MYFTYPE ModelStates_17 [NSTATES]; MYFTYPE v_17 =V[PIdx_17 ];MYFTYPE isModel_18 , dVec_18 , Vmid_18 ; MYFTYPE ModelStates_18 [NSTATES]; MYFTYPE v_18 =V[PIdx_18 ];MYFTYPE isModel_19 , dVec_19 , Vmid_19 ; MYFTYPE ModelStates_19 [NSTATES]; MYFTYPE v_19 =V[PIdx_19 ];MYFTYPE isModel_20 , dVec_20 , Vmid_20 ; MYFTYPE ModelStates_20 [NSTATES]; MYFTYPE v_20 =V[PIdx_20 ];MYFTYPE isModel_21 , dVec_21 , Vmid_21 ; MYFTYPE ModelStates_21 [NSTATES]; MYFTYPE v_21 =V[PIdx_21 ];MYFTYPE isModel_22 , dVec_22 , Vmid_22 ; MYFTYPE ModelStates_22 [NSTATES]; MYFTYPE v_22 =V[PIdx_22 ];MYFTYPE isModel_23 , dVec_23 , Vmid_23 ; MYFTYPE ModelStates_23 [NSTATES]; MYFTYPE v_23 =V[PIdx_23 ];MYFTYPE isModel_24 , dVec_24 , Vmid_24 ; MYFTYPE ModelStates_24 [NSTATES]; MYFTYPE v_24 =V[PIdx_24 ];MYFTYPE isModel_25 , dVec_25 , Vmid_25 ; MYFTYPE ModelStates_25 [NSTATES]; MYFTYPE v_25 =V[PIdx_25 ];MYFTYPE isModel_26 , dVec_26 , Vmid_26 ; MYFTYPE ModelStates_26 [NSTATES]; MYFTYPE v_26 =V[PIdx_26 ];
#endif
#ifdef PAS
#define THISCOMMANDHEREE2(VARILP) MYFTYPE isModel_ ## VARILP , dVec_ ## VARILP , Vmid_ ## VARILP ;  MYFTYPE v_ ## VARILP =V[PIdx_ ## VARILP ];
	MYFTYPE isModel_1 , dVec_1 , Vmid_1 ; MYFTYPE ModelStates_1 [NSTATES]; MYFTYPE v_1 =V[PIdx_1 ];MYFTYPE isModel_2 , dVec_2 , Vmid_2 ; MYFTYPE ModelStates_2 [NSTATES]; MYFTYPE v_2 =V[PIdx_2 ];MYFTYPE isModel_3 , dVec_3 , Vmid_3 ; MYFTYPE ModelStates_3 [NSTATES]; MYFTYPE v_3 =V[PIdx_3 ];MYFTYPE isModel_4 , dVec_4 , Vmid_4 ; MYFTYPE ModelStates_4 [NSTATES]; MYFTYPE v_4 =V[PIdx_4 ];MYFTYPE isModel_5 , dVec_5 , Vmid_5 ; MYFTYPE ModelStates_5 [NSTATES]; MYFTYPE v_5 =V[PIdx_5 ];MYFTYPE isModel_6 , dVec_6 , Vmid_6 ; MYFTYPE ModelStates_6 [NSTATES]; MYFTYPE v_6 =V[PIdx_6 ];MYFTYPE isModel_7 , dVec_7 , Vmid_7 ; MYFTYPE ModelStates_7 [NSTATES]; MYFTYPE v_7 =V[PIdx_7 ];MYFTYPE isModel_8 , dVec_8 , Vmid_8 ; MYFTYPE ModelStates_8 [NSTATES]; MYFTYPE v_8 =V[PIdx_8 ];MYFTYPE isModel_9 , dVec_9 , Vmid_9 ; MYFTYPE ModelStates_9 [NSTATES]; MYFTYPE v_9 =V[PIdx_9 ];MYFTYPE isModel_10 , dVec_10 , Vmid_10 ; MYFTYPE ModelStates_10 [NSTATES]; MYFTYPE v_10 =V[PIdx_10 ];MYFTYPE isModel_11 , dVec_11 , Vmid_11 ; MYFTYPE ModelStates_11 [NSTATES]; MYFTYPE v_11 =V[PIdx_11 ];MYFTYPE isModel_12 , dVec_12 , Vmid_12 ; MYFTYPE ModelStates_12 [NSTATES]; MYFTYPE v_12 =V[PIdx_12 ];MYFTYPE isModel_13 , dVec_13 , Vmid_13 ; MYFTYPE ModelStates_13 [NSTATES]; MYFTYPE v_13 =V[PIdx_13 ];MYFTYPE isModel_14 , dVec_14 , Vmid_14 ; MYFTYPE ModelStates_14 [NSTATES]; MYFTYPE v_14 =V[PIdx_14 ];MYFTYPE isModel_15 , dVec_15 , Vmid_15 ; MYFTYPE ModelStates_15 [NSTATES]; MYFTYPE v_15 =V[PIdx_15 ];MYFTYPE isModel_16 , dVec_16 , Vmid_16 ; MYFTYPE ModelStates_16 [NSTATES]; MYFTYPE v_16 =V[PIdx_16 ];MYFTYPE isModel_17 , dVec_17 , Vmid_17 ; MYFTYPE ModelStates_17 [NSTATES]; MYFTYPE v_17 =V[PIdx_17 ];MYFTYPE isModel_18 , dVec_18 , Vmid_18 ; MYFTYPE ModelStates_18 [NSTATES]; MYFTYPE v_18 =V[PIdx_18 ];MYFTYPE isModel_19 , dVec_19 , Vmid_19 ; MYFTYPE ModelStates_19 [NSTATES]; MYFTYPE v_19 =V[PIdx_19 ];MYFTYPE isModel_20 , dVec_20 , Vmid_20 ; MYFTYPE ModelStates_20 [NSTATES]; MYFTYPE v_20 =V[PIdx_20 ];MYFTYPE isModel_21 , dVec_21 , Vmid_21 ; MYFTYPE ModelStates_21 [NSTATES]; MYFTYPE v_21 =V[PIdx_21 ];MYFTYPE isModel_22 , dVec_22 , Vmid_22 ; MYFTYPE ModelStates_22 [NSTATES]; MYFTYPE v_22 =V[PIdx_22 ];MYFTYPE isModel_23 , dVec_23 , Vmid_23 ; MYFTYPE ModelStates_23 [NSTATES]; MYFTYPE v_23 =V[PIdx_23 ];MYFTYPE isModel_24 , dVec_24 , Vmid_24 ; MYFTYPE ModelStates_24 [NSTATES]; MYFTYPE v_24 =V[PIdx_24 ];MYFTYPE isModel_25 , dVec_25 , Vmid_25 ; MYFTYPE ModelStates_25 [NSTATES]; MYFTYPE v_25 =V[PIdx_25 ];MYFTYPE isModel_26 , dVec_26 , Vmid_26 ; MYFTYPE ModelStates_26 [NSTATES]; MYFTYPE v_26 =V[PIdx_26 ];
#endif
	__shared__ HMat SMemMat;
	SMemMat.N=InMat.N;
	SMemMat.Depth=InMat.Depth;
	SMemMat.NModels=InMat.NModels;
	SMemMat.LognDepth=InMat.LognDepth;
	SMemMat.nFathers=InMat.nFathers;
	SMemMat.nCallForFather=InMat.nCallForFather;
	SMemMat.nLRel=InMat.nLRel;
	SMemMat.nFLRel=InMat.nFLRel;
	// RRRXXX Put in a FOR loop, up to NPARAM or something like that
	// MYFTYPE p1_3,p2_3,p3_3,p4_3,p5_3,p6_3; // p1_3=ParamsM[0*SMemMat.N+PIdx_3]; // p2_3=ParamsM[1*SMemMat.N+PIdx_3]; // p3_3=ParamsM[2*SMemMat.N+PIdx_3]; // p5_3=ParamsM[4*SMemMat.N+PIdx_3]; // p6_3=ParamsM[5*SMemMat.N+PIdx_3];
#ifdef HH
	//RBS This code should be generated with the number of params now 17
	//#define SET_PARAMS(VARILP) MYFTYPE p1_ ## VARILP ,p2_ ## VARILP ,p3_ ## VARILP ,p4_ ## VARILP ,p5_ ## VARILP,p6_ ## VARILP,p7_ ## VARILP,p8_ ## VARILP,p9_ ## VARILP,p10_ ## VARILP,p11_ ## VARILP ,p12_ ## VARILP ,p13_ ## VARILP ,p14_ ## VARILP ,p15_ ## VARILP,p16_ ## VARILP,p17_ ## VARILP; p1_ ## VARILP =ParamsM[0*SMemMat.N+PIdx_ ## VARILP ]; p2_ ## VARILP =ParamsM[1*SMemMat.N+PIdx_ ## VARILP ]; p3_ ## VARILP =ParamsM[2*SMemMat.N+PIdx_ ## VARILP ]; p4_ ## VARILP =ParamsM[3*SMemMat.N+PIdx_ ## VARILP ]; p5_ ## VARILP =ParamsM[4*SMemMat.N+PIdx_ ## VARILP ]; p6_ ## VARILP =ParamsM[5*SMemMat.N+PIdx_ ## VARILP ]; p7_ ## VARILP =ParamsM[6*SMemMat.N+PIdx_ ## VARILP ]; p8_ ## VARILP =ParamsM[7*SMemMat.N+PIdx_ ## VARILP ]; p9_ ## VARILP =ParamsM[8*SMemMat.N+PIdx_ ## VARILP ]; p10_ ## VARILP =ParamsM[9*SMemMat.N+PIdx_ ## VARILP ];p11_ ## VARILP =ParamsM[10*SMemMat.N+PIdx_ ## VARILP ]; p12_ ## VARILP =ParamsM[11*SMemMat.N+PIdx_ ## VARILP ]; p13_ ## VARILP =ParamsM[12*SMemMat.N+PIdx_ ## VARILP ]; p14_ ## VARILP =ParamsM[13*SMemMat.N+PIdx_ ## VARILP ]; p15_ ## VARILP =ParamsM[14*SMemMat.N+PIdx_ ## VARILP ]; p16_ ## VARILP =ParamsM[15*SMemMat.N+PIdx_ ## VARILP ]; p17_ ## VARILP =ParamsM[16*SMemMat.N+PIdx_ ## VARILP ];
	MYFTYPE p1_1 ,p2_1 ,p3_1 ,p4_1 ,p5_1,p6_1,p7_1,p8_1,p9_1,p10_1,p11_1 ,p12_1 ,p13_1 ,p14_1 ,p15_1,p16_1,p17_1; p1_1 =ParamsM[0*SMemMat.N+PIdx_1 ]; p2_1 =ParamsM[1*SMemMat.N+PIdx_1 ]; p3_1 =ParamsM[2*SMemMat.N+PIdx_1 ]; p4_1 =ParamsM[3*SMemMat.N+PIdx_1 ]; p5_1 =ParamsM[4*SMemMat.N+PIdx_1 ]; p6_1 =ParamsM[5*SMemMat.N+PIdx_1 ]; p7_1 =ParamsM[6*SMemMat.N+PIdx_1 ]; p8_1 =ParamsM[7*SMemMat.N+PIdx_1 ]; p9_1 =ParamsM[8*SMemMat.N+PIdx_1 ]; p10_1 =ParamsM[9*SMemMat.N+PIdx_1 ];p11_1 =ParamsM[10*SMemMat.N+PIdx_1 ]; p12_1 =ParamsM[11*SMemMat.N+PIdx_1 ]; p13_1 =ParamsM[12*SMemMat.N+PIdx_1 ]; p14_1 =ParamsM[13*SMemMat.N+PIdx_1 ]; p15_1 =ParamsM[14*SMemMat.N+PIdx_1 ]; p16_1 =ParamsM[15*SMemMat.N+PIdx_1 ]; p17_1 =ParamsM[16*SMemMat.N+PIdx_1 ];MYFTYPE p1_2 ,p2_2 ,p3_2 ,p4_2 ,p5_2,p6_2,p7_2,p8_2,p9_2,p10_2,p11_2 ,p12_2 ,p13_2 ,p14_2 ,p15_2,p16_2,p17_2; p1_2 =ParamsM[0*SMemMat.N+PIdx_2 ]; p2_2 =ParamsM[1*SMemMat.N+PIdx_2 ]; p3_2 =ParamsM[2*SMemMat.N+PIdx_2 ]; p4_2 =ParamsM[3*SMemMat.N+PIdx_2 ]; p5_2 =ParamsM[4*SMemMat.N+PIdx_2 ]; p6_2 =ParamsM[5*SMemMat.N+PIdx_2 ]; p7_2 =ParamsM[6*SMemMat.N+PIdx_2 ]; p8_2 =ParamsM[7*SMemMat.N+PIdx_2 ]; p9_2 =ParamsM[8*SMemMat.N+PIdx_2 ]; p10_2 =ParamsM[9*SMemMat.N+PIdx_2 ];p11_2 =ParamsM[10*SMemMat.N+PIdx_2 ]; p12_2 =ParamsM[11*SMemMat.N+PIdx_2 ]; p13_2 =ParamsM[12*SMemMat.N+PIdx_2 ]; p14_2 =ParamsM[13*SMemMat.N+PIdx_2 ]; p15_2 =ParamsM[14*SMemMat.N+PIdx_2 ]; p16_2 =ParamsM[15*SMemMat.N+PIdx_2 ]; p17_2 =ParamsM[16*SMemMat.N+PIdx_2 ];MYFTYPE p1_3 ,p2_3 ,p3_3 ,p4_3 ,p5_3,p6_3,p7_3,p8_3,p9_3,p10_3,p11_3 ,p12_3 ,p13_3 ,p14_3 ,p15_3,p16_3,p17_3; p1_3 =ParamsM[0*SMemMat.N+PIdx_3 ]; p2_3 =ParamsM[1*SMemMat.N+PIdx_3 ]; p3_3 =ParamsM[2*SMemMat.N+PIdx_3 ]; p4_3 =ParamsM[3*SMemMat.N+PIdx_3 ]; p5_3 =ParamsM[4*SMemMat.N+PIdx_3 ]; p6_3 =ParamsM[5*SMemMat.N+PIdx_3 ]; p7_3 =ParamsM[6*SMemMat.N+PIdx_3 ]; p8_3 =ParamsM[7*SMemMat.N+PIdx_3 ]; p9_3 =ParamsM[8*SMemMat.N+PIdx_3 ]; p10_3 =ParamsM[9*SMemMat.N+PIdx_3 ];p11_3 =ParamsM[10*SMemMat.N+PIdx_3 ]; p12_3 =ParamsM[11*SMemMat.N+PIdx_3 ]; p13_3 =ParamsM[12*SMemMat.N+PIdx_3 ]; p14_3 =ParamsM[13*SMemMat.N+PIdx_3 ]; p15_3 =ParamsM[14*SMemMat.N+PIdx_3 ]; p16_3 =ParamsM[15*SMemMat.N+PIdx_3 ]; p17_3 =ParamsM[16*SMemMat.N+PIdx_3 ];MYFTYPE p1_4 ,p2_4 ,p3_4 ,p4_4 ,p5_4,p6_4,p7_4,p8_4,p9_4,p10_4,p11_4 ,p12_4 ,p13_4 ,p14_4 ,p15_4,p16_4,p17_4; p1_4 =ParamsM[0*SMemMat.N+PIdx_4 ]; p2_4 =ParamsM[1*SMemMat.N+PIdx_4 ]; p3_4 =ParamsM[2*SMemMat.N+PIdx_4 ]; p4_4 =ParamsM[3*SMemMat.N+PIdx_4 ]; p5_4 =ParamsM[4*SMemMat.N+PIdx_4 ]; p6_4 =ParamsM[5*SMemMat.N+PIdx_4 ]; p7_4 =ParamsM[6*SMemMat.N+PIdx_4 ]; p8_4 =ParamsM[7*SMemMat.N+PIdx_4 ]; p9_4 =ParamsM[8*SMemMat.N+PIdx_4 ]; p10_4 =ParamsM[9*SMemMat.N+PIdx_4 ];p11_4 =ParamsM[10*SMemMat.N+PIdx_4 ]; p12_4 =ParamsM[11*SMemMat.N+PIdx_4 ]; p13_4 =ParamsM[12*SMemMat.N+PIdx_4 ]; p14_4 =ParamsM[13*SMemMat.N+PIdx_4 ]; p15_4 =ParamsM[14*SMemMat.N+PIdx_4 ]; p16_4 =ParamsM[15*SMemMat.N+PIdx_4 ]; p17_4 =ParamsM[16*SMemMat.N+PIdx_4 ];MYFTYPE p1_5 ,p2_5 ,p3_5 ,p4_5 ,p5_5,p6_5,p7_5,p8_5,p9_5,p10_5,p11_5 ,p12_5 ,p13_5 ,p14_5 ,p15_5,p16_5,p17_5; p1_5 =ParamsM[0*SMemMat.N+PIdx_5 ]; p2_5 =ParamsM[1*SMemMat.N+PIdx_5 ]; p3_5 =ParamsM[2*SMemMat.N+PIdx_5 ]; p4_5 =ParamsM[3*SMemMat.N+PIdx_5 ]; p5_5 =ParamsM[4*SMemMat.N+PIdx_5 ]; p6_5 =ParamsM[5*SMemMat.N+PIdx_5 ]; p7_5 =ParamsM[6*SMemMat.N+PIdx_5 ]; p8_5 =ParamsM[7*SMemMat.N+PIdx_5 ]; p9_5 =ParamsM[8*SMemMat.N+PIdx_5 ]; p10_5 =ParamsM[9*SMemMat.N+PIdx_5 ];p11_5 =ParamsM[10*SMemMat.N+PIdx_5 ]; p12_5 =ParamsM[11*SMemMat.N+PIdx_5 ]; p13_5 =ParamsM[12*SMemMat.N+PIdx_5 ]; p14_5 =ParamsM[13*SMemMat.N+PIdx_5 ]; p15_5 =ParamsM[14*SMemMat.N+PIdx_5 ]; p16_5 =ParamsM[15*SMemMat.N+PIdx_5 ]; p17_5 =ParamsM[16*SMemMat.N+PIdx_5 ];MYFTYPE p1_6 ,p2_6 ,p3_6 ,p4_6 ,p5_6,p6_6,p7_6,p8_6,p9_6,p10_6,p11_6 ,p12_6 ,p13_6 ,p14_6 ,p15_6,p16_6,p17_6; p1_6 =ParamsM[0*SMemMat.N+PIdx_6 ]; p2_6 =ParamsM[1*SMemMat.N+PIdx_6 ]; p3_6 =ParamsM[2*SMemMat.N+PIdx_6 ]; p4_6 =ParamsM[3*SMemMat.N+PIdx_6 ]; p5_6 =ParamsM[4*SMemMat.N+PIdx_6 ]; p6_6 =ParamsM[5*SMemMat.N+PIdx_6 ]; p7_6 =ParamsM[6*SMemMat.N+PIdx_6 ]; p8_6 =ParamsM[7*SMemMat.N+PIdx_6 ]; p9_6 =ParamsM[8*SMemMat.N+PIdx_6 ]; p10_6 =ParamsM[9*SMemMat.N+PIdx_6 ];p11_6 =ParamsM[10*SMemMat.N+PIdx_6 ]; p12_6 =ParamsM[11*SMemMat.N+PIdx_6 ]; p13_6 =ParamsM[12*SMemMat.N+PIdx_6 ]; p14_6 =ParamsM[13*SMemMat.N+PIdx_6 ]; p15_6 =ParamsM[14*SMemMat.N+PIdx_6 ]; p16_6 =ParamsM[15*SMemMat.N+PIdx_6 ]; p17_6 =ParamsM[16*SMemMat.N+PIdx_6 ];MYFTYPE p1_7 ,p2_7 ,p3_7 ,p4_7 ,p5_7,p6_7,p7_7,p8_7,p9_7,p10_7,p11_7 ,p12_7 ,p13_7 ,p14_7 ,p15_7,p16_7,p17_7; p1_7 =ParamsM[0*SMemMat.N+PIdx_7 ]; p2_7 =ParamsM[1*SMemMat.N+PIdx_7 ]; p3_7 =ParamsM[2*SMemMat.N+PIdx_7 ]; p4_7 =ParamsM[3*SMemMat.N+PIdx_7 ]; p5_7 =ParamsM[4*SMemMat.N+PIdx_7 ]; p6_7 =ParamsM[5*SMemMat.N+PIdx_7 ]; p7_7 =ParamsM[6*SMemMat.N+PIdx_7 ]; p8_7 =ParamsM[7*SMemMat.N+PIdx_7 ]; p9_7 =ParamsM[8*SMemMat.N+PIdx_7 ]; p10_7 =ParamsM[9*SMemMat.N+PIdx_7 ];p11_7 =ParamsM[10*SMemMat.N+PIdx_7 ]; p12_7 =ParamsM[11*SMemMat.N+PIdx_7 ]; p13_7 =ParamsM[12*SMemMat.N+PIdx_7 ]; p14_7 =ParamsM[13*SMemMat.N+PIdx_7 ]; p15_7 =ParamsM[14*SMemMat.N+PIdx_7 ]; p16_7 =ParamsM[15*SMemMat.N+PIdx_7 ]; p17_7 =ParamsM[16*SMemMat.N+PIdx_7 ];MYFTYPE p1_8 ,p2_8 ,p3_8 ,p4_8 ,p5_8,p6_8,p7_8,p8_8,p9_8,p10_8,p11_8 ,p12_8 ,p13_8 ,p14_8 ,p15_8,p16_8,p17_8; p1_8 =ParamsM[0*SMemMat.N+PIdx_8 ]; p2_8 =ParamsM[1*SMemMat.N+PIdx_8 ]; p3_8 =ParamsM[2*SMemMat.N+PIdx_8 ]; p4_8 =ParamsM[3*SMemMat.N+PIdx_8 ]; p5_8 =ParamsM[4*SMemMat.N+PIdx_8 ]; p6_8 =ParamsM[5*SMemMat.N+PIdx_8 ]; p7_8 =ParamsM[6*SMemMat.N+PIdx_8 ]; p8_8 =ParamsM[7*SMemMat.N+PIdx_8 ]; p9_8 =ParamsM[8*SMemMat.N+PIdx_8 ]; p10_8 =ParamsM[9*SMemMat.N+PIdx_8 ];p11_8 =ParamsM[10*SMemMat.N+PIdx_8 ]; p12_8 =ParamsM[11*SMemMat.N+PIdx_8 ]; p13_8 =ParamsM[12*SMemMat.N+PIdx_8 ]; p14_8 =ParamsM[13*SMemMat.N+PIdx_8 ]; p15_8 =ParamsM[14*SMemMat.N+PIdx_8 ]; p16_8 =ParamsM[15*SMemMat.N+PIdx_8 ]; p17_8 =ParamsM[16*SMemMat.N+PIdx_8 ];MYFTYPE p1_9 ,p2_9 ,p3_9 ,p4_9 ,p5_9,p6_9,p7_9,p8_9,p9_9,p10_9,p11_9 ,p12_9 ,p13_9 ,p14_9 ,p15_9,p16_9,p17_9; p1_9 =ParamsM[0*SMemMat.N+PIdx_9 ]; p2_9 =ParamsM[1*SMemMat.N+PIdx_9 ]; p3_9 =ParamsM[2*SMemMat.N+PIdx_9 ]; p4_9 =ParamsM[3*SMemMat.N+PIdx_9 ]; p5_9 =ParamsM[4*SMemMat.N+PIdx_9 ]; p6_9 =ParamsM[5*SMemMat.N+PIdx_9 ]; p7_9 =ParamsM[6*SMemMat.N+PIdx_9 ]; p8_9 =ParamsM[7*SMemMat.N+PIdx_9 ]; p9_9 =ParamsM[8*SMemMat.N+PIdx_9 ]; p10_9 =ParamsM[9*SMemMat.N+PIdx_9 ];p11_9 =ParamsM[10*SMemMat.N+PIdx_9 ]; p12_9 =ParamsM[11*SMemMat.N+PIdx_9 ]; p13_9 =ParamsM[12*SMemMat.N+PIdx_9 ]; p14_9 =ParamsM[13*SMemMat.N+PIdx_9 ]; p15_9 =ParamsM[14*SMemMat.N+PIdx_9 ]; p16_9 =ParamsM[15*SMemMat.N+PIdx_9 ]; p17_9 =ParamsM[16*SMemMat.N+PIdx_9 ];MYFTYPE p1_10 ,p2_10 ,p3_10 ,p4_10 ,p5_10,p6_10,p7_10,p8_10,p9_10,p10_10,p11_10 ,p12_10 ,p13_10 ,p14_10 ,p15_10,p16_10,p17_10; p1_10 =ParamsM[0*SMemMat.N+PIdx_10 ]; p2_10 =ParamsM[1*SMemMat.N+PIdx_10 ]; p3_10 =ParamsM[2*SMemMat.N+PIdx_10 ]; p4_10 =ParamsM[3*SMemMat.N+PIdx_10 ]; p5_10 =ParamsM[4*SMemMat.N+PIdx_10 ]; p6_10 =ParamsM[5*SMemMat.N+PIdx_10 ]; p7_10 =ParamsM[6*SMemMat.N+PIdx_10 ]; p8_10 =ParamsM[7*SMemMat.N+PIdx_10 ]; p9_10 =ParamsM[8*SMemMat.N+PIdx_10 ]; p10_10 =ParamsM[9*SMemMat.N+PIdx_10 ];p11_10 =ParamsM[10*SMemMat.N+PIdx_10 ]; p12_10 =ParamsM[11*SMemMat.N+PIdx_10 ]; p13_10 =ParamsM[12*SMemMat.N+PIdx_10 ]; p14_10 =ParamsM[13*SMemMat.N+PIdx_10 ]; p15_10 =ParamsM[14*SMemMat.N+PIdx_10 ]; p16_10 =ParamsM[15*SMemMat.N+PIdx_10 ]; p17_10 =ParamsM[16*SMemMat.N+PIdx_10 ];MYFTYPE p1_11 ,p2_11 ,p3_11 ,p4_11 ,p5_11,p6_11,p7_11,p8_11,p9_11,p10_11,p11_11 ,p12_11 ,p13_11 ,p14_11 ,p15_11,p16_11,p17_11; p1_11 =ParamsM[0*SMemMat.N+PIdx_11 ]; p2_11 =ParamsM[1*SMemMat.N+PIdx_11 ]; p3_11 =ParamsM[2*SMemMat.N+PIdx_11 ]; p4_11 =ParamsM[3*SMemMat.N+PIdx_11 ]; p5_11 =ParamsM[4*SMemMat.N+PIdx_11 ]; p6_11 =ParamsM[5*SMemMat.N+PIdx_11 ]; p7_11 =ParamsM[6*SMemMat.N+PIdx_11 ]; p8_11 =ParamsM[7*SMemMat.N+PIdx_11 ]; p9_11 =ParamsM[8*SMemMat.N+PIdx_11 ]; p10_11 =ParamsM[9*SMemMat.N+PIdx_11 ];p11_11 =ParamsM[10*SMemMat.N+PIdx_11 ]; p12_11 =ParamsM[11*SMemMat.N+PIdx_11 ]; p13_11 =ParamsM[12*SMemMat.N+PIdx_11 ]; p14_11 =ParamsM[13*SMemMat.N+PIdx_11 ]; p15_11 =ParamsM[14*SMemMat.N+PIdx_11 ]; p16_11 =ParamsM[15*SMemMat.N+PIdx_11 ]; p17_11 =ParamsM[16*SMemMat.N+PIdx_11 ];MYFTYPE p1_12 ,p2_12 ,p3_12 ,p4_12 ,p5_12,p6_12,p7_12,p8_12,p9_12,p10_12,p11_12 ,p12_12 ,p13_12 ,p14_12 ,p15_12,p16_12,p17_12; p1_12 =ParamsM[0*SMemMat.N+PIdx_12 ]; p2_12 =ParamsM[1*SMemMat.N+PIdx_12 ]; p3_12 =ParamsM[2*SMemMat.N+PIdx_12 ]; p4_12 =ParamsM[3*SMemMat.N+PIdx_12 ]; p5_12 =ParamsM[4*SMemMat.N+PIdx_12 ]; p6_12 =ParamsM[5*SMemMat.N+PIdx_12 ]; p7_12 =ParamsM[6*SMemMat.N+PIdx_12 ]; p8_12 =ParamsM[7*SMemMat.N+PIdx_12 ]; p9_12 =ParamsM[8*SMemMat.N+PIdx_12 ]; p10_12 =ParamsM[9*SMemMat.N+PIdx_12 ];p11_12 =ParamsM[10*SMemMat.N+PIdx_12 ]; p12_12 =ParamsM[11*SMemMat.N+PIdx_12 ]; p13_12 =ParamsM[12*SMemMat.N+PIdx_12 ]; p14_12 =ParamsM[13*SMemMat.N+PIdx_12 ]; p15_12 =ParamsM[14*SMemMat.N+PIdx_12 ]; p16_12 =ParamsM[15*SMemMat.N+PIdx_12 ]; p17_12 =ParamsM[16*SMemMat.N+PIdx_12 ];MYFTYPE p1_13 ,p2_13 ,p3_13 ,p4_13 ,p5_13,p6_13,p7_13,p8_13,p9_13,p10_13,p11_13 ,p12_13 ,p13_13 ,p14_13 ,p15_13,p16_13,p17_13; p1_13 =ParamsM[0*SMemMat.N+PIdx_13 ]; p2_13 =ParamsM[1*SMemMat.N+PIdx_13 ]; p3_13 =ParamsM[2*SMemMat.N+PIdx_13 ]; p4_13 =ParamsM[3*SMemMat.N+PIdx_13 ]; p5_13 =ParamsM[4*SMemMat.N+PIdx_13 ]; p6_13 =ParamsM[5*SMemMat.N+PIdx_13 ]; p7_13 =ParamsM[6*SMemMat.N+PIdx_13 ]; p8_13 =ParamsM[7*SMemMat.N+PIdx_13 ]; p9_13 =ParamsM[8*SMemMat.N+PIdx_13 ]; p10_13 =ParamsM[9*SMemMat.N+PIdx_13 ];p11_13 =ParamsM[10*SMemMat.N+PIdx_13 ]; p12_13 =ParamsM[11*SMemMat.N+PIdx_13 ]; p13_13 =ParamsM[12*SMemMat.N+PIdx_13 ]; p14_13 =ParamsM[13*SMemMat.N+PIdx_13 ]; p15_13 =ParamsM[14*SMemMat.N+PIdx_13 ]; p16_13 =ParamsM[15*SMemMat.N+PIdx_13 ]; p17_13 =ParamsM[16*SMemMat.N+PIdx_13 ];MYFTYPE p1_14 ,p2_14 ,p3_14 ,p4_14 ,p5_14,p6_14,p7_14,p8_14,p9_14,p10_14,p11_14 ,p12_14 ,p13_14 ,p14_14 ,p15_14,p16_14,p17_14; p1_14 =ParamsM[0*SMemMat.N+PIdx_14 ]; p2_14 =ParamsM[1*SMemMat.N+PIdx_14 ]; p3_14 =ParamsM[2*SMemMat.N+PIdx_14 ]; p4_14 =ParamsM[3*SMemMat.N+PIdx_14 ]; p5_14 =ParamsM[4*SMemMat.N+PIdx_14 ]; p6_14 =ParamsM[5*SMemMat.N+PIdx_14 ]; p7_14 =ParamsM[6*SMemMat.N+PIdx_14 ]; p8_14 =ParamsM[7*SMemMat.N+PIdx_14 ]; p9_14 =ParamsM[8*SMemMat.N+PIdx_14 ]; p10_14 =ParamsM[9*SMemMat.N+PIdx_14 ];p11_14 =ParamsM[10*SMemMat.N+PIdx_14 ]; p12_14 =ParamsM[11*SMemMat.N+PIdx_14 ]; p13_14 =ParamsM[12*SMemMat.N+PIdx_14 ]; p14_14 =ParamsM[13*SMemMat.N+PIdx_14 ]; p15_14 =ParamsM[14*SMemMat.N+PIdx_14 ]; p16_14 =ParamsM[15*SMemMat.N+PIdx_14 ]; p17_14 =ParamsM[16*SMemMat.N+PIdx_14 ];MYFTYPE p1_15 ,p2_15 ,p3_15 ,p4_15 ,p5_15,p6_15,p7_15,p8_15,p9_15,p10_15,p11_15 ,p12_15 ,p13_15 ,p14_15 ,p15_15,p16_15,p17_15; p1_15 =ParamsM[0*SMemMat.N+PIdx_15 ]; p2_15 =ParamsM[1*SMemMat.N+PIdx_15 ]; p3_15 =ParamsM[2*SMemMat.N+PIdx_15 ]; p4_15 =ParamsM[3*SMemMat.N+PIdx_15 ]; p5_15 =ParamsM[4*SMemMat.N+PIdx_15 ]; p6_15 =ParamsM[5*SMemMat.N+PIdx_15 ]; p7_15 =ParamsM[6*SMemMat.N+PIdx_15 ]; p8_15 =ParamsM[7*SMemMat.N+PIdx_15 ]; p9_15 =ParamsM[8*SMemMat.N+PIdx_15 ]; p10_15 =ParamsM[9*SMemMat.N+PIdx_15 ];p11_15 =ParamsM[10*SMemMat.N+PIdx_15 ]; p12_15 =ParamsM[11*SMemMat.N+PIdx_15 ]; p13_15 =ParamsM[12*SMemMat.N+PIdx_15 ]; p14_15 =ParamsM[13*SMemMat.N+PIdx_15 ]; p15_15 =ParamsM[14*SMemMat.N+PIdx_15 ]; p16_15 =ParamsM[15*SMemMat.N+PIdx_15 ]; p17_15 =ParamsM[16*SMemMat.N+PIdx_15 ];MYFTYPE p1_16 ,p2_16 ,p3_16 ,p4_16 ,p5_16,p6_16,p7_16,p8_16,p9_16,p10_16,p11_16 ,p12_16 ,p13_16 ,p14_16 ,p15_16,p16_16,p17_16; p1_16 =ParamsM[0*SMemMat.N+PIdx_16 ]; p2_16 =ParamsM[1*SMemMat.N+PIdx_16 ]; p3_16 =ParamsM[2*SMemMat.N+PIdx_16 ]; p4_16 =ParamsM[3*SMemMat.N+PIdx_16 ]; p5_16 =ParamsM[4*SMemMat.N+PIdx_16 ]; p6_16 =ParamsM[5*SMemMat.N+PIdx_16 ]; p7_16 =ParamsM[6*SMemMat.N+PIdx_16 ]; p8_16 =ParamsM[7*SMemMat.N+PIdx_16 ]; p9_16 =ParamsM[8*SMemMat.N+PIdx_16 ]; p10_16 =ParamsM[9*SMemMat.N+PIdx_16 ];p11_16 =ParamsM[10*SMemMat.N+PIdx_16 ]; p12_16 =ParamsM[11*SMemMat.N+PIdx_16 ]; p13_16 =ParamsM[12*SMemMat.N+PIdx_16 ]; p14_16 =ParamsM[13*SMemMat.N+PIdx_16 ]; p15_16 =ParamsM[14*SMemMat.N+PIdx_16 ]; p16_16 =ParamsM[15*SMemMat.N+PIdx_16 ]; p17_16 =ParamsM[16*SMemMat.N+PIdx_16 ];MYFTYPE p1_17 ,p2_17 ,p3_17 ,p4_17 ,p5_17,p6_17,p7_17,p8_17,p9_17,p10_17,p11_17 ,p12_17 ,p13_17 ,p14_17 ,p15_17,p16_17,p17_17; p1_17 =ParamsM[0*SMemMat.N+PIdx_17 ]; p2_17 =ParamsM[1*SMemMat.N+PIdx_17 ]; p3_17 =ParamsM[2*SMemMat.N+PIdx_17 ]; p4_17 =ParamsM[3*SMemMat.N+PIdx_17 ]; p5_17 =ParamsM[4*SMemMat.N+PIdx_17 ]; p6_17 =ParamsM[5*SMemMat.N+PIdx_17 ]; p7_17 =ParamsM[6*SMemMat.N+PIdx_17 ]; p8_17 =ParamsM[7*SMemMat.N+PIdx_17 ]; p9_17 =ParamsM[8*SMemMat.N+PIdx_17 ]; p10_17 =ParamsM[9*SMemMat.N+PIdx_17 ];p11_17 =ParamsM[10*SMemMat.N+PIdx_17 ]; p12_17 =ParamsM[11*SMemMat.N+PIdx_17 ]; p13_17 =ParamsM[12*SMemMat.N+PIdx_17 ]; p14_17 =ParamsM[13*SMemMat.N+PIdx_17 ]; p15_17 =ParamsM[14*SMemMat.N+PIdx_17 ]; p16_17 =ParamsM[15*SMemMat.N+PIdx_17 ]; p17_17 =ParamsM[16*SMemMat.N+PIdx_17 ];MYFTYPE p1_18 ,p2_18 ,p3_18 ,p4_18 ,p5_18,p6_18,p7_18,p8_18,p9_18,p10_18,p11_18 ,p12_18 ,p13_18 ,p14_18 ,p15_18,p16_18,p17_18; p1_18 =ParamsM[0*SMemMat.N+PIdx_18 ]; p2_18 =ParamsM[1*SMemMat.N+PIdx_18 ]; p3_18 =ParamsM[2*SMemMat.N+PIdx_18 ]; p4_18 =ParamsM[3*SMemMat.N+PIdx_18 ]; p5_18 =ParamsM[4*SMemMat.N+PIdx_18 ]; p6_18 =ParamsM[5*SMemMat.N+PIdx_18 ]; p7_18 =ParamsM[6*SMemMat.N+PIdx_18 ]; p8_18 =ParamsM[7*SMemMat.N+PIdx_18 ]; p9_18 =ParamsM[8*SMemMat.N+PIdx_18 ]; p10_18 =ParamsM[9*SMemMat.N+PIdx_18 ];p11_18 =ParamsM[10*SMemMat.N+PIdx_18 ]; p12_18 =ParamsM[11*SMemMat.N+PIdx_18 ]; p13_18 =ParamsM[12*SMemMat.N+PIdx_18 ]; p14_18 =ParamsM[13*SMemMat.N+PIdx_18 ]; p15_18 =ParamsM[14*SMemMat.N+PIdx_18 ]; p16_18 =ParamsM[15*SMemMat.N+PIdx_18 ]; p17_18 =ParamsM[16*SMemMat.N+PIdx_18 ];MYFTYPE p1_19 ,p2_19 ,p3_19 ,p4_19 ,p5_19,p6_19,p7_19,p8_19,p9_19,p10_19,p11_19 ,p12_19 ,p13_19 ,p14_19 ,p15_19,p16_19,p17_19; p1_19 =ParamsM[0*SMemMat.N+PIdx_19 ]; p2_19 =ParamsM[1*SMemMat.N+PIdx_19 ]; p3_19 =ParamsM[2*SMemMat.N+PIdx_19 ]; p4_19 =ParamsM[3*SMemMat.N+PIdx_19 ]; p5_19 =ParamsM[4*SMemMat.N+PIdx_19 ]; p6_19 =ParamsM[5*SMemMat.N+PIdx_19 ]; p7_19 =ParamsM[6*SMemMat.N+PIdx_19 ]; p8_19 =ParamsM[7*SMemMat.N+PIdx_19 ]; p9_19 =ParamsM[8*SMemMat.N+PIdx_19 ]; p10_19 =ParamsM[9*SMemMat.N+PIdx_19 ];p11_19 =ParamsM[10*SMemMat.N+PIdx_19 ]; p12_19 =ParamsM[11*SMemMat.N+PIdx_19 ]; p13_19 =ParamsM[12*SMemMat.N+PIdx_19 ]; p14_19 =ParamsM[13*SMemMat.N+PIdx_19 ]; p15_19 =ParamsM[14*SMemMat.N+PIdx_19 ]; p16_19 =ParamsM[15*SMemMat.N+PIdx_19 ]; p17_19 =ParamsM[16*SMemMat.N+PIdx_19 ];MYFTYPE p1_20 ,p2_20 ,p3_20 ,p4_20 ,p5_20,p6_20,p7_20,p8_20,p9_20,p10_20,p11_20 ,p12_20 ,p13_20 ,p14_20 ,p15_20,p16_20,p17_20; p1_20 =ParamsM[0*SMemMat.N+PIdx_20 ]; p2_20 =ParamsM[1*SMemMat.N+PIdx_20 ]; p3_20 =ParamsM[2*SMemMat.N+PIdx_20 ]; p4_20 =ParamsM[3*SMemMat.N+PIdx_20 ]; p5_20 =ParamsM[4*SMemMat.N+PIdx_20 ]; p6_20 =ParamsM[5*SMemMat.N+PIdx_20 ]; p7_20 =ParamsM[6*SMemMat.N+PIdx_20 ]; p8_20 =ParamsM[7*SMemMat.N+PIdx_20 ]; p9_20 =ParamsM[8*SMemMat.N+PIdx_20 ]; p10_20 =ParamsM[9*SMemMat.N+PIdx_20 ];p11_20 =ParamsM[10*SMemMat.N+PIdx_20 ]; p12_20 =ParamsM[11*SMemMat.N+PIdx_20 ]; p13_20 =ParamsM[12*SMemMat.N+PIdx_20 ]; p14_20 =ParamsM[13*SMemMat.N+PIdx_20 ]; p15_20 =ParamsM[14*SMemMat.N+PIdx_20 ]; p16_20 =ParamsM[15*SMemMat.N+PIdx_20 ]; p17_20 =ParamsM[16*SMemMat.N+PIdx_20 ];MYFTYPE p1_21 ,p2_21 ,p3_21 ,p4_21 ,p5_21,p6_21,p7_21,p8_21,p9_21,p10_21,p11_21 ,p12_21 ,p13_21 ,p14_21 ,p15_21,p16_21,p17_21; p1_21 =ParamsM[0*SMemMat.N+PIdx_21 ]; p2_21 =ParamsM[1*SMemMat.N+PIdx_21 ]; p3_21 =ParamsM[2*SMemMat.N+PIdx_21 ]; p4_21 =ParamsM[3*SMemMat.N+PIdx_21 ]; p5_21 =ParamsM[4*SMemMat.N+PIdx_21 ]; p6_21 =ParamsM[5*SMemMat.N+PIdx_21 ]; p7_21 =ParamsM[6*SMemMat.N+PIdx_21 ]; p8_21 =ParamsM[7*SMemMat.N+PIdx_21 ]; p9_21 =ParamsM[8*SMemMat.N+PIdx_21 ]; p10_21 =ParamsM[9*SMemMat.N+PIdx_21 ];p11_21 =ParamsM[10*SMemMat.N+PIdx_21 ]; p12_21 =ParamsM[11*SMemMat.N+PIdx_21 ]; p13_21 =ParamsM[12*SMemMat.N+PIdx_21 ]; p14_21 =ParamsM[13*SMemMat.N+PIdx_21 ]; p15_21 =ParamsM[14*SMemMat.N+PIdx_21 ]; p16_21 =ParamsM[15*SMemMat.N+PIdx_21 ]; p17_21 =ParamsM[16*SMemMat.N+PIdx_21 ];MYFTYPE p1_22 ,p2_22 ,p3_22 ,p4_22 ,p5_22,p6_22,p7_22,p8_22,p9_22,p10_22,p11_22 ,p12_22 ,p13_22 ,p14_22 ,p15_22,p16_22,p17_22; p1_22 =ParamsM[0*SMemMat.N+PIdx_22 ]; p2_22 =ParamsM[1*SMemMat.N+PIdx_22 ]; p3_22 =ParamsM[2*SMemMat.N+PIdx_22 ]; p4_22 =ParamsM[3*SMemMat.N+PIdx_22 ]; p5_22 =ParamsM[4*SMemMat.N+PIdx_22 ]; p6_22 =ParamsM[5*SMemMat.N+PIdx_22 ]; p7_22 =ParamsM[6*SMemMat.N+PIdx_22 ]; p8_22 =ParamsM[7*SMemMat.N+PIdx_22 ]; p9_22 =ParamsM[8*SMemMat.N+PIdx_22 ]; p10_22 =ParamsM[9*SMemMat.N+PIdx_22 ];p11_22 =ParamsM[10*SMemMat.N+PIdx_22 ]; p12_22 =ParamsM[11*SMemMat.N+PIdx_22 ]; p13_22 =ParamsM[12*SMemMat.N+PIdx_22 ]; p14_22 =ParamsM[13*SMemMat.N+PIdx_22 ]; p15_22 =ParamsM[14*SMemMat.N+PIdx_22 ]; p16_22 =ParamsM[15*SMemMat.N+PIdx_22 ]; p17_22 =ParamsM[16*SMemMat.N+PIdx_22 ];MYFTYPE p1_23 ,p2_23 ,p3_23 ,p4_23 ,p5_23,p6_23,p7_23,p8_23,p9_23,p10_23,p11_23 ,p12_23 ,p13_23 ,p14_23 ,p15_23,p16_23,p17_23; p1_23 =ParamsM[0*SMemMat.N+PIdx_23 ]; p2_23 =ParamsM[1*SMemMat.N+PIdx_23 ]; p3_23 =ParamsM[2*SMemMat.N+PIdx_23 ]; p4_23 =ParamsM[3*SMemMat.N+PIdx_23 ]; p5_23 =ParamsM[4*SMemMat.N+PIdx_23 ]; p6_23 =ParamsM[5*SMemMat.N+PIdx_23 ]; p7_23 =ParamsM[6*SMemMat.N+PIdx_23 ]; p8_23 =ParamsM[7*SMemMat.N+PIdx_23 ]; p9_23 =ParamsM[8*SMemMat.N+PIdx_23 ]; p10_23 =ParamsM[9*SMemMat.N+PIdx_23 ];p11_23 =ParamsM[10*SMemMat.N+PIdx_23 ]; p12_23 =ParamsM[11*SMemMat.N+PIdx_23 ]; p13_23 =ParamsM[12*SMemMat.N+PIdx_23 ]; p14_23 =ParamsM[13*SMemMat.N+PIdx_23 ]; p15_23 =ParamsM[14*SMemMat.N+PIdx_23 ]; p16_23 =ParamsM[15*SMemMat.N+PIdx_23 ]; p17_23 =ParamsM[16*SMemMat.N+PIdx_23 ];MYFTYPE p1_24 ,p2_24 ,p3_24 ,p4_24 ,p5_24,p6_24,p7_24,p8_24,p9_24,p10_24,p11_24 ,p12_24 ,p13_24 ,p14_24 ,p15_24,p16_24,p17_24; p1_24 =ParamsM[0*SMemMat.N+PIdx_24 ]; p2_24 =ParamsM[1*SMemMat.N+PIdx_24 ]; p3_24 =ParamsM[2*SMemMat.N+PIdx_24 ]; p4_24 =ParamsM[3*SMemMat.N+PIdx_24 ]; p5_24 =ParamsM[4*SMemMat.N+PIdx_24 ]; p6_24 =ParamsM[5*SMemMat.N+PIdx_24 ]; p7_24 =ParamsM[6*SMemMat.N+PIdx_24 ]; p8_24 =ParamsM[7*SMemMat.N+PIdx_24 ]; p9_24 =ParamsM[8*SMemMat.N+PIdx_24 ]; p10_24 =ParamsM[9*SMemMat.N+PIdx_24 ];p11_24 =ParamsM[10*SMemMat.N+PIdx_24 ]; p12_24 =ParamsM[11*SMemMat.N+PIdx_24 ]; p13_24 =ParamsM[12*SMemMat.N+PIdx_24 ]; p14_24 =ParamsM[13*SMemMat.N+PIdx_24 ]; p15_24 =ParamsM[14*SMemMat.N+PIdx_24 ]; p16_24 =ParamsM[15*SMemMat.N+PIdx_24 ]; p17_24 =ParamsM[16*SMemMat.N+PIdx_24 ];MYFTYPE p1_25 ,p2_25 ,p3_25 ,p4_25 ,p5_25,p6_25,p7_25,p8_25,p9_25,p10_25,p11_25 ,p12_25 ,p13_25 ,p14_25 ,p15_25,p16_25,p17_25; p1_25 =ParamsM[0*SMemMat.N+PIdx_25 ]; p2_25 =ParamsM[1*SMemMat.N+PIdx_25 ]; p3_25 =ParamsM[2*SMemMat.N+PIdx_25 ]; p4_25 =ParamsM[3*SMemMat.N+PIdx_25 ]; p5_25 =ParamsM[4*SMemMat.N+PIdx_25 ]; p6_25 =ParamsM[5*SMemMat.N+PIdx_25 ]; p7_25 =ParamsM[6*SMemMat.N+PIdx_25 ]; p8_25 =ParamsM[7*SMemMat.N+PIdx_25 ]; p9_25 =ParamsM[8*SMemMat.N+PIdx_25 ]; p10_25 =ParamsM[9*SMemMat.N+PIdx_25 ];p11_25 =ParamsM[10*SMemMat.N+PIdx_25 ]; p12_25 =ParamsM[11*SMemMat.N+PIdx_25 ]; p13_25 =ParamsM[12*SMemMat.N+PIdx_25 ]; p14_25 =ParamsM[13*SMemMat.N+PIdx_25 ]; p15_25 =ParamsM[14*SMemMat.N+PIdx_25 ]; p16_25 =ParamsM[15*SMemMat.N+PIdx_25 ]; p17_25 =ParamsM[16*SMemMat.N+PIdx_25 ];MYFTYPE p1_26 ,p2_26 ,p3_26 ,p4_26 ,p5_26,p6_26,p7_26,p8_26,p9_26,p10_26,p11_26 ,p12_26 ,p13_26 ,p14_26 ,p15_26,p16_26,p17_26; p1_26 =ParamsM[0*SMemMat.N+PIdx_26 ]; p2_26 =ParamsM[1*SMemMat.N+PIdx_26 ]; p3_26 =ParamsM[2*SMemMat.N+PIdx_26 ]; p4_26 =ParamsM[3*SMemMat.N+PIdx_26 ]; p5_26 =ParamsM[4*SMemMat.N+PIdx_26 ]; p6_26 =ParamsM[5*SMemMat.N+PIdx_26 ]; p7_26 =ParamsM[6*SMemMat.N+PIdx_26 ]; p8_26 =ParamsM[7*SMemMat.N+PIdx_26 ]; p9_26 =ParamsM[8*SMemMat.N+PIdx_26 ]; p10_26 =ParamsM[9*SMemMat.N+PIdx_26 ];p11_26 =ParamsM[10*SMemMat.N+PIdx_26 ]; p12_26 =ParamsM[11*SMemMat.N+PIdx_26 ]; p13_26 =ParamsM[12*SMemMat.N+PIdx_26 ]; p14_26 =ParamsM[13*SMemMat.N+PIdx_26 ]; p15_26 =ParamsM[14*SMemMat.N+PIdx_26 ]; p16_26 =ParamsM[15*SMemMat.N+PIdx_26 ]; p17_26 =ParamsM[16*SMemMat.N+PIdx_26 ];
#endif

#ifdef PAS
#define THISCOMMANDHEREE3(VARILP) MYFTYPE p1_ ## VARILP ,p2_ ## VARILP; p1_ ## VARILP =ParamsM[0*SMemMat.N+PIdx_ ## VARILP ]; p2_ ## VARILP =ParamsM[1*SMemMat.N+PIdx_ ## VARILP ];
	MYFTYPE p1_1 ,p2_1; p1_1 =ParamsM[0*SMemMat.N+PIdx_1 ]; p2_1 =ParamsM[1*SMemMat.N+PIdx_1 ];MYFTYPE p1_2 ,p2_2; p1_2 =ParamsM[0*SMemMat.N+PIdx_2 ]; p2_2 =ParamsM[1*SMemMat.N+PIdx_2 ];MYFTYPE p1_3 ,p2_3; p1_3 =ParamsM[0*SMemMat.N+PIdx_3 ]; p2_3 =ParamsM[1*SMemMat.N+PIdx_3 ];MYFTYPE p1_4 ,p2_4; p1_4 =ParamsM[0*SMemMat.N+PIdx_4 ]; p2_4 =ParamsM[1*SMemMat.N+PIdx_4 ];MYFTYPE p1_5 ,p2_5; p1_5 =ParamsM[0*SMemMat.N+PIdx_5 ]; p2_5 =ParamsM[1*SMemMat.N+PIdx_5 ];MYFTYPE p1_6 ,p2_6; p1_6 =ParamsM[0*SMemMat.N+PIdx_6 ]; p2_6 =ParamsM[1*SMemMat.N+PIdx_6 ];MYFTYPE p1_7 ,p2_7; p1_7 =ParamsM[0*SMemMat.N+PIdx_7 ]; p2_7 =ParamsM[1*SMemMat.N+PIdx_7 ];MYFTYPE p1_8 ,p2_8; p1_8 =ParamsM[0*SMemMat.N+PIdx_8 ]; p2_8 =ParamsM[1*SMemMat.N+PIdx_8 ];MYFTYPE p1_9 ,p2_9; p1_9 =ParamsM[0*SMemMat.N+PIdx_9 ]; p2_9 =ParamsM[1*SMemMat.N+PIdx_9 ];MYFTYPE p1_10 ,p2_10; p1_10 =ParamsM[0*SMemMat.N+PIdx_10 ]; p2_10 =ParamsM[1*SMemMat.N+PIdx_10 ];MYFTYPE p1_11 ,p2_11; p1_11 =ParamsM[0*SMemMat.N+PIdx_11 ]; p2_11 =ParamsM[1*SMemMat.N+PIdx_11 ];MYFTYPE p1_12 ,p2_12; p1_12 =ParamsM[0*SMemMat.N+PIdx_12 ]; p2_12 =ParamsM[1*SMemMat.N+PIdx_12 ];MYFTYPE p1_13 ,p2_13; p1_13 =ParamsM[0*SMemMat.N+PIdx_13 ]; p2_13 =ParamsM[1*SMemMat.N+PIdx_13 ];MYFTYPE p1_14 ,p2_14; p1_14 =ParamsM[0*SMemMat.N+PIdx_14 ]; p2_14 =ParamsM[1*SMemMat.N+PIdx_14 ];MYFTYPE p1_15 ,p2_15; p1_15 =ParamsM[0*SMemMat.N+PIdx_15 ]; p2_15 =ParamsM[1*SMemMat.N+PIdx_15 ];MYFTYPE p1_16 ,p2_16; p1_16 =ParamsM[0*SMemMat.N+PIdx_16 ]; p2_16 =ParamsM[1*SMemMat.N+PIdx_16 ];MYFTYPE p1_17 ,p2_17; p1_17 =ParamsM[0*SMemMat.N+PIdx_17 ]; p2_17 =ParamsM[1*SMemMat.N+PIdx_17 ];MYFTYPE p1_18 ,p2_18; p1_18 =ParamsM[0*SMemMat.N+PIdx_18 ]; p2_18 =ParamsM[1*SMemMat.N+PIdx_18 ];MYFTYPE p1_19 ,p2_19; p1_19 =ParamsM[0*SMemMat.N+PIdx_19 ]; p2_19 =ParamsM[1*SMemMat.N+PIdx_19 ];MYFTYPE p1_20 ,p2_20; p1_20 =ParamsM[0*SMemMat.N+PIdx_20 ]; p2_20 =ParamsM[1*SMemMat.N+PIdx_20 ];MYFTYPE p1_21 ,p2_21; p1_21 =ParamsM[0*SMemMat.N+PIdx_21 ]; p2_21 =ParamsM[1*SMemMat.N+PIdx_21 ];MYFTYPE p1_22 ,p2_22; p1_22 =ParamsM[0*SMemMat.N+PIdx_22 ]; p2_22 =ParamsM[1*SMemMat.N+PIdx_22 ];MYFTYPE p1_23 ,p2_23; p1_23 =ParamsM[0*SMemMat.N+PIdx_23 ]; p2_23 =ParamsM[1*SMemMat.N+PIdx_23 ];MYFTYPE p1_24 ,p2_24; p1_24 =ParamsM[0*SMemMat.N+PIdx_24 ]; p2_24 =ParamsM[1*SMemMat.N+PIdx_24 ];MYFTYPE p1_25 ,p2_25; p1_25 =ParamsM[0*SMemMat.N+PIdx_25 ]; p2_25 =ParamsM[1*SMemMat.N+PIdx_25 ];MYFTYPE p1_26 ,p2_26; p1_26 =ParamsM[0*SMemMat.N+PIdx_26 ]; p2_26 =ParamsM[1*SMemMat.N+PIdx_26 ];
#endif
	// MYFTYPE sumCurrents_3, sumConductivity_3; // MYFTYPE sumCurrentsDv_3, sumConductivityDv_3;
#define THISCOMMANDHEREE5(VARILP) MYFTYPE sumCurrents_ ## VARILP=0 , sumConductivity_ ## VARILP=0 ; MYFTYPE sumCurrentsDv_ ## VARILP=0 , sumConductivityDv_ ## VARILP=0 ;
	MYFTYPE sumCurrents_1=0 , sumConductivity_1=0 ; MYFTYPE sumCurrentsDv_1=0 , sumConductivityDv_1=0 ;MYFTYPE sumCurrents_2=0 , sumConductivity_2=0 ; MYFTYPE sumCurrentsDv_2=0 , sumConductivityDv_2=0 ;MYFTYPE sumCurrents_3=0 , sumConductivity_3=0 ; MYFTYPE sumCurrentsDv_3=0 , sumConductivityDv_3=0 ;MYFTYPE sumCurrents_4=0 , sumConductivity_4=0 ; MYFTYPE sumCurrentsDv_4=0 , sumConductivityDv_4=0 ;MYFTYPE sumCurrents_5=0 , sumConductivity_5=0 ; MYFTYPE sumCurrentsDv_5=0 , sumConductivityDv_5=0 ;MYFTYPE sumCurrents_6=0 , sumConductivity_6=0 ; MYFTYPE sumCurrentsDv_6=0 , sumConductivityDv_6=0 ;MYFTYPE sumCurrents_7=0 , sumConductivity_7=0 ; MYFTYPE sumCurrentsDv_7=0 , sumConductivityDv_7=0 ;MYFTYPE sumCurrents_8=0 , sumConductivity_8=0 ; MYFTYPE sumCurrentsDv_8=0 , sumConductivityDv_8=0 ;MYFTYPE sumCurrents_9=0 , sumConductivity_9=0 ; MYFTYPE sumCurrentsDv_9=0 , sumConductivityDv_9=0 ;MYFTYPE sumCurrents_10=0 , sumConductivity_10=0 ; MYFTYPE sumCurrentsDv_10=0 , sumConductivityDv_10=0 ;MYFTYPE sumCurrents_11=0 , sumConductivity_11=0 ; MYFTYPE sumCurrentsDv_11=0 , sumConductivityDv_11=0 ;MYFTYPE sumCurrents_12=0 , sumConductivity_12=0 ; MYFTYPE sumCurrentsDv_12=0 , sumConductivityDv_12=0 ;MYFTYPE sumCurrents_13=0 , sumConductivity_13=0 ; MYFTYPE sumCurrentsDv_13=0 , sumConductivityDv_13=0 ;MYFTYPE sumCurrents_14=0 , sumConductivity_14=0 ; MYFTYPE sumCurrentsDv_14=0 , sumConductivityDv_14=0 ;MYFTYPE sumCurrents_15=0 , sumConductivity_15=0 ; MYFTYPE sumCurrentsDv_15=0 , sumConductivityDv_15=0 ;MYFTYPE sumCurrents_16=0 , sumConductivity_16=0 ; MYFTYPE sumCurrentsDv_16=0 , sumConductivityDv_16=0 ;MYFTYPE sumCurrents_17=0 , sumConductivity_17=0 ; MYFTYPE sumCurrentsDv_17=0 , sumConductivityDv_17=0 ;MYFTYPE sumCurrents_18=0 , sumConductivity_18=0 ; MYFTYPE sumCurrentsDv_18=0 , sumConductivityDv_18=0 ;MYFTYPE sumCurrents_19=0 , sumConductivity_19=0 ; MYFTYPE sumCurrentsDv_19=0 , sumConductivityDv_19=0 ;MYFTYPE sumCurrents_20=0 , sumConductivity_20=0 ; MYFTYPE sumCurrentsDv_20=0 , sumConductivityDv_20=0 ;MYFTYPE sumCurrents_21=0 , sumConductivity_21=0 ; MYFTYPE sumCurrentsDv_21=0 , sumConductivityDv_21=0 ;MYFTYPE sumCurrents_22=0 , sumConductivity_22=0 ; MYFTYPE sumCurrentsDv_22=0 , sumConductivityDv_22=0 ;MYFTYPE sumCurrents_23=0 , sumConductivity_23=0 ; MYFTYPE sumCurrentsDv_23=0 , sumConductivityDv_23=0 ;MYFTYPE sumCurrents_24=0 , sumConductivity_24=0 ; MYFTYPE sumCurrentsDv_24=0 , sumConductivityDv_24=0 ;MYFTYPE sumCurrents_25=0 , sumConductivity_25=0 ; MYFTYPE sumCurrentsDv_25=0 , sumConductivityDv_25=0 ;MYFTYPE sumCurrents_26=0 , sumConductivity_26=0 ; MYFTYPE sumCurrentsDv_26=0 , sumConductivityDv_26=0 ;
	// end for model in init
	MYDTYPE offset=0;
	// CONSTANTS
	// MYFTYPEs
	MYFTYPE *Olde,*Oldf;
	Olde=InMat.e;
	Oldf=InMat.f;
	SMemMat.e = (MYFTYPE*) &smem[offset];
	offset+=InMat.N*sizeof(MYFTYPE);
	SMemMat.f = (MYFTYPE*) &smem[offset];
	offset+=InMat.N*sizeof(MYFTYPE);
	// SMemMat.e[PIdx_3]=InMat.e[PIdx_3]; // SMemMat.f[PIdx_3]=InMat.f[PIdx_3];
#define THISCOMMANDHEREE6(VARILP) SMemMat.e[PIdx_ ## VARILP ]=InMat.e[PIdx_ ## VARILP ]; SMemMat.f[PIdx_ ## VARILP ]=InMat.f[PIdx_ ## VARILP ];
	SMemMat.e[PIdx_1 ]=InMat.e[PIdx_1 ]; SMemMat.f[PIdx_1 ]=InMat.f[PIdx_1 ];SMemMat.e[PIdx_2 ]=InMat.e[PIdx_2 ]; SMemMat.f[PIdx_2 ]=InMat.f[PIdx_2 ];SMemMat.e[PIdx_3 ]=InMat.e[PIdx_3 ]; SMemMat.f[PIdx_3 ]=InMat.f[PIdx_3 ];SMemMat.e[PIdx_4 ]=InMat.e[PIdx_4 ]; SMemMat.f[PIdx_4 ]=InMat.f[PIdx_4 ];SMemMat.e[PIdx_5 ]=InMat.e[PIdx_5 ]; SMemMat.f[PIdx_5 ]=InMat.f[PIdx_5 ];SMemMat.e[PIdx_6 ]=InMat.e[PIdx_6 ]; SMemMat.f[PIdx_6 ]=InMat.f[PIdx_6 ];SMemMat.e[PIdx_7 ]=InMat.e[PIdx_7 ]; SMemMat.f[PIdx_7 ]=InMat.f[PIdx_7 ];SMemMat.e[PIdx_8 ]=InMat.e[PIdx_8 ]; SMemMat.f[PIdx_8 ]=InMat.f[PIdx_8 ];SMemMat.e[PIdx_9 ]=InMat.e[PIdx_9 ]; SMemMat.f[PIdx_9 ]=InMat.f[PIdx_9 ];SMemMat.e[PIdx_10 ]=InMat.e[PIdx_10 ]; SMemMat.f[PIdx_10 ]=InMat.f[PIdx_10 ];SMemMat.e[PIdx_11 ]=InMat.e[PIdx_11 ]; SMemMat.f[PIdx_11 ]=InMat.f[PIdx_11 ];SMemMat.e[PIdx_12 ]=InMat.e[PIdx_12 ]; SMemMat.f[PIdx_12 ]=InMat.f[PIdx_12 ];SMemMat.e[PIdx_13 ]=InMat.e[PIdx_13 ]; SMemMat.f[PIdx_13 ]=InMat.f[PIdx_13 ];SMemMat.e[PIdx_14 ]=InMat.e[PIdx_14 ]; SMemMat.f[PIdx_14 ]=InMat.f[PIdx_14 ];SMemMat.e[PIdx_15 ]=InMat.e[PIdx_15 ]; SMemMat.f[PIdx_15 ]=InMat.f[PIdx_15 ];SMemMat.e[PIdx_16 ]=InMat.e[PIdx_16 ]; SMemMat.f[PIdx_16 ]=InMat.f[PIdx_16 ];SMemMat.e[PIdx_17 ]=InMat.e[PIdx_17 ]; SMemMat.f[PIdx_17 ]=InMat.f[PIdx_17 ];SMemMat.e[PIdx_18 ]=InMat.e[PIdx_18 ]; SMemMat.f[PIdx_18 ]=InMat.f[PIdx_18 ];SMemMat.e[PIdx_19 ]=InMat.e[PIdx_19 ]; SMemMat.f[PIdx_19 ]=InMat.f[PIdx_19 ];SMemMat.e[PIdx_20 ]=InMat.e[PIdx_20 ]; SMemMat.f[PIdx_20 ]=InMat.f[PIdx_20 ];SMemMat.e[PIdx_21 ]=InMat.e[PIdx_21 ]; SMemMat.f[PIdx_21 ]=InMat.f[PIdx_21 ];SMemMat.e[PIdx_22 ]=InMat.e[PIdx_22 ]; SMemMat.f[PIdx_22 ]=InMat.f[PIdx_22 ];SMemMat.e[PIdx_23 ]=InMat.e[PIdx_23 ]; SMemMat.f[PIdx_23 ]=InMat.f[PIdx_23 ];SMemMat.e[PIdx_24 ]=InMat.e[PIdx_24 ]; SMemMat.f[PIdx_24 ]=InMat.f[PIdx_24 ];SMemMat.e[PIdx_25 ]=InMat.e[PIdx_25 ]; SMemMat.f[PIdx_25 ]=InMat.f[PIdx_25 ];SMemMat.e[PIdx_26 ]=InMat.e[PIdx_26 ]; SMemMat.f[PIdx_26 ]=InMat.f[PIdx_26 ];

	InMat.e=SMemMat.e;
	InMat.f=SMemMat.f;
	SMemMat.Cms = (MYFTYPE*) &smem[offset];
	offset+=InMat.N*sizeof(MYFTYPE);

	// SMemMat.Cms[PIdx_3]=InMat.Cms[PIdx_3];
#define THISCOMMANDHEREE7(VARILP) SMemMat.Cms[PIdx_ ## VARILP ]=InMat.Cms[PIdx_ ## VARILP ];
	SMemMat.Cms[PIdx_1 ]=InMat.Cms[PIdx_1 ];SMemMat.Cms[PIdx_2 ]=InMat.Cms[PIdx_2 ];SMemMat.Cms[PIdx_3 ]=InMat.Cms[PIdx_3 ];SMemMat.Cms[PIdx_4 ]=InMat.Cms[PIdx_4 ];SMemMat.Cms[PIdx_5 ]=InMat.Cms[PIdx_5 ];SMemMat.Cms[PIdx_6 ]=InMat.Cms[PIdx_6 ];SMemMat.Cms[PIdx_7 ]=InMat.Cms[PIdx_7 ];SMemMat.Cms[PIdx_8 ]=InMat.Cms[PIdx_8 ];SMemMat.Cms[PIdx_9 ]=InMat.Cms[PIdx_9 ];SMemMat.Cms[PIdx_10 ]=InMat.Cms[PIdx_10 ];SMemMat.Cms[PIdx_11 ]=InMat.Cms[PIdx_11 ];SMemMat.Cms[PIdx_12 ]=InMat.Cms[PIdx_12 ];SMemMat.Cms[PIdx_13 ]=InMat.Cms[PIdx_13 ];SMemMat.Cms[PIdx_14 ]=InMat.Cms[PIdx_14 ];SMemMat.Cms[PIdx_15 ]=InMat.Cms[PIdx_15 ];SMemMat.Cms[PIdx_16 ]=InMat.Cms[PIdx_16 ];SMemMat.Cms[PIdx_17 ]=InMat.Cms[PIdx_17 ];SMemMat.Cms[PIdx_18 ]=InMat.Cms[PIdx_18 ];SMemMat.Cms[PIdx_19 ]=InMat.Cms[PIdx_19 ];SMemMat.Cms[PIdx_20 ]=InMat.Cms[PIdx_20 ];SMemMat.Cms[PIdx_21 ]=InMat.Cms[PIdx_21 ];SMemMat.Cms[PIdx_22 ]=InMat.Cms[PIdx_22 ];SMemMat.Cms[PIdx_23 ]=InMat.Cms[PIdx_23 ];SMemMat.Cms[PIdx_24 ]=InMat.Cms[PIdx_24 ];SMemMat.Cms[PIdx_25 ]=InMat.Cms[PIdx_25 ];SMemMat.Cms[PIdx_26 ]=InMat.Cms[PIdx_26 ];
	
	// 1

	// discrete
#ifdef BKSUB1
		SMemMat.FIdxs = (MYDTYPE*) &smem[offset];
		offset+=InMat.N*SMemMat.LognDepth*sizeof(MYDTYPE);
		for(int i=0;i<SMemMat.LognDepth;i++) {
			// SMemMat.FIdxs[i*InMat.N+PIdx_3]=InMat.FIdxs[i*InMat.N+PIdx_3];
#define THISCOMMANDHEREE8(VARILP) SMemMat.FIdxs[i*InMat.N+PIdx_ ## VARILP ]=InMat.FIdxs[i*InMat.N+PIdx_ ## VARILP ];
	SMemMat.FIdxs[i*InMat.N+PIdx_1 ]=InMat.FIdxs[i*InMat.N+PIdx_1 ];SMemMat.FIdxs[i*InMat.N+PIdx_2 ]=InMat.FIdxs[i*InMat.N+PIdx_2 ];SMemMat.FIdxs[i*InMat.N+PIdx_3 ]=InMat.FIdxs[i*InMat.N+PIdx_3 ];SMemMat.FIdxs[i*InMat.N+PIdx_4 ]=InMat.FIdxs[i*InMat.N+PIdx_4 ];SMemMat.FIdxs[i*InMat.N+PIdx_5 ]=InMat.FIdxs[i*InMat.N+PIdx_5 ];SMemMat.FIdxs[i*InMat.N+PIdx_6 ]=InMat.FIdxs[i*InMat.N+PIdx_6 ];SMemMat.FIdxs[i*InMat.N+PIdx_7 ]=InMat.FIdxs[i*InMat.N+PIdx_7 ];SMemMat.FIdxs[i*InMat.N+PIdx_8 ]=InMat.FIdxs[i*InMat.N+PIdx_8 ];SMemMat.FIdxs[i*InMat.N+PIdx_9 ]=InMat.FIdxs[i*InMat.N+PIdx_9 ];SMemMat.FIdxs[i*InMat.N+PIdx_10 ]=InMat.FIdxs[i*InMat.N+PIdx_10 ];SMemMat.FIdxs[i*InMat.N+PIdx_11 ]=InMat.FIdxs[i*InMat.N+PIdx_11 ];SMemMat.FIdxs[i*InMat.N+PIdx_12 ]=InMat.FIdxs[i*InMat.N+PIdx_12 ];SMemMat.FIdxs[i*InMat.N+PIdx_13 ]=InMat.FIdxs[i*InMat.N+PIdx_13 ];SMemMat.FIdxs[i*InMat.N+PIdx_14 ]=InMat.FIdxs[i*InMat.N+PIdx_14 ];SMemMat.FIdxs[i*InMat.N+PIdx_15 ]=InMat.FIdxs[i*InMat.N+PIdx_15 ];SMemMat.FIdxs[i*InMat.N+PIdx_16 ]=InMat.FIdxs[i*InMat.N+PIdx_16 ];SMemMat.FIdxs[i*InMat.N+PIdx_17 ]=InMat.FIdxs[i*InMat.N+PIdx_17 ];SMemMat.FIdxs[i*InMat.N+PIdx_18 ]=InMat.FIdxs[i*InMat.N+PIdx_18 ];SMemMat.FIdxs[i*InMat.N+PIdx_19 ]=InMat.FIdxs[i*InMat.N+PIdx_19 ];SMemMat.FIdxs[i*InMat.N+PIdx_20 ]=InMat.FIdxs[i*InMat.N+PIdx_20 ];SMemMat.FIdxs[i*InMat.N+PIdx_21 ]=InMat.FIdxs[i*InMat.N+PIdx_21 ];SMemMat.FIdxs[i*InMat.N+PIdx_22 ]=InMat.FIdxs[i*InMat.N+PIdx_22 ];SMemMat.FIdxs[i*InMat.N+PIdx_23 ]=InMat.FIdxs[i*InMat.N+PIdx_23 ];SMemMat.FIdxs[i*InMat.N+PIdx_24 ]=InMat.FIdxs[i*InMat.N+PIdx_24 ];SMemMat.FIdxs[i*InMat.N+PIdx_25 ]=InMat.FIdxs[i*InMat.N+PIdx_25 ];SMemMat.FIdxs[i*InMat.N+PIdx_26 ]=InMat.FIdxs[i*InMat.N+PIdx_26 ];
	}
#endif 
#ifdef BKSUB2
		SMemMat.KsB =  (MYDTYPE*) &smem[offset];
		offset+=(SMemMat.N+1)*sizeof(MYDTYPE);		
		SMemMat.KsB[InMat.N]=InMat.KsB[InMat.N];

		// SMemMat.KsB[PIdx_3]=InMat.KsB[PIdx_3];
#define THISCOMMANDHEREE9(VARILP) SMemMat.KsB[PIdx_ ## VARILP ]=InMat.KsB[PIdx_ ## VARILP ];
	SMemMat.KsB[PIdx_1 ]=InMat.KsB[PIdx_1 ];SMemMat.KsB[PIdx_2 ]=InMat.KsB[PIdx_2 ];SMemMat.KsB[PIdx_3 ]=InMat.KsB[PIdx_3 ];SMemMat.KsB[PIdx_4 ]=InMat.KsB[PIdx_4 ];SMemMat.KsB[PIdx_5 ]=InMat.KsB[PIdx_5 ];SMemMat.KsB[PIdx_6 ]=InMat.KsB[PIdx_6 ];SMemMat.KsB[PIdx_7 ]=InMat.KsB[PIdx_7 ];SMemMat.KsB[PIdx_8 ]=InMat.KsB[PIdx_8 ];SMemMat.KsB[PIdx_9 ]=InMat.KsB[PIdx_9 ];SMemMat.KsB[PIdx_10 ]=InMat.KsB[PIdx_10 ];SMemMat.KsB[PIdx_11 ]=InMat.KsB[PIdx_11 ];SMemMat.KsB[PIdx_12 ]=InMat.KsB[PIdx_12 ];SMemMat.KsB[PIdx_13 ]=InMat.KsB[PIdx_13 ];SMemMat.KsB[PIdx_14 ]=InMat.KsB[PIdx_14 ];SMemMat.KsB[PIdx_15 ]=InMat.KsB[PIdx_15 ];SMemMat.KsB[PIdx_16 ]=InMat.KsB[PIdx_16 ];SMemMat.KsB[PIdx_17 ]=InMat.KsB[PIdx_17 ];SMemMat.KsB[PIdx_18 ]=InMat.KsB[PIdx_18 ];SMemMat.KsB[PIdx_19 ]=InMat.KsB[PIdx_19 ];SMemMat.KsB[PIdx_20 ]=InMat.KsB[PIdx_20 ];SMemMat.KsB[PIdx_21 ]=InMat.KsB[PIdx_21 ];SMemMat.KsB[PIdx_22 ]=InMat.KsB[PIdx_22 ];SMemMat.KsB[PIdx_23 ]=InMat.KsB[PIdx_23 ];SMemMat.KsB[PIdx_24 ]=InMat.KsB[PIdx_24 ];SMemMat.KsB[PIdx_25 ]=InMat.KsB[PIdx_25 ];SMemMat.KsB[PIdx_26 ]=InMat.KsB[PIdx_26 ];

#endif
	SMemMat.Ks = (MYDTYPE*) &smem[offset];
	offset+=InMat.N*sizeof(MYDTYPE);

	// SMemMat.Ks[PIdx_3]=InMat.Ks[PIdx_3];
#define THISCOMMANDHEREE10(VARILP) SMemMat.Ks[PIdx_ ## VARILP ]=InMat.Ks[PIdx_ ## VARILP ];
	SMemMat.Ks[PIdx_1 ]=InMat.Ks[PIdx_1 ];SMemMat.Ks[PIdx_2 ]=InMat.Ks[PIdx_2 ];SMemMat.Ks[PIdx_3 ]=InMat.Ks[PIdx_3 ];SMemMat.Ks[PIdx_4 ]=InMat.Ks[PIdx_4 ];SMemMat.Ks[PIdx_5 ]=InMat.Ks[PIdx_5 ];SMemMat.Ks[PIdx_6 ]=InMat.Ks[PIdx_6 ];SMemMat.Ks[PIdx_7 ]=InMat.Ks[PIdx_7 ];SMemMat.Ks[PIdx_8 ]=InMat.Ks[PIdx_8 ];SMemMat.Ks[PIdx_9 ]=InMat.Ks[PIdx_9 ];SMemMat.Ks[PIdx_10 ]=InMat.Ks[PIdx_10 ];SMemMat.Ks[PIdx_11 ]=InMat.Ks[PIdx_11 ];SMemMat.Ks[PIdx_12 ]=InMat.Ks[PIdx_12 ];SMemMat.Ks[PIdx_13 ]=InMat.Ks[PIdx_13 ];SMemMat.Ks[PIdx_14 ]=InMat.Ks[PIdx_14 ];SMemMat.Ks[PIdx_15 ]=InMat.Ks[PIdx_15 ];SMemMat.Ks[PIdx_16 ]=InMat.Ks[PIdx_16 ];SMemMat.Ks[PIdx_17 ]=InMat.Ks[PIdx_17 ];SMemMat.Ks[PIdx_18 ]=InMat.Ks[PIdx_18 ];SMemMat.Ks[PIdx_19 ]=InMat.Ks[PIdx_19 ];SMemMat.Ks[PIdx_20 ]=InMat.Ks[PIdx_20 ];SMemMat.Ks[PIdx_21 ]=InMat.Ks[PIdx_21 ];SMemMat.Ks[PIdx_22 ]=InMat.Ks[PIdx_22 ];SMemMat.Ks[PIdx_23 ]=InMat.Ks[PIdx_23 ];SMemMat.Ks[PIdx_24 ]=InMat.Ks[PIdx_24 ];SMemMat.Ks[PIdx_25 ]=InMat.Ks[PIdx_25 ];SMemMat.Ks[PIdx_26 ]=InMat.Ks[PIdx_26 ];

	
	SMemMat.boolModel= (MYDTYPE*) &smem[offset];
	offset+=InMat.N*SMemMat.NModels*sizeof(MYDTYPE);
	
	// SMemMat.boolModel[PIdx_3]=InMat.boolModel[PIdx_3];
#define THISCOMMANDHEREE11(VARILP) for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_ ## VARILP+ii*SMemMat.N]=InMat.boolModel[PIdx_ ## VARILP+ii*SMemMat.N];}
	for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_1+ii*SMemMat.N]=InMat.boolModel[PIdx_1+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_2+ii*SMemMat.N]=InMat.boolModel[PIdx_2+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_3+ii*SMemMat.N]=InMat.boolModel[PIdx_3+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_4+ii*SMemMat.N]=InMat.boolModel[PIdx_4+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_5+ii*SMemMat.N]=InMat.boolModel[PIdx_5+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_6+ii*SMemMat.N]=InMat.boolModel[PIdx_6+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_7+ii*SMemMat.N]=InMat.boolModel[PIdx_7+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_8+ii*SMemMat.N]=InMat.boolModel[PIdx_8+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_9+ii*SMemMat.N]=InMat.boolModel[PIdx_9+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_10+ii*SMemMat.N]=InMat.boolModel[PIdx_10+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_11+ii*SMemMat.N]=InMat.boolModel[PIdx_11+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_12+ii*SMemMat.N]=InMat.boolModel[PIdx_12+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_13+ii*SMemMat.N]=InMat.boolModel[PIdx_13+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_14+ii*SMemMat.N]=InMat.boolModel[PIdx_14+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_15+ii*SMemMat.N]=InMat.boolModel[PIdx_15+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_16+ii*SMemMat.N]=InMat.boolModel[PIdx_16+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_17+ii*SMemMat.N]=InMat.boolModel[PIdx_17+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_18+ii*SMemMat.N]=InMat.boolModel[PIdx_18+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_19+ii*SMemMat.N]=InMat.boolModel[PIdx_19+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_20+ii*SMemMat.N]=InMat.boolModel[PIdx_20+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_21+ii*SMemMat.N]=InMat.boolModel[PIdx_21+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_22+ii*SMemMat.N]=InMat.boolModel[PIdx_22+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_23+ii*SMemMat.N]=InMat.boolModel[PIdx_23+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_24+ii*SMemMat.N]=InMat.boolModel[PIdx_24+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_25+ii*SMemMat.N]=InMat.boolModel[PIdx_25+ii*SMemMat.N];}for(int ii=0;ii<SMemMat.NModels;ii++) {SMemMat.boolModel[PIdx_26+ii*SMemMat.N]=InMat.boolModel[PIdx_26+ii*SMemMat.N];}

	// 2
	// MYDTYPE SonNo_3=InMat.SonNoVec[PIdx_3];
#define THISCOMMANDHEREE12(VARILP) MYDTYPE SonNo_ ## VARILP =InMat.SonNoVec[PIdx_ ## VARILP ];
	MYDTYPE SonNo_1 =InMat.SonNoVec[PIdx_1 ];MYDTYPE SonNo_2 =InMat.SonNoVec[PIdx_2 ];MYDTYPE SonNo_3 =InMat.SonNoVec[PIdx_3 ];MYDTYPE SonNo_4 =InMat.SonNoVec[PIdx_4 ];MYDTYPE SonNo_5 =InMat.SonNoVec[PIdx_5 ];MYDTYPE SonNo_6 =InMat.SonNoVec[PIdx_6 ];MYDTYPE SonNo_7 =InMat.SonNoVec[PIdx_7 ];MYDTYPE SonNo_8 =InMat.SonNoVec[PIdx_8 ];MYDTYPE SonNo_9 =InMat.SonNoVec[PIdx_9 ];MYDTYPE SonNo_10 =InMat.SonNoVec[PIdx_10 ];MYDTYPE SonNo_11 =InMat.SonNoVec[PIdx_11 ];MYDTYPE SonNo_12 =InMat.SonNoVec[PIdx_12 ];MYDTYPE SonNo_13 =InMat.SonNoVec[PIdx_13 ];MYDTYPE SonNo_14 =InMat.SonNoVec[PIdx_14 ];MYDTYPE SonNo_15 =InMat.SonNoVec[PIdx_15 ];MYDTYPE SonNo_16 =InMat.SonNoVec[PIdx_16 ];MYDTYPE SonNo_17 =InMat.SonNoVec[PIdx_17 ];MYDTYPE SonNo_18 =InMat.SonNoVec[PIdx_18 ];MYDTYPE SonNo_19 =InMat.SonNoVec[PIdx_19 ];MYDTYPE SonNo_20 =InMat.SonNoVec[PIdx_20 ];MYDTYPE SonNo_21 =InMat.SonNoVec[PIdx_21 ];MYDTYPE SonNo_22 =InMat.SonNoVec[PIdx_22 ];MYDTYPE SonNo_23 =InMat.SonNoVec[PIdx_23 ];MYDTYPE SonNo_24 =InMat.SonNoVec[PIdx_24 ];MYDTYPE SonNo_25 =InMat.SonNoVec[PIdx_25 ];MYDTYPE SonNo_26 =InMat.SonNoVec[PIdx_26 ];

	
	SMemMat.RelStarts = (MYDTYPE*) &smem[offset];
	offset+=InMat.nFathers*sizeof(MYDTYPE);
	SMemMat.RelEnds = (MYDTYPE*) &smem[offset];
	offset+=InMat.nFathers*sizeof(MYDTYPE);
	SMemMat.RelVec = (MYDTYPE*) &smem[offset];
	offset+=InMat.nCallForFather*sizeof(MYDTYPE);
	SMemMat.SegStartI = (MYDTYPE*) &smem[offset];
	offset+=(InMat.nCallForFather+1)*sizeof(MYDTYPE);
	SMemMat.SegEndI = (MYDTYPE*) &smem[offset];
	offset+=(InMat.nCallForFather+1)*sizeof(MYDTYPE);

	SMemMat.Fathers= (MYDTYPE*) &smem[offset];
	offset+=InMat.nFathers*sizeof(MYDTYPE);
	// 3
	SMemMat.CompByLevel32 = (MYDTYPE*) &smem[offset]; // WARPSIZE*(Depth+1)
	offset+=WARPSIZE*(CompDepth)*sizeof(MYDTYPE);
	SMemMat.CompByFLevel32 = (MYDTYPE*) &smem[offset]; // WARPSIZE*(Depth+1)
	offset+=WARPSIZE*(CompFDepth)*sizeof(MYDTYPE);
	SMemMat.LRelStarts = (MYDTYPE*) &smem[offset];
	offset+=SMemMat.nLRel*sizeof(MYDTYPE);
	SMemMat.LRelEnds = (MYDTYPE*) &smem[offset];
	offset+=SMemMat.nLRel*sizeof(MYDTYPE);
	SMemMat.FLRelStarts = (MYDTYPE*) &smem[offset];
	offset+=SMemMat.nFLRel*sizeof(MYDTYPE);
	SMemMat.FLRelEnds = (MYDTYPE*) &smem[offset];
	offset+=SMemMat.nFLRel*sizeof(MYDTYPE);
	// Moving back to MYFTYPEs - make sure that the address is good for MYFTYPE (is modulu 4).
	offset=ceilf(MYFTYPE(offset)/sizeof(MYFTYPE))*sizeof(MYFTYPE);
	MYDTYPE ConstantMemSize=offset;
	//if(PIdx_1<InMat.nFathers) { SMemMat.RelStarts[PIdx_1]=InMat.RelStarts[PIdx_1];SMemMat.RelEnds[PIdx_1]=InMat.RelEnds[PIdx_1];SMemMat.Fathers[PIdx_1]=InMat.Fathers[PIdx_1];}
	#define THISCOMMANDHEREE120(VARILP) if(PIdx_ ## VARILP<InMat.nFathers){ SMemMat.RelStarts[PIdx_ ## VARILP]=InMat.RelStarts[PIdx_ ## VARILP];SMemMat.RelEnds[PIdx_ ## VARILP]=InMat.RelEnds[PIdx_ ## VARILP];SMemMat.Fathers[PIdx_ ## VARILP]=InMat.Fathers[PIdx_ ## VARILP];}
	if(PIdx_1<InMat.nFathers){ SMemMat.RelStarts[PIdx_1]=InMat.RelStarts[PIdx_1];SMemMat.RelEnds[PIdx_1]=InMat.RelEnds[PIdx_1];SMemMat.Fathers[PIdx_1]=InMat.Fathers[PIdx_1];}if(PIdx_2<InMat.nFathers){ SMemMat.RelStarts[PIdx_2]=InMat.RelStarts[PIdx_2];SMemMat.RelEnds[PIdx_2]=InMat.RelEnds[PIdx_2];SMemMat.Fathers[PIdx_2]=InMat.Fathers[PIdx_2];}if(PIdx_3<InMat.nFathers){ SMemMat.RelStarts[PIdx_3]=InMat.RelStarts[PIdx_3];SMemMat.RelEnds[PIdx_3]=InMat.RelEnds[PIdx_3];SMemMat.Fathers[PIdx_3]=InMat.Fathers[PIdx_3];}if(PIdx_4<InMat.nFathers){ SMemMat.RelStarts[PIdx_4]=InMat.RelStarts[PIdx_4];SMemMat.RelEnds[PIdx_4]=InMat.RelEnds[PIdx_4];SMemMat.Fathers[PIdx_4]=InMat.Fathers[PIdx_4];}if(PIdx_5<InMat.nFathers){ SMemMat.RelStarts[PIdx_5]=InMat.RelStarts[PIdx_5];SMemMat.RelEnds[PIdx_5]=InMat.RelEnds[PIdx_5];SMemMat.Fathers[PIdx_5]=InMat.Fathers[PIdx_5];}if(PIdx_6<InMat.nFathers){ SMemMat.RelStarts[PIdx_6]=InMat.RelStarts[PIdx_6];SMemMat.RelEnds[PIdx_6]=InMat.RelEnds[PIdx_6];SMemMat.Fathers[PIdx_6]=InMat.Fathers[PIdx_6];}if(PIdx_7<InMat.nFathers){ SMemMat.RelStarts[PIdx_7]=InMat.RelStarts[PIdx_7];SMemMat.RelEnds[PIdx_7]=InMat.RelEnds[PIdx_7];SMemMat.Fathers[PIdx_7]=InMat.Fathers[PIdx_7];}if(PIdx_8<InMat.nFathers){ SMemMat.RelStarts[PIdx_8]=InMat.RelStarts[PIdx_8];SMemMat.RelEnds[PIdx_8]=InMat.RelEnds[PIdx_8];SMemMat.Fathers[PIdx_8]=InMat.Fathers[PIdx_8];}if(PIdx_9<InMat.nFathers){ SMemMat.RelStarts[PIdx_9]=InMat.RelStarts[PIdx_9];SMemMat.RelEnds[PIdx_9]=InMat.RelEnds[PIdx_9];SMemMat.Fathers[PIdx_9]=InMat.Fathers[PIdx_9];}if(PIdx_10<InMat.nFathers){ SMemMat.RelStarts[PIdx_10]=InMat.RelStarts[PIdx_10];SMemMat.RelEnds[PIdx_10]=InMat.RelEnds[PIdx_10];SMemMat.Fathers[PIdx_10]=InMat.Fathers[PIdx_10];}if(PIdx_11<InMat.nFathers){ SMemMat.RelStarts[PIdx_11]=InMat.RelStarts[PIdx_11];SMemMat.RelEnds[PIdx_11]=InMat.RelEnds[PIdx_11];SMemMat.Fathers[PIdx_11]=InMat.Fathers[PIdx_11];}if(PIdx_12<InMat.nFathers){ SMemMat.RelStarts[PIdx_12]=InMat.RelStarts[PIdx_12];SMemMat.RelEnds[PIdx_12]=InMat.RelEnds[PIdx_12];SMemMat.Fathers[PIdx_12]=InMat.Fathers[PIdx_12];}if(PIdx_13<InMat.nFathers){ SMemMat.RelStarts[PIdx_13]=InMat.RelStarts[PIdx_13];SMemMat.RelEnds[PIdx_13]=InMat.RelEnds[PIdx_13];SMemMat.Fathers[PIdx_13]=InMat.Fathers[PIdx_13];}if(PIdx_14<InMat.nFathers){ SMemMat.RelStarts[PIdx_14]=InMat.RelStarts[PIdx_14];SMemMat.RelEnds[PIdx_14]=InMat.RelEnds[PIdx_14];SMemMat.Fathers[PIdx_14]=InMat.Fathers[PIdx_14];}if(PIdx_15<InMat.nFathers){ SMemMat.RelStarts[PIdx_15]=InMat.RelStarts[PIdx_15];SMemMat.RelEnds[PIdx_15]=InMat.RelEnds[PIdx_15];SMemMat.Fathers[PIdx_15]=InMat.Fathers[PIdx_15];}if(PIdx_16<InMat.nFathers){ SMemMat.RelStarts[PIdx_16]=InMat.RelStarts[PIdx_16];SMemMat.RelEnds[PIdx_16]=InMat.RelEnds[PIdx_16];SMemMat.Fathers[PIdx_16]=InMat.Fathers[PIdx_16];}if(PIdx_17<InMat.nFathers){ SMemMat.RelStarts[PIdx_17]=InMat.RelStarts[PIdx_17];SMemMat.RelEnds[PIdx_17]=InMat.RelEnds[PIdx_17];SMemMat.Fathers[PIdx_17]=InMat.Fathers[PIdx_17];}if(PIdx_18<InMat.nFathers){ SMemMat.RelStarts[PIdx_18]=InMat.RelStarts[PIdx_18];SMemMat.RelEnds[PIdx_18]=InMat.RelEnds[PIdx_18];SMemMat.Fathers[PIdx_18]=InMat.Fathers[PIdx_18];}if(PIdx_19<InMat.nFathers){ SMemMat.RelStarts[PIdx_19]=InMat.RelStarts[PIdx_19];SMemMat.RelEnds[PIdx_19]=InMat.RelEnds[PIdx_19];SMemMat.Fathers[PIdx_19]=InMat.Fathers[PIdx_19];}if(PIdx_20<InMat.nFathers){ SMemMat.RelStarts[PIdx_20]=InMat.RelStarts[PIdx_20];SMemMat.RelEnds[PIdx_20]=InMat.RelEnds[PIdx_20];SMemMat.Fathers[PIdx_20]=InMat.Fathers[PIdx_20];}if(PIdx_21<InMat.nFathers){ SMemMat.RelStarts[PIdx_21]=InMat.RelStarts[PIdx_21];SMemMat.RelEnds[PIdx_21]=InMat.RelEnds[PIdx_21];SMemMat.Fathers[PIdx_21]=InMat.Fathers[PIdx_21];}if(PIdx_22<InMat.nFathers){ SMemMat.RelStarts[PIdx_22]=InMat.RelStarts[PIdx_22];SMemMat.RelEnds[PIdx_22]=InMat.RelEnds[PIdx_22];SMemMat.Fathers[PIdx_22]=InMat.Fathers[PIdx_22];}if(PIdx_23<InMat.nFathers){ SMemMat.RelStarts[PIdx_23]=InMat.RelStarts[PIdx_23];SMemMat.RelEnds[PIdx_23]=InMat.RelEnds[PIdx_23];SMemMat.Fathers[PIdx_23]=InMat.Fathers[PIdx_23];}if(PIdx_24<InMat.nFathers){ SMemMat.RelStarts[PIdx_24]=InMat.RelStarts[PIdx_24];SMemMat.RelEnds[PIdx_24]=InMat.RelEnds[PIdx_24];SMemMat.Fathers[PIdx_24]=InMat.Fathers[PIdx_24];}if(PIdx_25<InMat.nFathers){ SMemMat.RelStarts[PIdx_25]=InMat.RelStarts[PIdx_25];SMemMat.RelEnds[PIdx_25]=InMat.RelEnds[PIdx_25];SMemMat.Fathers[PIdx_25]=InMat.Fathers[PIdx_25];}if(PIdx_26<InMat.nFathers){ SMemMat.RelStarts[PIdx_26]=InMat.RelStarts[PIdx_26];SMemMat.RelEnds[PIdx_26]=InMat.RelEnds[PIdx_26];SMemMat.Fathers[PIdx_26]=InMat.Fathers[PIdx_26];}
	//if(PIdx_1<InMat.nCallForFather) {SMemMat.RelVec[PIdx_1]=InMat.RelVec[PIdx_1];}
	#define THISCOMMANDHEREE121(VARILP) if(PIdx_ ## VARILP<InMat.nCallForFather){SMemMat.RelVec[PIdx_ ## VARILP]=InMat.RelVec[PIdx_ ## VARILP];}
	if(PIdx_1<InMat.nCallForFather){SMemMat.RelVec[PIdx_1]=InMat.RelVec[PIdx_1];}if(PIdx_2<InMat.nCallForFather){SMemMat.RelVec[PIdx_2]=InMat.RelVec[PIdx_2];}if(PIdx_3<InMat.nCallForFather){SMemMat.RelVec[PIdx_3]=InMat.RelVec[PIdx_3];}if(PIdx_4<InMat.nCallForFather){SMemMat.RelVec[PIdx_4]=InMat.RelVec[PIdx_4];}if(PIdx_5<InMat.nCallForFather){SMemMat.RelVec[PIdx_5]=InMat.RelVec[PIdx_5];}if(PIdx_6<InMat.nCallForFather){SMemMat.RelVec[PIdx_6]=InMat.RelVec[PIdx_6];}if(PIdx_7<InMat.nCallForFather){SMemMat.RelVec[PIdx_7]=InMat.RelVec[PIdx_7];}if(PIdx_8<InMat.nCallForFather){SMemMat.RelVec[PIdx_8]=InMat.RelVec[PIdx_8];}if(PIdx_9<InMat.nCallForFather){SMemMat.RelVec[PIdx_9]=InMat.RelVec[PIdx_9];}if(PIdx_10<InMat.nCallForFather){SMemMat.RelVec[PIdx_10]=InMat.RelVec[PIdx_10];}if(PIdx_11<InMat.nCallForFather){SMemMat.RelVec[PIdx_11]=InMat.RelVec[PIdx_11];}if(PIdx_12<InMat.nCallForFather){SMemMat.RelVec[PIdx_12]=InMat.RelVec[PIdx_12];}if(PIdx_13<InMat.nCallForFather){SMemMat.RelVec[PIdx_13]=InMat.RelVec[PIdx_13];}if(PIdx_14<InMat.nCallForFather){SMemMat.RelVec[PIdx_14]=InMat.RelVec[PIdx_14];}if(PIdx_15<InMat.nCallForFather){SMemMat.RelVec[PIdx_15]=InMat.RelVec[PIdx_15];}if(PIdx_16<InMat.nCallForFather){SMemMat.RelVec[PIdx_16]=InMat.RelVec[PIdx_16];}if(PIdx_17<InMat.nCallForFather){SMemMat.RelVec[PIdx_17]=InMat.RelVec[PIdx_17];}if(PIdx_18<InMat.nCallForFather){SMemMat.RelVec[PIdx_18]=InMat.RelVec[PIdx_18];}if(PIdx_19<InMat.nCallForFather){SMemMat.RelVec[PIdx_19]=InMat.RelVec[PIdx_19];}if(PIdx_20<InMat.nCallForFather){SMemMat.RelVec[PIdx_20]=InMat.RelVec[PIdx_20];}if(PIdx_21<InMat.nCallForFather){SMemMat.RelVec[PIdx_21]=InMat.RelVec[PIdx_21];}if(PIdx_22<InMat.nCallForFather){SMemMat.RelVec[PIdx_22]=InMat.RelVec[PIdx_22];}if(PIdx_23<InMat.nCallForFather){SMemMat.RelVec[PIdx_23]=InMat.RelVec[PIdx_23];}if(PIdx_24<InMat.nCallForFather){SMemMat.RelVec[PIdx_24]=InMat.RelVec[PIdx_24];}if(PIdx_25<InMat.nCallForFather){SMemMat.RelVec[PIdx_25]=InMat.RelVec[PIdx_25];}if(PIdx_26<InMat.nCallForFather){SMemMat.RelVec[PIdx_26]=InMat.RelVec[PIdx_26];}
	//if(PIdx_1<InMat.nCallForFather+1) {SMemMat.SegStartI[PIdx_1]=InMat.SegStartI[PIdx_1];SMemMat.SegEndI[PIdx_1]=InMat.SegEndI[PIdx_1];}
	#define THISCOMMANDHEREE122(VARILP) if(PIdx_ ## VARILP<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_ ## VARILP]=InMat.SegStartI[PIdx_ ## VARILP];SMemMat.SegEndI[PIdx_ ## VARILP]=InMat.SegEndI[PIdx_ ## VARILP];}
	if(PIdx_1<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_1]=InMat.SegStartI[PIdx_1];SMemMat.SegEndI[PIdx_1]=InMat.SegEndI[PIdx_1];}if(PIdx_2<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_2]=InMat.SegStartI[PIdx_2];SMemMat.SegEndI[PIdx_2]=InMat.SegEndI[PIdx_2];}if(PIdx_3<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_3]=InMat.SegStartI[PIdx_3];SMemMat.SegEndI[PIdx_3]=InMat.SegEndI[PIdx_3];}if(PIdx_4<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_4]=InMat.SegStartI[PIdx_4];SMemMat.SegEndI[PIdx_4]=InMat.SegEndI[PIdx_4];}if(PIdx_5<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_5]=InMat.SegStartI[PIdx_5];SMemMat.SegEndI[PIdx_5]=InMat.SegEndI[PIdx_5];}if(PIdx_6<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_6]=InMat.SegStartI[PIdx_6];SMemMat.SegEndI[PIdx_6]=InMat.SegEndI[PIdx_6];}if(PIdx_7<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_7]=InMat.SegStartI[PIdx_7];SMemMat.SegEndI[PIdx_7]=InMat.SegEndI[PIdx_7];}if(PIdx_8<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_8]=InMat.SegStartI[PIdx_8];SMemMat.SegEndI[PIdx_8]=InMat.SegEndI[PIdx_8];}if(PIdx_9<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_9]=InMat.SegStartI[PIdx_9];SMemMat.SegEndI[PIdx_9]=InMat.SegEndI[PIdx_9];}if(PIdx_10<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_10]=InMat.SegStartI[PIdx_10];SMemMat.SegEndI[PIdx_10]=InMat.SegEndI[PIdx_10];}if(PIdx_11<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_11]=InMat.SegStartI[PIdx_11];SMemMat.SegEndI[PIdx_11]=InMat.SegEndI[PIdx_11];}if(PIdx_12<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_12]=InMat.SegStartI[PIdx_12];SMemMat.SegEndI[PIdx_12]=InMat.SegEndI[PIdx_12];}if(PIdx_13<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_13]=InMat.SegStartI[PIdx_13];SMemMat.SegEndI[PIdx_13]=InMat.SegEndI[PIdx_13];}if(PIdx_14<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_14]=InMat.SegStartI[PIdx_14];SMemMat.SegEndI[PIdx_14]=InMat.SegEndI[PIdx_14];}if(PIdx_15<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_15]=InMat.SegStartI[PIdx_15];SMemMat.SegEndI[PIdx_15]=InMat.SegEndI[PIdx_15];}if(PIdx_16<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_16]=InMat.SegStartI[PIdx_16];SMemMat.SegEndI[PIdx_16]=InMat.SegEndI[PIdx_16];}if(PIdx_17<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_17]=InMat.SegStartI[PIdx_17];SMemMat.SegEndI[PIdx_17]=InMat.SegEndI[PIdx_17];}if(PIdx_18<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_18]=InMat.SegStartI[PIdx_18];SMemMat.SegEndI[PIdx_18]=InMat.SegEndI[PIdx_18];}if(PIdx_19<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_19]=InMat.SegStartI[PIdx_19];SMemMat.SegEndI[PIdx_19]=InMat.SegEndI[PIdx_19];}if(PIdx_20<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_20]=InMat.SegStartI[PIdx_20];SMemMat.SegEndI[PIdx_20]=InMat.SegEndI[PIdx_20];}if(PIdx_21<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_21]=InMat.SegStartI[PIdx_21];SMemMat.SegEndI[PIdx_21]=InMat.SegEndI[PIdx_21];}if(PIdx_22<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_22]=InMat.SegStartI[PIdx_22];SMemMat.SegEndI[PIdx_22]=InMat.SegEndI[PIdx_22];}if(PIdx_23<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_23]=InMat.SegStartI[PIdx_23];SMemMat.SegEndI[PIdx_23]=InMat.SegEndI[PIdx_23];}if(PIdx_24<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_24]=InMat.SegStartI[PIdx_24];SMemMat.SegEndI[PIdx_24]=InMat.SegEndI[PIdx_24];}if(PIdx_25<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_25]=InMat.SegStartI[PIdx_25];SMemMat.SegEndI[PIdx_25]=InMat.SegEndI[PIdx_25];}if(PIdx_26<InMat.nCallForFather+1){SMemMat.SegStartI[PIdx_26]=InMat.SegStartI[PIdx_26];SMemMat.SegEndI[PIdx_26]=InMat.SegEndI[PIdx_26];}
	__syncthreads();
	for(int i=0;i<CompDepth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_1]=InMat.CompByLevel32[WARPSIZE*i+PIdx_1];}
	//#define THISCOMMANDHEREE123(VARILP) for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_ ## VARILP]=InMat.CompByLevel32[WARPSIZE*i+PIdx_ ## VARILP];}
	//for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_1]=InMat.CompByLevel32[WARPSIZE*i+PIdx_1];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_2]=InMat.CompByLevel32[WARPSIZE*i+PIdx_2];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_3]=InMat.CompByLevel32[WARPSIZE*i+PIdx_3];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_4]=InMat.CompByLevel32[WARPSIZE*i+PIdx_4];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_5]=InMat.CompByLevel32[WARPSIZE*i+PIdx_5];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_6]=InMat.CompByLevel32[WARPSIZE*i+PIdx_6];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_7]=InMat.CompByLevel32[WARPSIZE*i+PIdx_7];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_8]=InMat.CompByLevel32[WARPSIZE*i+PIdx_8];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_9]=InMat.CompByLevel32[WARPSIZE*i+PIdx_9];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_10]=InMat.CompByLevel32[WARPSIZE*i+PIdx_10];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_11]=InMat.CompByLevel32[WARPSIZE*i+PIdx_11];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_12]=InMat.CompByLevel32[WARPSIZE*i+PIdx_12];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_13]=InMat.CompByLevel32[WARPSIZE*i+PIdx_13];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_14]=InMat.CompByLevel32[WARPSIZE*i+PIdx_14];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_15]=InMat.CompByLevel32[WARPSIZE*i+PIdx_15];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_16]=InMat.CompByLevel32[WARPSIZE*i+PIdx_16];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_17]=InMat.CompByLevel32[WARPSIZE*i+PIdx_17];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_18]=InMat.CompByLevel32[WARPSIZE*i+PIdx_18];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_19]=InMat.CompByLevel32[WARPSIZE*i+PIdx_19];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_20]=InMat.CompByLevel32[WARPSIZE*i+PIdx_20];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_21]=InMat.CompByLevel32[WARPSIZE*i+PIdx_21];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_22]=InMat.CompByLevel32[WARPSIZE*i+PIdx_22];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_23]=InMat.CompByLevel32[WARPSIZE*i+PIdx_23];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_24]=InMat.CompByLevel32[WARPSIZE*i+PIdx_24];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_25]=InMat.CompByLevel32[WARPSIZE*i+PIdx_25];}for(int i=0;i<=SMemMat.Depth;i++) {SMemMat.CompByLevel32[WARPSIZE*i+PIdx_26]=InMat.CompByLevel32[WARPSIZE*i+PIdx_26];}
	for(int i=0;i<CompFDepth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_1]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_1];}
	//#define THISCOMMANDHEREE124(VARILP) for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_ ## VARILP]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_ ## VARILP];}
	//for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_1]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_1];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_2]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_2];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_3]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_3];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_4]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_4];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_5]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_5];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_6]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_6];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_7]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_7];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_8]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_8];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_9]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_9];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_10]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_10];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_11]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_11];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_12]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_12];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_13]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_13];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_14]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_14];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_15]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_15];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_16]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_16];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_17]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_17];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_18]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_18];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_19]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_19];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_20]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_20];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_21]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_21];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_22]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_22];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_23]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_23];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_24]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_24];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_25]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_25];}for(int i=0;i<SMemMat.Depth;i++) {SMemMat.CompByFLevel32[WARPSIZE*i+PIdx_26]=InMat.CompByFLevel32[WARPSIZE*i+PIdx_26];}
	//if(PIdx_1<InMat.nLRel) {SMemMat.LRelStarts[PIdx_1]=InMat.LRelStarts[PIdx_1];SMemMat.LRelEnds[PIdx_1]=InMat.LRelEnds[PIdx_1];}
	#define THISCOMMANDHEREE125(VARILP) if(PIdx_ ## VARILP<InMat.nLRel){SMemMat.LRelStarts[PIdx_ ## VARILP]=InMat.LRelStarts[PIdx_ ## VARILP];SMemMat.LRelEnds[PIdx_ ## VARILP]=InMat.LRelEnds[PIdx_ ## VARILP];}
	if(PIdx_1<InMat.nLRel){SMemMat.LRelStarts[PIdx_1]=InMat.LRelStarts[PIdx_1];SMemMat.LRelEnds[PIdx_1]=InMat.LRelEnds[PIdx_1];}if(PIdx_2<InMat.nLRel){SMemMat.LRelStarts[PIdx_2]=InMat.LRelStarts[PIdx_2];SMemMat.LRelEnds[PIdx_2]=InMat.LRelEnds[PIdx_2];}if(PIdx_3<InMat.nLRel){SMemMat.LRelStarts[PIdx_3]=InMat.LRelStarts[PIdx_3];SMemMat.LRelEnds[PIdx_3]=InMat.LRelEnds[PIdx_3];}if(PIdx_4<InMat.nLRel){SMemMat.LRelStarts[PIdx_4]=InMat.LRelStarts[PIdx_4];SMemMat.LRelEnds[PIdx_4]=InMat.LRelEnds[PIdx_4];}if(PIdx_5<InMat.nLRel){SMemMat.LRelStarts[PIdx_5]=InMat.LRelStarts[PIdx_5];SMemMat.LRelEnds[PIdx_5]=InMat.LRelEnds[PIdx_5];}if(PIdx_6<InMat.nLRel){SMemMat.LRelStarts[PIdx_6]=InMat.LRelStarts[PIdx_6];SMemMat.LRelEnds[PIdx_6]=InMat.LRelEnds[PIdx_6];}if(PIdx_7<InMat.nLRel){SMemMat.LRelStarts[PIdx_7]=InMat.LRelStarts[PIdx_7];SMemMat.LRelEnds[PIdx_7]=InMat.LRelEnds[PIdx_7];}if(PIdx_8<InMat.nLRel){SMemMat.LRelStarts[PIdx_8]=InMat.LRelStarts[PIdx_8];SMemMat.LRelEnds[PIdx_8]=InMat.LRelEnds[PIdx_8];}if(PIdx_9<InMat.nLRel){SMemMat.LRelStarts[PIdx_9]=InMat.LRelStarts[PIdx_9];SMemMat.LRelEnds[PIdx_9]=InMat.LRelEnds[PIdx_9];}if(PIdx_10<InMat.nLRel){SMemMat.LRelStarts[PIdx_10]=InMat.LRelStarts[PIdx_10];SMemMat.LRelEnds[PIdx_10]=InMat.LRelEnds[PIdx_10];}if(PIdx_11<InMat.nLRel){SMemMat.LRelStarts[PIdx_11]=InMat.LRelStarts[PIdx_11];SMemMat.LRelEnds[PIdx_11]=InMat.LRelEnds[PIdx_11];}if(PIdx_12<InMat.nLRel){SMemMat.LRelStarts[PIdx_12]=InMat.LRelStarts[PIdx_12];SMemMat.LRelEnds[PIdx_12]=InMat.LRelEnds[PIdx_12];}if(PIdx_13<InMat.nLRel){SMemMat.LRelStarts[PIdx_13]=InMat.LRelStarts[PIdx_13];SMemMat.LRelEnds[PIdx_13]=InMat.LRelEnds[PIdx_13];}if(PIdx_14<InMat.nLRel){SMemMat.LRelStarts[PIdx_14]=InMat.LRelStarts[PIdx_14];SMemMat.LRelEnds[PIdx_14]=InMat.LRelEnds[PIdx_14];}if(PIdx_15<InMat.nLRel){SMemMat.LRelStarts[PIdx_15]=InMat.LRelStarts[PIdx_15];SMemMat.LRelEnds[PIdx_15]=InMat.LRelEnds[PIdx_15];}if(PIdx_16<InMat.nLRel){SMemMat.LRelStarts[PIdx_16]=InMat.LRelStarts[PIdx_16];SMemMat.LRelEnds[PIdx_16]=InMat.LRelEnds[PIdx_16];}if(PIdx_17<InMat.nLRel){SMemMat.LRelStarts[PIdx_17]=InMat.LRelStarts[PIdx_17];SMemMat.LRelEnds[PIdx_17]=InMat.LRelEnds[PIdx_17];}if(PIdx_18<InMat.nLRel){SMemMat.LRelStarts[PIdx_18]=InMat.LRelStarts[PIdx_18];SMemMat.LRelEnds[PIdx_18]=InMat.LRelEnds[PIdx_18];}if(PIdx_19<InMat.nLRel){SMemMat.LRelStarts[PIdx_19]=InMat.LRelStarts[PIdx_19];SMemMat.LRelEnds[PIdx_19]=InMat.LRelEnds[PIdx_19];}if(PIdx_20<InMat.nLRel){SMemMat.LRelStarts[PIdx_20]=InMat.LRelStarts[PIdx_20];SMemMat.LRelEnds[PIdx_20]=InMat.LRelEnds[PIdx_20];}if(PIdx_21<InMat.nLRel){SMemMat.LRelStarts[PIdx_21]=InMat.LRelStarts[PIdx_21];SMemMat.LRelEnds[PIdx_21]=InMat.LRelEnds[PIdx_21];}if(PIdx_22<InMat.nLRel){SMemMat.LRelStarts[PIdx_22]=InMat.LRelStarts[PIdx_22];SMemMat.LRelEnds[PIdx_22]=InMat.LRelEnds[PIdx_22];}if(PIdx_23<InMat.nLRel){SMemMat.LRelStarts[PIdx_23]=InMat.LRelStarts[PIdx_23];SMemMat.LRelEnds[PIdx_23]=InMat.LRelEnds[PIdx_23];}if(PIdx_24<InMat.nLRel){SMemMat.LRelStarts[PIdx_24]=InMat.LRelStarts[PIdx_24];SMemMat.LRelEnds[PIdx_24]=InMat.LRelEnds[PIdx_24];}if(PIdx_25<InMat.nLRel){SMemMat.LRelStarts[PIdx_25]=InMat.LRelStarts[PIdx_25];SMemMat.LRelEnds[PIdx_25]=InMat.LRelEnds[PIdx_25];}if(PIdx_26<InMat.nLRel){SMemMat.LRelStarts[PIdx_26]=InMat.LRelStarts[PIdx_26];SMemMat.LRelEnds[PIdx_26]=InMat.LRelEnds[PIdx_26];}
	__syncthreads();
	//if(PIdx_1<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_1]=InMat.FLRelStarts[PIdx_1];SMemMat.FLRelEnds[PIdx_1]=InMat.FLRelEnds[PIdx_1];}
	#define THISCOMMANDHEREE126(VARILP) if(PIdx_ ## VARILP<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_ ## VARILP]=InMat.FLRelStarts[PIdx_ ## VARILP];SMemMat.FLRelEnds[PIdx_ ## VARILP]=InMat.FLRelEnds[PIdx_ ## VARILP];}
	if(PIdx_1<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_1]=InMat.FLRelStarts[PIdx_1];SMemMat.FLRelEnds[PIdx_1]=InMat.FLRelEnds[PIdx_1];}if(PIdx_2<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_2]=InMat.FLRelStarts[PIdx_2];SMemMat.FLRelEnds[PIdx_2]=InMat.FLRelEnds[PIdx_2];}if(PIdx_3<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_3]=InMat.FLRelStarts[PIdx_3];SMemMat.FLRelEnds[PIdx_3]=InMat.FLRelEnds[PIdx_3];}if(PIdx_4<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_4]=InMat.FLRelStarts[PIdx_4];SMemMat.FLRelEnds[PIdx_4]=InMat.FLRelEnds[PIdx_4];}if(PIdx_5<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_5]=InMat.FLRelStarts[PIdx_5];SMemMat.FLRelEnds[PIdx_5]=InMat.FLRelEnds[PIdx_5];}if(PIdx_6<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_6]=InMat.FLRelStarts[PIdx_6];SMemMat.FLRelEnds[PIdx_6]=InMat.FLRelEnds[PIdx_6];}if(PIdx_7<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_7]=InMat.FLRelStarts[PIdx_7];SMemMat.FLRelEnds[PIdx_7]=InMat.FLRelEnds[PIdx_7];}if(PIdx_8<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_8]=InMat.FLRelStarts[PIdx_8];SMemMat.FLRelEnds[PIdx_8]=InMat.FLRelEnds[PIdx_8];}if(PIdx_9<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_9]=InMat.FLRelStarts[PIdx_9];SMemMat.FLRelEnds[PIdx_9]=InMat.FLRelEnds[PIdx_9];}if(PIdx_10<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_10]=InMat.FLRelStarts[PIdx_10];SMemMat.FLRelEnds[PIdx_10]=InMat.FLRelEnds[PIdx_10];}if(PIdx_11<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_11]=InMat.FLRelStarts[PIdx_11];SMemMat.FLRelEnds[PIdx_11]=InMat.FLRelEnds[PIdx_11];}if(PIdx_12<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_12]=InMat.FLRelStarts[PIdx_12];SMemMat.FLRelEnds[PIdx_12]=InMat.FLRelEnds[PIdx_12];}if(PIdx_13<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_13]=InMat.FLRelStarts[PIdx_13];SMemMat.FLRelEnds[PIdx_13]=InMat.FLRelEnds[PIdx_13];}if(PIdx_14<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_14]=InMat.FLRelStarts[PIdx_14];SMemMat.FLRelEnds[PIdx_14]=InMat.FLRelEnds[PIdx_14];}if(PIdx_15<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_15]=InMat.FLRelStarts[PIdx_15];SMemMat.FLRelEnds[PIdx_15]=InMat.FLRelEnds[PIdx_15];}if(PIdx_16<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_16]=InMat.FLRelStarts[PIdx_16];SMemMat.FLRelEnds[PIdx_16]=InMat.FLRelEnds[PIdx_16];}if(PIdx_17<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_17]=InMat.FLRelStarts[PIdx_17];SMemMat.FLRelEnds[PIdx_17]=InMat.FLRelEnds[PIdx_17];}if(PIdx_18<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_18]=InMat.FLRelStarts[PIdx_18];SMemMat.FLRelEnds[PIdx_18]=InMat.FLRelEnds[PIdx_18];}if(PIdx_19<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_19]=InMat.FLRelStarts[PIdx_19];SMemMat.FLRelEnds[PIdx_19]=InMat.FLRelEnds[PIdx_19];}if(PIdx_20<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_20]=InMat.FLRelStarts[PIdx_20];SMemMat.FLRelEnds[PIdx_20]=InMat.FLRelEnds[PIdx_20];}if(PIdx_21<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_21]=InMat.FLRelStarts[PIdx_21];SMemMat.FLRelEnds[PIdx_21]=InMat.FLRelEnds[PIdx_21];}if(PIdx_22<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_22]=InMat.FLRelStarts[PIdx_22];SMemMat.FLRelEnds[PIdx_22]=InMat.FLRelEnds[PIdx_22];}if(PIdx_23<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_23]=InMat.FLRelStarts[PIdx_23];SMemMat.FLRelEnds[PIdx_23]=InMat.FLRelEnds[PIdx_23];}if(PIdx_24<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_24]=InMat.FLRelStarts[PIdx_24];SMemMat.FLRelEnds[PIdx_24]=InMat.FLRelEnds[PIdx_24];}if(PIdx_25<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_25]=InMat.FLRelStarts[PIdx_25];SMemMat.FLRelEnds[PIdx_25]=InMat.FLRelEnds[PIdx_25];}if(PIdx_26<InMat.nFLRel) {SMemMat.FLRelStarts[PIdx_26]=InMat.FLRelStarts[PIdx_26];SMemMat.FLRelEnds[PIdx_26]=InMat.FLRelEnds[PIdx_26];}
	#ifdef HH
	//RBS This works now where all models are in the same comps we need to genreralize it.
	//RBS  This code should be generated with calling all models init and defining all states.
//#define THISCOMMANDHEREE4(VARILP) ModelStates_ ## VARILP [0]=0; ModelStates_ ## VARILP [1]=0; ModelStates_ ## VARILP [2]=0;
	ModelStates_1 [0]=0;ModelStates_1 [1]=0;ModelStates_1 [2]=0;ModelStates_1 [3]=0;ModelStates_1 [4]=0;ModelStates_1 [5]=0;ModelStates_1 [6]=0;ModelStates_1 [7]=0;ModelStates_1 [8]=0;ModelStates_1 [9]=0;;ModelStates_2 [0]=0;ModelStates_2 [1]=0;ModelStates_2 [2]=0;ModelStates_2 [3]=0;ModelStates_2 [4]=0;ModelStates_2 [5]=0;ModelStates_2 [6]=0;ModelStates_2 [7]=0;ModelStates_2 [8]=0;ModelStates_2 [9]=0;;ModelStates_3 [0]=0;ModelStates_3 [1]=0;ModelStates_3 [2]=0;ModelStates_3 [3]=0;ModelStates_3 [4]=0;ModelStates_3 [5]=0;ModelStates_3 [6]=0;ModelStates_3 [7]=0;ModelStates_3 [8]=0;ModelStates_3 [9]=0;;ModelStates_4 [0]=0;ModelStates_4 [1]=0;ModelStates_4 [2]=0;ModelStates_4 [3]=0;ModelStates_4 [4]=0;ModelStates_4 [5]=0;ModelStates_4 [6]=0;ModelStates_4 [7]=0;ModelStates_4 [8]=0;ModelStates_4 [9]=0;;ModelStates_5 [0]=0;ModelStates_5 [1]=0;ModelStates_5 [2]=0;ModelStates_5 [3]=0;ModelStates_5 [4]=0;ModelStates_5 [5]=0;ModelStates_5 [6]=0;ModelStates_5 [7]=0;ModelStates_5 [8]=0;ModelStates_5 [9]=0;;ModelStates_6 [0]=0;ModelStates_6 [1]=0;ModelStates_6 [2]=0;ModelStates_6 [3]=0;ModelStates_6 [4]=0;ModelStates_6 [5]=0;ModelStates_6 [6]=0;ModelStates_6 [7]=0;ModelStates_6 [8]=0;ModelStates_6 [9]=0;;ModelStates_7 [0]=0;ModelStates_7 [1]=0;ModelStates_7 [2]=0;ModelStates_7 [3]=0;ModelStates_7 [4]=0;ModelStates_7 [5]=0;ModelStates_7 [6]=0;ModelStates_7 [7]=0;ModelStates_7 [8]=0;ModelStates_7 [9]=0;;ModelStates_8 [0]=0;ModelStates_8 [1]=0;ModelStates_8 [2]=0;ModelStates_8 [3]=0;ModelStates_8 [4]=0;ModelStates_8 [5]=0;ModelStates_8 [6]=0;ModelStates_8 [7]=0;ModelStates_8 [8]=0;ModelStates_8 [9]=0;;ModelStates_9 [0]=0;ModelStates_9 [1]=0;ModelStates_9 [2]=0;ModelStates_9 [3]=0;ModelStates_9 [4]=0;ModelStates_9 [5]=0;ModelStates_9 [6]=0;ModelStates_9 [7]=0;ModelStates_9 [8]=0;ModelStates_9 [9]=0;;ModelStates_10 [0]=0;ModelStates_10 [1]=0;ModelStates_10 [2]=0;ModelStates_10 [3]=0;ModelStates_10 [4]=0;ModelStates_10 [5]=0;ModelStates_10 [6]=0;ModelStates_10 [7]=0;ModelStates_10 [8]=0;ModelStates_10 [9]=0;;ModelStates_11 [0]=0;ModelStates_11 [1]=0;ModelStates_11 [2]=0;ModelStates_11 [3]=0;ModelStates_11 [4]=0;ModelStates_11 [5]=0;ModelStates_11 [6]=0;ModelStates_11 [7]=0;ModelStates_11 [8]=0;ModelStates_11 [9]=0;;ModelStates_12 [0]=0;ModelStates_12 [1]=0;ModelStates_12 [2]=0;ModelStates_12 [3]=0;ModelStates_12 [4]=0;ModelStates_12 [5]=0;ModelStates_12 [6]=0;ModelStates_12 [7]=0;ModelStates_12 [8]=0;ModelStates_12 [9]=0;;ModelStates_13 [0]=0;ModelStates_13 [1]=0;ModelStates_13 [2]=0;ModelStates_13 [3]=0;ModelStates_13 [4]=0;ModelStates_13 [5]=0;ModelStates_13 [6]=0;ModelStates_13 [7]=0;ModelStates_13 [8]=0;ModelStates_13 [9]=0;;ModelStates_14 [0]=0;ModelStates_14 [1]=0;ModelStates_14 [2]=0;ModelStates_14 [3]=0;ModelStates_14 [4]=0;ModelStates_14 [5]=0;ModelStates_14 [6]=0;ModelStates_14 [7]=0;ModelStates_14 [8]=0;ModelStates_14 [9]=0;;ModelStates_15 [0]=0;ModelStates_15 [1]=0;ModelStates_15 [2]=0;ModelStates_15 [3]=0;ModelStates_15 [4]=0;ModelStates_15 [5]=0;ModelStates_15 [6]=0;ModelStates_15 [7]=0;ModelStates_15 [8]=0;ModelStates_15 [9]=0;;ModelStates_16 [0]=0;ModelStates_16 [1]=0;ModelStates_16 [2]=0;ModelStates_16 [3]=0;ModelStates_16 [4]=0;ModelStates_16 [5]=0;ModelStates_16 [6]=0;ModelStates_16 [7]=0;ModelStates_16 [8]=0;ModelStates_16 [9]=0;;ModelStates_17 [0]=0;ModelStates_17 [1]=0;ModelStates_17 [2]=0;ModelStates_17 [3]=0;ModelStates_17 [4]=0;ModelStates_17 [5]=0;ModelStates_17 [6]=0;ModelStates_17 [7]=0;ModelStates_17 [8]=0;ModelStates_17 [9]=0;;ModelStates_18 [0]=0;ModelStates_18 [1]=0;ModelStates_18 [2]=0;ModelStates_18 [3]=0;ModelStates_18 [4]=0;ModelStates_18 [5]=0;ModelStates_18 [6]=0;ModelStates_18 [7]=0;ModelStates_18 [8]=0;ModelStates_18 [9]=0;;ModelStates_19 [0]=0;ModelStates_19 [1]=0;ModelStates_19 [2]=0;ModelStates_19 [3]=0;ModelStates_19 [4]=0;ModelStates_19 [5]=0;ModelStates_19 [6]=0;ModelStates_19 [7]=0;ModelStates_19 [8]=0;ModelStates_19 [9]=0;;ModelStates_20 [0]=0;ModelStates_20 [1]=0;ModelStates_20 [2]=0;ModelStates_20 [3]=0;ModelStates_20 [4]=0;ModelStates_20 [5]=0;ModelStates_20 [6]=0;ModelStates_20 [7]=0;ModelStates_20 [8]=0;ModelStates_20 [9]=0;;ModelStates_21 [0]=0;ModelStates_21 [1]=0;ModelStates_21 [2]=0;ModelStates_21 [3]=0;ModelStates_21 [4]=0;ModelStates_21 [5]=0;ModelStates_21 [6]=0;ModelStates_21 [7]=0;ModelStates_21 [8]=0;ModelStates_21 [9]=0;;ModelStates_22 [0]=0;ModelStates_22 [1]=0;ModelStates_22 [2]=0;ModelStates_22 [3]=0;ModelStates_22 [4]=0;ModelStates_22 [5]=0;ModelStates_22 [6]=0;ModelStates_22 [7]=0;ModelStates_22 [8]=0;ModelStates_22 [9]=0;;ModelStates_23 [0]=0;ModelStates_23 [1]=0;ModelStates_23 [2]=0;ModelStates_23 [3]=0;ModelStates_23 [4]=0;ModelStates_23 [5]=0;ModelStates_23 [6]=0;ModelStates_23 [7]=0;ModelStates_23 [8]=0;ModelStates_23 [9]=0;;ModelStates_24 [0]=0;ModelStates_24 [1]=0;ModelStates_24 [2]=0;ModelStates_24 [3]=0;ModelStates_24 [4]=0;ModelStates_24 [5]=0;ModelStates_24 [6]=0;ModelStates_24 [7]=0;ModelStates_24 [8]=0;ModelStates_24 [9]=0;;ModelStates_25 [0]=0;ModelStates_25 [1]=0;ModelStates_25 [2]=0;ModelStates_25 [3]=0;ModelStates_25 [4]=0;ModelStates_25 [5]=0;ModelStates_25 [6]=0;ModelStates_25 [7]=0;ModelStates_25 [8]=0;ModelStates_25 [9]=0;;ModelStates_26 [0]=0;ModelStates_26 [1]=0;ModelStates_26 [2]=0;ModelStates_26 [3]=0;ModelStates_26 [4]=0;ModelStates_26 [5]=0;ModelStates_26 [6]=0;ModelStates_26 [7]=0;ModelStates_26 [8]=0;ModelStates_26 [9]=0;;
#endif
	  if(SMemMat.boolModel[PIdx_1 +0*SMemMat.N]){CuInitModel_ca(v_1,ModelStates_1[0],ModelStates_1[1],p0_1 ,p1_1 ,ModelStates_1[8],ModelStates_1[9]);} if(SMemMat.boolModel[PIdx_1 +1*SMemMat.N]){CuInitModel_cad(v_1,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +2*SMemMat.N]){CuInitModel_kca(v_1,ModelStates_1[3],p2_1 ,p3_1 ,p4_1 ,p5_1 ,ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +3*SMemMat.N]){CuInitModel_km(v_1,ModelStates_1[4],p6_1 ,p7_1 ,p8_1 ,p9_1 ,p10_1 );} if(SMemMat.boolModel[PIdx_1 +4*SMemMat.N]){CuInitModel_kv(v_1,ModelStates_1[5],p11_1 ,p12_1 ,p13_1 ,p14_1 ,p15_1 );} if(SMemMat.boolModel[PIdx_1 +5*SMemMat.N]){CuInitModel_na(v_1,ModelStates_1[6],ModelStates_1[7],p16_1 ,p17_1 ,p18_1 ,p19_1 ,p20_1 ,p21_1 ,p22_1 ,p23_1 ,p24_1 ,p25_1 ,p26_1 ,p27_1 );}  if(SMemMat.boolModel[PIdx_2 +0*SMemMat.N]){CuInitModel_ca(v_2,ModelStates_2[0],ModelStates_2[1],p0_2 ,p1_2 ,ModelStates_2[8],ModelStates_2[9]);} if(SMemMat.boolModel[PIdx_2 +1*SMemMat.N]){CuInitModel_cad(v_2,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +2*SMemMat.N]){CuInitModel_kca(v_2,ModelStates_2[3],p2_2 ,p3_2 ,p4_2 ,p5_2 ,ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +3*SMemMat.N]){CuInitModel_km(v_2,ModelStates_2[4],p6_2 ,p7_2 ,p8_2 ,p9_2 ,p10_2 );} if(SMemMat.boolModel[PIdx_2 +4*SMemMat.N]){CuInitModel_kv(v_2,ModelStates_2[5],p11_2 ,p12_2 ,p13_2 ,p14_2 ,p15_2 );} if(SMemMat.boolModel[PIdx_2 +5*SMemMat.N]){CuInitModel_na(v_2,ModelStates_2[6],ModelStates_2[7],p16_2 ,p17_2 ,p18_2 ,p19_2 ,p20_2 ,p21_2 ,p22_2 ,p23_2 ,p24_2 ,p25_2 ,p26_2 ,p27_2 );}  if(SMemMat.boolModel[PIdx_3 +0*SMemMat.N]){CuInitModel_ca(v_3,ModelStates_3[0],ModelStates_3[1],p0_3 ,p1_3 ,ModelStates_3[8],ModelStates_3[9]);} if(SMemMat.boolModel[PIdx_3 +1*SMemMat.N]){CuInitModel_cad(v_3,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +2*SMemMat.N]){CuInitModel_kca(v_3,ModelStates_3[3],p2_3 ,p3_3 ,p4_3 ,p5_3 ,ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +3*SMemMat.N]){CuInitModel_km(v_3,ModelStates_3[4],p6_3 ,p7_3 ,p8_3 ,p9_3 ,p10_3 );} if(SMemMat.boolModel[PIdx_3 +4*SMemMat.N]){CuInitModel_kv(v_3,ModelStates_3[5],p11_3 ,p12_3 ,p13_3 ,p14_3 ,p15_3 );} if(SMemMat.boolModel[PIdx_3 +5*SMemMat.N]){CuInitModel_na(v_3,ModelStates_3[6],ModelStates_3[7],p16_3 ,p17_3 ,p18_3 ,p19_3 ,p20_3 ,p21_3 ,p22_3 ,p23_3 ,p24_3 ,p25_3 ,p26_3 ,p27_3 );}  if(SMemMat.boolModel[PIdx_4 +0*SMemMat.N]){CuInitModel_ca(v_4,ModelStates_4[0],ModelStates_4[1],p0_4 ,p1_4 ,ModelStates_4[8],ModelStates_4[9]);} if(SMemMat.boolModel[PIdx_4 +1*SMemMat.N]){CuInitModel_cad(v_4,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +2*SMemMat.N]){CuInitModel_kca(v_4,ModelStates_4[3],p2_4 ,p3_4 ,p4_4 ,p5_4 ,ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +3*SMemMat.N]){CuInitModel_km(v_4,ModelStates_4[4],p6_4 ,p7_4 ,p8_4 ,p9_4 ,p10_4 );} if(SMemMat.boolModel[PIdx_4 +4*SMemMat.N]){CuInitModel_kv(v_4,ModelStates_4[5],p11_4 ,p12_4 ,p13_4 ,p14_4 ,p15_4 );} if(SMemMat.boolModel[PIdx_4 +5*SMemMat.N]){CuInitModel_na(v_4,ModelStates_4[6],ModelStates_4[7],p16_4 ,p17_4 ,p18_4 ,p19_4 ,p20_4 ,p21_4 ,p22_4 ,p23_4 ,p24_4 ,p25_4 ,p26_4 ,p27_4 );}  if(SMemMat.boolModel[PIdx_5 +0*SMemMat.N]){CuInitModel_ca(v_5,ModelStates_5[0],ModelStates_5[1],p0_5 ,p1_5 ,ModelStates_5[8],ModelStates_5[9]);} if(SMemMat.boolModel[PIdx_5 +1*SMemMat.N]){CuInitModel_cad(v_5,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +2*SMemMat.N]){CuInitModel_kca(v_5,ModelStates_5[3],p2_5 ,p3_5 ,p4_5 ,p5_5 ,ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +3*SMemMat.N]){CuInitModel_km(v_5,ModelStates_5[4],p6_5 ,p7_5 ,p8_5 ,p9_5 ,p10_5 );} if(SMemMat.boolModel[PIdx_5 +4*SMemMat.N]){CuInitModel_kv(v_5,ModelStates_5[5],p11_5 ,p12_5 ,p13_5 ,p14_5 ,p15_5 );} if(SMemMat.boolModel[PIdx_5 +5*SMemMat.N]){CuInitModel_na(v_5,ModelStates_5[6],ModelStates_5[7],p16_5 ,p17_5 ,p18_5 ,p19_5 ,p20_5 ,p21_5 ,p22_5 ,p23_5 ,p24_5 ,p25_5 ,p26_5 ,p27_5 );}  if(SMemMat.boolModel[PIdx_6 +0*SMemMat.N]){CuInitModel_ca(v_6,ModelStates_6[0],ModelStates_6[1],p0_6 ,p1_6 ,ModelStates_6[8],ModelStates_6[9]);} if(SMemMat.boolModel[PIdx_6 +1*SMemMat.N]){CuInitModel_cad(v_6,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +2*SMemMat.N]){CuInitModel_kca(v_6,ModelStates_6[3],p2_6 ,p3_6 ,p4_6 ,p5_6 ,ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +3*SMemMat.N]){CuInitModel_km(v_6,ModelStates_6[4],p6_6 ,p7_6 ,p8_6 ,p9_6 ,p10_6 );} if(SMemMat.boolModel[PIdx_6 +4*SMemMat.N]){CuInitModel_kv(v_6,ModelStates_6[5],p11_6 ,p12_6 ,p13_6 ,p14_6 ,p15_6 );} if(SMemMat.boolModel[PIdx_6 +5*SMemMat.N]){CuInitModel_na(v_6,ModelStates_6[6],ModelStates_6[7],p16_6 ,p17_6 ,p18_6 ,p19_6 ,p20_6 ,p21_6 ,p22_6 ,p23_6 ,p24_6 ,p25_6 ,p26_6 ,p27_6 );}  if(SMemMat.boolModel[PIdx_7 +0*SMemMat.N]){CuInitModel_ca(v_7,ModelStates_7[0],ModelStates_7[1],p0_7 ,p1_7 ,ModelStates_7[8],ModelStates_7[9]);} if(SMemMat.boolModel[PIdx_7 +1*SMemMat.N]){CuInitModel_cad(v_7,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +2*SMemMat.N]){CuInitModel_kca(v_7,ModelStates_7[3],p2_7 ,p3_7 ,p4_7 ,p5_7 ,ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +3*SMemMat.N]){CuInitModel_km(v_7,ModelStates_7[4],p6_7 ,p7_7 ,p8_7 ,p9_7 ,p10_7 );} if(SMemMat.boolModel[PIdx_7 +4*SMemMat.N]){CuInitModel_kv(v_7,ModelStates_7[5],p11_7 ,p12_7 ,p13_7 ,p14_7 ,p15_7 );} if(SMemMat.boolModel[PIdx_7 +5*SMemMat.N]){CuInitModel_na(v_7,ModelStates_7[6],ModelStates_7[7],p16_7 ,p17_7 ,p18_7 ,p19_7 ,p20_7 ,p21_7 ,p22_7 ,p23_7 ,p24_7 ,p25_7 ,p26_7 ,p27_7 );}  if(SMemMat.boolModel[PIdx_8 +0*SMemMat.N]){CuInitModel_ca(v_8,ModelStates_8[0],ModelStates_8[1],p0_8 ,p1_8 ,ModelStates_8[8],ModelStates_8[9]);} if(SMemMat.boolModel[PIdx_8 +1*SMemMat.N]){CuInitModel_cad(v_8,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +2*SMemMat.N]){CuInitModel_kca(v_8,ModelStates_8[3],p2_8 ,p3_8 ,p4_8 ,p5_8 ,ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +3*SMemMat.N]){CuInitModel_km(v_8,ModelStates_8[4],p6_8 ,p7_8 ,p8_8 ,p9_8 ,p10_8 );} if(SMemMat.boolModel[PIdx_8 +4*SMemMat.N]){CuInitModel_kv(v_8,ModelStates_8[5],p11_8 ,p12_8 ,p13_8 ,p14_8 ,p15_8 );} if(SMemMat.boolModel[PIdx_8 +5*SMemMat.N]){CuInitModel_na(v_8,ModelStates_8[6],ModelStates_8[7],p16_8 ,p17_8 ,p18_8 ,p19_8 ,p20_8 ,p21_8 ,p22_8 ,p23_8 ,p24_8 ,p25_8 ,p26_8 ,p27_8 );}  if(SMemMat.boolModel[PIdx_9 +0*SMemMat.N]){CuInitModel_ca(v_9,ModelStates_9[0],ModelStates_9[1],p0_9 ,p1_9 ,ModelStates_9[8],ModelStates_9[9]);} if(SMemMat.boolModel[PIdx_9 +1*SMemMat.N]){CuInitModel_cad(v_9,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +2*SMemMat.N]){CuInitModel_kca(v_9,ModelStates_9[3],p2_9 ,p3_9 ,p4_9 ,p5_9 ,ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +3*SMemMat.N]){CuInitModel_km(v_9,ModelStates_9[4],p6_9 ,p7_9 ,p8_9 ,p9_9 ,p10_9 );} if(SMemMat.boolModel[PIdx_9 +4*SMemMat.N]){CuInitModel_kv(v_9,ModelStates_9[5],p11_9 ,p12_9 ,p13_9 ,p14_9 ,p15_9 );} if(SMemMat.boolModel[PIdx_9 +5*SMemMat.N]){CuInitModel_na(v_9,ModelStates_9[6],ModelStates_9[7],p16_9 ,p17_9 ,p18_9 ,p19_9 ,p20_9 ,p21_9 ,p22_9 ,p23_9 ,p24_9 ,p25_9 ,p26_9 ,p27_9 );}  if(SMemMat.boolModel[PIdx_10 +0*SMemMat.N]){CuInitModel_ca(v_10,ModelStates_10[0],ModelStates_10[1],p0_10 ,p1_10 ,ModelStates_10[8],ModelStates_10[9]);} if(SMemMat.boolModel[PIdx_10 +1*SMemMat.N]){CuInitModel_cad(v_10,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +2*SMemMat.N]){CuInitModel_kca(v_10,ModelStates_10[3],p2_10 ,p3_10 ,p4_10 ,p5_10 ,ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +3*SMemMat.N]){CuInitModel_km(v_10,ModelStates_10[4],p6_10 ,p7_10 ,p8_10 ,p9_10 ,p10_10 );} if(SMemMat.boolModel[PIdx_10 +4*SMemMat.N]){CuInitModel_kv(v_10,ModelStates_10[5],p11_10 ,p12_10 ,p13_10 ,p14_10 ,p15_10 );} if(SMemMat.boolModel[PIdx_10 +5*SMemMat.N]){CuInitModel_na(v_10,ModelStates_10[6],ModelStates_10[7],p16_10 ,p17_10 ,p18_10 ,p19_10 ,p20_10 ,p21_10 ,p22_10 ,p23_10 ,p24_10 ,p25_10 ,p26_10 ,p27_10 );}  if(SMemMat.boolModel[PIdx_11 +0*SMemMat.N]){CuInitModel_ca(v_11,ModelStates_11[0],ModelStates_11[1],p0_11 ,p1_11 ,ModelStates_11[8],ModelStates_11[9]);} if(SMemMat.boolModel[PIdx_11 +1*SMemMat.N]){CuInitModel_cad(v_11,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +2*SMemMat.N]){CuInitModel_kca(v_11,ModelStates_11[3],p2_11 ,p3_11 ,p4_11 ,p5_11 ,ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +3*SMemMat.N]){CuInitModel_km(v_11,ModelStates_11[4],p6_11 ,p7_11 ,p8_11 ,p9_11 ,p10_11 );} if(SMemMat.boolModel[PIdx_11 +4*SMemMat.N]){CuInitModel_kv(v_11,ModelStates_11[5],p11_11 ,p12_11 ,p13_11 ,p14_11 ,p15_11 );} if(SMemMat.boolModel[PIdx_11 +5*SMemMat.N]){CuInitModel_na(v_11,ModelStates_11[6],ModelStates_11[7],p16_11 ,p17_11 ,p18_11 ,p19_11 ,p20_11 ,p21_11 ,p22_11 ,p23_11 ,p24_11 ,p25_11 ,p26_11 ,p27_11 );}  if(SMemMat.boolModel[PIdx_12 +0*SMemMat.N]){CuInitModel_ca(v_12,ModelStates_12[0],ModelStates_12[1],p0_12 ,p1_12 ,ModelStates_12[8],ModelStates_12[9]);} if(SMemMat.boolModel[PIdx_12 +1*SMemMat.N]){CuInitModel_cad(v_12,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +2*SMemMat.N]){CuInitModel_kca(v_12,ModelStates_12[3],p2_12 ,p3_12 ,p4_12 ,p5_12 ,ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +3*SMemMat.N]){CuInitModel_km(v_12,ModelStates_12[4],p6_12 ,p7_12 ,p8_12 ,p9_12 ,p10_12 );} if(SMemMat.boolModel[PIdx_12 +4*SMemMat.N]){CuInitModel_kv(v_12,ModelStates_12[5],p11_12 ,p12_12 ,p13_12 ,p14_12 ,p15_12 );} if(SMemMat.boolModel[PIdx_12 +5*SMemMat.N]){CuInitModel_na(v_12,ModelStates_12[6],ModelStates_12[7],p16_12 ,p17_12 ,p18_12 ,p19_12 ,p20_12 ,p21_12 ,p22_12 ,p23_12 ,p24_12 ,p25_12 ,p26_12 ,p27_12 );}  if(SMemMat.boolModel[PIdx_13 +0*SMemMat.N]){CuInitModel_ca(v_13,ModelStates_13[0],ModelStates_13[1],p0_13 ,p1_13 ,ModelStates_13[8],ModelStates_13[9]);} if(SMemMat.boolModel[PIdx_13 +1*SMemMat.N]){CuInitModel_cad(v_13,ModelStates_13[2],ModelStates_13[9],ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +2*SMemMat.N]){CuInitModel_kca(v_13,ModelStates_13[3],p2_13 ,p3_13 ,p4_13 ,p5_13 ,ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +3*SMemMat.N]){CuInitModel_km(v_13,ModelStates_13[4],p6_13 ,p7_13 ,p8_13 ,p9_13 ,p10_13 );} if(SMemMat.boolModel[PIdx_13 +4*SMemMat.N]){CuInitModel_kv(v_13,ModelStates_13[5],p11_13 ,p12_13 ,p13_13 ,p14_13 ,p15_13 );} if(SMemMat.boolModel[PIdx_13 +5*SMemMat.N]){CuInitModel_na(v_13,ModelStates_13[6],ModelStates_13[7],p16_13 ,p17_13 ,p18_13 ,p19_13 ,p20_13 ,p21_13 ,p22_13 ,p23_13 ,p24_13 ,p25_13 ,p26_13 ,p27_13 );}  if(SMemMat.boolModel[PIdx_14 +0*SMemMat.N]){CuInitModel_ca(v_14,ModelStates_14[0],ModelStates_14[1],p0_14 ,p1_14 ,ModelStates_14[8],ModelStates_14[9]);} if(SMemMat.boolModel[PIdx_14 +1*SMemMat.N]){CuInitModel_cad(v_14,ModelStates_14[2],ModelStates_14[9],ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +2*SMemMat.N]){CuInitModel_kca(v_14,ModelStates_14[3],p2_14 ,p3_14 ,p4_14 ,p5_14 ,ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +3*SMemMat.N]){CuInitModel_km(v_14,ModelStates_14[4],p6_14 ,p7_14 ,p8_14 ,p9_14 ,p10_14 );} if(SMemMat.boolModel[PIdx_14 +4*SMemMat.N]){CuInitModel_kv(v_14,ModelStates_14[5],p11_14 ,p12_14 ,p13_14 ,p14_14 ,p15_14 );} if(SMemMat.boolModel[PIdx_14 +5*SMemMat.N]){CuInitModel_na(v_14,ModelStates_14[6],ModelStates_14[7],p16_14 ,p17_14 ,p18_14 ,p19_14 ,p20_14 ,p21_14 ,p22_14 ,p23_14 ,p24_14 ,p25_14 ,p26_14 ,p27_14 );}  if(SMemMat.boolModel[PIdx_15 +0*SMemMat.N]){CuInitModel_ca(v_15,ModelStates_15[0],ModelStates_15[1],p0_15 ,p1_15 ,ModelStates_15[8],ModelStates_15[9]);} if(SMemMat.boolModel[PIdx_15 +1*SMemMat.N]){CuInitModel_cad(v_15,ModelStates_15[2],ModelStates_15[9],ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +2*SMemMat.N]){CuInitModel_kca(v_15,ModelStates_15[3],p2_15 ,p3_15 ,p4_15 ,p5_15 ,ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +3*SMemMat.N]){CuInitModel_km(v_15,ModelStates_15[4],p6_15 ,p7_15 ,p8_15 ,p9_15 ,p10_15 );} if(SMemMat.boolModel[PIdx_15 +4*SMemMat.N]){CuInitModel_kv(v_15,ModelStates_15[5],p11_15 ,p12_15 ,p13_15 ,p14_15 ,p15_15 );} if(SMemMat.boolModel[PIdx_15 +5*SMemMat.N]){CuInitModel_na(v_15,ModelStates_15[6],ModelStates_15[7],p16_15 ,p17_15 ,p18_15 ,p19_15 ,p20_15 ,p21_15 ,p22_15 ,p23_15 ,p24_15 ,p25_15 ,p26_15 ,p27_15 );}  if(SMemMat.boolModel[PIdx_16 +0*SMemMat.N]){CuInitModel_ca(v_16,ModelStates_16[0],ModelStates_16[1],p0_16 ,p1_16 ,ModelStates_16[8],ModelStates_16[9]);} if(SMemMat.boolModel[PIdx_16 +1*SMemMat.N]){CuInitModel_cad(v_16,ModelStates_16[2],ModelStates_16[9],ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +2*SMemMat.N]){CuInitModel_kca(v_16,ModelStates_16[3],p2_16 ,p3_16 ,p4_16 ,p5_16 ,ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +3*SMemMat.N]){CuInitModel_km(v_16,ModelStates_16[4],p6_16 ,p7_16 ,p8_16 ,p9_16 ,p10_16 );} if(SMemMat.boolModel[PIdx_16 +4*SMemMat.N]){CuInitModel_kv(v_16,ModelStates_16[5],p11_16 ,p12_16 ,p13_16 ,p14_16 ,p15_16 );} if(SMemMat.boolModel[PIdx_16 +5*SMemMat.N]){CuInitModel_na(v_16,ModelStates_16[6],ModelStates_16[7],p16_16 ,p17_16 ,p18_16 ,p19_16 ,p20_16 ,p21_16 ,p22_16 ,p23_16 ,p24_16 ,p25_16 ,p26_16 ,p27_16 );}  if(SMemMat.boolModel[PIdx_17 +0*SMemMat.N]){CuInitModel_ca(v_17,ModelStates_17[0],ModelStates_17[1],p0_17 ,p1_17 ,ModelStates_17[8],ModelStates_17[9]);} if(SMemMat.boolModel[PIdx_17 +1*SMemMat.N]){CuInitModel_cad(v_17,ModelStates_17[2],ModelStates_17[9],ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +2*SMemMat.N]){CuInitModel_kca(v_17,ModelStates_17[3],p2_17 ,p3_17 ,p4_17 ,p5_17 ,ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +3*SMemMat.N]){CuInitModel_km(v_17,ModelStates_17[4],p6_17 ,p7_17 ,p8_17 ,p9_17 ,p10_17 );} if(SMemMat.boolModel[PIdx_17 +4*SMemMat.N]){CuInitModel_kv(v_17,ModelStates_17[5],p11_17 ,p12_17 ,p13_17 ,p14_17 ,p15_17 );} if(SMemMat.boolModel[PIdx_17 +5*SMemMat.N]){CuInitModel_na(v_17,ModelStates_17[6],ModelStates_17[7],p16_17 ,p17_17 ,p18_17 ,p19_17 ,p20_17 ,p21_17 ,p22_17 ,p23_17 ,p24_17 ,p25_17 ,p26_17 ,p27_17 );}  if(SMemMat.boolModel[PIdx_18 +0*SMemMat.N]){CuInitModel_ca(v_18,ModelStates_18[0],ModelStates_18[1],p0_18 ,p1_18 ,ModelStates_18[8],ModelStates_18[9]);} if(SMemMat.boolModel[PIdx_18 +1*SMemMat.N]){CuInitModel_cad(v_18,ModelStates_18[2],ModelStates_18[9],ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +2*SMemMat.N]){CuInitModel_kca(v_18,ModelStates_18[3],p2_18 ,p3_18 ,p4_18 ,p5_18 ,ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +3*SMemMat.N]){CuInitModel_km(v_18,ModelStates_18[4],p6_18 ,p7_18 ,p8_18 ,p9_18 ,p10_18 );} if(SMemMat.boolModel[PIdx_18 +4*SMemMat.N]){CuInitModel_kv(v_18,ModelStates_18[5],p11_18 ,p12_18 ,p13_18 ,p14_18 ,p15_18 );} if(SMemMat.boolModel[PIdx_18 +5*SMemMat.N]){CuInitModel_na(v_18,ModelStates_18[6],ModelStates_18[7],p16_18 ,p17_18 ,p18_18 ,p19_18 ,p20_18 ,p21_18 ,p22_18 ,p23_18 ,p24_18 ,p25_18 ,p26_18 ,p27_18 );}  if(SMemMat.boolModel[PIdx_19 +0*SMemMat.N]){CuInitModel_ca(v_19,ModelStates_19[0],ModelStates_19[1],p0_19 ,p1_19 ,ModelStates_19[8],ModelStates_19[9]);} if(SMemMat.boolModel[PIdx_19 +1*SMemMat.N]){CuInitModel_cad(v_19,ModelStates_19[2],ModelStates_19[9],ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +2*SMemMat.N]){CuInitModel_kca(v_19,ModelStates_19[3],p2_19 ,p3_19 ,p4_19 ,p5_19 ,ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +3*SMemMat.N]){CuInitModel_km(v_19,ModelStates_19[4],p6_19 ,p7_19 ,p8_19 ,p9_19 ,p10_19 );} if(SMemMat.boolModel[PIdx_19 +4*SMemMat.N]){CuInitModel_kv(v_19,ModelStates_19[5],p11_19 ,p12_19 ,p13_19 ,p14_19 ,p15_19 );} if(SMemMat.boolModel[PIdx_19 +5*SMemMat.N]){CuInitModel_na(v_19,ModelStates_19[6],ModelStates_19[7],p16_19 ,p17_19 ,p18_19 ,p19_19 ,p20_19 ,p21_19 ,p22_19 ,p23_19 ,p24_19 ,p25_19 ,p26_19 ,p27_19 );}  if(SMemMat.boolModel[PIdx_20 +0*SMemMat.N]){CuInitModel_ca(v_20,ModelStates_20[0],ModelStates_20[1],p0_20 ,p1_20 ,ModelStates_20[8],ModelStates_20[9]);} if(SMemMat.boolModel[PIdx_20 +1*SMemMat.N]){CuInitModel_cad(v_20,ModelStates_20[2],ModelStates_20[9],ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +2*SMemMat.N]){CuInitModel_kca(v_20,ModelStates_20[3],p2_20 ,p3_20 ,p4_20 ,p5_20 ,ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +3*SMemMat.N]){CuInitModel_km(v_20,ModelStates_20[4],p6_20 ,p7_20 ,p8_20 ,p9_20 ,p10_20 );} if(SMemMat.boolModel[PIdx_20 +4*SMemMat.N]){CuInitModel_kv(v_20,ModelStates_20[5],p11_20 ,p12_20 ,p13_20 ,p14_20 ,p15_20 );} if(SMemMat.boolModel[PIdx_20 +5*SMemMat.N]){CuInitModel_na(v_20,ModelStates_20[6],ModelStates_20[7],p16_20 ,p17_20 ,p18_20 ,p19_20 ,p20_20 ,p21_20 ,p22_20 ,p23_20 ,p24_20 ,p25_20 ,p26_20 ,p27_20 );}  if(SMemMat.boolModel[PIdx_21 +0*SMemMat.N]){CuInitModel_ca(v_21,ModelStates_21[0],ModelStates_21[1],p0_21 ,p1_21 ,ModelStates_21[8],ModelStates_21[9]);} if(SMemMat.boolModel[PIdx_21 +1*SMemMat.N]){CuInitModel_cad(v_21,ModelStates_21[2],ModelStates_21[9],ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +2*SMemMat.N]){CuInitModel_kca(v_21,ModelStates_21[3],p2_21 ,p3_21 ,p4_21 ,p5_21 ,ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +3*SMemMat.N]){CuInitModel_km(v_21,ModelStates_21[4],p6_21 ,p7_21 ,p8_21 ,p9_21 ,p10_21 );} if(SMemMat.boolModel[PIdx_21 +4*SMemMat.N]){CuInitModel_kv(v_21,ModelStates_21[5],p11_21 ,p12_21 ,p13_21 ,p14_21 ,p15_21 );} if(SMemMat.boolModel[PIdx_21 +5*SMemMat.N]){CuInitModel_na(v_21,ModelStates_21[6],ModelStates_21[7],p16_21 ,p17_21 ,p18_21 ,p19_21 ,p20_21 ,p21_21 ,p22_21 ,p23_21 ,p24_21 ,p25_21 ,p26_21 ,p27_21 );}  if(SMemMat.boolModel[PIdx_22 +0*SMemMat.N]){CuInitModel_ca(v_22,ModelStates_22[0],ModelStates_22[1],p0_22 ,p1_22 ,ModelStates_22[8],ModelStates_22[9]);} if(SMemMat.boolModel[PIdx_22 +1*SMemMat.N]){CuInitModel_cad(v_22,ModelStates_22[2],ModelStates_22[9],ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +2*SMemMat.N]){CuInitModel_kca(v_22,ModelStates_22[3],p2_22 ,p3_22 ,p4_22 ,p5_22 ,ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +3*SMemMat.N]){CuInitModel_km(v_22,ModelStates_22[4],p6_22 ,p7_22 ,p8_22 ,p9_22 ,p10_22 );} if(SMemMat.boolModel[PIdx_22 +4*SMemMat.N]){CuInitModel_kv(v_22,ModelStates_22[5],p11_22 ,p12_22 ,p13_22 ,p14_22 ,p15_22 );} if(SMemMat.boolModel[PIdx_22 +5*SMemMat.N]){CuInitModel_na(v_22,ModelStates_22[6],ModelStates_22[7],p16_22 ,p17_22 ,p18_22 ,p19_22 ,p20_22 ,p21_22 ,p22_22 ,p23_22 ,p24_22 ,p25_22 ,p26_22 ,p27_22 );}  if(SMemMat.boolModel[PIdx_23 +0*SMemMat.N]){CuInitModel_ca(v_23,ModelStates_23[0],ModelStates_23[1],p0_23 ,p1_23 ,ModelStates_23[8],ModelStates_23[9]);} if(SMemMat.boolModel[PIdx_23 +1*SMemMat.N]){CuInitModel_cad(v_23,ModelStates_23[2],ModelStates_23[9],ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +2*SMemMat.N]){CuInitModel_kca(v_23,ModelStates_23[3],p2_23 ,p3_23 ,p4_23 ,p5_23 ,ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +3*SMemMat.N]){CuInitModel_km(v_23,ModelStates_23[4],p6_23 ,p7_23 ,p8_23 ,p9_23 ,p10_23 );} if(SMemMat.boolModel[PIdx_23 +4*SMemMat.N]){CuInitModel_kv(v_23,ModelStates_23[5],p11_23 ,p12_23 ,p13_23 ,p14_23 ,p15_23 );} if(SMemMat.boolModel[PIdx_23 +5*SMemMat.N]){CuInitModel_na(v_23,ModelStates_23[6],ModelStates_23[7],p16_23 ,p17_23 ,p18_23 ,p19_23 ,p20_23 ,p21_23 ,p22_23 ,p23_23 ,p24_23 ,p25_23 ,p26_23 ,p27_23 );}  if(SMemMat.boolModel[PIdx_24 +0*SMemMat.N]){CuInitModel_ca(v_24,ModelStates_24[0],ModelStates_24[1],p0_24 ,p1_24 ,ModelStates_24[8],ModelStates_24[9]);} if(SMemMat.boolModel[PIdx_24 +1*SMemMat.N]){CuInitModel_cad(v_24,ModelStates_24[2],ModelStates_24[9],ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +2*SMemMat.N]){CuInitModel_kca(v_24,ModelStates_24[3],p2_24 ,p3_24 ,p4_24 ,p5_24 ,ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +3*SMemMat.N]){CuInitModel_km(v_24,ModelStates_24[4],p6_24 ,p7_24 ,p8_24 ,p9_24 ,p10_24 );} if(SMemMat.boolModel[PIdx_24 +4*SMemMat.N]){CuInitModel_kv(v_24,ModelStates_24[5],p11_24 ,p12_24 ,p13_24 ,p14_24 ,p15_24 );} if(SMemMat.boolModel[PIdx_24 +5*SMemMat.N]){CuInitModel_na(v_24,ModelStates_24[6],ModelStates_24[7],p16_24 ,p17_24 ,p18_24 ,p19_24 ,p20_24 ,p21_24 ,p22_24 ,p23_24 ,p24_24 ,p25_24 ,p26_24 ,p27_24 );}  if(SMemMat.boolModel[PIdx_25 +0*SMemMat.N]){CuInitModel_ca(v_25,ModelStates_25[0],ModelStates_25[1],p0_25 ,p1_25 ,ModelStates_25[8],ModelStates_25[9]);} if(SMemMat.boolModel[PIdx_25 +1*SMemMat.N]){CuInitModel_cad(v_25,ModelStates_25[2],ModelStates_25[9],ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +2*SMemMat.N]){CuInitModel_kca(v_25,ModelStates_25[3],p2_25 ,p3_25 ,p4_25 ,p5_25 ,ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +3*SMemMat.N]){CuInitModel_km(v_25,ModelStates_25[4],p6_25 ,p7_25 ,p8_25 ,p9_25 ,p10_25 );} if(SMemMat.boolModel[PIdx_25 +4*SMemMat.N]){CuInitModel_kv(v_25,ModelStates_25[5],p11_25 ,p12_25 ,p13_25 ,p14_25 ,p15_25 );} if(SMemMat.boolModel[PIdx_25 +5*SMemMat.N]){CuInitModel_na(v_25,ModelStates_25[6],ModelStates_25[7],p16_25 ,p17_25 ,p18_25 ,p19_25 ,p20_25 ,p21_25 ,p22_25 ,p23_25 ,p24_25 ,p25_25 ,p26_25 ,p27_25 );}  if(SMemMat.boolModel[PIdx_26 +0*SMemMat.N]){CuInitModel_ca(v_26,ModelStates_26[0],ModelStates_26[1],p0_26 ,p1_26 ,ModelStates_26[8],ModelStates_26[9]);} if(SMemMat.boolModel[PIdx_26 +1*SMemMat.N]){CuInitModel_cad(v_26,ModelStates_26[2],ModelStates_26[9],ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +2*SMemMat.N]){CuInitModel_kca(v_26,ModelStates_26[3],p2_26 ,p3_26 ,p4_26 ,p5_26 ,ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +3*SMemMat.N]){CuInitModel_km(v_26,ModelStates_26[4],p6_26 ,p7_26 ,p8_26 ,p9_26 ,p10_26 );} if(SMemMat.boolModel[PIdx_26 +4*SMemMat.N]){CuInitModel_kv(v_26,ModelStates_26[5],p11_26 ,p12_26 ,p13_26 ,p14_26 ,p15_26 );} if(SMemMat.boolModel[PIdx_26 +5*SMemMat.N]){CuInitModel_na(v_26,ModelStates_26[6],ModelStates_26[7],p16_26 ,p17_26 ,p18_26 ,p19_26 ,p20_26 ,p21_26 ,p22_26 ,p23_26 ,p24_26 ,p25_26 ,p26_26 ,p27_26 );}
	// Per STIMULUS
	// MYFTYPEs
	int Nt=ceil(sim.TFinal/sim.dt);
	// For solving the matrix
#ifdef BKSUB2
	MYDTYPE PerStimulus=((InMat.N+2)*2+InMat.N+WARPSIZE)*sizeof(MYFTYPE);
#endif
#ifdef BKSUB1
	MYDTYPE PerStimulus=((InMat.N+2)*2+InMat.N+WARPSIZE)*sizeof(MYFTYPE);
#endif
	offset+=PerStimulus*threadIdx.y;
	MYFTYPE *uHP,*bHP,*PX,*PF, *Vs;
	uHP = (MYFTYPE*) &smem[offset];
	offset+=(InMat.N+2)*sizeof(MYFTYPE);
	bHP = (MYFTYPE*) &smem[offset];
	offset+=(InMat.N+2)*sizeof(MYFTYPE);
	Vs = (MYFTYPE*) &smem[offset];
	offset+=InMat.N*sizeof(MYFTYPE);
	// Vs[PIdx_3]=V[PIdx_3];
#define THISCOMMANDHEREE13(VARILP) Vs[PIdx_ ## VARILP ]=V[PIdx_ ## VARILP ];
	Vs[PIdx_1 ]=V[PIdx_1 ];Vs[PIdx_2 ]=V[PIdx_2 ];Vs[PIdx_3 ]=V[PIdx_3 ];Vs[PIdx_4 ]=V[PIdx_4 ];Vs[PIdx_5 ]=V[PIdx_5 ];Vs[PIdx_6 ]=V[PIdx_6 ];Vs[PIdx_7 ]=V[PIdx_7 ];Vs[PIdx_8 ]=V[PIdx_8 ];Vs[PIdx_9 ]=V[PIdx_9 ];Vs[PIdx_10 ]=V[PIdx_10 ];Vs[PIdx_11 ]=V[PIdx_11 ];Vs[PIdx_12 ]=V[PIdx_12 ];Vs[PIdx_13 ]=V[PIdx_13 ];Vs[PIdx_14 ]=V[PIdx_14 ];Vs[PIdx_15 ]=V[PIdx_15 ];Vs[PIdx_16 ]=V[PIdx_16 ];Vs[PIdx_17 ]=V[PIdx_17 ];Vs[PIdx_18 ]=V[PIdx_18 ];Vs[PIdx_19 ]=V[PIdx_19 ];Vs[PIdx_20 ]=V[PIdx_20 ];Vs[PIdx_21 ]=V[PIdx_21 ];Vs[PIdx_22 ]=V[PIdx_22 ];Vs[PIdx_23 ]=V[PIdx_23 ];Vs[PIdx_24 ]=V[PIdx_24 ];Vs[PIdx_25 ]=V[PIdx_25 ];Vs[PIdx_26 ]=V[PIdx_26 ];
	PX=bHP;
	PF=uHP;
	MYFTYPE *SMemVHot;
	SMemVHot = (MYFTYPE*) &smem[offset];
	offset+=WARPSIZE*sizeof(MYFTYPE);
	// MYDTYPE parentIndex_3; // MYDTYPE Eidx_3; // Eidx_3 = SMemMat.N-PIdx_3;
#define THISCOMMANDHEREE14(VARILP) MYDTYPE parentIndex_ ## VARILP ; MYDTYPE Eidx_ ## VARILP ; Eidx_ ## VARILP = SMemMat.N-PIdx_ ## VARILP ;
	MYDTYPE parentIndex_1 ; MYDTYPE Eidx_1 ; Eidx_1 = SMemMat.N-PIdx_1 ;MYDTYPE parentIndex_2 ; MYDTYPE Eidx_2 ; Eidx_2 = SMemMat.N-PIdx_2 ;MYDTYPE parentIndex_3 ; MYDTYPE Eidx_3 ; Eidx_3 = SMemMat.N-PIdx_3 ;MYDTYPE parentIndex_4 ; MYDTYPE Eidx_4 ; Eidx_4 = SMemMat.N-PIdx_4 ;MYDTYPE parentIndex_5 ; MYDTYPE Eidx_5 ; Eidx_5 = SMemMat.N-PIdx_5 ;MYDTYPE parentIndex_6 ; MYDTYPE Eidx_6 ; Eidx_6 = SMemMat.N-PIdx_6 ;MYDTYPE parentIndex_7 ; MYDTYPE Eidx_7 ; Eidx_7 = SMemMat.N-PIdx_7 ;MYDTYPE parentIndex_8 ; MYDTYPE Eidx_8 ; Eidx_8 = SMemMat.N-PIdx_8 ;MYDTYPE parentIndex_9 ; MYDTYPE Eidx_9 ; Eidx_9 = SMemMat.N-PIdx_9 ;MYDTYPE parentIndex_10 ; MYDTYPE Eidx_10 ; Eidx_10 = SMemMat.N-PIdx_10 ;MYDTYPE parentIndex_11 ; MYDTYPE Eidx_11 ; Eidx_11 = SMemMat.N-PIdx_11 ;MYDTYPE parentIndex_12 ; MYDTYPE Eidx_12 ; Eidx_12 = SMemMat.N-PIdx_12 ;MYDTYPE parentIndex_13 ; MYDTYPE Eidx_13 ; Eidx_13 = SMemMat.N-PIdx_13 ;MYDTYPE parentIndex_14 ; MYDTYPE Eidx_14 ; Eidx_14 = SMemMat.N-PIdx_14 ;MYDTYPE parentIndex_15 ; MYDTYPE Eidx_15 ; Eidx_15 = SMemMat.N-PIdx_15 ;MYDTYPE parentIndex_16 ; MYDTYPE Eidx_16 ; Eidx_16 = SMemMat.N-PIdx_16 ;MYDTYPE parentIndex_17 ; MYDTYPE Eidx_17 ; Eidx_17 = SMemMat.N-PIdx_17 ;MYDTYPE parentIndex_18 ; MYDTYPE Eidx_18 ; Eidx_18 = SMemMat.N-PIdx_18 ;MYDTYPE parentIndex_19 ; MYDTYPE Eidx_19 ; Eidx_19 = SMemMat.N-PIdx_19 ;MYDTYPE parentIndex_20 ; MYDTYPE Eidx_20 ; Eidx_20 = SMemMat.N-PIdx_20 ;MYDTYPE parentIndex_21 ; MYDTYPE Eidx_21 ; Eidx_21 = SMemMat.N-PIdx_21 ;MYDTYPE parentIndex_22 ; MYDTYPE Eidx_22 ; Eidx_22 = SMemMat.N-PIdx_22 ;MYDTYPE parentIndex_23 ; MYDTYPE Eidx_23 ; Eidx_23 = SMemMat.N-PIdx_23 ;MYDTYPE parentIndex_24 ; MYDTYPE Eidx_24 ; Eidx_24 = SMemMat.N-PIdx_24 ;MYDTYPE parentIndex_25 ; MYDTYPE Eidx_25 ; Eidx_25 = SMemMat.N-PIdx_25 ;MYDTYPE parentIndex_26 ; MYDTYPE Eidx_26 ; Eidx_26 = SMemMat.N-PIdx_26 ;
	// RRRXXX This probably should be in ILP too!
	if(Eidx_1>SMemMat.N-1){
		Eidx_1=SMemMat.N-1;
	}
	// parentIndex_3 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_3];
#define THISCOMMANDHEREE15(VARILP) parentIndex_ ## VARILP =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_ ## VARILP ];
	parentIndex_1 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_1 ];parentIndex_2 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_2 ];parentIndex_3 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_3 ];parentIndex_4 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_4 ];parentIndex_5 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_5 ];parentIndex_6 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_6 ];parentIndex_7 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_7 ];parentIndex_8 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_8 ];parentIndex_9 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_9 ];parentIndex_10 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_10 ];parentIndex_11 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_11 ];parentIndex_12 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_12 ];parentIndex_13 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_13 ];parentIndex_14 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_14 ];parentIndex_15 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_15 ];parentIndex_16 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_16 ];parentIndex_17 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_17 ];parentIndex_18 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_18 ];parentIndex_19 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_19 ];parentIndex_20 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_20 ];parentIndex_21 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_21 ];parentIndex_22 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_22 ];parentIndex_23 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_23 ];parentIndex_24 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_24 ];parentIndex_25 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_25 ];parentIndex_26 =SMemMat.N-SMemMat.Ks[SMemMat.N-PIdx_26 ];
	// MYFTYPE rhs_3,D_3,gModel_3,StimCurrent_3,dv_3;
#define THISCOMMANDHEREE16(VARILP) MYFTYPE rhs_ ## VARILP ,D_ ## VARILP ,gModel_ ## VARILP ,StimCurrent_ ## VARILP ,dv_ ## VARILP ;
	MYFTYPE rhs_1 ,D_1 ,gModel_1 ,StimCurrent_1 ,dv_1 ;MYFTYPE rhs_2 ,D_2 ,gModel_2 ,StimCurrent_2 ,dv_2 ;MYFTYPE rhs_3 ,D_3 ,gModel_3 ,StimCurrent_3 ,dv_3 ;MYFTYPE rhs_4 ,D_4 ,gModel_4 ,StimCurrent_4 ,dv_4 ;MYFTYPE rhs_5 ,D_5 ,gModel_5 ,StimCurrent_5 ,dv_5 ;MYFTYPE rhs_6 ,D_6 ,gModel_6 ,StimCurrent_6 ,dv_6 ;MYFTYPE rhs_7 ,D_7 ,gModel_7 ,StimCurrent_7 ,dv_7 ;MYFTYPE rhs_8 ,D_8 ,gModel_8 ,StimCurrent_8 ,dv_8 ;MYFTYPE rhs_9 ,D_9 ,gModel_9 ,StimCurrent_9 ,dv_9 ;MYFTYPE rhs_10 ,D_10 ,gModel_10 ,StimCurrent_10 ,dv_10 ;MYFTYPE rhs_11 ,D_11 ,gModel_11 ,StimCurrent_11 ,dv_11 ;MYFTYPE rhs_12 ,D_12 ,gModel_12 ,StimCurrent_12 ,dv_12 ;MYFTYPE rhs_13 ,D_13 ,gModel_13 ,StimCurrent_13 ,dv_13 ;MYFTYPE rhs_14 ,D_14 ,gModel_14 ,StimCurrent_14 ,dv_14 ;MYFTYPE rhs_15 ,D_15 ,gModel_15 ,StimCurrent_15 ,dv_15 ;MYFTYPE rhs_16 ,D_16 ,gModel_16 ,StimCurrent_16 ,dv_16 ;MYFTYPE rhs_17 ,D_17 ,gModel_17 ,StimCurrent_17 ,dv_17 ;MYFTYPE rhs_18 ,D_18 ,gModel_18 ,StimCurrent_18 ,dv_18 ;MYFTYPE rhs_19 ,D_19 ,gModel_19 ,StimCurrent_19 ,dv_19 ;MYFTYPE rhs_20 ,D_20 ,gModel_20 ,StimCurrent_20 ,dv_20 ;MYFTYPE rhs_21 ,D_21 ,gModel_21 ,StimCurrent_21 ,dv_21 ;MYFTYPE rhs_22 ,D_22 ,gModel_22 ,StimCurrent_22 ,dv_22 ;MYFTYPE rhs_23 ,D_23 ,gModel_23 ,StimCurrent_23 ,dv_23 ;MYFTYPE rhs_24 ,D_24 ,gModel_24 ,StimCurrent_24 ,dv_24 ;MYFTYPE rhs_25 ,D_25 ,gModel_25 ,StimCurrent_25 ,dv_25 ;MYFTYPE rhs_26 ,D_26 ,gModel_26 ,StimCurrent_26 ,dv_26 ;
	for(int i=0;i<Nt;i++) {
		t+=0.5*sim.dt;
		
		if((i%(WARPSIZE)==0)&&i>0){
			VHotGlobal[threadIdx.y*Nt+(i-WARPSIZE)+PIdx_1]=SMemVHot[PIdx_1];
		}
		SMemVHot[i%(WARPSIZE)]=Vs[stimLoc];
		// rhs_3=0; // D_3=0;// StimCurrent_3=0;
#define THISCOMMANDHEREE17(VARILP) rhs_ ## VARILP =0; D_ ## VARILP =0; sumCurrents_ ## VARILP=0; sumConductivity_ ## VARILP=0; sumCurrentsDv_ ## VARILP=0; sumConductivityDv_ ## VARILP=0;StimCurrent_ ## VARILP =0;
	rhs_1 =0; D_1 =0; sumCurrents_1=0; sumConductivity_1=0; sumCurrentsDv_1=0; sumConductivityDv_1=0;StimCurrent_1 =0;rhs_2 =0; D_2 =0; sumCurrents_2=0; sumConductivity_2=0; sumCurrentsDv_2=0; sumConductivityDv_2=0;StimCurrent_2 =0;rhs_3 =0; D_3 =0; sumCurrents_3=0; sumConductivity_3=0; sumCurrentsDv_3=0; sumConductivityDv_3=0;StimCurrent_3 =0;rhs_4 =0; D_4 =0; sumCurrents_4=0; sumConductivity_4=0; sumCurrentsDv_4=0; sumConductivityDv_4=0;StimCurrent_4 =0;rhs_5 =0; D_5 =0; sumCurrents_5=0; sumConductivity_5=0; sumCurrentsDv_5=0; sumConductivityDv_5=0;StimCurrent_5 =0;rhs_6 =0; D_6 =0; sumCurrents_6=0; sumConductivity_6=0; sumCurrentsDv_6=0; sumConductivityDv_6=0;StimCurrent_6 =0;rhs_7 =0; D_7 =0; sumCurrents_7=0; sumConductivity_7=0; sumCurrentsDv_7=0; sumConductivityDv_7=0;StimCurrent_7 =0;rhs_8 =0; D_8 =0; sumCurrents_8=0; sumConductivity_8=0; sumCurrentsDv_8=0; sumConductivityDv_8=0;StimCurrent_8 =0;rhs_9 =0; D_9 =0; sumCurrents_9=0; sumConductivity_9=0; sumCurrentsDv_9=0; sumConductivityDv_9=0;StimCurrent_9 =0;rhs_10 =0; D_10 =0; sumCurrents_10=0; sumConductivity_10=0; sumCurrentsDv_10=0; sumConductivityDv_10=0;StimCurrent_10 =0;rhs_11 =0; D_11 =0; sumCurrents_11=0; sumConductivity_11=0; sumCurrentsDv_11=0; sumConductivityDv_11=0;StimCurrent_11 =0;rhs_12 =0; D_12 =0; sumCurrents_12=0; sumConductivity_12=0; sumCurrentsDv_12=0; sumConductivityDv_12=0;StimCurrent_12 =0;rhs_13 =0; D_13 =0; sumCurrents_13=0; sumConductivity_13=0; sumCurrentsDv_13=0; sumConductivityDv_13=0;StimCurrent_13 =0;rhs_14 =0; D_14 =0; sumCurrents_14=0; sumConductivity_14=0; sumCurrentsDv_14=0; sumConductivityDv_14=0;StimCurrent_14 =0;rhs_15 =0; D_15 =0; sumCurrents_15=0; sumConductivity_15=0; sumCurrentsDv_15=0; sumConductivityDv_15=0;StimCurrent_15 =0;rhs_16 =0; D_16 =0; sumCurrents_16=0; sumConductivity_16=0; sumCurrentsDv_16=0; sumConductivityDv_16=0;StimCurrent_16 =0;rhs_17 =0; D_17 =0; sumCurrents_17=0; sumConductivity_17=0; sumCurrentsDv_17=0; sumConductivityDv_17=0;StimCurrent_17 =0;rhs_18 =0; D_18 =0; sumCurrents_18=0; sumConductivity_18=0; sumCurrentsDv_18=0; sumConductivityDv_18=0;StimCurrent_18 =0;rhs_19 =0; D_19 =0; sumCurrents_19=0; sumConductivity_19=0; sumCurrentsDv_19=0; sumConductivityDv_19=0;StimCurrent_19 =0;rhs_20 =0; D_20 =0; sumCurrents_20=0; sumConductivity_20=0; sumCurrentsDv_20=0; sumConductivityDv_20=0;StimCurrent_20 =0;rhs_21 =0; D_21 =0; sumCurrents_21=0; sumConductivity_21=0; sumCurrentsDv_21=0; sumConductivityDv_21=0;StimCurrent_21 =0;rhs_22 =0; D_22 =0; sumCurrents_22=0; sumConductivity_22=0; sumCurrentsDv_22=0; sumConductivityDv_22=0;StimCurrent_22 =0;rhs_23 =0; D_23 =0; sumCurrents_23=0; sumConductivity_23=0; sumCurrentsDv_23=0; sumConductivityDv_23=0;StimCurrent_23 =0;rhs_24 =0; D_24 =0; sumCurrents_24=0; sumConductivity_24=0; sumCurrentsDv_24=0; sumConductivityDv_24=0;StimCurrent_24 =0;rhs_25 =0; D_25 =0; sumCurrents_25=0; sumConductivity_25=0; sumCurrentsDv_25=0; sumConductivityDv_25=0;StimCurrent_25 =0;rhs_26 =0; D_26 =0; sumCurrents_26=0; sumConductivity_26=0; sumCurrentsDv_26=0; sumConductivityDv_26=0;StimCurrent_26 =0;
		// Before matrix
		// if(t>=stimDel && t<stimDel+stimDur && PIdx_3 == stimLoc){StimCurrent_3 = 100*stimAmp/stimArea;}
#define THISCOMMANDHEREE18(VARILP) if(t>=stimDel && t<stimDel+stimDur && PIdx_ ## VARILP  == stimLoc){StimCurrent_ ## VARILP  = 100*stimAmp/stimArea;}
	if(t>=stimDel && t<stimDel+stimDur && PIdx_1  == stimLoc){StimCurrent_1  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_2  == stimLoc){StimCurrent_2  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_3  == stimLoc){StimCurrent_3  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_4  == stimLoc){StimCurrent_4  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_5  == stimLoc){StimCurrent_5  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_6  == stimLoc){StimCurrent_6  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_7  == stimLoc){StimCurrent_7  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_8  == stimLoc){StimCurrent_8  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_9  == stimLoc){StimCurrent_9  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_10  == stimLoc){StimCurrent_10  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_11  == stimLoc){StimCurrent_11  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_12  == stimLoc){StimCurrent_12  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_13  == stimLoc){StimCurrent_13  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_14  == stimLoc){StimCurrent_14  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_15  == stimLoc){StimCurrent_15  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_16  == stimLoc){StimCurrent_16  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_17  == stimLoc){StimCurrent_17  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_18  == stimLoc){StimCurrent_18  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_19  == stimLoc){StimCurrent_19  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_20  == stimLoc){StimCurrent_20  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_21  == stimLoc){StimCurrent_21  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_22  == stimLoc){StimCurrent_22  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_23  == stimLoc){StimCurrent_23  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_24  == stimLoc){StimCurrent_24  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_25  == stimLoc){StimCurrent_25  = 100*stimAmp/stimArea;}if(t>=stimDel && t<stimDel+stimDur && PIdx_26  == stimLoc){StimCurrent_26  = 100*stimAmp/stimArea;}

#ifdef HH
	//#define THISCOMMANDHEREE19(VARILP) if(SMemMat.boolModel[PIdx_ ## VARILP ]==1) {CuBreakpointModel_kv(sumCurrentsDv_ ## VARILP , sumConductivityDv_ ## VARILP ,v_ ## VARILP +0.001 ,ModelStates_ ## VARILP [0], p1_ ## VARILP ,p2_ ## VARILP ,p3_ ## VARILP ,p4_ ## VARILP ,p5_ ## VARILP);} if(SMemMat.boolModel[PIdx_ ## VARILP+SMemMat.N ]==1) {CuBreakpointModel_na(sumCurrentsDv_ ## VARILP , sumConductivityDv_ ## VARILP ,v_ ## VARILP +0.001 ,ModelStates_ ## VARILP [1],ModelStates_ ## VARILP [2], p6_ ## VARILP ,p7_ ## VARILP ,p8_ ## VARILP ,p9_ ## VARILP ,p10_ ## VARILP,p11_ ## VARILP ,p12_ ## VARILP ,p13_ ## VARILP ,p14_ ## VARILP ,p15_ ## VARILP,p16_ ## VARILP ,p17_ ## VARILP);}
	 if(SMemMat.boolModel[PIdx_1 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[0],ModelStates_1[1],p0_1 ,p1_1 ,ModelStates_1[8],ModelStates_1[9]);} if(SMemMat.boolModel[PIdx_1 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[3],p2_1 ,p3_1 ,p4_1 ,p5_1 ,ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[4],p6_1 ,p7_1 ,p8_1 ,p9_1 ,p10_1 );} if(SMemMat.boolModel[PIdx_1 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[5],p11_1 ,p12_1 ,p13_1 ,p14_1 ,p15_1 );} if(SMemMat.boolModel[PIdx_1 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[6],ModelStates_1[7],p16_1 ,p17_1 ,p18_1 ,p19_1 ,p20_1 ,p21_1 ,p22_1 ,p23_1 ,p24_1 ,p25_1 ,p26_1 ,p27_1 );} if(SMemMat.boolModel[PIdx_2 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[0],ModelStates_2[1],p0_2 ,p1_2 ,ModelStates_2[8],ModelStates_2[9]);} if(SMemMat.boolModel[PIdx_2 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[3],p2_2 ,p3_2 ,p4_2 ,p5_2 ,ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[4],p6_2 ,p7_2 ,p8_2 ,p9_2 ,p10_2 );} if(SMemMat.boolModel[PIdx_2 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[5],p11_2 ,p12_2 ,p13_2 ,p14_2 ,p15_2 );} if(SMemMat.boolModel[PIdx_2 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[6],ModelStates_2[7],p16_2 ,p17_2 ,p18_2 ,p19_2 ,p20_2 ,p21_2 ,p22_2 ,p23_2 ,p24_2 ,p25_2 ,p26_2 ,p27_2 );} if(SMemMat.boolModel[PIdx_3 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[0],ModelStates_3[1],p0_3 ,p1_3 ,ModelStates_3[8],ModelStates_3[9]);} if(SMemMat.boolModel[PIdx_3 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[3],p2_3 ,p3_3 ,p4_3 ,p5_3 ,ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[4],p6_3 ,p7_3 ,p8_3 ,p9_3 ,p10_3 );} if(SMemMat.boolModel[PIdx_3 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[5],p11_3 ,p12_3 ,p13_3 ,p14_3 ,p15_3 );} if(SMemMat.boolModel[PIdx_3 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[6],ModelStates_3[7],p16_3 ,p17_3 ,p18_3 ,p19_3 ,p20_3 ,p21_3 ,p22_3 ,p23_3 ,p24_3 ,p25_3 ,p26_3 ,p27_3 );} if(SMemMat.boolModel[PIdx_4 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[0],ModelStates_4[1],p0_4 ,p1_4 ,ModelStates_4[8],ModelStates_4[9]);} if(SMemMat.boolModel[PIdx_4 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[3],p2_4 ,p3_4 ,p4_4 ,p5_4 ,ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[4],p6_4 ,p7_4 ,p8_4 ,p9_4 ,p10_4 );} if(SMemMat.boolModel[PIdx_4 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[5],p11_4 ,p12_4 ,p13_4 ,p14_4 ,p15_4 );} if(SMemMat.boolModel[PIdx_4 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[6],ModelStates_4[7],p16_4 ,p17_4 ,p18_4 ,p19_4 ,p20_4 ,p21_4 ,p22_4 ,p23_4 ,p24_4 ,p25_4 ,p26_4 ,p27_4 );} if(SMemMat.boolModel[PIdx_5 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[0],ModelStates_5[1],p0_5 ,p1_5 ,ModelStates_5[8],ModelStates_5[9]);} if(SMemMat.boolModel[PIdx_5 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[3],p2_5 ,p3_5 ,p4_5 ,p5_5 ,ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[4],p6_5 ,p7_5 ,p8_5 ,p9_5 ,p10_5 );} if(SMemMat.boolModel[PIdx_5 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[5],p11_5 ,p12_5 ,p13_5 ,p14_5 ,p15_5 );} if(SMemMat.boolModel[PIdx_5 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[6],ModelStates_5[7],p16_5 ,p17_5 ,p18_5 ,p19_5 ,p20_5 ,p21_5 ,p22_5 ,p23_5 ,p24_5 ,p25_5 ,p26_5 ,p27_5 );} if(SMemMat.boolModel[PIdx_6 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[0],ModelStates_6[1],p0_6 ,p1_6 ,ModelStates_6[8],ModelStates_6[9]);} if(SMemMat.boolModel[PIdx_6 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[3],p2_6 ,p3_6 ,p4_6 ,p5_6 ,ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[4],p6_6 ,p7_6 ,p8_6 ,p9_6 ,p10_6 );} if(SMemMat.boolModel[PIdx_6 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[5],p11_6 ,p12_6 ,p13_6 ,p14_6 ,p15_6 );} if(SMemMat.boolModel[PIdx_6 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[6],ModelStates_6[7],p16_6 ,p17_6 ,p18_6 ,p19_6 ,p20_6 ,p21_6 ,p22_6 ,p23_6 ,p24_6 ,p25_6 ,p26_6 ,p27_6 );} if(SMemMat.boolModel[PIdx_7 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[0],ModelStates_7[1],p0_7 ,p1_7 ,ModelStates_7[8],ModelStates_7[9]);} if(SMemMat.boolModel[PIdx_7 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[3],p2_7 ,p3_7 ,p4_7 ,p5_7 ,ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[4],p6_7 ,p7_7 ,p8_7 ,p9_7 ,p10_7 );} if(SMemMat.boolModel[PIdx_7 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[5],p11_7 ,p12_7 ,p13_7 ,p14_7 ,p15_7 );} if(SMemMat.boolModel[PIdx_7 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[6],ModelStates_7[7],p16_7 ,p17_7 ,p18_7 ,p19_7 ,p20_7 ,p21_7 ,p22_7 ,p23_7 ,p24_7 ,p25_7 ,p26_7 ,p27_7 );} if(SMemMat.boolModel[PIdx_8 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[0],ModelStates_8[1],p0_8 ,p1_8 ,ModelStates_8[8],ModelStates_8[9]);} if(SMemMat.boolModel[PIdx_8 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[3],p2_8 ,p3_8 ,p4_8 ,p5_8 ,ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[4],p6_8 ,p7_8 ,p8_8 ,p9_8 ,p10_8 );} if(SMemMat.boolModel[PIdx_8 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[5],p11_8 ,p12_8 ,p13_8 ,p14_8 ,p15_8 );} if(SMemMat.boolModel[PIdx_8 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[6],ModelStates_8[7],p16_8 ,p17_8 ,p18_8 ,p19_8 ,p20_8 ,p21_8 ,p22_8 ,p23_8 ,p24_8 ,p25_8 ,p26_8 ,p27_8 );} if(SMemMat.boolModel[PIdx_9 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[0],ModelStates_9[1],p0_9 ,p1_9 ,ModelStates_9[8],ModelStates_9[9]);} if(SMemMat.boolModel[PIdx_9 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[3],p2_9 ,p3_9 ,p4_9 ,p5_9 ,ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[4],p6_9 ,p7_9 ,p8_9 ,p9_9 ,p10_9 );} if(SMemMat.boolModel[PIdx_9 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[5],p11_9 ,p12_9 ,p13_9 ,p14_9 ,p15_9 );} if(SMemMat.boolModel[PIdx_9 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[6],ModelStates_9[7],p16_9 ,p17_9 ,p18_9 ,p19_9 ,p20_9 ,p21_9 ,p22_9 ,p23_9 ,p24_9 ,p25_9 ,p26_9 ,p27_9 );} if(SMemMat.boolModel[PIdx_10 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[0],ModelStates_10[1],p0_10 ,p1_10 ,ModelStates_10[8],ModelStates_10[9]);} if(SMemMat.boolModel[PIdx_10 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[3],p2_10 ,p3_10 ,p4_10 ,p5_10 ,ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[4],p6_10 ,p7_10 ,p8_10 ,p9_10 ,p10_10 );} if(SMemMat.boolModel[PIdx_10 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[5],p11_10 ,p12_10 ,p13_10 ,p14_10 ,p15_10 );} if(SMemMat.boolModel[PIdx_10 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[6],ModelStates_10[7],p16_10 ,p17_10 ,p18_10 ,p19_10 ,p20_10 ,p21_10 ,p22_10 ,p23_10 ,p24_10 ,p25_10 ,p26_10 ,p27_10 );} if(SMemMat.boolModel[PIdx_11 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[0],ModelStates_11[1],p0_11 ,p1_11 ,ModelStates_11[8],ModelStates_11[9]);} if(SMemMat.boolModel[PIdx_11 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[3],p2_11 ,p3_11 ,p4_11 ,p5_11 ,ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[4],p6_11 ,p7_11 ,p8_11 ,p9_11 ,p10_11 );} if(SMemMat.boolModel[PIdx_11 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[5],p11_11 ,p12_11 ,p13_11 ,p14_11 ,p15_11 );} if(SMemMat.boolModel[PIdx_11 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[6],ModelStates_11[7],p16_11 ,p17_11 ,p18_11 ,p19_11 ,p20_11 ,p21_11 ,p22_11 ,p23_11 ,p24_11 ,p25_11 ,p26_11 ,p27_11 );} if(SMemMat.boolModel[PIdx_12 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[0],ModelStates_12[1],p0_12 ,p1_12 ,ModelStates_12[8],ModelStates_12[9]);} if(SMemMat.boolModel[PIdx_12 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[3],p2_12 ,p3_12 ,p4_12 ,p5_12 ,ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[4],p6_12 ,p7_12 ,p8_12 ,p9_12 ,p10_12 );} if(SMemMat.boolModel[PIdx_12 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[5],p11_12 ,p12_12 ,p13_12 ,p14_12 ,p15_12 );} if(SMemMat.boolModel[PIdx_12 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[6],ModelStates_12[7],p16_12 ,p17_12 ,p18_12 ,p19_12 ,p20_12 ,p21_12 ,p22_12 ,p23_12 ,p24_12 ,p25_12 ,p26_12 ,p27_12 );} if(SMemMat.boolModel[PIdx_13 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_13 , sumConductivityDv_13 ,v_13 +0.001,ModelStates_13[0],ModelStates_13[1],p0_13 ,p1_13 ,ModelStates_13[8],ModelStates_13[9]);} if(SMemMat.boolModel[PIdx_13 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_13 , sumConductivityDv_13 ,v_13 +0.001,ModelStates_13[2],ModelStates_13[9],ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_13 , sumConductivityDv_13 ,v_13 +0.001,ModelStates_13[3],p2_13 ,p3_13 ,p4_13 ,p5_13 ,ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_13 , sumConductivityDv_13 ,v_13 +0.001,ModelStates_13[4],p6_13 ,p7_13 ,p8_13 ,p9_13 ,p10_13 );} if(SMemMat.boolModel[PIdx_13 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_13 , sumConductivityDv_13 ,v_13 +0.001,ModelStates_13[5],p11_13 ,p12_13 ,p13_13 ,p14_13 ,p15_13 );} if(SMemMat.boolModel[PIdx_13 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_13 , sumConductivityDv_13 ,v_13 +0.001,ModelStates_13[6],ModelStates_13[7],p16_13 ,p17_13 ,p18_13 ,p19_13 ,p20_13 ,p21_13 ,p22_13 ,p23_13 ,p24_13 ,p25_13 ,p26_13 ,p27_13 );} if(SMemMat.boolModel[PIdx_14 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_14 , sumConductivityDv_14 ,v_14 +0.001,ModelStates_14[0],ModelStates_14[1],p0_14 ,p1_14 ,ModelStates_14[8],ModelStates_14[9]);} if(SMemMat.boolModel[PIdx_14 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_14 , sumConductivityDv_14 ,v_14 +0.001,ModelStates_14[2],ModelStates_14[9],ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_14 , sumConductivityDv_14 ,v_14 +0.001,ModelStates_14[3],p2_14 ,p3_14 ,p4_14 ,p5_14 ,ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_14 , sumConductivityDv_14 ,v_14 +0.001,ModelStates_14[4],p6_14 ,p7_14 ,p8_14 ,p9_14 ,p10_14 );} if(SMemMat.boolModel[PIdx_14 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_14 , sumConductivityDv_14 ,v_14 +0.001,ModelStates_14[5],p11_14 ,p12_14 ,p13_14 ,p14_14 ,p15_14 );} if(SMemMat.boolModel[PIdx_14 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_14 , sumConductivityDv_14 ,v_14 +0.001,ModelStates_14[6],ModelStates_14[7],p16_14 ,p17_14 ,p18_14 ,p19_14 ,p20_14 ,p21_14 ,p22_14 ,p23_14 ,p24_14 ,p25_14 ,p26_14 ,p27_14 );} if(SMemMat.boolModel[PIdx_15 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_15 , sumConductivityDv_15 ,v_15 +0.001,ModelStates_15[0],ModelStates_15[1],p0_15 ,p1_15 ,ModelStates_15[8],ModelStates_15[9]);} if(SMemMat.boolModel[PIdx_15 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_15 , sumConductivityDv_15 ,v_15 +0.001,ModelStates_15[2],ModelStates_15[9],ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_15 , sumConductivityDv_15 ,v_15 +0.001,ModelStates_15[3],p2_15 ,p3_15 ,p4_15 ,p5_15 ,ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_15 , sumConductivityDv_15 ,v_15 +0.001,ModelStates_15[4],p6_15 ,p7_15 ,p8_15 ,p9_15 ,p10_15 );} if(SMemMat.boolModel[PIdx_15 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_15 , sumConductivityDv_15 ,v_15 +0.001,ModelStates_15[5],p11_15 ,p12_15 ,p13_15 ,p14_15 ,p15_15 );} if(SMemMat.boolModel[PIdx_15 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_15 , sumConductivityDv_15 ,v_15 +0.001,ModelStates_15[6],ModelStates_15[7],p16_15 ,p17_15 ,p18_15 ,p19_15 ,p20_15 ,p21_15 ,p22_15 ,p23_15 ,p24_15 ,p25_15 ,p26_15 ,p27_15 );} if(SMemMat.boolModel[PIdx_16 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_16 , sumConductivityDv_16 ,v_16 +0.001,ModelStates_16[0],ModelStates_16[1],p0_16 ,p1_16 ,ModelStates_16[8],ModelStates_16[9]);} if(SMemMat.boolModel[PIdx_16 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_16 , sumConductivityDv_16 ,v_16 +0.001,ModelStates_16[2],ModelStates_16[9],ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_16 , sumConductivityDv_16 ,v_16 +0.001,ModelStates_16[3],p2_16 ,p3_16 ,p4_16 ,p5_16 ,ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_16 , sumConductivityDv_16 ,v_16 +0.001,ModelStates_16[4],p6_16 ,p7_16 ,p8_16 ,p9_16 ,p10_16 );} if(SMemMat.boolModel[PIdx_16 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_16 , sumConductivityDv_16 ,v_16 +0.001,ModelStates_16[5],p11_16 ,p12_16 ,p13_16 ,p14_16 ,p15_16 );} if(SMemMat.boolModel[PIdx_16 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_16 , sumConductivityDv_16 ,v_16 +0.001,ModelStates_16[6],ModelStates_16[7],p16_16 ,p17_16 ,p18_16 ,p19_16 ,p20_16 ,p21_16 ,p22_16 ,p23_16 ,p24_16 ,p25_16 ,p26_16 ,p27_16 );} if(SMemMat.boolModel[PIdx_17 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_17 , sumConductivityDv_17 ,v_17 +0.001,ModelStates_17[0],ModelStates_17[1],p0_17 ,p1_17 ,ModelStates_17[8],ModelStates_17[9]);} if(SMemMat.boolModel[PIdx_17 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_17 , sumConductivityDv_17 ,v_17 +0.001,ModelStates_17[2],ModelStates_17[9],ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_17 , sumConductivityDv_17 ,v_17 +0.001,ModelStates_17[3],p2_17 ,p3_17 ,p4_17 ,p5_17 ,ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_17 , sumConductivityDv_17 ,v_17 +0.001,ModelStates_17[4],p6_17 ,p7_17 ,p8_17 ,p9_17 ,p10_17 );} if(SMemMat.boolModel[PIdx_17 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_17 , sumConductivityDv_17 ,v_17 +0.001,ModelStates_17[5],p11_17 ,p12_17 ,p13_17 ,p14_17 ,p15_17 );} if(SMemMat.boolModel[PIdx_17 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_17 , sumConductivityDv_17 ,v_17 +0.001,ModelStates_17[6],ModelStates_17[7],p16_17 ,p17_17 ,p18_17 ,p19_17 ,p20_17 ,p21_17 ,p22_17 ,p23_17 ,p24_17 ,p25_17 ,p26_17 ,p27_17 );} if(SMemMat.boolModel[PIdx_18 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_18 , sumConductivityDv_18 ,v_18 +0.001,ModelStates_18[0],ModelStates_18[1],p0_18 ,p1_18 ,ModelStates_18[8],ModelStates_18[9]);} if(SMemMat.boolModel[PIdx_18 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_18 , sumConductivityDv_18 ,v_18 +0.001,ModelStates_18[2],ModelStates_18[9],ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_18 , sumConductivityDv_18 ,v_18 +0.001,ModelStates_18[3],p2_18 ,p3_18 ,p4_18 ,p5_18 ,ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_18 , sumConductivityDv_18 ,v_18 +0.001,ModelStates_18[4],p6_18 ,p7_18 ,p8_18 ,p9_18 ,p10_18 );} if(SMemMat.boolModel[PIdx_18 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_18 , sumConductivityDv_18 ,v_18 +0.001,ModelStates_18[5],p11_18 ,p12_18 ,p13_18 ,p14_18 ,p15_18 );} if(SMemMat.boolModel[PIdx_18 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_18 , sumConductivityDv_18 ,v_18 +0.001,ModelStates_18[6],ModelStates_18[7],p16_18 ,p17_18 ,p18_18 ,p19_18 ,p20_18 ,p21_18 ,p22_18 ,p23_18 ,p24_18 ,p25_18 ,p26_18 ,p27_18 );} if(SMemMat.boolModel[PIdx_19 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_19 , sumConductivityDv_19 ,v_19 +0.001,ModelStates_19[0],ModelStates_19[1],p0_19 ,p1_19 ,ModelStates_19[8],ModelStates_19[9]);} if(SMemMat.boolModel[PIdx_19 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_19 , sumConductivityDv_19 ,v_19 +0.001,ModelStates_19[2],ModelStates_19[9],ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_19 , sumConductivityDv_19 ,v_19 +0.001,ModelStates_19[3],p2_19 ,p3_19 ,p4_19 ,p5_19 ,ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_19 , sumConductivityDv_19 ,v_19 +0.001,ModelStates_19[4],p6_19 ,p7_19 ,p8_19 ,p9_19 ,p10_19 );} if(SMemMat.boolModel[PIdx_19 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_19 , sumConductivityDv_19 ,v_19 +0.001,ModelStates_19[5],p11_19 ,p12_19 ,p13_19 ,p14_19 ,p15_19 );} if(SMemMat.boolModel[PIdx_19 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_19 , sumConductivityDv_19 ,v_19 +0.001,ModelStates_19[6],ModelStates_19[7],p16_19 ,p17_19 ,p18_19 ,p19_19 ,p20_19 ,p21_19 ,p22_19 ,p23_19 ,p24_19 ,p25_19 ,p26_19 ,p27_19 );} if(SMemMat.boolModel[PIdx_20 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_20 , sumConductivityDv_20 ,v_20 +0.001,ModelStates_20[0],ModelStates_20[1],p0_20 ,p1_20 ,ModelStates_20[8],ModelStates_20[9]);} if(SMemMat.boolModel[PIdx_20 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_20 , sumConductivityDv_20 ,v_20 +0.001,ModelStates_20[2],ModelStates_20[9],ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_20 , sumConductivityDv_20 ,v_20 +0.001,ModelStates_20[3],p2_20 ,p3_20 ,p4_20 ,p5_20 ,ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_20 , sumConductivityDv_20 ,v_20 +0.001,ModelStates_20[4],p6_20 ,p7_20 ,p8_20 ,p9_20 ,p10_20 );} if(SMemMat.boolModel[PIdx_20 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_20 , sumConductivityDv_20 ,v_20 +0.001,ModelStates_20[5],p11_20 ,p12_20 ,p13_20 ,p14_20 ,p15_20 );} if(SMemMat.boolModel[PIdx_20 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_20 , sumConductivityDv_20 ,v_20 +0.001,ModelStates_20[6],ModelStates_20[7],p16_20 ,p17_20 ,p18_20 ,p19_20 ,p20_20 ,p21_20 ,p22_20 ,p23_20 ,p24_20 ,p25_20 ,p26_20 ,p27_20 );} if(SMemMat.boolModel[PIdx_21 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_21 , sumConductivityDv_21 ,v_21 +0.001,ModelStates_21[0],ModelStates_21[1],p0_21 ,p1_21 ,ModelStates_21[8],ModelStates_21[9]);} if(SMemMat.boolModel[PIdx_21 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_21 , sumConductivityDv_21 ,v_21 +0.001,ModelStates_21[2],ModelStates_21[9],ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_21 , sumConductivityDv_21 ,v_21 +0.001,ModelStates_21[3],p2_21 ,p3_21 ,p4_21 ,p5_21 ,ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_21 , sumConductivityDv_21 ,v_21 +0.001,ModelStates_21[4],p6_21 ,p7_21 ,p8_21 ,p9_21 ,p10_21 );} if(SMemMat.boolModel[PIdx_21 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_21 , sumConductivityDv_21 ,v_21 +0.001,ModelStates_21[5],p11_21 ,p12_21 ,p13_21 ,p14_21 ,p15_21 );} if(SMemMat.boolModel[PIdx_21 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_21 , sumConductivityDv_21 ,v_21 +0.001,ModelStates_21[6],ModelStates_21[7],p16_21 ,p17_21 ,p18_21 ,p19_21 ,p20_21 ,p21_21 ,p22_21 ,p23_21 ,p24_21 ,p25_21 ,p26_21 ,p27_21 );} if(SMemMat.boolModel[PIdx_22 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_22 , sumConductivityDv_22 ,v_22 +0.001,ModelStates_22[0],ModelStates_22[1],p0_22 ,p1_22 ,ModelStates_22[8],ModelStates_22[9]);} if(SMemMat.boolModel[PIdx_22 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_22 , sumConductivityDv_22 ,v_22 +0.001,ModelStates_22[2],ModelStates_22[9],ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_22 , sumConductivityDv_22 ,v_22 +0.001,ModelStates_22[3],p2_22 ,p3_22 ,p4_22 ,p5_22 ,ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_22 , sumConductivityDv_22 ,v_22 +0.001,ModelStates_22[4],p6_22 ,p7_22 ,p8_22 ,p9_22 ,p10_22 );} if(SMemMat.boolModel[PIdx_22 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_22 , sumConductivityDv_22 ,v_22 +0.001,ModelStates_22[5],p11_22 ,p12_22 ,p13_22 ,p14_22 ,p15_22 );} if(SMemMat.boolModel[PIdx_22 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_22 , sumConductivityDv_22 ,v_22 +0.001,ModelStates_22[6],ModelStates_22[7],p16_22 ,p17_22 ,p18_22 ,p19_22 ,p20_22 ,p21_22 ,p22_22 ,p23_22 ,p24_22 ,p25_22 ,p26_22 ,p27_22 );} if(SMemMat.boolModel[PIdx_23 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_23 , sumConductivityDv_23 ,v_23 +0.001,ModelStates_23[0],ModelStates_23[1],p0_23 ,p1_23 ,ModelStates_23[8],ModelStates_23[9]);} if(SMemMat.boolModel[PIdx_23 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_23 , sumConductivityDv_23 ,v_23 +0.001,ModelStates_23[2],ModelStates_23[9],ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_23 , sumConductivityDv_23 ,v_23 +0.001,ModelStates_23[3],p2_23 ,p3_23 ,p4_23 ,p5_23 ,ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_23 , sumConductivityDv_23 ,v_23 +0.001,ModelStates_23[4],p6_23 ,p7_23 ,p8_23 ,p9_23 ,p10_23 );} if(SMemMat.boolModel[PIdx_23 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_23 , sumConductivityDv_23 ,v_23 +0.001,ModelStates_23[5],p11_23 ,p12_23 ,p13_23 ,p14_23 ,p15_23 );} if(SMemMat.boolModel[PIdx_23 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_23 , sumConductivityDv_23 ,v_23 +0.001,ModelStates_23[6],ModelStates_23[7],p16_23 ,p17_23 ,p18_23 ,p19_23 ,p20_23 ,p21_23 ,p22_23 ,p23_23 ,p24_23 ,p25_23 ,p26_23 ,p27_23 );} if(SMemMat.boolModel[PIdx_24 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_24 , sumConductivityDv_24 ,v_24 +0.001,ModelStates_24[0],ModelStates_24[1],p0_24 ,p1_24 ,ModelStates_24[8],ModelStates_24[9]);} if(SMemMat.boolModel[PIdx_24 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_24 , sumConductivityDv_24 ,v_24 +0.001,ModelStates_24[2],ModelStates_24[9],ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_24 , sumConductivityDv_24 ,v_24 +0.001,ModelStates_24[3],p2_24 ,p3_24 ,p4_24 ,p5_24 ,ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_24 , sumConductivityDv_24 ,v_24 +0.001,ModelStates_24[4],p6_24 ,p7_24 ,p8_24 ,p9_24 ,p10_24 );} if(SMemMat.boolModel[PIdx_24 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_24 , sumConductivityDv_24 ,v_24 +0.001,ModelStates_24[5],p11_24 ,p12_24 ,p13_24 ,p14_24 ,p15_24 );} if(SMemMat.boolModel[PIdx_24 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_24 , sumConductivityDv_24 ,v_24 +0.001,ModelStates_24[6],ModelStates_24[7],p16_24 ,p17_24 ,p18_24 ,p19_24 ,p20_24 ,p21_24 ,p22_24 ,p23_24 ,p24_24 ,p25_24 ,p26_24 ,p27_24 );} if(SMemMat.boolModel[PIdx_25 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_25 , sumConductivityDv_25 ,v_25 +0.001,ModelStates_25[0],ModelStates_25[1],p0_25 ,p1_25 ,ModelStates_25[8],ModelStates_25[9]);} if(SMemMat.boolModel[PIdx_25 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_25 , sumConductivityDv_25 ,v_25 +0.001,ModelStates_25[2],ModelStates_25[9],ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_25 , sumConductivityDv_25 ,v_25 +0.001,ModelStates_25[3],p2_25 ,p3_25 ,p4_25 ,p5_25 ,ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_25 , sumConductivityDv_25 ,v_25 +0.001,ModelStates_25[4],p6_25 ,p7_25 ,p8_25 ,p9_25 ,p10_25 );} if(SMemMat.boolModel[PIdx_25 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_25 , sumConductivityDv_25 ,v_25 +0.001,ModelStates_25[5],p11_25 ,p12_25 ,p13_25 ,p14_25 ,p15_25 );} if(SMemMat.boolModel[PIdx_25 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_25 , sumConductivityDv_25 ,v_25 +0.001,ModelStates_25[6],ModelStates_25[7],p16_25 ,p17_25 ,p18_25 ,p19_25 ,p20_25 ,p21_25 ,p22_25 ,p23_25 ,p24_25 ,p25_25 ,p26_25 ,p27_25 );} if(SMemMat.boolModel[PIdx_26 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrentsDv_26 , sumConductivityDv_26 ,v_26 +0.001,ModelStates_26[0],ModelStates_26[1],p0_26 ,p1_26 ,ModelStates_26[8],ModelStates_26[9]);} if(SMemMat.boolModel[PIdx_26 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrentsDv_26 , sumConductivityDv_26 ,v_26 +0.001,ModelStates_26[2],ModelStates_26[9],ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrentsDv_26 , sumConductivityDv_26 ,v_26 +0.001,ModelStates_26[3],p2_26 ,p3_26 ,p4_26 ,p5_26 ,ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrentsDv_26 , sumConductivityDv_26 ,v_26 +0.001,ModelStates_26[4],p6_26 ,p7_26 ,p8_26 ,p9_26 ,p10_26 );} if(SMemMat.boolModel[PIdx_26 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrentsDv_26 , sumConductivityDv_26 ,v_26 +0.001,ModelStates_26[5],p11_26 ,p12_26 ,p13_26 ,p14_26 ,p15_26 );} if(SMemMat.boolModel[PIdx_26 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrentsDv_26 , sumConductivityDv_26 ,v_26 +0.001,ModelStates_26[6],ModelStates_26[7],p16_26 ,p17_26 ,p18_26 ,p19_26 ,p20_26 ,p21_26 ,p22_26 ,p23_26 ,p24_26 ,p25_26 ,p26_26 ,p27_26 );}
//#define THISCOMMANDHEREE20(VARILP) if(SMemMat.boolModel[PIdx_ ## VARILP ]==1) {CuBreakpointModel_kv(sumCurrents_ ## VARILP , sumConductivity_ ## VARILP,v_ ## VARILP ,ModelStates_ ## VARILP [0], p1_ ## VARILP ,p2_ ## VARILP ,p3_ ## VARILP ,p4_ ## VARILP ,p5_ ## VARILP);} if(SMemMat.boolModel[PIdx_ ## VARILP+SMemMat.N ]==1) {CuBreakpointModel_na(sumCurrents_ ## VARILP , sumConductivity_ ## VARILP,v_ ## VARILP ,ModelStates_ ## VARILP [1],ModelStates_ ## VARILP [2], p6_ ## VARILP ,p7_ ## VARILP ,p8_ ## VARILP ,p9_ ## VARILP ,p10_ ## VARILP,p11_ ## VARILP ,p12_ ## VARILP ,p13_ ## VARILP ,p14_ ## VARILP ,p15_ ## VARILP,p16_ ## VARILP ,p17_ ## VARILP);}
3	 if(SMemMat.boolModel[PIdx_1 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[0],ModelStates_1[1],p0_1 ,p1_1 ,ModelStates_1[8],ModelStates_1[9]);} if(SMemMat.boolModel[PIdx_1 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[3],p2_1 ,p3_1 ,p4_1 ,p5_1 ,ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[4],p6_1 ,p7_1 ,p8_1 ,p9_1 ,p10_1 );} if(SMemMat.boolModel[PIdx_1 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[5],p11_1 ,p12_1 ,p13_1 ,p14_1 ,p15_1 );} if(SMemMat.boolModel[PIdx_1 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[6],ModelStates_1[7],p16_1 ,p17_1 ,p18_1 ,p19_1 ,p20_1 ,p21_1 ,p22_1 ,p23_1 ,p24_1 ,p25_1 ,p26_1 ,p27_1 );} if(SMemMat.boolModel[PIdx_2 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[0],ModelStates_2[1],p0_2 ,p1_2 ,ModelStates_2[8],ModelStates_2[9]);} if(SMemMat.boolModel[PIdx_2 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[3],p2_2 ,p3_2 ,p4_2 ,p5_2 ,ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[4],p6_2 ,p7_2 ,p8_2 ,p9_2 ,p10_2 );} if(SMemMat.boolModel[PIdx_2 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[5],p11_2 ,p12_2 ,p13_2 ,p14_2 ,p15_2 );} if(SMemMat.boolModel[PIdx_2 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[6],ModelStates_2[7],p16_2 ,p17_2 ,p18_2 ,p19_2 ,p20_2 ,p21_2 ,p22_2 ,p23_2 ,p24_2 ,p25_2 ,p26_2 ,p27_2 );} if(SMemMat.boolModel[PIdx_3 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[0],ModelStates_3[1],p0_3 ,p1_3 ,ModelStates_3[8],ModelStates_3[9]);} if(SMemMat.boolModel[PIdx_3 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[3],p2_3 ,p3_3 ,p4_3 ,p5_3 ,ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[4],p6_3 ,p7_3 ,p8_3 ,p9_3 ,p10_3 );} if(SMemMat.boolModel[PIdx_3 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[5],p11_3 ,p12_3 ,p13_3 ,p14_3 ,p15_3 );} if(SMemMat.boolModel[PIdx_3 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[6],ModelStates_3[7],p16_3 ,p17_3 ,p18_3 ,p19_3 ,p20_3 ,p21_3 ,p22_3 ,p23_3 ,p24_3 ,p25_3 ,p26_3 ,p27_3 );} if(SMemMat.boolModel[PIdx_4 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[0],ModelStates_4[1],p0_4 ,p1_4 ,ModelStates_4[8],ModelStates_4[9]);} if(SMemMat.boolModel[PIdx_4 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[3],p2_4 ,p3_4 ,p4_4 ,p5_4 ,ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[4],p6_4 ,p7_4 ,p8_4 ,p9_4 ,p10_4 );} if(SMemMat.boolModel[PIdx_4 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[5],p11_4 ,p12_4 ,p13_4 ,p14_4 ,p15_4 );} if(SMemMat.boolModel[PIdx_4 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[6],ModelStates_4[7],p16_4 ,p17_4 ,p18_4 ,p19_4 ,p20_4 ,p21_4 ,p22_4 ,p23_4 ,p24_4 ,p25_4 ,p26_4 ,p27_4 );} if(SMemMat.boolModel[PIdx_5 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[0],ModelStates_5[1],p0_5 ,p1_5 ,ModelStates_5[8],ModelStates_5[9]);} if(SMemMat.boolModel[PIdx_5 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[3],p2_5 ,p3_5 ,p4_5 ,p5_5 ,ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[4],p6_5 ,p7_5 ,p8_5 ,p9_5 ,p10_5 );} if(SMemMat.boolModel[PIdx_5 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[5],p11_5 ,p12_5 ,p13_5 ,p14_5 ,p15_5 );} if(SMemMat.boolModel[PIdx_5 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[6],ModelStates_5[7],p16_5 ,p17_5 ,p18_5 ,p19_5 ,p20_5 ,p21_5 ,p22_5 ,p23_5 ,p24_5 ,p25_5 ,p26_5 ,p27_5 );} if(SMemMat.boolModel[PIdx_6 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[0],ModelStates_6[1],p0_6 ,p1_6 ,ModelStates_6[8],ModelStates_6[9]);} if(SMemMat.boolModel[PIdx_6 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[3],p2_6 ,p3_6 ,p4_6 ,p5_6 ,ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[4],p6_6 ,p7_6 ,p8_6 ,p9_6 ,p10_6 );} if(SMemMat.boolModel[PIdx_6 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[5],p11_6 ,p12_6 ,p13_6 ,p14_6 ,p15_6 );} if(SMemMat.boolModel[PIdx_6 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[6],ModelStates_6[7],p16_6 ,p17_6 ,p18_6 ,p19_6 ,p20_6 ,p21_6 ,p22_6 ,p23_6 ,p24_6 ,p25_6 ,p26_6 ,p27_6 );} if(SMemMat.boolModel[PIdx_7 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[0],ModelStates_7[1],p0_7 ,p1_7 ,ModelStates_7[8],ModelStates_7[9]);} if(SMemMat.boolModel[PIdx_7 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[3],p2_7 ,p3_7 ,p4_7 ,p5_7 ,ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[4],p6_7 ,p7_7 ,p8_7 ,p9_7 ,p10_7 );} if(SMemMat.boolModel[PIdx_7 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[5],p11_7 ,p12_7 ,p13_7 ,p14_7 ,p15_7 );} if(SMemMat.boolModel[PIdx_7 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[6],ModelStates_7[7],p16_7 ,p17_7 ,p18_7 ,p19_7 ,p20_7 ,p21_7 ,p22_7 ,p23_7 ,p24_7 ,p25_7 ,p26_7 ,p27_7 );} if(SMemMat.boolModel[PIdx_8 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[0],ModelStates_8[1],p0_8 ,p1_8 ,ModelStates_8[8],ModelStates_8[9]);} if(SMemMat.boolModel[PIdx_8 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[3],p2_8 ,p3_8 ,p4_8 ,p5_8 ,ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[4],p6_8 ,p7_8 ,p8_8 ,p9_8 ,p10_8 );} if(SMemMat.boolModel[PIdx_8 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[5],p11_8 ,p12_8 ,p13_8 ,p14_8 ,p15_8 );} if(SMemMat.boolModel[PIdx_8 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[6],ModelStates_8[7],p16_8 ,p17_8 ,p18_8 ,p19_8 ,p20_8 ,p21_8 ,p22_8 ,p23_8 ,p24_8 ,p25_8 ,p26_8 ,p27_8 );} if(SMemMat.boolModel[PIdx_9 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[0],ModelStates_9[1],p0_9 ,p1_9 ,ModelStates_9[8],ModelStates_9[9]);} if(SMemMat.boolModel[PIdx_9 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[3],p2_9 ,p3_9 ,p4_9 ,p5_9 ,ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[4],p6_9 ,p7_9 ,p8_9 ,p9_9 ,p10_9 );} if(SMemMat.boolModel[PIdx_9 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[5],p11_9 ,p12_9 ,p13_9 ,p14_9 ,p15_9 );} if(SMemMat.boolModel[PIdx_9 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[6],ModelStates_9[7],p16_9 ,p17_9 ,p18_9 ,p19_9 ,p20_9 ,p21_9 ,p22_9 ,p23_9 ,p24_9 ,p25_9 ,p26_9 ,p27_9 );} if(SMemMat.boolModel[PIdx_10 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[0],ModelStates_10[1],p0_10 ,p1_10 ,ModelStates_10[8],ModelStates_10[9]);} if(SMemMat.boolModel[PIdx_10 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[3],p2_10 ,p3_10 ,p4_10 ,p5_10 ,ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[4],p6_10 ,p7_10 ,p8_10 ,p9_10 ,p10_10 );} if(SMemMat.boolModel[PIdx_10 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[5],p11_10 ,p12_10 ,p13_10 ,p14_10 ,p15_10 );} if(SMemMat.boolModel[PIdx_10 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[6],ModelStates_10[7],p16_10 ,p17_10 ,p18_10 ,p19_10 ,p20_10 ,p21_10 ,p22_10 ,p23_10 ,p24_10 ,p25_10 ,p26_10 ,p27_10 );} if(SMemMat.boolModel[PIdx_11 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[0],ModelStates_11[1],p0_11 ,p1_11 ,ModelStates_11[8],ModelStates_11[9]);} if(SMemMat.boolModel[PIdx_11 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[3],p2_11 ,p3_11 ,p4_11 ,p5_11 ,ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[4],p6_11 ,p7_11 ,p8_11 ,p9_11 ,p10_11 );} if(SMemMat.boolModel[PIdx_11 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[5],p11_11 ,p12_11 ,p13_11 ,p14_11 ,p15_11 );} if(SMemMat.boolModel[PIdx_11 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[6],ModelStates_11[7],p16_11 ,p17_11 ,p18_11 ,p19_11 ,p20_11 ,p21_11 ,p22_11 ,p23_11 ,p24_11 ,p25_11 ,p26_11 ,p27_11 );} if(SMemMat.boolModel[PIdx_12 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[0],ModelStates_12[1],p0_12 ,p1_12 ,ModelStates_12[8],ModelStates_12[9]);} if(SMemMat.boolModel[PIdx_12 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[3],p2_12 ,p3_12 ,p4_12 ,p5_12 ,ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[4],p6_12 ,p7_12 ,p8_12 ,p9_12 ,p10_12 );} if(SMemMat.boolModel[PIdx_12 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[5],p11_12 ,p12_12 ,p13_12 ,p14_12 ,p15_12 );} if(SMemMat.boolModel[PIdx_12 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[6],ModelStates_12[7],p16_12 ,p17_12 ,p18_12 ,p19_12 ,p20_12 ,p21_12 ,p22_12 ,p23_12 ,p24_12 ,p25_12 ,p26_12 ,p27_12 );} if(SMemMat.boolModel[PIdx_13 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_13 , sumConductivity_13,v_13 ,ModelStates_13[0],ModelStates_13[1],p0_13 ,p1_13 ,ModelStates_13[8],ModelStates_13[9]);} if(SMemMat.boolModel[PIdx_13 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_13 , sumConductivity_13,v_13 ,ModelStates_13[2],ModelStates_13[9],ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_13 , sumConductivity_13,v_13 ,ModelStates_13[3],p2_13 ,p3_13 ,p4_13 ,p5_13 ,ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_13 , sumConductivity_13,v_13 ,ModelStates_13[4],p6_13 ,p7_13 ,p8_13 ,p9_13 ,p10_13 );} if(SMemMat.boolModel[PIdx_13 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_13 , sumConductivity_13,v_13 ,ModelStates_13[5],p11_13 ,p12_13 ,p13_13 ,p14_13 ,p15_13 );} if(SMemMat.boolModel[PIdx_13 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_13 , sumConductivity_13,v_13 ,ModelStates_13[6],ModelStates_13[7],p16_13 ,p17_13 ,p18_13 ,p19_13 ,p20_13 ,p21_13 ,p22_13 ,p23_13 ,p24_13 ,p25_13 ,p26_13 ,p27_13 );} if(SMemMat.boolModel[PIdx_14 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_14 , sumConductivity_14,v_14 ,ModelStates_14[0],ModelStates_14[1],p0_14 ,p1_14 ,ModelStates_14[8],ModelStates_14[9]);} if(SMemMat.boolModel[PIdx_14 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_14 , sumConductivity_14,v_14 ,ModelStates_14[2],ModelStates_14[9],ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_14 , sumConductivity_14,v_14 ,ModelStates_14[3],p2_14 ,p3_14 ,p4_14 ,p5_14 ,ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_14 , sumConductivity_14,v_14 ,ModelStates_14[4],p6_14 ,p7_14 ,p8_14 ,p9_14 ,p10_14 );} if(SMemMat.boolModel[PIdx_14 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_14 , sumConductivity_14,v_14 ,ModelStates_14[5],p11_14 ,p12_14 ,p13_14 ,p14_14 ,p15_14 );} if(SMemMat.boolModel[PIdx_14 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_14 , sumConductivity_14,v_14 ,ModelStates_14[6],ModelStates_14[7],p16_14 ,p17_14 ,p18_14 ,p19_14 ,p20_14 ,p21_14 ,p22_14 ,p23_14 ,p24_14 ,p25_14 ,p26_14 ,p27_14 );} if(SMemMat.boolModel[PIdx_15 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_15 , sumConductivity_15,v_15 ,ModelStates_15[0],ModelStates_15[1],p0_15 ,p1_15 ,ModelStates_15[8],ModelStates_15[9]);} if(SMemMat.boolModel[PIdx_15 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_15 , sumConductivity_15,v_15 ,ModelStates_15[2],ModelStates_15[9],ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_15 , sumConductivity_15,v_15 ,ModelStates_15[3],p2_15 ,p3_15 ,p4_15 ,p5_15 ,ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_15 , sumConductivity_15,v_15 ,ModelStates_15[4],p6_15 ,p7_15 ,p8_15 ,p9_15 ,p10_15 );} if(SMemMat.boolModel[PIdx_15 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_15 , sumConductivity_15,v_15 ,ModelStates_15[5],p11_15 ,p12_15 ,p13_15 ,p14_15 ,p15_15 );} if(SMemMat.boolModel[PIdx_15 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_15 , sumConductivity_15,v_15 ,ModelStates_15[6],ModelStates_15[7],p16_15 ,p17_15 ,p18_15 ,p19_15 ,p20_15 ,p21_15 ,p22_15 ,p23_15 ,p24_15 ,p25_15 ,p26_15 ,p27_15 );} if(SMemMat.boolModel[PIdx_16 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_16 , sumConductivity_16,v_16 ,ModelStates_16[0],ModelStates_16[1],p0_16 ,p1_16 ,ModelStates_16[8],ModelStates_16[9]);} if(SMemMat.boolModel[PIdx_16 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_16 , sumConductivity_16,v_16 ,ModelStates_16[2],ModelStates_16[9],ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_16 , sumConductivity_16,v_16 ,ModelStates_16[3],p2_16 ,p3_16 ,p4_16 ,p5_16 ,ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_16 , sumConductivity_16,v_16 ,ModelStates_16[4],p6_16 ,p7_16 ,p8_16 ,p9_16 ,p10_16 );} if(SMemMat.boolModel[PIdx_16 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_16 , sumConductivity_16,v_16 ,ModelStates_16[5],p11_16 ,p12_16 ,p13_16 ,p14_16 ,p15_16 );} if(SMemMat.boolModel[PIdx_16 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_16 , sumConductivity_16,v_16 ,ModelStates_16[6],ModelStates_16[7],p16_16 ,p17_16 ,p18_16 ,p19_16 ,p20_16 ,p21_16 ,p22_16 ,p23_16 ,p24_16 ,p25_16 ,p26_16 ,p27_16 );} if(SMemMat.boolModel[PIdx_17 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_17 , sumConductivity_17,v_17 ,ModelStates_17[0],ModelStates_17[1],p0_17 ,p1_17 ,ModelStates_17[8],ModelStates_17[9]);} if(SMemMat.boolModel[PIdx_17 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_17 , sumConductivity_17,v_17 ,ModelStates_17[2],ModelStates_17[9],ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_17 , sumConductivity_17,v_17 ,ModelStates_17[3],p2_17 ,p3_17 ,p4_17 ,p5_17 ,ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_17 , sumConductivity_17,v_17 ,ModelStates_17[4],p6_17 ,p7_17 ,p8_17 ,p9_17 ,p10_17 );} if(SMemMat.boolModel[PIdx_17 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_17 , sumConductivity_17,v_17 ,ModelStates_17[5],p11_17 ,p12_17 ,p13_17 ,p14_17 ,p15_17 );} if(SMemMat.boolModel[PIdx_17 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_17 , sumConductivity_17,v_17 ,ModelStates_17[6],ModelStates_17[7],p16_17 ,p17_17 ,p18_17 ,p19_17 ,p20_17 ,p21_17 ,p22_17 ,p23_17 ,p24_17 ,p25_17 ,p26_17 ,p27_17 );} if(SMemMat.boolModel[PIdx_18 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_18 , sumConductivity_18,v_18 ,ModelStates_18[0],ModelStates_18[1],p0_18 ,p1_18 ,ModelStates_18[8],ModelStates_18[9]);} if(SMemMat.boolModel[PIdx_18 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_18 , sumConductivity_18,v_18 ,ModelStates_18[2],ModelStates_18[9],ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_18 , sumConductivity_18,v_18 ,ModelStates_18[3],p2_18 ,p3_18 ,p4_18 ,p5_18 ,ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_18 , sumConductivity_18,v_18 ,ModelStates_18[4],p6_18 ,p7_18 ,p8_18 ,p9_18 ,p10_18 );} if(SMemMat.boolModel[PIdx_18 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_18 , sumConductivity_18,v_18 ,ModelStates_18[5],p11_18 ,p12_18 ,p13_18 ,p14_18 ,p15_18 );} if(SMemMat.boolModel[PIdx_18 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_18 , sumConductivity_18,v_18 ,ModelStates_18[6],ModelStates_18[7],p16_18 ,p17_18 ,p18_18 ,p19_18 ,p20_18 ,p21_18 ,p22_18 ,p23_18 ,p24_18 ,p25_18 ,p26_18 ,p27_18 );} if(SMemMat.boolModel[PIdx_19 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_19 , sumConductivity_19,v_19 ,ModelStates_19[0],ModelStates_19[1],p0_19 ,p1_19 ,ModelStates_19[8],ModelStates_19[9]);} if(SMemMat.boolModel[PIdx_19 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_19 , sumConductivity_19,v_19 ,ModelStates_19[2],ModelStates_19[9],ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_19 , sumConductivity_19,v_19 ,ModelStates_19[3],p2_19 ,p3_19 ,p4_19 ,p5_19 ,ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_19 , sumConductivity_19,v_19 ,ModelStates_19[4],p6_19 ,p7_19 ,p8_19 ,p9_19 ,p10_19 );} if(SMemMat.boolModel[PIdx_19 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_19 , sumConductivity_19,v_19 ,ModelStates_19[5],p11_19 ,p12_19 ,p13_19 ,p14_19 ,p15_19 );} if(SMemMat.boolModel[PIdx_19 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_19 , sumConductivity_19,v_19 ,ModelStates_19[6],ModelStates_19[7],p16_19 ,p17_19 ,p18_19 ,p19_19 ,p20_19 ,p21_19 ,p22_19 ,p23_19 ,p24_19 ,p25_19 ,p26_19 ,p27_19 );} if(SMemMat.boolModel[PIdx_20 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_20 , sumConductivity_20,v_20 ,ModelStates_20[0],ModelStates_20[1],p0_20 ,p1_20 ,ModelStates_20[8],ModelStates_20[9]);} if(SMemMat.boolModel[PIdx_20 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_20 , sumConductivity_20,v_20 ,ModelStates_20[2],ModelStates_20[9],ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_20 , sumConductivity_20,v_20 ,ModelStates_20[3],p2_20 ,p3_20 ,p4_20 ,p5_20 ,ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_20 , sumConductivity_20,v_20 ,ModelStates_20[4],p6_20 ,p7_20 ,p8_20 ,p9_20 ,p10_20 );} if(SMemMat.boolModel[PIdx_20 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_20 , sumConductivity_20,v_20 ,ModelStates_20[5],p11_20 ,p12_20 ,p13_20 ,p14_20 ,p15_20 );} if(SMemMat.boolModel[PIdx_20 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_20 , sumConductivity_20,v_20 ,ModelStates_20[6],ModelStates_20[7],p16_20 ,p17_20 ,p18_20 ,p19_20 ,p20_20 ,p21_20 ,p22_20 ,p23_20 ,p24_20 ,p25_20 ,p26_20 ,p27_20 );} if(SMemMat.boolModel[PIdx_21 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_21 , sumConductivity_21,v_21 ,ModelStates_21[0],ModelStates_21[1],p0_21 ,p1_21 ,ModelStates_21[8],ModelStates_21[9]);} if(SMemMat.boolModel[PIdx_21 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_21 , sumConductivity_21,v_21 ,ModelStates_21[2],ModelStates_21[9],ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_21 , sumConductivity_21,v_21 ,ModelStates_21[3],p2_21 ,p3_21 ,p4_21 ,p5_21 ,ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_21 , sumConductivity_21,v_21 ,ModelStates_21[4],p6_21 ,p7_21 ,p8_21 ,p9_21 ,p10_21 );} if(SMemMat.boolModel[PIdx_21 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_21 , sumConductivity_21,v_21 ,ModelStates_21[5],p11_21 ,p12_21 ,p13_21 ,p14_21 ,p15_21 );} if(SMemMat.boolModel[PIdx_21 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_21 , sumConductivity_21,v_21 ,ModelStates_21[6],ModelStates_21[7],p16_21 ,p17_21 ,p18_21 ,p19_21 ,p20_21 ,p21_21 ,p22_21 ,p23_21 ,p24_21 ,p25_21 ,p26_21 ,p27_21 );} if(SMemMat.boolModel[PIdx_22 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_22 , sumConductivity_22,v_22 ,ModelStates_22[0],ModelStates_22[1],p0_22 ,p1_22 ,ModelStates_22[8],ModelStates_22[9]);} if(SMemMat.boolModel[PIdx_22 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_22 , sumConductivity_22,v_22 ,ModelStates_22[2],ModelStates_22[9],ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_22 , sumConductivity_22,v_22 ,ModelStates_22[3],p2_22 ,p3_22 ,p4_22 ,p5_22 ,ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_22 , sumConductivity_22,v_22 ,ModelStates_22[4],p6_22 ,p7_22 ,p8_22 ,p9_22 ,p10_22 );} if(SMemMat.boolModel[PIdx_22 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_22 , sumConductivity_22,v_22 ,ModelStates_22[5],p11_22 ,p12_22 ,p13_22 ,p14_22 ,p15_22 );} if(SMemMat.boolModel[PIdx_22 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_22 , sumConductivity_22,v_22 ,ModelStates_22[6],ModelStates_22[7],p16_22 ,p17_22 ,p18_22 ,p19_22 ,p20_22 ,p21_22 ,p22_22 ,p23_22 ,p24_22 ,p25_22 ,p26_22 ,p27_22 );} if(SMemMat.boolModel[PIdx_23 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_23 , sumConductivity_23,v_23 ,ModelStates_23[0],ModelStates_23[1],p0_23 ,p1_23 ,ModelStates_23[8],ModelStates_23[9]);} if(SMemMat.boolModel[PIdx_23 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_23 , sumConductivity_23,v_23 ,ModelStates_23[2],ModelStates_23[9],ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_23 , sumConductivity_23,v_23 ,ModelStates_23[3],p2_23 ,p3_23 ,p4_23 ,p5_23 ,ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_23 , sumConductivity_23,v_23 ,ModelStates_23[4],p6_23 ,p7_23 ,p8_23 ,p9_23 ,p10_23 );} if(SMemMat.boolModel[PIdx_23 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_23 , sumConductivity_23,v_23 ,ModelStates_23[5],p11_23 ,p12_23 ,p13_23 ,p14_23 ,p15_23 );} if(SMemMat.boolModel[PIdx_23 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_23 , sumConductivity_23,v_23 ,ModelStates_23[6],ModelStates_23[7],p16_23 ,p17_23 ,p18_23 ,p19_23 ,p20_23 ,p21_23 ,p22_23 ,p23_23 ,p24_23 ,p25_23 ,p26_23 ,p27_23 );} if(SMemMat.boolModel[PIdx_24 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_24 , sumConductivity_24,v_24 ,ModelStates_24[0],ModelStates_24[1],p0_24 ,p1_24 ,ModelStates_24[8],ModelStates_24[9]);} if(SMemMat.boolModel[PIdx_24 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_24 , sumConductivity_24,v_24 ,ModelStates_24[2],ModelStates_24[9],ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_24 , sumConductivity_24,v_24 ,ModelStates_24[3],p2_24 ,p3_24 ,p4_24 ,p5_24 ,ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_24 , sumConductivity_24,v_24 ,ModelStates_24[4],p6_24 ,p7_24 ,p8_24 ,p9_24 ,p10_24 );} if(SMemMat.boolModel[PIdx_24 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_24 , sumConductivity_24,v_24 ,ModelStates_24[5],p11_24 ,p12_24 ,p13_24 ,p14_24 ,p15_24 );} if(SMemMat.boolModel[PIdx_24 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_24 , sumConductivity_24,v_24 ,ModelStates_24[6],ModelStates_24[7],p16_24 ,p17_24 ,p18_24 ,p19_24 ,p20_24 ,p21_24 ,p22_24 ,p23_24 ,p24_24 ,p25_24 ,p26_24 ,p27_24 );} if(SMemMat.boolModel[PIdx_25 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_25 , sumConductivity_25,v_25 ,ModelStates_25[0],ModelStates_25[1],p0_25 ,p1_25 ,ModelStates_25[8],ModelStates_25[9]);} if(SMemMat.boolModel[PIdx_25 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_25 , sumConductivity_25,v_25 ,ModelStates_25[2],ModelStates_25[9],ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_25 , sumConductivity_25,v_25 ,ModelStates_25[3],p2_25 ,p3_25 ,p4_25 ,p5_25 ,ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_25 , sumConductivity_25,v_25 ,ModelStates_25[4],p6_25 ,p7_25 ,p8_25 ,p9_25 ,p10_25 );} if(SMemMat.boolModel[PIdx_25 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_25 , sumConductivity_25,v_25 ,ModelStates_25[5],p11_25 ,p12_25 ,p13_25 ,p14_25 ,p15_25 );} if(SMemMat.boolModel[PIdx_25 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_25 , sumConductivity_25,v_25 ,ModelStates_25[6],ModelStates_25[7],p16_25 ,p17_25 ,p18_25 ,p19_25 ,p20_25 ,p21_25 ,p22_25 ,p23_25 ,p24_25 ,p25_25 ,p26_25 ,p27_25 );} if(SMemMat.boolModel[PIdx_26 +0*SMemMat.N]){CuBreakpointModel_ca(sumCurrents_26 , sumConductivity_26,v_26 ,ModelStates_26[0],ModelStates_26[1],p0_26 ,p1_26 ,ModelStates_26[8],ModelStates_26[9]);} if(SMemMat.boolModel[PIdx_26 +1*SMemMat.N]){CuBreakpointModel_cad(sumCurrents_26 , sumConductivity_26,v_26 ,ModelStates_26[2],ModelStates_26[9],ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +2*SMemMat.N]){CuBreakpointModel_kca(sumCurrents_26 , sumConductivity_26,v_26 ,ModelStates_26[3],p2_26 ,p3_26 ,p4_26 ,p5_26 ,ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +3*SMemMat.N]){CuBreakpointModel_km(sumCurrents_26 , sumConductivity_26,v_26 ,ModelStates_26[4],p6_26 ,p7_26 ,p8_26 ,p9_26 ,p10_26 );} if(SMemMat.boolModel[PIdx_26 +4*SMemMat.N]){CuBreakpointModel_kv(sumCurrents_26 , sumConductivity_26,v_26 ,ModelStates_26[5],p11_26 ,p12_26 ,p13_26 ,p14_26 ,p15_26 );} if(SMemMat.boolModel[PIdx_26 +5*SMemMat.N]){CuBreakpointModel_na(sumCurrents_26 , sumConductivity_26,v_26 ,ModelStates_26[6],ModelStates_26[7],p16_26 ,p17_26 ,p18_26 ,p19_26 ,p20_26 ,p21_26 ,p22_26 ,p23_26 ,p24_26 ,p25_26 ,p26_26 ,p27_26 );}
#endif
	// gModel_3 = (sumCurrentsDv_3-sumCurrents_3)/0.001; 
#define THISCOMMANDHEREE21(VARILP) gModel_ ## VARILP  = (sumCurrentsDv_ ## VARILP -sumCurrents_ ## VARILP )/EPS_V;  
	gModel_1  = (sumCurrentsDv_1 -sumCurrents_1 )/EPS_V;  gModel_2  = (sumCurrentsDv_2 -sumCurrents_2 )/EPS_V;  gModel_3  = (sumCurrentsDv_3 -sumCurrents_3 )/EPS_V;  gModel_4  = (sumCurrentsDv_4 -sumCurrents_4 )/EPS_V;  gModel_5  = (sumCurrentsDv_5 -sumCurrents_5 )/EPS_V;  gModel_6  = (sumCurrentsDv_6 -sumCurrents_6 )/EPS_V;  gModel_7  = (sumCurrentsDv_7 -sumCurrents_7 )/EPS_V;  gModel_8  = (sumCurrentsDv_8 -sumCurrents_8 )/EPS_V;  gModel_9  = (sumCurrentsDv_9 -sumCurrents_9 )/EPS_V;  gModel_10  = (sumCurrentsDv_10 -sumCurrents_10 )/EPS_V;  gModel_11  = (sumCurrentsDv_11 -sumCurrents_11 )/EPS_V;  gModel_12  = (sumCurrentsDv_12 -sumCurrents_12 )/EPS_V;  gModel_13  = (sumCurrentsDv_13 -sumCurrents_13 )/EPS_V;  gModel_14  = (sumCurrentsDv_14 -sumCurrents_14 )/EPS_V;  gModel_15  = (sumCurrentsDv_15 -sumCurrents_15 )/EPS_V;  gModel_16  = (sumCurrentsDv_16 -sumCurrents_16 )/EPS_V;  gModel_17  = (sumCurrentsDv_17 -sumCurrents_17 )/EPS_V;  gModel_18  = (sumCurrentsDv_18 -sumCurrents_18 )/EPS_V;  gModel_19  = (sumCurrentsDv_19 -sumCurrents_19 )/EPS_V;  gModel_20  = (sumCurrentsDv_20 -sumCurrents_20 )/EPS_V;  gModel_21  = (sumCurrentsDv_21 -sumCurrents_21 )/EPS_V;  gModel_22  = (sumCurrentsDv_22 -sumCurrents_22 )/EPS_V;  gModel_23  = (sumCurrentsDv_23 -sumCurrents_23 )/EPS_V;  gModel_24  = (sumCurrentsDv_24 -sumCurrents_24 )/EPS_V;  gModel_25  = (sumCurrentsDv_25 -sumCurrents_25 )/EPS_V;  gModel_26  = (sumCurrentsDv_26 -sumCurrents_26 )/EPS_V;  
		// rhs_3=StimCurrent_3-sumCurrents_3; // dv_3=Vs[parentIndex_3]-Vs[PIdx_3]; // rhs_3-=SMemMat.f[SMemMat.N-PIdx_3-1]*dv_3;
#define THISCOMMANDHEREE22(VARILP) rhs_ ## VARILP =StimCurrent_ ## VARILP -sumCurrents_ ## VARILP ;
	rhs_1 =StimCurrent_1 -sumCurrents_1 ;rhs_2 =StimCurrent_2 -sumCurrents_2 ;rhs_3 =StimCurrent_3 -sumCurrents_3 ;rhs_4 =StimCurrent_4 -sumCurrents_4 ;rhs_5 =StimCurrent_5 -sumCurrents_5 ;rhs_6 =StimCurrent_6 -sumCurrents_6 ;rhs_7 =StimCurrent_7 -sumCurrents_7 ;rhs_8 =StimCurrent_8 -sumCurrents_8 ;rhs_9 =StimCurrent_9 -sumCurrents_9 ;rhs_10 =StimCurrent_10 -sumCurrents_10 ;rhs_11 =StimCurrent_11 -sumCurrents_11 ;rhs_12 =StimCurrent_12 -sumCurrents_12 ;rhs_13 =StimCurrent_13 -sumCurrents_13 ;rhs_14 =StimCurrent_14 -sumCurrents_14 ;rhs_15 =StimCurrent_15 -sumCurrents_15 ;rhs_16 =StimCurrent_16 -sumCurrents_16 ;rhs_17 =StimCurrent_17 -sumCurrents_17 ;rhs_18 =StimCurrent_18 -sumCurrents_18 ;rhs_19 =StimCurrent_19 -sumCurrents_19 ;rhs_20 =StimCurrent_20 -sumCurrents_20 ;rhs_21 =StimCurrent_21 -sumCurrents_21 ;rhs_22 =StimCurrent_22 -sumCurrents_22 ;rhs_23 =StimCurrent_23 -sumCurrents_23 ;rhs_24 =StimCurrent_24 -sumCurrents_24 ;rhs_25 =StimCurrent_25 -sumCurrents_25 ;rhs_26 =StimCurrent_26 -sumCurrents_26 ;
#define THISCOMMANDHEREE24(VARILP) D_ ## VARILP =gModel_ ## VARILP +SMemMat.Cms[PIdx_ ## VARILP ]/(sim.dt*1000); D_ ## VARILP -=SMemMat.f[SMemMat.N-PIdx_ ## VARILP -1];
	D_1 =gModel_1 +SMemMat.Cms[PIdx_1 ]/(sim.dt*1000); D_1 -=SMemMat.f[SMemMat.N-PIdx_1 -1];D_2 =gModel_2 +SMemMat.Cms[PIdx_2 ]/(sim.dt*1000); D_2 -=SMemMat.f[SMemMat.N-PIdx_2 -1];D_3 =gModel_3 +SMemMat.Cms[PIdx_3 ]/(sim.dt*1000); D_3 -=SMemMat.f[SMemMat.N-PIdx_3 -1];D_4 =gModel_4 +SMemMat.Cms[PIdx_4 ]/(sim.dt*1000); D_4 -=SMemMat.f[SMemMat.N-PIdx_4 -1];D_5 =gModel_5 +SMemMat.Cms[PIdx_5 ]/(sim.dt*1000); D_5 -=SMemMat.f[SMemMat.N-PIdx_5 -1];D_6 =gModel_6 +SMemMat.Cms[PIdx_6 ]/(sim.dt*1000); D_6 -=SMemMat.f[SMemMat.N-PIdx_6 -1];D_7 =gModel_7 +SMemMat.Cms[PIdx_7 ]/(sim.dt*1000); D_7 -=SMemMat.f[SMemMat.N-PIdx_7 -1];D_8 =gModel_8 +SMemMat.Cms[PIdx_8 ]/(sim.dt*1000); D_8 -=SMemMat.f[SMemMat.N-PIdx_8 -1];D_9 =gModel_9 +SMemMat.Cms[PIdx_9 ]/(sim.dt*1000); D_9 -=SMemMat.f[SMemMat.N-PIdx_9 -1];D_10 =gModel_10 +SMemMat.Cms[PIdx_10 ]/(sim.dt*1000); D_10 -=SMemMat.f[SMemMat.N-PIdx_10 -1];D_11 =gModel_11 +SMemMat.Cms[PIdx_11 ]/(sim.dt*1000); D_11 -=SMemMat.f[SMemMat.N-PIdx_11 -1];D_12 =gModel_12 +SMemMat.Cms[PIdx_12 ]/(sim.dt*1000); D_12 -=SMemMat.f[SMemMat.N-PIdx_12 -1];D_13 =gModel_13 +SMemMat.Cms[PIdx_13 ]/(sim.dt*1000); D_13 -=SMemMat.f[SMemMat.N-PIdx_13 -1];D_14 =gModel_14 +SMemMat.Cms[PIdx_14 ]/(sim.dt*1000); D_14 -=SMemMat.f[SMemMat.N-PIdx_14 -1];D_15 =gModel_15 +SMemMat.Cms[PIdx_15 ]/(sim.dt*1000); D_15 -=SMemMat.f[SMemMat.N-PIdx_15 -1];D_16 =gModel_16 +SMemMat.Cms[PIdx_16 ]/(sim.dt*1000); D_16 -=SMemMat.f[SMemMat.N-PIdx_16 -1];D_17 =gModel_17 +SMemMat.Cms[PIdx_17 ]/(sim.dt*1000); D_17 -=SMemMat.f[SMemMat.N-PIdx_17 -1];D_18 =gModel_18 +SMemMat.Cms[PIdx_18 ]/(sim.dt*1000); D_18 -=SMemMat.f[SMemMat.N-PIdx_18 -1];D_19 =gModel_19 +SMemMat.Cms[PIdx_19 ]/(sim.dt*1000); D_19 -=SMemMat.f[SMemMat.N-PIdx_19 -1];D_20 =gModel_20 +SMemMat.Cms[PIdx_20 ]/(sim.dt*1000); D_20 -=SMemMat.f[SMemMat.N-PIdx_20 -1];D_21 =gModel_21 +SMemMat.Cms[PIdx_21 ]/(sim.dt*1000); D_21 -=SMemMat.f[SMemMat.N-PIdx_21 -1];D_22 =gModel_22 +SMemMat.Cms[PIdx_22 ]/(sim.dt*1000); D_22 -=SMemMat.f[SMemMat.N-PIdx_22 -1];D_23 =gModel_23 +SMemMat.Cms[PIdx_23 ]/(sim.dt*1000); D_23 -=SMemMat.f[SMemMat.N-PIdx_23 -1];D_24 =gModel_24 +SMemMat.Cms[PIdx_24 ]/(sim.dt*1000); D_24 -=SMemMat.f[SMemMat.N-PIdx_24 -1];D_25 =gModel_25 +SMemMat.Cms[PIdx_25 ]/(sim.dt*1000); D_25 -=SMemMat.f[SMemMat.N-PIdx_25 -1];D_26 =gModel_26 +SMemMat.Cms[PIdx_26 ]/(sim.dt*1000); D_26 -=SMemMat.f[SMemMat.N-PIdx_26 -1];
	//this should be out and correct SMemMat.Ks
	if(PIdx_1==0) {
		parentIndex_1=0;
	};
#define THISCOMMANDHEREE25(VARILP)  dv_ ## VARILP =Vs[parentIndex_ ## VARILP ]-Vs[PIdx_ ## VARILP ]; rhs_ ## VARILP -=SMemMat.f[SMemMat.N-PIdx_ ## VARILP -1]*dv_ ## VARILP ;
	 dv_1 =Vs[parentIndex_1 ]-Vs[PIdx_1 ]; rhs_1 -=SMemMat.f[SMemMat.N-PIdx_1 -1]*dv_1 ; dv_2 =Vs[parentIndex_2 ]-Vs[PIdx_2 ]; rhs_2 -=SMemMat.f[SMemMat.N-PIdx_2 -1]*dv_2 ; dv_3 =Vs[parentIndex_3 ]-Vs[PIdx_3 ]; rhs_3 -=SMemMat.f[SMemMat.N-PIdx_3 -1]*dv_3 ; dv_4 =Vs[parentIndex_4 ]-Vs[PIdx_4 ]; rhs_4 -=SMemMat.f[SMemMat.N-PIdx_4 -1]*dv_4 ; dv_5 =Vs[parentIndex_5 ]-Vs[PIdx_5 ]; rhs_5 -=SMemMat.f[SMemMat.N-PIdx_5 -1]*dv_5 ; dv_6 =Vs[parentIndex_6 ]-Vs[PIdx_6 ]; rhs_6 -=SMemMat.f[SMemMat.N-PIdx_6 -1]*dv_6 ; dv_7 =Vs[parentIndex_7 ]-Vs[PIdx_7 ]; rhs_7 -=SMemMat.f[SMemMat.N-PIdx_7 -1]*dv_7 ; dv_8 =Vs[parentIndex_8 ]-Vs[PIdx_8 ]; rhs_8 -=SMemMat.f[SMemMat.N-PIdx_8 -1]*dv_8 ; dv_9 =Vs[parentIndex_9 ]-Vs[PIdx_9 ]; rhs_9 -=SMemMat.f[SMemMat.N-PIdx_9 -1]*dv_9 ; dv_10 =Vs[parentIndex_10 ]-Vs[PIdx_10 ]; rhs_10 -=SMemMat.f[SMemMat.N-PIdx_10 -1]*dv_10 ; dv_11 =Vs[parentIndex_11 ]-Vs[PIdx_11 ]; rhs_11 -=SMemMat.f[SMemMat.N-PIdx_11 -1]*dv_11 ; dv_12 =Vs[parentIndex_12 ]-Vs[PIdx_12 ]; rhs_12 -=SMemMat.f[SMemMat.N-PIdx_12 -1]*dv_12 ; dv_13 =Vs[parentIndex_13 ]-Vs[PIdx_13 ]; rhs_13 -=SMemMat.f[SMemMat.N-PIdx_13 -1]*dv_13 ; dv_14 =Vs[parentIndex_14 ]-Vs[PIdx_14 ]; rhs_14 -=SMemMat.f[SMemMat.N-PIdx_14 -1]*dv_14 ; dv_15 =Vs[parentIndex_15 ]-Vs[PIdx_15 ]; rhs_15 -=SMemMat.f[SMemMat.N-PIdx_15 -1]*dv_15 ; dv_16 =Vs[parentIndex_16 ]-Vs[PIdx_16 ]; rhs_16 -=SMemMat.f[SMemMat.N-PIdx_16 -1]*dv_16 ; dv_17 =Vs[parentIndex_17 ]-Vs[PIdx_17 ]; rhs_17 -=SMemMat.f[SMemMat.N-PIdx_17 -1]*dv_17 ; dv_18 =Vs[parentIndex_18 ]-Vs[PIdx_18 ]; rhs_18 -=SMemMat.f[SMemMat.N-PIdx_18 -1]*dv_18 ; dv_19 =Vs[parentIndex_19 ]-Vs[PIdx_19 ]; rhs_19 -=SMemMat.f[SMemMat.N-PIdx_19 -1]*dv_19 ; dv_20 =Vs[parentIndex_20 ]-Vs[PIdx_20 ]; rhs_20 -=SMemMat.f[SMemMat.N-PIdx_20 -1]*dv_20 ; dv_21 =Vs[parentIndex_21 ]-Vs[PIdx_21 ]; rhs_21 -=SMemMat.f[SMemMat.N-PIdx_21 -1]*dv_21 ; dv_22 =Vs[parentIndex_22 ]-Vs[PIdx_22 ]; rhs_22 -=SMemMat.f[SMemMat.N-PIdx_22 -1]*dv_22 ; dv_23 =Vs[parentIndex_23 ]-Vs[PIdx_23 ]; rhs_23 -=SMemMat.f[SMemMat.N-PIdx_23 -1]*dv_23 ; dv_24 =Vs[parentIndex_24 ]-Vs[PIdx_24 ]; rhs_24 -=SMemMat.f[SMemMat.N-PIdx_24 -1]*dv_24 ; dv_25 =Vs[parentIndex_25 ]-Vs[PIdx_25 ]; rhs_25 -=SMemMat.f[SMemMat.N-PIdx_25 -1]*dv_25 ; dv_26 =Vs[parentIndex_26 ]-Vs[PIdx_26 ]; rhs_26 -=SMemMat.f[SMemMat.N-PIdx_26 -1]*dv_26 ;
		// D_3=sumConductivity_3+SMemMat.Cms[PIdx_3]/(sim.dt*1000); // D_3-=SMemMat.f[SMemMat.N-PIdx_3-1];
		// bHP[SMemMat.N-PIdx_3-1]=rhs_3; // uHP[SMemMat.N-PIdx_3-1]=D_3;
#define THISCOMMANDHEREE26(VARILP) bHP[SMemMat.N-PIdx_ ## VARILP -1]=rhs_ ## VARILP ; uHP[SMemMat.N-PIdx_ ## VARILP -1]=D_ ## VARILP ;
	bHP[SMemMat.N-PIdx_1 -1]=rhs_1 ; uHP[SMemMat.N-PIdx_1 -1]=D_1 ;bHP[SMemMat.N-PIdx_2 -1]=rhs_2 ; uHP[SMemMat.N-PIdx_2 -1]=D_2 ;bHP[SMemMat.N-PIdx_3 -1]=rhs_3 ; uHP[SMemMat.N-PIdx_3 -1]=D_3 ;bHP[SMemMat.N-PIdx_4 -1]=rhs_4 ; uHP[SMemMat.N-PIdx_4 -1]=D_4 ;bHP[SMemMat.N-PIdx_5 -1]=rhs_5 ; uHP[SMemMat.N-PIdx_5 -1]=D_5 ;bHP[SMemMat.N-PIdx_6 -1]=rhs_6 ; uHP[SMemMat.N-PIdx_6 -1]=D_6 ;bHP[SMemMat.N-PIdx_7 -1]=rhs_7 ; uHP[SMemMat.N-PIdx_7 -1]=D_7 ;bHP[SMemMat.N-PIdx_8 -1]=rhs_8 ; uHP[SMemMat.N-PIdx_8 -1]=D_8 ;bHP[SMemMat.N-PIdx_9 -1]=rhs_9 ; uHP[SMemMat.N-PIdx_9 -1]=D_9 ;bHP[SMemMat.N-PIdx_10 -1]=rhs_10 ; uHP[SMemMat.N-PIdx_10 -1]=D_10 ;bHP[SMemMat.N-PIdx_11 -1]=rhs_11 ; uHP[SMemMat.N-PIdx_11 -1]=D_11 ;bHP[SMemMat.N-PIdx_12 -1]=rhs_12 ; uHP[SMemMat.N-PIdx_12 -1]=D_12 ;bHP[SMemMat.N-PIdx_13 -1]=rhs_13 ; uHP[SMemMat.N-PIdx_13 -1]=D_13 ;bHP[SMemMat.N-PIdx_14 -1]=rhs_14 ; uHP[SMemMat.N-PIdx_14 -1]=D_14 ;bHP[SMemMat.N-PIdx_15 -1]=rhs_15 ; uHP[SMemMat.N-PIdx_15 -1]=D_15 ;bHP[SMemMat.N-PIdx_16 -1]=rhs_16 ; uHP[SMemMat.N-PIdx_16 -1]=D_16 ;bHP[SMemMat.N-PIdx_17 -1]=rhs_17 ; uHP[SMemMat.N-PIdx_17 -1]=D_17 ;bHP[SMemMat.N-PIdx_18 -1]=rhs_18 ; uHP[SMemMat.N-PIdx_18 -1]=D_18 ;bHP[SMemMat.N-PIdx_19 -1]=rhs_19 ; uHP[SMemMat.N-PIdx_19 -1]=D_19 ;bHP[SMemMat.N-PIdx_20 -1]=rhs_20 ; uHP[SMemMat.N-PIdx_20 -1]=D_20 ;bHP[SMemMat.N-PIdx_21 -1]=rhs_21 ; uHP[SMemMat.N-PIdx_21 -1]=D_21 ;bHP[SMemMat.N-PIdx_22 -1]=rhs_22 ; uHP[SMemMat.N-PIdx_22 -1]=D_22 ;bHP[SMemMat.N-PIdx_23 -1]=rhs_23 ; uHP[SMemMat.N-PIdx_23 -1]=D_23 ;bHP[SMemMat.N-PIdx_24 -1]=rhs_24 ; uHP[SMemMat.N-PIdx_24 -1]=D_24 ;bHP[SMemMat.N-PIdx_25 -1]=rhs_25 ; uHP[SMemMat.N-PIdx_25 -1]=D_25 ;bHP[SMemMat.N-PIdx_26 -1]=rhs_26 ; uHP[SMemMat.N-PIdx_26 -1]=D_26 ;
		syncthreads();
		// if(SonNo_3==1) {bHP[SMemMat.N-parentIndex_3-1]+=SMemMat.e[Eidx_3]*dv_3;uHP[SMemMat.N-parentIndex_3-1]-=SMemMat.e[Eidx_3];}
#define THISCOMMANDHEREE27(VARILP) if(SonNo_ ## VARILP ==1) {bHP[SMemMat.N-parentIndex_ ## VARILP -1]+=SMemMat.e[Eidx_ ## VARILP ]*dv_ ## VARILP ;uHP[SMemMat.N-parentIndex_ ## VARILP -1]-=SMemMat.e[Eidx_ ## VARILP ];}
	if(SonNo_1 ==1) {bHP[SMemMat.N-parentIndex_1 -1]+=SMemMat.e[Eidx_1 ]*dv_1 ;uHP[SMemMat.N-parentIndex_1 -1]-=SMemMat.e[Eidx_1 ];}if(SonNo_2 ==1) {bHP[SMemMat.N-parentIndex_2 -1]+=SMemMat.e[Eidx_2 ]*dv_2 ;uHP[SMemMat.N-parentIndex_2 -1]-=SMemMat.e[Eidx_2 ];}if(SonNo_3 ==1) {bHP[SMemMat.N-parentIndex_3 -1]+=SMemMat.e[Eidx_3 ]*dv_3 ;uHP[SMemMat.N-parentIndex_3 -1]-=SMemMat.e[Eidx_3 ];}if(SonNo_4 ==1) {bHP[SMemMat.N-parentIndex_4 -1]+=SMemMat.e[Eidx_4 ]*dv_4 ;uHP[SMemMat.N-parentIndex_4 -1]-=SMemMat.e[Eidx_4 ];}if(SonNo_5 ==1) {bHP[SMemMat.N-parentIndex_5 -1]+=SMemMat.e[Eidx_5 ]*dv_5 ;uHP[SMemMat.N-parentIndex_5 -1]-=SMemMat.e[Eidx_5 ];}if(SonNo_6 ==1) {bHP[SMemMat.N-parentIndex_6 -1]+=SMemMat.e[Eidx_6 ]*dv_6 ;uHP[SMemMat.N-parentIndex_6 -1]-=SMemMat.e[Eidx_6 ];}if(SonNo_7 ==1) {bHP[SMemMat.N-parentIndex_7 -1]+=SMemMat.e[Eidx_7 ]*dv_7 ;uHP[SMemMat.N-parentIndex_7 -1]-=SMemMat.e[Eidx_7 ];}if(SonNo_8 ==1) {bHP[SMemMat.N-parentIndex_8 -1]+=SMemMat.e[Eidx_8 ]*dv_8 ;uHP[SMemMat.N-parentIndex_8 -1]-=SMemMat.e[Eidx_8 ];}if(SonNo_9 ==1) {bHP[SMemMat.N-parentIndex_9 -1]+=SMemMat.e[Eidx_9 ]*dv_9 ;uHP[SMemMat.N-parentIndex_9 -1]-=SMemMat.e[Eidx_9 ];}if(SonNo_10 ==1) {bHP[SMemMat.N-parentIndex_10 -1]+=SMemMat.e[Eidx_10 ]*dv_10 ;uHP[SMemMat.N-parentIndex_10 -1]-=SMemMat.e[Eidx_10 ];}if(SonNo_11 ==1) {bHP[SMemMat.N-parentIndex_11 -1]+=SMemMat.e[Eidx_11 ]*dv_11 ;uHP[SMemMat.N-parentIndex_11 -1]-=SMemMat.e[Eidx_11 ];}if(SonNo_12 ==1) {bHP[SMemMat.N-parentIndex_12 -1]+=SMemMat.e[Eidx_12 ]*dv_12 ;uHP[SMemMat.N-parentIndex_12 -1]-=SMemMat.e[Eidx_12 ];}if(SonNo_13 ==1) {bHP[SMemMat.N-parentIndex_13 -1]+=SMemMat.e[Eidx_13 ]*dv_13 ;uHP[SMemMat.N-parentIndex_13 -1]-=SMemMat.e[Eidx_13 ];}if(SonNo_14 ==1) {bHP[SMemMat.N-parentIndex_14 -1]+=SMemMat.e[Eidx_14 ]*dv_14 ;uHP[SMemMat.N-parentIndex_14 -1]-=SMemMat.e[Eidx_14 ];}if(SonNo_15 ==1) {bHP[SMemMat.N-parentIndex_15 -1]+=SMemMat.e[Eidx_15 ]*dv_15 ;uHP[SMemMat.N-parentIndex_15 -1]-=SMemMat.e[Eidx_15 ];}if(SonNo_16 ==1) {bHP[SMemMat.N-parentIndex_16 -1]+=SMemMat.e[Eidx_16 ]*dv_16 ;uHP[SMemMat.N-parentIndex_16 -1]-=SMemMat.e[Eidx_16 ];}if(SonNo_17 ==1) {bHP[SMemMat.N-parentIndex_17 -1]+=SMemMat.e[Eidx_17 ]*dv_17 ;uHP[SMemMat.N-parentIndex_17 -1]-=SMemMat.e[Eidx_17 ];}if(SonNo_18 ==1) {bHP[SMemMat.N-parentIndex_18 -1]+=SMemMat.e[Eidx_18 ]*dv_18 ;uHP[SMemMat.N-parentIndex_18 -1]-=SMemMat.e[Eidx_18 ];}if(SonNo_19 ==1) {bHP[SMemMat.N-parentIndex_19 -1]+=SMemMat.e[Eidx_19 ]*dv_19 ;uHP[SMemMat.N-parentIndex_19 -1]-=SMemMat.e[Eidx_19 ];}if(SonNo_20 ==1) {bHP[SMemMat.N-parentIndex_20 -1]+=SMemMat.e[Eidx_20 ]*dv_20 ;uHP[SMemMat.N-parentIndex_20 -1]-=SMemMat.e[Eidx_20 ];}if(SonNo_21 ==1) {bHP[SMemMat.N-parentIndex_21 -1]+=SMemMat.e[Eidx_21 ]*dv_21 ;uHP[SMemMat.N-parentIndex_21 -1]-=SMemMat.e[Eidx_21 ];}if(SonNo_22 ==1) {bHP[SMemMat.N-parentIndex_22 -1]+=SMemMat.e[Eidx_22 ]*dv_22 ;uHP[SMemMat.N-parentIndex_22 -1]-=SMemMat.e[Eidx_22 ];}if(SonNo_23 ==1) {bHP[SMemMat.N-parentIndex_23 -1]+=SMemMat.e[Eidx_23 ]*dv_23 ;uHP[SMemMat.N-parentIndex_23 -1]-=SMemMat.e[Eidx_23 ];}if(SonNo_24 ==1) {bHP[SMemMat.N-parentIndex_24 -1]+=SMemMat.e[Eidx_24 ]*dv_24 ;uHP[SMemMat.N-parentIndex_24 -1]-=SMemMat.e[Eidx_24 ];}if(SonNo_25 ==1) {bHP[SMemMat.N-parentIndex_25 -1]+=SMemMat.e[Eidx_25 ]*dv_25 ;uHP[SMemMat.N-parentIndex_25 -1]-=SMemMat.e[Eidx_25 ];}if(SonNo_26 ==1) {bHP[SMemMat.N-parentIndex_26 -1]+=SMemMat.e[Eidx_26 ]*dv_26 ;uHP[SMemMat.N-parentIndex_26 -1]-=SMemMat.e[Eidx_26 ];}
		// if(SonNo_3==2) {bHP[SMemMat.N-parentIndex_3-1]+=SMemMat.e[Eidx_3]*dv_3;uHP[SMemMat.N-parentIndex_3-1]-=SMemMat.e[Eidx_3];}
#define THISCOMMANDHEREE28(VARILP) if(SonNo_ ## VARILP ==2) {bHP[SMemMat.N-parentIndex_ ## VARILP -1]+=SMemMat.e[Eidx_ ## VARILP ]*dv_ ## VARILP ;uHP[SMemMat.N-parentIndex_ ## VARILP -1]-=SMemMat.e[Eidx_ ## VARILP ];}
	if(SonNo_1 ==2) {bHP[SMemMat.N-parentIndex_1 -1]+=SMemMat.e[Eidx_1 ]*dv_1 ;uHP[SMemMat.N-parentIndex_1 -1]-=SMemMat.e[Eidx_1 ];}if(SonNo_2 ==2) {bHP[SMemMat.N-parentIndex_2 -1]+=SMemMat.e[Eidx_2 ]*dv_2 ;uHP[SMemMat.N-parentIndex_2 -1]-=SMemMat.e[Eidx_2 ];}if(SonNo_3 ==2) {bHP[SMemMat.N-parentIndex_3 -1]+=SMemMat.e[Eidx_3 ]*dv_3 ;uHP[SMemMat.N-parentIndex_3 -1]-=SMemMat.e[Eidx_3 ];}if(SonNo_4 ==2) {bHP[SMemMat.N-parentIndex_4 -1]+=SMemMat.e[Eidx_4 ]*dv_4 ;uHP[SMemMat.N-parentIndex_4 -1]-=SMemMat.e[Eidx_4 ];}if(SonNo_5 ==2) {bHP[SMemMat.N-parentIndex_5 -1]+=SMemMat.e[Eidx_5 ]*dv_5 ;uHP[SMemMat.N-parentIndex_5 -1]-=SMemMat.e[Eidx_5 ];}if(SonNo_6 ==2) {bHP[SMemMat.N-parentIndex_6 -1]+=SMemMat.e[Eidx_6 ]*dv_6 ;uHP[SMemMat.N-parentIndex_6 -1]-=SMemMat.e[Eidx_6 ];}if(SonNo_7 ==2) {bHP[SMemMat.N-parentIndex_7 -1]+=SMemMat.e[Eidx_7 ]*dv_7 ;uHP[SMemMat.N-parentIndex_7 -1]-=SMemMat.e[Eidx_7 ];}if(SonNo_8 ==2) {bHP[SMemMat.N-parentIndex_8 -1]+=SMemMat.e[Eidx_8 ]*dv_8 ;uHP[SMemMat.N-parentIndex_8 -1]-=SMemMat.e[Eidx_8 ];}if(SonNo_9 ==2) {bHP[SMemMat.N-parentIndex_9 -1]+=SMemMat.e[Eidx_9 ]*dv_9 ;uHP[SMemMat.N-parentIndex_9 -1]-=SMemMat.e[Eidx_9 ];}if(SonNo_10 ==2) {bHP[SMemMat.N-parentIndex_10 -1]+=SMemMat.e[Eidx_10 ]*dv_10 ;uHP[SMemMat.N-parentIndex_10 -1]-=SMemMat.e[Eidx_10 ];}if(SonNo_11 ==2) {bHP[SMemMat.N-parentIndex_11 -1]+=SMemMat.e[Eidx_11 ]*dv_11 ;uHP[SMemMat.N-parentIndex_11 -1]-=SMemMat.e[Eidx_11 ];}if(SonNo_12 ==2) {bHP[SMemMat.N-parentIndex_12 -1]+=SMemMat.e[Eidx_12 ]*dv_12 ;uHP[SMemMat.N-parentIndex_12 -1]-=SMemMat.e[Eidx_12 ];}if(SonNo_13 ==2) {bHP[SMemMat.N-parentIndex_13 -1]+=SMemMat.e[Eidx_13 ]*dv_13 ;uHP[SMemMat.N-parentIndex_13 -1]-=SMemMat.e[Eidx_13 ];}if(SonNo_14 ==2) {bHP[SMemMat.N-parentIndex_14 -1]+=SMemMat.e[Eidx_14 ]*dv_14 ;uHP[SMemMat.N-parentIndex_14 -1]-=SMemMat.e[Eidx_14 ];}if(SonNo_15 ==2) {bHP[SMemMat.N-parentIndex_15 -1]+=SMemMat.e[Eidx_15 ]*dv_15 ;uHP[SMemMat.N-parentIndex_15 -1]-=SMemMat.e[Eidx_15 ];}if(SonNo_16 ==2) {bHP[SMemMat.N-parentIndex_16 -1]+=SMemMat.e[Eidx_16 ]*dv_16 ;uHP[SMemMat.N-parentIndex_16 -1]-=SMemMat.e[Eidx_16 ];}if(SonNo_17 ==2) {bHP[SMemMat.N-parentIndex_17 -1]+=SMemMat.e[Eidx_17 ]*dv_17 ;uHP[SMemMat.N-parentIndex_17 -1]-=SMemMat.e[Eidx_17 ];}if(SonNo_18 ==2) {bHP[SMemMat.N-parentIndex_18 -1]+=SMemMat.e[Eidx_18 ]*dv_18 ;uHP[SMemMat.N-parentIndex_18 -1]-=SMemMat.e[Eidx_18 ];}if(SonNo_19 ==2) {bHP[SMemMat.N-parentIndex_19 -1]+=SMemMat.e[Eidx_19 ]*dv_19 ;uHP[SMemMat.N-parentIndex_19 -1]-=SMemMat.e[Eidx_19 ];}if(SonNo_20 ==2) {bHP[SMemMat.N-parentIndex_20 -1]+=SMemMat.e[Eidx_20 ]*dv_20 ;uHP[SMemMat.N-parentIndex_20 -1]-=SMemMat.e[Eidx_20 ];}if(SonNo_21 ==2) {bHP[SMemMat.N-parentIndex_21 -1]+=SMemMat.e[Eidx_21 ]*dv_21 ;uHP[SMemMat.N-parentIndex_21 -1]-=SMemMat.e[Eidx_21 ];}if(SonNo_22 ==2) {bHP[SMemMat.N-parentIndex_22 -1]+=SMemMat.e[Eidx_22 ]*dv_22 ;uHP[SMemMat.N-parentIndex_22 -1]-=SMemMat.e[Eidx_22 ];}if(SonNo_23 ==2) {bHP[SMemMat.N-parentIndex_23 -1]+=SMemMat.e[Eidx_23 ]*dv_23 ;uHP[SMemMat.N-parentIndex_23 -1]-=SMemMat.e[Eidx_23 ];}if(SonNo_24 ==2) {bHP[SMemMat.N-parentIndex_24 -1]+=SMemMat.e[Eidx_24 ]*dv_24 ;uHP[SMemMat.N-parentIndex_24 -1]-=SMemMat.e[Eidx_24 ];}if(SonNo_25 ==2) {bHP[SMemMat.N-parentIndex_25 -1]+=SMemMat.e[Eidx_25 ]*dv_25 ;uHP[SMemMat.N-parentIndex_25 -1]-=SMemMat.e[Eidx_25 ];}if(SonNo_26 ==2) {bHP[SMemMat.N-parentIndex_26 -1]+=SMemMat.e[Eidx_26 ]*dv_26 ;uHP[SMemMat.N-parentIndex_26 -1]-=SMemMat.e[Eidx_26 ];}
		syncthreads();
		BeforeLU(SMemMat,uHP,bHP,SMemMat.Depth);
#ifdef BKSUB1
		BkSub(SMemMat, PX,PF,uHP,bHP,SMemMat.LognDepth);
		#define THISCOMMANDHEREE29(VARILP) Vmid_ ## VARILP =PX[SMemMat.N-PIdx_ ## VARILP -1]; v_ ## VARILP +=Vmid_ ## VARILP ; Vs[PIdx_ ## VARILP ]+=Vmid_ ## VARILP ;
	Vmid_1 =PX[SMemMat.N-PIdx_1 -1]; v_1 +=Vmid_1 ; Vs[PIdx_1 ]+=Vmid_1 ;Vmid_2 =PX[SMemMat.N-PIdx_2 -1]; v_2 +=Vmid_2 ; Vs[PIdx_2 ]+=Vmid_2 ;Vmid_3 =PX[SMemMat.N-PIdx_3 -1]; v_3 +=Vmid_3 ; Vs[PIdx_3 ]+=Vmid_3 ;Vmid_4 =PX[SMemMat.N-PIdx_4 -1]; v_4 +=Vmid_4 ; Vs[PIdx_4 ]+=Vmid_4 ;Vmid_5 =PX[SMemMat.N-PIdx_5 -1]; v_5 +=Vmid_5 ; Vs[PIdx_5 ]+=Vmid_5 ;Vmid_6 =PX[SMemMat.N-PIdx_6 -1]; v_6 +=Vmid_6 ; Vs[PIdx_6 ]+=Vmid_6 ;Vmid_7 =PX[SMemMat.N-PIdx_7 -1]; v_7 +=Vmid_7 ; Vs[PIdx_7 ]+=Vmid_7 ;Vmid_8 =PX[SMemMat.N-PIdx_8 -1]; v_8 +=Vmid_8 ; Vs[PIdx_8 ]+=Vmid_8 ;Vmid_9 =PX[SMemMat.N-PIdx_9 -1]; v_9 +=Vmid_9 ; Vs[PIdx_9 ]+=Vmid_9 ;Vmid_10 =PX[SMemMat.N-PIdx_10 -1]; v_10 +=Vmid_10 ; Vs[PIdx_10 ]+=Vmid_10 ;Vmid_11 =PX[SMemMat.N-PIdx_11 -1]; v_11 +=Vmid_11 ; Vs[PIdx_11 ]+=Vmid_11 ;Vmid_12 =PX[SMemMat.N-PIdx_12 -1]; v_12 +=Vmid_12 ; Vs[PIdx_12 ]+=Vmid_12 ;Vmid_13 =PX[SMemMat.N-PIdx_13 -1]; v_13 +=Vmid_13 ; Vs[PIdx_13 ]+=Vmid_13 ;Vmid_14 =PX[SMemMat.N-PIdx_14 -1]; v_14 +=Vmid_14 ; Vs[PIdx_14 ]+=Vmid_14 ;Vmid_15 =PX[SMemMat.N-PIdx_15 -1]; v_15 +=Vmid_15 ; Vs[PIdx_15 ]+=Vmid_15 ;Vmid_16 =PX[SMemMat.N-PIdx_16 -1]; v_16 +=Vmid_16 ; Vs[PIdx_16 ]+=Vmid_16 ;Vmid_17 =PX[SMemMat.N-PIdx_17 -1]; v_17 +=Vmid_17 ; Vs[PIdx_17 ]+=Vmid_17 ;Vmid_18 =PX[SMemMat.N-PIdx_18 -1]; v_18 +=Vmid_18 ; Vs[PIdx_18 ]+=Vmid_18 ;Vmid_19 =PX[SMemMat.N-PIdx_19 -1]; v_19 +=Vmid_19 ; Vs[PIdx_19 ]+=Vmid_19 ;Vmid_20 =PX[SMemMat.N-PIdx_20 -1]; v_20 +=Vmid_20 ; Vs[PIdx_20 ]+=Vmid_20 ;Vmid_21 =PX[SMemMat.N-PIdx_21 -1]; v_21 +=Vmid_21 ; Vs[PIdx_21 ]+=Vmid_21 ;Vmid_22 =PX[SMemMat.N-PIdx_22 -1]; v_22 +=Vmid_22 ; Vs[PIdx_22 ]+=Vmid_22 ;Vmid_23 =PX[SMemMat.N-PIdx_23 -1]; v_23 +=Vmid_23 ; Vs[PIdx_23 ]+=Vmid_23 ;Vmid_24 =PX[SMemMat.N-PIdx_24 -1]; v_24 +=Vmid_24 ; Vs[PIdx_24 ]+=Vmid_24 ;Vmid_25 =PX[SMemMat.N-PIdx_25 -1]; v_25 +=Vmid_25 ; Vs[PIdx_25 ]+=Vmid_25 ;Vmid_26 =PX[SMemMat.N-PIdx_26 -1]; v_26 +=Vmid_26 ; Vs[PIdx_26 ]+=Vmid_26 ;
#endif

		
#ifdef BKSUB2
		#define THISCOMMANDHEREE290(VARILP) MYFTYPE vTemp_ ## VARILP=Vs[PIdx_ ## VARILP];
		MYFTYPE vTemp_1=Vs[PIdx_1];MYFTYPE vTemp_2=Vs[PIdx_2];MYFTYPE vTemp_3=Vs[PIdx_3];MYFTYPE vTemp_4=Vs[PIdx_4];MYFTYPE vTemp_5=Vs[PIdx_5];MYFTYPE vTemp_6=Vs[PIdx_6];MYFTYPE vTemp_7=Vs[PIdx_7];MYFTYPE vTemp_8=Vs[PIdx_8];MYFTYPE vTemp_9=Vs[PIdx_9];MYFTYPE vTemp_10=Vs[PIdx_10];MYFTYPE vTemp_11=Vs[PIdx_11];MYFTYPE vTemp_12=Vs[PIdx_12];MYFTYPE vTemp_13=Vs[PIdx_13];MYFTYPE vTemp_14=Vs[PIdx_14];MYFTYPE vTemp_15=Vs[PIdx_15];MYFTYPE vTemp_16=Vs[PIdx_16];MYFTYPE vTemp_17=Vs[PIdx_17];MYFTYPE vTemp_18=Vs[PIdx_18];MYFTYPE vTemp_19=Vs[PIdx_19];MYFTYPE vTemp_20=Vs[PIdx_20];MYFTYPE vTemp_21=Vs[PIdx_21];MYFTYPE vTemp_22=Vs[PIdx_22];MYFTYPE vTemp_23=Vs[PIdx_23];MYFTYPE vTemp_24=Vs[PIdx_24];MYFTYPE vTemp_25=Vs[PIdx_25];MYFTYPE vTemp_26=Vs[PIdx_26];
		syncthreads();
		BkSub(SMemMat,uHP,bHP,Vs,SMemMat.Depth);
		syncthreads();
		PX=Vs;

#define THISCOMMANDHEREE29(VARILP) Vmid_ ## VARILP =PX[SMemMat.N-PIdx_ ## VARILP -1]; v_ ## VARILP +=Vmid_ ## VARILP ;
		Vmid_1 =PX[SMemMat.N-PIdx_1 -1]; v_1 +=Vmid_1 ; Vs[PIdx_1 ]+=Vmid_1 ;Vmid_2 =PX[SMemMat.N-PIdx_2 -1]; v_2 +=Vmid_2 ; Vs[PIdx_2 ]+=Vmid_2 ;Vmid_3 =PX[SMemMat.N-PIdx_3 -1]; v_3 +=Vmid_3 ; Vs[PIdx_3 ]+=Vmid_3 ;Vmid_4 =PX[SMemMat.N-PIdx_4 -1]; v_4 +=Vmid_4 ; Vs[PIdx_4 ]+=Vmid_4 ;Vmid_5 =PX[SMemMat.N-PIdx_5 -1]; v_5 +=Vmid_5 ; Vs[PIdx_5 ]+=Vmid_5 ;Vmid_6 =PX[SMemMat.N-PIdx_6 -1]; v_6 +=Vmid_6 ; Vs[PIdx_6 ]+=Vmid_6 ;Vmid_7 =PX[SMemMat.N-PIdx_7 -1]; v_7 +=Vmid_7 ; Vs[PIdx_7 ]+=Vmid_7 ;Vmid_8 =PX[SMemMat.N-PIdx_8 -1]; v_8 +=Vmid_8 ; Vs[PIdx_8 ]+=Vmid_8 ;Vmid_9 =PX[SMemMat.N-PIdx_9 -1]; v_9 +=Vmid_9 ; Vs[PIdx_9 ]+=Vmid_9 ;Vmid_10 =PX[SMemMat.N-PIdx_10 -1]; v_10 +=Vmid_10 ; Vs[PIdx_10 ]+=Vmid_10 ;Vmid_11 =PX[SMemMat.N-PIdx_11 -1]; v_11 +=Vmid_11 ; Vs[PIdx_11 ]+=Vmid_11 ;Vmid_12 =PX[SMemMat.N-PIdx_12 -1]; v_12 +=Vmid_12 ; Vs[PIdx_12 ]+=Vmid_12 ;Vmid_13 =PX[SMemMat.N-PIdx_13 -1]; v_13 +=Vmid_13 ; Vs[PIdx_13 ]+=Vmid_13 ;Vmid_14 =PX[SMemMat.N-PIdx_14 -1]; v_14 +=Vmid_14 ; Vs[PIdx_14 ]+=Vmid_14 ;Vmid_15 =PX[SMemMat.N-PIdx_15 -1]; v_15 +=Vmid_15 ; Vs[PIdx_15 ]+=Vmid_15 ;Vmid_16 =PX[SMemMat.N-PIdx_16 -1]; v_16 +=Vmid_16 ; Vs[PIdx_16 ]+=Vmid_16 ;Vmid_17 =PX[SMemMat.N-PIdx_17 -1]; v_17 +=Vmid_17 ; Vs[PIdx_17 ]+=Vmid_17 ;Vmid_18 =PX[SMemMat.N-PIdx_18 -1]; v_18 +=Vmid_18 ; Vs[PIdx_18 ]+=Vmid_18 ;Vmid_19 =PX[SMemMat.N-PIdx_19 -1]; v_19 +=Vmid_19 ; Vs[PIdx_19 ]+=Vmid_19 ;Vmid_20 =PX[SMemMat.N-PIdx_20 -1]; v_20 +=Vmid_20 ; Vs[PIdx_20 ]+=Vmid_20 ;Vmid_21 =PX[SMemMat.N-PIdx_21 -1]; v_21 +=Vmid_21 ; Vs[PIdx_21 ]+=Vmid_21 ;Vmid_22 =PX[SMemMat.N-PIdx_22 -1]; v_22 +=Vmid_22 ; Vs[PIdx_22 ]+=Vmid_22 ;Vmid_23 =PX[SMemMat.N-PIdx_23 -1]; v_23 +=Vmid_23 ; Vs[PIdx_23 ]+=Vmid_23 ;Vmid_24 =PX[SMemMat.N-PIdx_24 -1]; v_24 +=Vmid_24 ; Vs[PIdx_24 ]+=Vmid_24 ;Vmid_25 =PX[SMemMat.N-PIdx_25 -1]; v_25 +=Vmid_25 ; Vs[PIdx_25 ]+=Vmid_25 ;Vmid_26 =PX[SMemMat.N-PIdx_26 -1]; v_26 +=Vmid_26 ; Vs[PIdx_26 ]+=Vmid_26 ;
		syncthreads(); 
#define THISCOMMANDHEREE291(VARILP) Vs[PIdx_ ## VARILP ]= vTemp_ ## VARILP +Vmid_ ## VARILP ;
		Vs[PIdx_1 ]= vTemp_1 +Vmid_1 ;Vs[PIdx_2 ]= vTemp_2 +Vmid_2 ;Vs[PIdx_3 ]= vTemp_3 +Vmid_3 ;Vs[PIdx_4 ]= vTemp_4 +Vmid_4 ;Vs[PIdx_5 ]= vTemp_5 +Vmid_5 ;Vs[PIdx_6 ]= vTemp_6 +Vmid_6 ;Vs[PIdx_7 ]= vTemp_7 +Vmid_7 ;Vs[PIdx_8 ]= vTemp_8 +Vmid_8 ;Vs[PIdx_9 ]= vTemp_9 +Vmid_9 ;Vs[PIdx_10 ]= vTemp_10 +Vmid_10 ;Vs[PIdx_11 ]= vTemp_11 +Vmid_11 ;Vs[PIdx_12 ]= vTemp_12 +Vmid_12 ;Vs[PIdx_13 ]= vTemp_13 +Vmid_13 ;Vs[PIdx_14 ]= vTemp_14 +Vmid_14 ;Vs[PIdx_15 ]= vTemp_15 +Vmid_15 ;Vs[PIdx_16 ]= vTemp_16 +Vmid_16 ;Vs[PIdx_17 ]= vTemp_17 +Vmid_17 ;Vs[PIdx_18 ]= vTemp_18 +Vmid_18 ;Vs[PIdx_19 ]= vTemp_19 +Vmid_19 ;Vs[PIdx_20 ]= vTemp_20 +Vmid_20 ;Vs[PIdx_21 ]= vTemp_21 +Vmid_21 ;Vs[PIdx_22 ]= vTemp_22 +Vmid_22 ;Vs[PIdx_23 ]= vTemp_23 +Vmid_23 ;Vs[PIdx_24 ]= vTemp_24 +Vmid_24 ;Vs[PIdx_25 ]= vTemp_25 +Vmid_25 ;Vs[PIdx_26 ]= vTemp_26 +Vmid_26 ;
#endif		
			t+=0.5*sim.dt;
#ifdef HH
		
//#define THISCOMMANDHEREE30(VARILP) if(SMemMat.boolModel[PIdx_ ## VARILP ]==1) {CuDerivModel_kv(sim.dt,v_ ## VARILP ,ModelStates_ ## VARILP [0], p1_ ## VARILP ,p2_ ## VARILP ,p3_ ## VARILP ,p4_ ## VARILP ,p5_ ## VARILP);} if(SMemMat.boolModel[PIdx_ ## VARILP+SMemMat.N ]==1) {CuDerivModel_na(sim.dt,v_ ## VARILP ,ModelStates_ ## VARILP [1],ModelStates_ ## VARILP [2], p6_ ## VARILP ,p7_ ## VARILP ,p8_ ## VARILP ,p9_ ## VARILP ,p10_ ## VARILP,p11_ ## VARILP ,p12_ ## VARILP ,p13_ ## VARILP ,p14_ ## VARILP ,p15_ ## VARILP,p16_ ## VARILP ,p17_ ## VARILP);}//RBS should be generated automatically
	  if(SMemMat.boolModel[PIdx_1 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_1,ModelStates_1[0],ModelStates_1[1],p0_1 ,p1_1 ,ModelStates_1[8],ModelStates_1[9]);} if(SMemMat.boolModel[PIdx_1 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_1,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_1,ModelStates_1[3],p2_1 ,p3_1 ,p4_1 ,p5_1 ,ModelStates_1[8]);} if(SMemMat.boolModel[PIdx_1 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_1,ModelStates_1[4],p6_1 ,p7_1 ,p8_1 ,p9_1 ,p10_1 );} if(SMemMat.boolModel[PIdx_1 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_1,ModelStates_1[5],p11_1 ,p12_1 ,p13_1 ,p14_1 ,p15_1 );} if(SMemMat.boolModel[PIdx_1 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_1,ModelStates_1[6],ModelStates_1[7],p16_1 ,p17_1 ,p18_1 ,p19_1 ,p20_1 ,p21_1 ,p22_1 ,p23_1 ,p24_1 ,p25_1 ,p26_1 ,p27_1 );}  if(SMemMat.boolModel[PIdx_2 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_2,ModelStates_2[0],ModelStates_2[1],p0_2 ,p1_2 ,ModelStates_2[8],ModelStates_2[9]);} if(SMemMat.boolModel[PIdx_2 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_2,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_2,ModelStates_2[3],p2_2 ,p3_2 ,p4_2 ,p5_2 ,ModelStates_2[8]);} if(SMemMat.boolModel[PIdx_2 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_2,ModelStates_2[4],p6_2 ,p7_2 ,p8_2 ,p9_2 ,p10_2 );} if(SMemMat.boolModel[PIdx_2 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_2,ModelStates_2[5],p11_2 ,p12_2 ,p13_2 ,p14_2 ,p15_2 );} if(SMemMat.boolModel[PIdx_2 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_2,ModelStates_2[6],ModelStates_2[7],p16_2 ,p17_2 ,p18_2 ,p19_2 ,p20_2 ,p21_2 ,p22_2 ,p23_2 ,p24_2 ,p25_2 ,p26_2 ,p27_2 );}  if(SMemMat.boolModel[PIdx_3 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_3,ModelStates_3[0],ModelStates_3[1],p0_3 ,p1_3 ,ModelStates_3[8],ModelStates_3[9]);} if(SMemMat.boolModel[PIdx_3 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_3,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_3,ModelStates_3[3],p2_3 ,p3_3 ,p4_3 ,p5_3 ,ModelStates_3[8]);} if(SMemMat.boolModel[PIdx_3 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_3,ModelStates_3[4],p6_3 ,p7_3 ,p8_3 ,p9_3 ,p10_3 );} if(SMemMat.boolModel[PIdx_3 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_3,ModelStates_3[5],p11_3 ,p12_3 ,p13_3 ,p14_3 ,p15_3 );} if(SMemMat.boolModel[PIdx_3 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_3,ModelStates_3[6],ModelStates_3[7],p16_3 ,p17_3 ,p18_3 ,p19_3 ,p20_3 ,p21_3 ,p22_3 ,p23_3 ,p24_3 ,p25_3 ,p26_3 ,p27_3 );}  if(SMemMat.boolModel[PIdx_4 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_4,ModelStates_4[0],ModelStates_4[1],p0_4 ,p1_4 ,ModelStates_4[8],ModelStates_4[9]);} if(SMemMat.boolModel[PIdx_4 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_4,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_4,ModelStates_4[3],p2_4 ,p3_4 ,p4_4 ,p5_4 ,ModelStates_4[8]);} if(SMemMat.boolModel[PIdx_4 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_4,ModelStates_4[4],p6_4 ,p7_4 ,p8_4 ,p9_4 ,p10_4 );} if(SMemMat.boolModel[PIdx_4 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_4,ModelStates_4[5],p11_4 ,p12_4 ,p13_4 ,p14_4 ,p15_4 );} if(SMemMat.boolModel[PIdx_4 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_4,ModelStates_4[6],ModelStates_4[7],p16_4 ,p17_4 ,p18_4 ,p19_4 ,p20_4 ,p21_4 ,p22_4 ,p23_4 ,p24_4 ,p25_4 ,p26_4 ,p27_4 );}  if(SMemMat.boolModel[PIdx_5 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_5,ModelStates_5[0],ModelStates_5[1],p0_5 ,p1_5 ,ModelStates_5[8],ModelStates_5[9]);} if(SMemMat.boolModel[PIdx_5 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_5,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_5,ModelStates_5[3],p2_5 ,p3_5 ,p4_5 ,p5_5 ,ModelStates_5[8]);} if(SMemMat.boolModel[PIdx_5 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_5,ModelStates_5[4],p6_5 ,p7_5 ,p8_5 ,p9_5 ,p10_5 );} if(SMemMat.boolModel[PIdx_5 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_5,ModelStates_5[5],p11_5 ,p12_5 ,p13_5 ,p14_5 ,p15_5 );} if(SMemMat.boolModel[PIdx_5 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_5,ModelStates_5[6],ModelStates_5[7],p16_5 ,p17_5 ,p18_5 ,p19_5 ,p20_5 ,p21_5 ,p22_5 ,p23_5 ,p24_5 ,p25_5 ,p26_5 ,p27_5 );}  if(SMemMat.boolModel[PIdx_6 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_6,ModelStates_6[0],ModelStates_6[1],p0_6 ,p1_6 ,ModelStates_6[8],ModelStates_6[9]);} if(SMemMat.boolModel[PIdx_6 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_6,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_6,ModelStates_6[3],p2_6 ,p3_6 ,p4_6 ,p5_6 ,ModelStates_6[8]);} if(SMemMat.boolModel[PIdx_6 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_6,ModelStates_6[4],p6_6 ,p7_6 ,p8_6 ,p9_6 ,p10_6 );} if(SMemMat.boolModel[PIdx_6 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_6,ModelStates_6[5],p11_6 ,p12_6 ,p13_6 ,p14_6 ,p15_6 );} if(SMemMat.boolModel[PIdx_6 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_6,ModelStates_6[6],ModelStates_6[7],p16_6 ,p17_6 ,p18_6 ,p19_6 ,p20_6 ,p21_6 ,p22_6 ,p23_6 ,p24_6 ,p25_6 ,p26_6 ,p27_6 );}  if(SMemMat.boolModel[PIdx_7 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_7,ModelStates_7[0],ModelStates_7[1],p0_7 ,p1_7 ,ModelStates_7[8],ModelStates_7[9]);} if(SMemMat.boolModel[PIdx_7 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_7,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_7,ModelStates_7[3],p2_7 ,p3_7 ,p4_7 ,p5_7 ,ModelStates_7[8]);} if(SMemMat.boolModel[PIdx_7 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_7,ModelStates_7[4],p6_7 ,p7_7 ,p8_7 ,p9_7 ,p10_7 );} if(SMemMat.boolModel[PIdx_7 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_7,ModelStates_7[5],p11_7 ,p12_7 ,p13_7 ,p14_7 ,p15_7 );} if(SMemMat.boolModel[PIdx_7 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_7,ModelStates_7[6],ModelStates_7[7],p16_7 ,p17_7 ,p18_7 ,p19_7 ,p20_7 ,p21_7 ,p22_7 ,p23_7 ,p24_7 ,p25_7 ,p26_7 ,p27_7 );}  if(SMemMat.boolModel[PIdx_8 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_8,ModelStates_8[0],ModelStates_8[1],p0_8 ,p1_8 ,ModelStates_8[8],ModelStates_8[9]);} if(SMemMat.boolModel[PIdx_8 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_8,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_8,ModelStates_8[3],p2_8 ,p3_8 ,p4_8 ,p5_8 ,ModelStates_8[8]);} if(SMemMat.boolModel[PIdx_8 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_8,ModelStates_8[4],p6_8 ,p7_8 ,p8_8 ,p9_8 ,p10_8 );} if(SMemMat.boolModel[PIdx_8 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_8,ModelStates_8[5],p11_8 ,p12_8 ,p13_8 ,p14_8 ,p15_8 );} if(SMemMat.boolModel[PIdx_8 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_8,ModelStates_8[6],ModelStates_8[7],p16_8 ,p17_8 ,p18_8 ,p19_8 ,p20_8 ,p21_8 ,p22_8 ,p23_8 ,p24_8 ,p25_8 ,p26_8 ,p27_8 );}  if(SMemMat.boolModel[PIdx_9 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_9,ModelStates_9[0],ModelStates_9[1],p0_9 ,p1_9 ,ModelStates_9[8],ModelStates_9[9]);} if(SMemMat.boolModel[PIdx_9 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_9,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_9,ModelStates_9[3],p2_9 ,p3_9 ,p4_9 ,p5_9 ,ModelStates_9[8]);} if(SMemMat.boolModel[PIdx_9 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_9,ModelStates_9[4],p6_9 ,p7_9 ,p8_9 ,p9_9 ,p10_9 );} if(SMemMat.boolModel[PIdx_9 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_9,ModelStates_9[5],p11_9 ,p12_9 ,p13_9 ,p14_9 ,p15_9 );} if(SMemMat.boolModel[PIdx_9 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_9,ModelStates_9[6],ModelStates_9[7],p16_9 ,p17_9 ,p18_9 ,p19_9 ,p20_9 ,p21_9 ,p22_9 ,p23_9 ,p24_9 ,p25_9 ,p26_9 ,p27_9 );}  if(SMemMat.boolModel[PIdx_10 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_10,ModelStates_10[0],ModelStates_10[1],p0_10 ,p1_10 ,ModelStates_10[8],ModelStates_10[9]);} if(SMemMat.boolModel[PIdx_10 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_10,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_10,ModelStates_10[3],p2_10 ,p3_10 ,p4_10 ,p5_10 ,ModelStates_10[8]);} if(SMemMat.boolModel[PIdx_10 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_10,ModelStates_10[4],p6_10 ,p7_10 ,p8_10 ,p9_10 ,p10_10 );} if(SMemMat.boolModel[PIdx_10 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_10,ModelStates_10[5],p11_10 ,p12_10 ,p13_10 ,p14_10 ,p15_10 );} if(SMemMat.boolModel[PIdx_10 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_10,ModelStates_10[6],ModelStates_10[7],p16_10 ,p17_10 ,p18_10 ,p19_10 ,p20_10 ,p21_10 ,p22_10 ,p23_10 ,p24_10 ,p25_10 ,p26_10 ,p27_10 );}  if(SMemMat.boolModel[PIdx_11 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_11,ModelStates_11[0],ModelStates_11[1],p0_11 ,p1_11 ,ModelStates_11[8],ModelStates_11[9]);} if(SMemMat.boolModel[PIdx_11 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_11,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_11,ModelStates_11[3],p2_11 ,p3_11 ,p4_11 ,p5_11 ,ModelStates_11[8]);} if(SMemMat.boolModel[PIdx_11 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_11,ModelStates_11[4],p6_11 ,p7_11 ,p8_11 ,p9_11 ,p10_11 );} if(SMemMat.boolModel[PIdx_11 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_11,ModelStates_11[5],p11_11 ,p12_11 ,p13_11 ,p14_11 ,p15_11 );} if(SMemMat.boolModel[PIdx_11 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_11,ModelStates_11[6],ModelStates_11[7],p16_11 ,p17_11 ,p18_11 ,p19_11 ,p20_11 ,p21_11 ,p22_11 ,p23_11 ,p24_11 ,p25_11 ,p26_11 ,p27_11 );}  if(SMemMat.boolModel[PIdx_12 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_12,ModelStates_12[0],ModelStates_12[1],p0_12 ,p1_12 ,ModelStates_12[8],ModelStates_12[9]);} if(SMemMat.boolModel[PIdx_12 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_12,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_12,ModelStates_12[3],p2_12 ,p3_12 ,p4_12 ,p5_12 ,ModelStates_12[8]);} if(SMemMat.boolModel[PIdx_12 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_12,ModelStates_12[4],p6_12 ,p7_12 ,p8_12 ,p9_12 ,p10_12 );} if(SMemMat.boolModel[PIdx_12 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_12,ModelStates_12[5],p11_12 ,p12_12 ,p13_12 ,p14_12 ,p15_12 );} if(SMemMat.boolModel[PIdx_12 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_12,ModelStates_12[6],ModelStates_12[7],p16_12 ,p17_12 ,p18_12 ,p19_12 ,p20_12 ,p21_12 ,p22_12 ,p23_12 ,p24_12 ,p25_12 ,p26_12 ,p27_12 );}  if(SMemMat.boolModel[PIdx_13 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_13,ModelStates_13[0],ModelStates_13[1],p0_13 ,p1_13 ,ModelStates_13[8],ModelStates_13[9]);} if(SMemMat.boolModel[PIdx_13 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_13,ModelStates_13[2],ModelStates_13[9],ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_13,ModelStates_13[3],p2_13 ,p3_13 ,p4_13 ,p5_13 ,ModelStates_13[8]);} if(SMemMat.boolModel[PIdx_13 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_13,ModelStates_13[4],p6_13 ,p7_13 ,p8_13 ,p9_13 ,p10_13 );} if(SMemMat.boolModel[PIdx_13 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_13,ModelStates_13[5],p11_13 ,p12_13 ,p13_13 ,p14_13 ,p15_13 );} if(SMemMat.boolModel[PIdx_13 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_13,ModelStates_13[6],ModelStates_13[7],p16_13 ,p17_13 ,p18_13 ,p19_13 ,p20_13 ,p21_13 ,p22_13 ,p23_13 ,p24_13 ,p25_13 ,p26_13 ,p27_13 );}  if(SMemMat.boolModel[PIdx_14 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_14,ModelStates_14[0],ModelStates_14[1],p0_14 ,p1_14 ,ModelStates_14[8],ModelStates_14[9]);} if(SMemMat.boolModel[PIdx_14 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_14,ModelStates_14[2],ModelStates_14[9],ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_14,ModelStates_14[3],p2_14 ,p3_14 ,p4_14 ,p5_14 ,ModelStates_14[8]);} if(SMemMat.boolModel[PIdx_14 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_14,ModelStates_14[4],p6_14 ,p7_14 ,p8_14 ,p9_14 ,p10_14 );} if(SMemMat.boolModel[PIdx_14 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_14,ModelStates_14[5],p11_14 ,p12_14 ,p13_14 ,p14_14 ,p15_14 );} if(SMemMat.boolModel[PIdx_14 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_14,ModelStates_14[6],ModelStates_14[7],p16_14 ,p17_14 ,p18_14 ,p19_14 ,p20_14 ,p21_14 ,p22_14 ,p23_14 ,p24_14 ,p25_14 ,p26_14 ,p27_14 );}  if(SMemMat.boolModel[PIdx_15 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_15,ModelStates_15[0],ModelStates_15[1],p0_15 ,p1_15 ,ModelStates_15[8],ModelStates_15[9]);} if(SMemMat.boolModel[PIdx_15 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_15,ModelStates_15[2],ModelStates_15[9],ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_15,ModelStates_15[3],p2_15 ,p3_15 ,p4_15 ,p5_15 ,ModelStates_15[8]);} if(SMemMat.boolModel[PIdx_15 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_15,ModelStates_15[4],p6_15 ,p7_15 ,p8_15 ,p9_15 ,p10_15 );} if(SMemMat.boolModel[PIdx_15 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_15,ModelStates_15[5],p11_15 ,p12_15 ,p13_15 ,p14_15 ,p15_15 );} if(SMemMat.boolModel[PIdx_15 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_15,ModelStates_15[6],ModelStates_15[7],p16_15 ,p17_15 ,p18_15 ,p19_15 ,p20_15 ,p21_15 ,p22_15 ,p23_15 ,p24_15 ,p25_15 ,p26_15 ,p27_15 );}  if(SMemMat.boolModel[PIdx_16 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_16,ModelStates_16[0],ModelStates_16[1],p0_16 ,p1_16 ,ModelStates_16[8],ModelStates_16[9]);} if(SMemMat.boolModel[PIdx_16 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_16,ModelStates_16[2],ModelStates_16[9],ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_16,ModelStates_16[3],p2_16 ,p3_16 ,p4_16 ,p5_16 ,ModelStates_16[8]);} if(SMemMat.boolModel[PIdx_16 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_16,ModelStates_16[4],p6_16 ,p7_16 ,p8_16 ,p9_16 ,p10_16 );} if(SMemMat.boolModel[PIdx_16 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_16,ModelStates_16[5],p11_16 ,p12_16 ,p13_16 ,p14_16 ,p15_16 );} if(SMemMat.boolModel[PIdx_16 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_16,ModelStates_16[6],ModelStates_16[7],p16_16 ,p17_16 ,p18_16 ,p19_16 ,p20_16 ,p21_16 ,p22_16 ,p23_16 ,p24_16 ,p25_16 ,p26_16 ,p27_16 );}  if(SMemMat.boolModel[PIdx_17 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_17,ModelStates_17[0],ModelStates_17[1],p0_17 ,p1_17 ,ModelStates_17[8],ModelStates_17[9]);} if(SMemMat.boolModel[PIdx_17 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_17,ModelStates_17[2],ModelStates_17[9],ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_17,ModelStates_17[3],p2_17 ,p3_17 ,p4_17 ,p5_17 ,ModelStates_17[8]);} if(SMemMat.boolModel[PIdx_17 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_17,ModelStates_17[4],p6_17 ,p7_17 ,p8_17 ,p9_17 ,p10_17 );} if(SMemMat.boolModel[PIdx_17 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_17,ModelStates_17[5],p11_17 ,p12_17 ,p13_17 ,p14_17 ,p15_17 );} if(SMemMat.boolModel[PIdx_17 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_17,ModelStates_17[6],ModelStates_17[7],p16_17 ,p17_17 ,p18_17 ,p19_17 ,p20_17 ,p21_17 ,p22_17 ,p23_17 ,p24_17 ,p25_17 ,p26_17 ,p27_17 );}  if(SMemMat.boolModel[PIdx_18 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_18,ModelStates_18[0],ModelStates_18[1],p0_18 ,p1_18 ,ModelStates_18[8],ModelStates_18[9]);} if(SMemMat.boolModel[PIdx_18 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_18,ModelStates_18[2],ModelStates_18[9],ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_18,ModelStates_18[3],p2_18 ,p3_18 ,p4_18 ,p5_18 ,ModelStates_18[8]);} if(SMemMat.boolModel[PIdx_18 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_18,ModelStates_18[4],p6_18 ,p7_18 ,p8_18 ,p9_18 ,p10_18 );} if(SMemMat.boolModel[PIdx_18 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_18,ModelStates_18[5],p11_18 ,p12_18 ,p13_18 ,p14_18 ,p15_18 );} if(SMemMat.boolModel[PIdx_18 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_18,ModelStates_18[6],ModelStates_18[7],p16_18 ,p17_18 ,p18_18 ,p19_18 ,p20_18 ,p21_18 ,p22_18 ,p23_18 ,p24_18 ,p25_18 ,p26_18 ,p27_18 );}  if(SMemMat.boolModel[PIdx_19 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_19,ModelStates_19[0],ModelStates_19[1],p0_19 ,p1_19 ,ModelStates_19[8],ModelStates_19[9]);} if(SMemMat.boolModel[PIdx_19 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_19,ModelStates_19[2],ModelStates_19[9],ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_19,ModelStates_19[3],p2_19 ,p3_19 ,p4_19 ,p5_19 ,ModelStates_19[8]);} if(SMemMat.boolModel[PIdx_19 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_19,ModelStates_19[4],p6_19 ,p7_19 ,p8_19 ,p9_19 ,p10_19 );} if(SMemMat.boolModel[PIdx_19 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_19,ModelStates_19[5],p11_19 ,p12_19 ,p13_19 ,p14_19 ,p15_19 );} if(SMemMat.boolModel[PIdx_19 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_19,ModelStates_19[6],ModelStates_19[7],p16_19 ,p17_19 ,p18_19 ,p19_19 ,p20_19 ,p21_19 ,p22_19 ,p23_19 ,p24_19 ,p25_19 ,p26_19 ,p27_19 );}  if(SMemMat.boolModel[PIdx_20 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_20,ModelStates_20[0],ModelStates_20[1],p0_20 ,p1_20 ,ModelStates_20[8],ModelStates_20[9]);} if(SMemMat.boolModel[PIdx_20 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_20,ModelStates_20[2],ModelStates_20[9],ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_20,ModelStates_20[3],p2_20 ,p3_20 ,p4_20 ,p5_20 ,ModelStates_20[8]);} if(SMemMat.boolModel[PIdx_20 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_20,ModelStates_20[4],p6_20 ,p7_20 ,p8_20 ,p9_20 ,p10_20 );} if(SMemMat.boolModel[PIdx_20 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_20,ModelStates_20[5],p11_20 ,p12_20 ,p13_20 ,p14_20 ,p15_20 );} if(SMemMat.boolModel[PIdx_20 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_20,ModelStates_20[6],ModelStates_20[7],p16_20 ,p17_20 ,p18_20 ,p19_20 ,p20_20 ,p21_20 ,p22_20 ,p23_20 ,p24_20 ,p25_20 ,p26_20 ,p27_20 );}  if(SMemMat.boolModel[PIdx_21 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_21,ModelStates_21[0],ModelStates_21[1],p0_21 ,p1_21 ,ModelStates_21[8],ModelStates_21[9]);} if(SMemMat.boolModel[PIdx_21 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_21,ModelStates_21[2],ModelStates_21[9],ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_21,ModelStates_21[3],p2_21 ,p3_21 ,p4_21 ,p5_21 ,ModelStates_21[8]);} if(SMemMat.boolModel[PIdx_21 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_21,ModelStates_21[4],p6_21 ,p7_21 ,p8_21 ,p9_21 ,p10_21 );} if(SMemMat.boolModel[PIdx_21 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_21,ModelStates_21[5],p11_21 ,p12_21 ,p13_21 ,p14_21 ,p15_21 );} if(SMemMat.boolModel[PIdx_21 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_21,ModelStates_21[6],ModelStates_21[7],p16_21 ,p17_21 ,p18_21 ,p19_21 ,p20_21 ,p21_21 ,p22_21 ,p23_21 ,p24_21 ,p25_21 ,p26_21 ,p27_21 );}  if(SMemMat.boolModel[PIdx_22 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_22,ModelStates_22[0],ModelStates_22[1],p0_22 ,p1_22 ,ModelStates_22[8],ModelStates_22[9]);} if(SMemMat.boolModel[PIdx_22 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_22,ModelStates_22[2],ModelStates_22[9],ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_22,ModelStates_22[3],p2_22 ,p3_22 ,p4_22 ,p5_22 ,ModelStates_22[8]);} if(SMemMat.boolModel[PIdx_22 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_22,ModelStates_22[4],p6_22 ,p7_22 ,p8_22 ,p9_22 ,p10_22 );} if(SMemMat.boolModel[PIdx_22 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_22,ModelStates_22[5],p11_22 ,p12_22 ,p13_22 ,p14_22 ,p15_22 );} if(SMemMat.boolModel[PIdx_22 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_22,ModelStates_22[6],ModelStates_22[7],p16_22 ,p17_22 ,p18_22 ,p19_22 ,p20_22 ,p21_22 ,p22_22 ,p23_22 ,p24_22 ,p25_22 ,p26_22 ,p27_22 );}  if(SMemMat.boolModel[PIdx_23 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_23,ModelStates_23[0],ModelStates_23[1],p0_23 ,p1_23 ,ModelStates_23[8],ModelStates_23[9]);} if(SMemMat.boolModel[PIdx_23 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_23,ModelStates_23[2],ModelStates_23[9],ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_23,ModelStates_23[3],p2_23 ,p3_23 ,p4_23 ,p5_23 ,ModelStates_23[8]);} if(SMemMat.boolModel[PIdx_23 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_23,ModelStates_23[4],p6_23 ,p7_23 ,p8_23 ,p9_23 ,p10_23 );} if(SMemMat.boolModel[PIdx_23 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_23,ModelStates_23[5],p11_23 ,p12_23 ,p13_23 ,p14_23 ,p15_23 );} if(SMemMat.boolModel[PIdx_23 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_23,ModelStates_23[6],ModelStates_23[7],p16_23 ,p17_23 ,p18_23 ,p19_23 ,p20_23 ,p21_23 ,p22_23 ,p23_23 ,p24_23 ,p25_23 ,p26_23 ,p27_23 );}  if(SMemMat.boolModel[PIdx_24 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_24,ModelStates_24[0],ModelStates_24[1],p0_24 ,p1_24 ,ModelStates_24[8],ModelStates_24[9]);} if(SMemMat.boolModel[PIdx_24 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_24,ModelStates_24[2],ModelStates_24[9],ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_24,ModelStates_24[3],p2_24 ,p3_24 ,p4_24 ,p5_24 ,ModelStates_24[8]);} if(SMemMat.boolModel[PIdx_24 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_24,ModelStates_24[4],p6_24 ,p7_24 ,p8_24 ,p9_24 ,p10_24 );} if(SMemMat.boolModel[PIdx_24 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_24,ModelStates_24[5],p11_24 ,p12_24 ,p13_24 ,p14_24 ,p15_24 );} if(SMemMat.boolModel[PIdx_24 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_24,ModelStates_24[6],ModelStates_24[7],p16_24 ,p17_24 ,p18_24 ,p19_24 ,p20_24 ,p21_24 ,p22_24 ,p23_24 ,p24_24 ,p25_24 ,p26_24 ,p27_24 );}  if(SMemMat.boolModel[PIdx_25 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_25,ModelStates_25[0],ModelStates_25[1],p0_25 ,p1_25 ,ModelStates_25[8],ModelStates_25[9]);} if(SMemMat.boolModel[PIdx_25 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_25,ModelStates_25[2],ModelStates_25[9],ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_25,ModelStates_25[3],p2_25 ,p3_25 ,p4_25 ,p5_25 ,ModelStates_25[8]);} if(SMemMat.boolModel[PIdx_25 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_25,ModelStates_25[4],p6_25 ,p7_25 ,p8_25 ,p9_25 ,p10_25 );} if(SMemMat.boolModel[PIdx_25 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_25,ModelStates_25[5],p11_25 ,p12_25 ,p13_25 ,p14_25 ,p15_25 );} if(SMemMat.boolModel[PIdx_25 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_25,ModelStates_25[6],ModelStates_25[7],p16_25 ,p17_25 ,p18_25 ,p19_25 ,p20_25 ,p21_25 ,p22_25 ,p23_25 ,p24_25 ,p25_25 ,p26_25 ,p27_25 );}  if(SMemMat.boolModel[PIdx_26 +0*SMemMat.N]){CuDerivModel_ca(sim.dt, v_26,ModelStates_26[0],ModelStates_26[1],p0_26 ,p1_26 ,ModelStates_26[8],ModelStates_26[9]);} if(SMemMat.boolModel[PIdx_26 +1*SMemMat.N]){CuDerivModel_cad(sim.dt, v_26,ModelStates_26[2],ModelStates_26[9],ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +2*SMemMat.N]){CuDerivModel_kca(sim.dt, v_26,ModelStates_26[3],p2_26 ,p3_26 ,p4_26 ,p5_26 ,ModelStates_26[8]);} if(SMemMat.boolModel[PIdx_26 +3*SMemMat.N]){CuDerivModel_km(sim.dt, v_26,ModelStates_26[4],p6_26 ,p7_26 ,p8_26 ,p9_26 ,p10_26 );} if(SMemMat.boolModel[PIdx_26 +4*SMemMat.N]){CuDerivModel_kv(sim.dt, v_26,ModelStates_26[5],p11_26 ,p12_26 ,p13_26 ,p14_26 ,p15_26 );} if(SMemMat.boolModel[PIdx_26 +5*SMemMat.N]){CuDerivModel_na(sim.dt, v_26,ModelStates_26[6],ModelStates_26[7],p16_26 ,p17_26 ,p18_26 ,p19_26 ,p20_26 ,p21_26 ,p22_26 ,p23_26 ,p24_26 ,p25_26 ,p26_26 ,p27_26 );}
#endif


	}

}

void ReadParamsMatX(const char* FN,MYFTYPE* ParamsM,MYDTYPE NParams,MYDTYPE Nx) {
	char FileName[300];
	//sprintf(FileName,"%s%d.mat",FN,MUL32*32);
	sprintf(FileName,"%sForC.mat",FN);
	FILE *fl = fopen(FileName, "rb"); // YYY add FILE*
	if (!fl) {
		printf("Failed to read TreeData.x\n");
		return;
	}
	fread(ParamsM, sizeof(MYFTYPE), Nx*NParams, fl);
	fclose(fl);
}
void ReadParamsMat(const char* FN,MYFTYPE** ParamsM,MYDTYPE NParams,MYDTYPE Nx) {
	char FileName[300];
	//sprintf(FileName,"%s%d.mat",FN,MUL32*32);
	sprintf(FileName,"%sForC.mat",FN);
	FILE *fl = fopen(FileName, "rb"); // YYY add FILE*
	if (!fl) {
		printf("Failed to read TreeData.x\n");
		return;
	}
	for(int i=0;i<NParams;i++){
		ParamsM[i]=(MYFTYPE*)malloc(Nx * sizeof(MYFTYPE));
		fread(ParamsM[i], sizeof(MYFTYPE), Nx, fl);
	}
	fclose(fl);
}

__constant__ MYDTYPE* constKs;

cudaError_t stEfork2TimeLoopGPU(Stim stim, Sim sim, MYFTYPE* ParamsM, HMat& InMat, MYFTYPE* V,MYDTYPE CompDepth,MYDTYPE CompFDepth) { 

	cudaError_t cudaStatus;
	cudaStatus = cudaSetDevice(0);
	cudaStatus = cudaDeviceReset();
	MYFTYPE *VHotsGlobal,*VHotsHost;
	MYDTYPE Nt=ceil(sim.TFinal/sim.dt);
	VHotsHost=(MYFTYPE*)malloc(stim.NStimuli*Nt*sizeof(MYFTYPE));
	
	int i,j,t;
	// For matrix -
	MYFTYPE *PXOut_d,*PFOut_d;
	MYFTYPE *uHPOut_d, *bHPOut_d;
	HMat Mat_d;
	Mat_d.N=InMat.N;
	Mat_d.Depth=InMat.Depth;
	Mat_d.NModels=InMat.NModels;
	Mat_d.LognDepth=InMat.LognDepth;
	Mat_d.nFathers=InMat.nFathers;
	Mat_d.nCallForFather=InMat.nCallForFather;
	Mat_d.nLRel=InMat.nLRel;
	Mat_d.nFLRel=InMat.nFLRel;
	Stim stim_d;
	stim_d.NStimuli = stim.NStimuli;
	stim_d.comp = stim.comp;
	stim_d.area = stim.area;
	stim_d.loc = stim.loc;
	cudaStatus = cudaMalloc((void**)&stim_d.dels, stim_d.NStimuli * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&stim_d.durs, stim_d.NStimuli * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&stim_d.amps, stim_d.NStimuli * sizeof(MYFTYPE));
	
	


	cudaStatus = cudaMalloc((void**)&Mat_d.e, InMat.N * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.f, InMat.N * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.Ks, InMat.N * sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.boolModel, InMat.N * InMat.NModels* sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.Cms, InMat.N * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.SonNoVec, InMat.N* sizeof(MYDTYPE));
	
	cudaStatus = cudaMalloc((void**)&Mat_d.Fathers, InMat.nFathers * sizeof(MYDTYPE));
	
	cudaStatus = cudaMalloc((void**)&Mat_d.RelStarts, InMat.nFathers * sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.RelEnds, (InMat.nFathers) * sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.RelVec, InMat.nCallForFather * sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.SegStartI, (InMat.nCallForFather+1) * sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.SegEndI, (InMat.nCallForFather+1) * sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&VHotsGlobal, Nt *stim.NStimuli* sizeof(MYFTYPE));
	// 32 data
#ifdef BKSUB1
	cudaStatus = cudaMalloc((void**)&Mat_d.FIdxs, InMat.LognDepth*InMat.N* sizeof(MYDTYPE));
#endif
#ifdef BKSUB2
	cudaStatus = cudaMalloc((void**)&Mat_d.KsB, (InMat.N +1)* sizeof(MYDTYPE));
#endif
	cudaStatus = cudaMalloc((void**)&Mat_d.CompByLevel32, (CompDepth)*WARPSIZE* sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.CompByFLevel32, (CompFDepth)*WARPSIZE* sizeof(MYDTYPE));

	cudaStatus = cudaMalloc((void**)&Mat_d.LRelStarts, Mat_d.nLRel* sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.LRelEnds, Mat_d.nLRel* sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.FLRelStarts, Mat_d.nFLRel* sizeof(MYDTYPE));
	cudaStatus = cudaMalloc((void**)&Mat_d.FLRelEnds, Mat_d.nFLRel* sizeof(MYDTYPE));

	

	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaMalloc failed!");
		return cudaStatus;  
	}

	cudaStatus = cudaMemcpy(stim_d.dels, stim.dels, stim.NStimuli * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(stim_d.durs, stim.durs, stim.NStimuli * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(stim_d.amps, stim.amps, stim.NStimuli * sizeof(MYFTYPE), cudaMemcpyHostToDevice);


	cudaStatus = cudaMalloc((void**)&Mat_d.Fathers, InMat.nFathers * sizeof(MYDTYPE));
	cudaStatus = cudaMemcpy(Mat_d.e, InMat.e, InMat.N * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.f, InMat.f, InMat.N * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.Ks, InMat.Ks, InMat.N * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.boolModel, InMat.boolModel, InMat.N * InMat.NModels * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.Cms, InMat.Cms, InMat.N * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.SonNoVec, InMat.SonNoVec, InMat.N * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	
	cudaStatus = cudaMemcpy(Mat_d.Fathers, InMat.Fathers, InMat.nFathers * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	
	cudaStatus = cudaMemcpy(Mat_d.RelStarts, InMat.RelStarts, InMat.nFathers * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.RelEnds, InMat.RelEnds, InMat.nFathers * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.RelVec, InMat.RelVec, InMat.nCallForFather* sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.SegStartI, InMat.SegStartI, (InMat.nCallForFather+1) * sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.SegEndI, InMat.SegEndI, (InMat.nCallForFather+1)* sizeof(MYDTYPE), cudaMemcpyHostToDevice);

	
	
	// 32 data
#ifdef BKSUB1
	cudaStatus = cudaMemcpy(Mat_d.FIdxs, InMat.FIdxs, InMat.LognDepth*InMat.N* sizeof(MYDTYPE), cudaMemcpyHostToDevice);
#endif
#ifdef BKSUB2
	cudaStatus = cudaMemcpy(Mat_d.KsB, InMat.KsB,(InMat.N+1)*sizeof(MYDTYPE), cudaMemcpyHostToDevice);
#endif

	cudaStatus = cudaMemcpy(Mat_d.CompByLevel32, InMat.CompByLevel32, (CompDepth)*WARPSIZE*sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.CompByFLevel32, InMat.CompByFLevel32, (CompFDepth)*WARPSIZE*sizeof(MYDTYPE), cudaMemcpyHostToDevice);

	cudaStatus = cudaMemcpy(Mat_d.LRelStarts, InMat.LRelStarts,InMat.nLRel*sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.LRelEnds, InMat.LRelEnds,InMat.nLRel*sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.FLRelStarts, InMat.FLRelStarts,InMat.nFLRel*sizeof(MYDTYPE), cudaMemcpyHostToDevice);
	cudaStatus = cudaMemcpy(Mat_d.FLRelEnds, InMat.FLRelEnds,InMat.nFLRel*sizeof(MYDTYPE), cudaMemcpyHostToDevice);

	
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaMemcpyToDevice failed!");
		return cudaStatus;  
	}

	cudaStatus = cudaMalloc((void**)&PXOut_d, (InMat.N+1) * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&PFOut_d, (InMat.N+1) * sizeof(MYFTYPE));
	cudaStatus = cudaThreadSynchronize();
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaDeviceSynchronize returned error code %d after launching stEfork2TimeLoopGPU!\n", cudaStatus);
		return cudaStatus;
	}

	// A bit more
	/*MYFTYPE *d_d,*Iapp_d,*VHots_d,*dOrig_d,*V_d;

	cudaStatus = cudaMalloc((void**)&d_d, InMat.N * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&VHots_d, sim.Nt*NSTIMULI * sizeof(MYFTYPE*));
	cudaStatus = cudaMalloc((void**)&dOrig_d, InMat.N * sizeof(MYFTYPE));
	cudaStatus = cudaMalloc((void**)&V_d, InMat.N * sizeof(MYFTYPE));
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaMalloc failed!");
		return cudaStatus;  
	}*/
	MYFTYPE *V_d;
	cudaStatus = cudaMalloc((void**)&V_d, InMat.N * sizeof(MYFTYPE));

	//RRR  For model
	// allocation
	MYFTYPE *d_modelParams;
	cudaStatus = cudaMalloc((void**)&d_modelParams, NPARAMS * InMat.N * sizeof(MYFTYPE));
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaMalloc failed!");
		return cudaStatus;  
	}
	// copying
	MYFTYPE* ParamsForCuda;
	ParamsForCuda=(MYFTYPE*)malloc(InMat.N * NPARAMS *  sizeof(MYFTYPE));
	ReadParamsMatX(ParamsMat_FN,ParamsForCuda,NPARAMS,InMat.N);
	cudaStatus = cudaMemcpy(d_modelParams, ParamsForCuda, NPARAMS * InMat.N * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	
	cudaStatus = cudaMemcpy(V_d, V, InMat.N * sizeof(MYFTYPE), cudaMemcpyHostToDevice);
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaMemcpyToDevice failed!");
		return cudaStatus;  
	}

	dim3 blockDim(WARPSIZE,stim.NStimuli);
	dim3 gridDim(1,NNEURONS);

	MYDTYPE offset=0;
	offset+=InMat.N*sizeof(MYFTYPE);
	offset+=InMat.N*sizeof(MYFTYPE);
	offset+=InMat.N*sizeof(MYFTYPE);
	// 1 - e,f,Cms
#ifdef BKSUB1
	offset+=InMat.N*InMat.LognDepth*sizeof(MYDTYPE);
#endif
	offset+=InMat.N*sizeof(MYDTYPE);
	offset+=InMat.N*InMat.NModels*sizeof(MYDTYPE);
	// 2 FIdxs, Ks, boolModel
	offset+=InMat.nFathers*sizeof(MYDTYPE); // RelStarts
	offset+=InMat.nFathers*sizeof(MYDTYPE); // RelEnds
	offset+=InMat.nCallForFather*sizeof(MYDTYPE); // RelVec
	offset+=(InMat.nCallForFather+1)*sizeof(MYDTYPE); // SegStartI
	offset+=(InMat.nCallForFather+1)*sizeof(MYDTYPE); // SegEndI
	offset+=InMat.nFathers*sizeof(MYDTYPE); // Fathers
	// 3 RelStarts RelEnds RelVec SegStartI SegEndI Fathers
	offset+=WARPSIZE*(CompDepth)*sizeof(MYDTYPE);
	offset+=WARPSIZE*(CompFDepth)*sizeof(MYDTYPE);
	// 4 CompByLevel32 CompByFLevel32
	offset+=Mat_d.nLRel*sizeof(MYDTYPE);
	offset+=Mat_d.nLRel*sizeof(MYDTYPE);
	offset+=Mat_d.nFLRel*sizeof(MYDTYPE);
	offset+=Mat_d.nFLRel*sizeof(MYDTYPE);
#ifdef BKSUB2
	offset+=(Mat_d.N+1)*sizeof(MYDTYPE);
#endif
	// 5 LRelStarts LRelEnds FLRelStarts  FLRelEnds KsB
	offset=ceilf(MYFTYPE(offset)/sizeof(MYFTYPE))*sizeof(MYFTYPE);
	MYDTYPE FrameworkMemSize=offset;
//PerStimulus

	offset+=(InMat.N+2)*sizeof(MYFTYPE);  // uHP (Diag)
	offset+=(InMat.N+2)*sizeof(MYFTYPE); // bHP (rhs)
	offset+=InMat.N*sizeof(MYFTYPE); // Vs

	offset+=WARPSIZE*sizeof(MYFTYPE);//SMemVHot
	MYDTYPE PerStimulus=offset-FrameworkMemSize;
	
	MYDTYPE TotalSMem=FrameworkMemSize+PerStimulus*stim.NStimuli;
	printf("Asking %d bytes, %d+%d*%d\n",TotalSMem,FrameworkMemSize,PerStimulus,stim.NStimuli);
	clock_t begin,end;
	
	begin=clock();
	stEfork2TimeLoopGPUKernel<<<gridDim, blockDim,TotalSMem>>>(stim_d, d_modelParams, sim, Mat_d, V_d,VHotsGlobal,CompDepth,CompFDepth); // RRR
	cudaStatus = cudaThreadSynchronize();

	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaDeviceSynchronize returned error code %d after launching stEfork2TimeLoopGPUKernel!\n", cudaStatus);
		return cudaStatus;
	}
	cudaStatus = cudaMemcpy(VHotsHost, VHotsGlobal, Nt * stim.NStimuli* sizeof(MYFTYPE), cudaMemcpyDeviceToHost); 
	end=clock();
	double totalT = diffclock(end,begin);
	printf("stEfork2TimeLoopGPU took %g milliseconds\n",totalT);
	FILE *file = fopen(TIMES_FN, "wb");
	if ( file ) {
		MYDTYPE mul32 = MUL32;
		fwrite(&mul32,sizeof(MYDTYPE),1,file);
		fwrite(&totalT,sizeof(double),1,file);
	} else {
		printf("ERR SaveArrayToFile %s\n",TIMES_FN);
	}
	fclose(file);
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "cudaMemcpyDeviceToHost failed!");
		return cudaStatus;  
	}
	SaveArrayToFile(VHOT_OUT_FN_P,Nt*stim.NStimuli,VHotsHost);
	
	return cudaStatus;
}

cudaError_t stEfork2Main(Stim stim, Sim sim, MYFTYPE* ParamsM, HMat& InMat, MYFTYPE* V,MYDTYPE CompDepth,MYDTYPE CompFDepth) {
	cudaError_t cudaStatus;
	cudaStatus = cudaSetDevice(0);
	
	stEfork2TimeLoopGPU(stim, sim, ParamsM, InMat, V,CompDepth,CompFDepth); //RRR sim
	
	


	return cudaStatus;
}
