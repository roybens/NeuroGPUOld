#line 1 "x64/Debug/CudaStuff.cudafe1.cpp"
#line 1 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
#pragma section("__nv_managed_data__")
#line 1 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"



#line 1 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
extern "C" {
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
}
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C" {
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef char *va_list; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C++" {
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference { 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value}; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template < typename _Ty >
        void __vcrt_va_start_verify_argument_type ( ) throw ( )
        {
            static_assert ( ! __vcrt_va_list_is_reference < _Ty > :: __the_value, "va_start argument must not have reference type and must not be parenthesized" );
        }
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( pop )
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"






























































#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"



#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













        














#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
























#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



























































































#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"










enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    








    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,

    



    cudaErrorNvlinkUncorrectable          =     80,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum  cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum  cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum  cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum  cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91 
};





enum  cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct  cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
};















































































typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  struct CUuuid_st cudaUUID_t;




typedef  enum cudaOutputMode cudaOutputMode_t;


 

#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct  surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"






















#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __declspec(align(2)) char2
{
    signed char x, y;
};

struct  __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct  __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __declspec(align(4)) short2
{
    short x, y;
};

struct  __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct  __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  __declspec(align(8)) int2 { int x; int y; };
struct  __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct  __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct  __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  __declspec(align(8)) long2 { long int x; long int y; };
struct  __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct  __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct  __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct  __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct  __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct  __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct  __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct  __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct  __declspec(align(16)) double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct  __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;







struct  dim3
{
    unsigned int x, y, z;

      dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
      dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
      operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
};

typedef  struct dim3 dim3;



#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"










































#line 44 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"






#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"

#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"







































































































































































































#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef __int64 ptrdiff_t; 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef __int64 intptr_t; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern "C++" {
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}__pragma(pack ( pop )) 
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
extern "C++" {
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
template< class _Ty> 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct _CrtEnableIf< true, _Ty>  { 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef _Ty _Type; 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}; 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(noreturn) 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invoke_watson(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef unsigned short wint_t; 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef unsigned short wctype_t; 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef long __time32_t; 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __int64 __time64_t; 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_data_public { 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
const unsigned short *_locale_pctype; 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
int _locale_mb_cur_max; 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned _locale_lc_codepage; 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} __crt_locale_data_public; 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_pointers { 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_data *locinfo; 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_multibyte_data *mbcinfo; 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} __crt_locale_pointers; 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __crt_locale_pointers *_locale_t; 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct _Mbstatet { 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned long _Wchar; 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned short _Byte, _State; 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} _Mbstatet; 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef _Mbstatet mbstate_t; 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}__pragma(pack ( pop )) 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"













#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
typedef decltype((__nullptr)) nullptr_t; 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
}
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
using std::nullptr_t;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
}__pragma(pack ( pop )) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"







































































































































































#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef const cudaArray *cudaArray_const_t; 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaArray; 
#line 787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaMipmappedArray; 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"























#line 898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











































































#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















































#line 1033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1013 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 1035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 1044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1068 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 1090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 1173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 1187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









#line 1203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

























































































































































































#line 1388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 1312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









































































































































#line 1446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"








#line 1468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"








#line 1476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"











#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"









#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"







#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"




#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"













#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"









#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"









#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"



























#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"



























#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"




#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
enum cudaDataType_t { 
#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_16F = 2, 
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_16F = 6, 
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32F = 0, 
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32F = 4, 
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_64F = 1, 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_64F = 5, 
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_8I = 3, 
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_8I = 7, 
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_8U, 
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_8U, 
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32I, 
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32I, 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32U, 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32U
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
} cudaDataType; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
enum libraryPropertyType_t { 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
MAJOR_VERSION, 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
MINOR_VERSION, 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
PATCH_LEVEL
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
} libraryPropertyType; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size); 
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
}
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern "C" {
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 602 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadExit(); 
#line 861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
#line 1593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 1647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 1698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 1727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 1789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 1830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 1867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 1896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 1939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 1963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 2051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 2290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 2321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 2353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 2385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 2410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 2451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 2560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 2614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 2671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 2694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 2750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 2794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 2845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0); 
#line 2874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetupArgument(const void * arg, size_t size, size_t offset); 
#line 2912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunch(const void * func); 
#line 3030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 3056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 3085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 3124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 3166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 3193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 3213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 3235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 3257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 3316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 3393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 3412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 3454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 3473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 3508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 3643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 3764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 3790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 3890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 3918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 4029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 4052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 4071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 4092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 4130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 4200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 4275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 4582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 4660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 5022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 5065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 5097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 5134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 5184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 5207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 5229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 5296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 5382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 5438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 5474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 5627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 5665 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 5704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 5723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 5815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 5851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 5946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 5971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 6011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 6046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 6093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = 4294967295U); 
#line 6144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
#line 6172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
#line 6221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUnbindTexture(const textureReference * texref); 
#line 6246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
#line 6271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
#line 6311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
#line 6556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 6571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 6587 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 6603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 6620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 6659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 6689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 6716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 6733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 6738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 6964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
}
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(char)) * 8); 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaPitchedPtr s; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.ptr) = d; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.pitch) = p; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.xsize) = xsz; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.ysize) = ysz; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return s; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaPos p; 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.x) = x; 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.y) = y; 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.z) = z; 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return p; 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaExtent e; 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.width) = w; 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.height) = h; 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.depth) = d; 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return e; 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char1 t; (t.x) = x; return t; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar1 make_uchar1(unsigned char x) 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar1 t; (t.x) = x; return t; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char2 make_char2(signed char x, signed char y) 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short1 make_short1(short x) 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short1 t; (t.x) = x; return t; 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort1 make_ushort1(unsigned short x) 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort1 t; (t.x) = x; return t; 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short2 make_short2(short x, short y) 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short3 make_short3(short x, short y, short z) 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int1 make_int1(int x) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int1 t; (t.x) = x; return t; 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint1 make_uint1(unsigned x) 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint1 t; (t.x) = x; return t; 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int2 make_int2(int x, int y) 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int3 make_int3(int x, int y, int z) 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long1 make_long1(long x) 
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long1 t; (t.x) = x; return t; 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong1 make_ulong1(unsigned long x) 
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong1 t; (t.x) = x; return t; 
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long2 make_long2(long x, long y) 
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long3 make_long3(long x, long y, long z) 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float1 make_float1(float x) 
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float1 t; (t.x) = x; return t; 
#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float2 make_float2(float x, float y) 
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float3 make_float3(float x, float y, float z) 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong1 make_longlong1(__int64 x) 
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong1 t; (t.x) = x; return t; 
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong1 t; (t.x) = x; return t; 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double1 make_double1(double x) 
#line 296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double1 t; (t.x) = x; return t; 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double2 make_double2(double x, double y) 
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double3 make_double3(double x, double y, double z) 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) extern int *__cdecl _errno(); 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strchr(const char * _Str, int _Val); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strrchr(const char * _Str, int _Ch); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strstr(const char * _Str, const char * _SubStr); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memset(_Destination, 0, _DestinationSize); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 22; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memcpy(_Destination, _Source, _SourceSize); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memmove_s(void *const 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memmove(_Destination, _Source, _SourceSize); 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}__pragma(pack ( pop )) 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_Pv, int 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_C, size_t 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_N) 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
{ 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
const void *const _Pvc = _Pv; 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
} 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _String); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Source, size_t 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_MaxCount) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *const 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Delimiter) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
wcstok(__wchar_t *
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Delimiter) throw() 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcserror_s(__wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl __wcserror_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsnset_s(__wchar_t (&_Destination)[_Size], __wchar_t _Value, ::size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsset_s(__wchar_t (&_String)[_Size], __wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s(__wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s(__wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}__pragma(pack ( pop )) 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcat_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Dest, const char * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcpy_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char *_ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strerror(int _ErrorMessage); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
size_t __cdecl strlen(const char * _Str); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Dest, const char * _Source, size_t _Count); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncat_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncpy_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
_String, size_t 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
_MaxCount) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Dest, int _Val, size_t _Count); 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, ::size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strrev(char * _Str); 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Dest, int _Value); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr(char * _String); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strdup(const char * _String); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strlwr(char * _String); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strrev(char * _String); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strset(char * _String, int _Value); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strupr(char * _String); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
struct tm { 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_sec; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_min; 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_hour; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_mday; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_mon; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_year; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_wday; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_yday; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_isdst; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wasctime_s(__wchar_t (&_Buffer)[_Size], const ::tm *_Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime32_s(__wchar_t (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime64_s(__wchar_t (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrdate_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrtime_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
{ 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
return _wctime64(_Time); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
} 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Buffer, const size_t 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_SizeInWords, const time_t *const 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
{ 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(pop)
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
typedef long clock_t; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct _timespec32 { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__time32_t tv_sec; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct _timespec64 { 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__time64_t tv_sec; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct timespec { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
time_t tv_sec; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int *__cdecl __daylight(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) long *__cdecl __dstbias(); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) long *__cdecl __timezone(); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char **__cdecl __tzname(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl asctime(const tm * _Tm); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl asctime_s(char (&_Buffer)[_Size], const ::tm *_Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) clock_t __cdecl clock(); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strdate(char * _Buffer); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strtime(char * _Buffer); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl _tzset(); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) unsigned __cdecl _getsystime(tm * _Tm); 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) unsigned __cdecl _setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _ctime64(_Time); 
#pragma warning(pop)
} 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline double __cdecl difftime(const time_t 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time1, const time_t 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time2) 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _difftime64(_Time1, _Time2); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline tm *__cdecl gmtime(const time_t *const 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _gmtime64(_Time); 
#pragma warning(pop)
} 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline tm *__cdecl localtime(const time_t *const 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _localtime64(_Time); 
#pragma warning(pop)
} 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm) 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _mkgmtime64(_Tm); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl mktime(tm *const 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm) 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _mktime64(_Tm); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl time(time_t *const 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _time64(_Time); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline int __cdecl timespec_get(timespec *const 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Ts, const int 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Base) 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl ctime_s(char *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Buffer, const size_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_SizeInBytes, const time_t *const 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _gmtime64_s(_Tm, _Time); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl localtime_s(tm *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _localtime64_s(_Tm, _Time); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl tzset(); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}__pragma(pack ( pop )) 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(dllimport) extern clock_t __cdecl clock(); 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
}
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" {
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __cdecl abs(int); 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern long __cdecl labs(long); 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __int64 llabs(__int64); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float fabsf(float x); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int min(int, int); 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned umin(unsigned, unsigned); 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 llmin(__int64, __int64); 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned __int64 ullmin(unsigned __int64, unsigned __int64); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fminf(float x, float y); 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmin(double x, double y); 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int max(int, int); 
#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned umax(unsigned, unsigned); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 llmax(__int64, __int64); 
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned __int64 ullmax(unsigned __int64, unsigned __int64); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaxf(float x, float y); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmax(double, double); 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sin(double x); 
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl cos(double x); 
#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr); 
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl tan(double x); 
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sqrt(double x); 
#line 656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rsqrt(double x); 
#line 726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rsqrtf(float x); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log2(double x); 
#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl exp2(double x); 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl exp2f(float x); 
#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double exp10(double x); 
#line 882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float exp10f(float x); 
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl expm1(double x); 
#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl expm1f(float x); 
#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log2f(float x); 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log(double x); 
#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log1p(double x); 
#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log1pf(float x); 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl floor(double x); 
#line 1458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl exp(double x); 
#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl cosh(double x); 
#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sinh(double x); 
#line 1549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl tanh(double x); 
#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl acosh(double x); 
#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acoshf(float x); 
#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl asinh(double x); 
#line 1656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinhf(float x); 
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl atanh(double x); 
#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanhf(float x); 
#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ldexp(double x, int exp); 
#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float ldexpf(float x, int exp); 
#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl logb(double x); 
#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl logbf(float x); 
#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogb(double x); 
#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogbf(float x); 
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbn(double x, int n); 
#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalbnf(float x, int n); 
#line 2274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbln(double x, long n); 
#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalblnf(float x, long n); 
#line 2426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl frexp(double x, int * nptr); 
#line 2501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float frexpf(float x, int * nptr); 
#line 2517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl round(double x); 
#line 2534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl roundf(float x); 
#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lround(double x); 
#line 2570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lroundf(float x); 
#line 2588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llround(double x); 
#line 2606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llroundf(float x); 
#line 2658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl rintf(float x); 
#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrint(double x); 
#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrintf(float x); 
#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrint(double x); 
#line 2722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrintf(float x); 
#line 2775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nearbyint(double x); 
#line 2828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nearbyintf(float x); 
#line 2888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ceil(double x); 
#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl trunc(double x); 
#line 2917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl truncf(float x); 
#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fdim(double x, double y); 
#line 2969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fdimf(float x, float y); 
#line 3003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 3034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan(double x); 
#line 3057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl acos(double x); 
#line 3089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl asin(double x); 
#line 3132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl hypot(double x, double y); 
#line 3187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rhypot(double x, double y); 
#line 3231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rhypotf(float x, float y); 
#line 3332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl norm3d(double a, double b, double c); 
#line 3383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm3d(double a, double b, double c); 
#line 3432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl norm4d(double a, double b, double c, double d); 
#line 3488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm4d(double a, double b, double c, double d); 
#line 3533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double norm(int dim, const double * t); 
#line 3584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm(int dim, const double * t); 
#line 3636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnormf(int dim, const float * a); 
#line 3680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normf(int dim, const float * a); 
#line 3725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float norm3df(float a, float b, float c); 
#line 3776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnorm3df(float a, float b, float c); 
#line 3825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float norm4df(float a, float b, float c, float d); 
#line 3881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnorm4df(float a, float b, float c, float d); 
#line 3967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cbrt(double x); 
#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl cbrtf(float x); 
#line 4106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rcbrt(double x); 
#line 4156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rcbrtf(float x); 
#line 4216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double sinpi(double x); 
#line 4276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float sinpif(float x); 
#line 4328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double cospi(double x); 
#line 4380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cospif(float x); 
#line 4410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
#line 4440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
#line 4752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 4808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl modf(double x, double * iptr); 
#line 4867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fmod(double x, double y); 
#line 4955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remainder(double x, double y); 
#line 5045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remainderf(float x, float y); 
#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); 
#line 5153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); 
#line 5192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j0(double x); 
#line 5234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float j0f(float x); 
#line 5295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j1(double x); 
#line 5356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float j1f(float x); 
#line 5399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl jn(int n, double x); 
#line 5442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float jnf(int n, float x); 
#line 5494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl y0(double x); 
#line 5546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float y0f(float x); 
#line 5598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl y1(double x); 
#line 5650 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float y1f(float x); 
#line 5703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl yn(int n, double x); 
#line 5756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float ynf(int n, float x); 
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cyl_bessel_i0(double x); 
#line 5809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cyl_bessel_i0f(float x); 
#line 5836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cyl_bessel_i1(double x); 
#line 5862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cyl_bessel_i1f(float x); 
#line 5947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erf(double x); 
#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erff(float x); 
#line 6091 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfinv(double y); 
#line 6148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfinvf(float y); 
#line 6189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erfc(double x); 
#line 6227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erfcf(float x); 
#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl lgamma(double x); 
#line 6416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcinv(double y); 
#line 6472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfcinvf(float y); 
#line 6530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double normcdfinv(double y); 
#line 6588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normcdfinvf(float y); 
#line 6631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double normcdf(double y); 
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normcdff(float y); 
#line 6749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcx(double x); 
#line 6824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfcxf(float x); 
#line 6960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl lgammaf(float x); 
#line 7069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl tgamma(double x); 
#line 7178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tgammaf(float x); 
#line 7191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl copysign(double x, double y); 
#line 7204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl copysignf(float x, float y); 
#line 7241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nextafter(double x, double y); 
#line 7278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nextafterf(float x, float y); 
#line 7294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nan(const char * tagp); 
#line 7310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nanf(const char * tagp); 
#line 7315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinff(float); 
#line 7316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnanf(float); 
#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finite(double); 
#line 7327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitef(float); 
#line 7328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbit(double); 
#line 7329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnan(double); 
#line 7330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinf(double); 
#line 7333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitf(float); 
#line 7494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fma(double x, double y, double z); 
#line 7652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); 
#line 7661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitl(long double); 
#line 7667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitel(long double); 
#line 7668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinfl(long double); 
#line 7669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnanl(long double); 
#line 7673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acosf(float); 
#line 7674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinf(float); 
#line 7675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanf(float); 
#line 7676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atan2f(float, float); 
#line 7677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl cosf(float); 
#line 7678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl sinf(float); 
#line 7679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tanf(float); 
#line 7680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl coshf(float); 
#line 7681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl sinhf(float); 
#line 7682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tanhf(float); 
#line 7683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl expf(float); 
#line 7684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl logf(float); 
#line 7685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log10f(float); 
#line 7686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl modff(float, float *); 
#line 7687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl powf(float, float); 
#line 7688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl sqrtf(float); 
#line 7689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl ceilf(float); 
#line 7690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl floorf(float); 
#line 7691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmodf(float, float); 
#line 8823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
}
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(push)
#pragma warning(disable:4738)
#pragma warning(disable:4820)
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _exception { 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int type; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
char *name; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double arg1; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double arg2; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double retval; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _complex { 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double x, y; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float float_t; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double double_t; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const double _HUGE; 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
void __cdecl _fperrraise(int _Except); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dclass(double _X); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldclass(long double _X); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdclass(float _X); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _dsign(double _X); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _ldsign(long double _X); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fdsign(float _X); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dtest(double * _Px); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldtest(long double * _Px); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdtest(float * _Px); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[4]; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _Val; 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _double_val; 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[2]; 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
float _Val; 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _float_val; 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[4]; 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long double _Val; 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _ldouble_val; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Word[4]; 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
float _Float; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _Double; 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long double _Long_double; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _float_const; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _Eps_C, _Rteps_C; 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _FEps_C, _FRteps_C; 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _LEps_C, _LRteps_C; 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const double _Zero_C, _Xbig_C; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const float _FZero_C, _FXbig_C; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const long double _LZero_C, _LXbig_C; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern "C++" {
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(float _X) throw() 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdtest(&_X); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(double _X) throw() 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dtest(&_X); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(long double _X) throw() 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldtest(&_X); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(float _X) throw() 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdsign(_X) != 0; 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(double _X) throw() 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dsign(_X) != 0; 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(long double _X) throw() 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldsign(_X) != 0; 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(float _X, float _Y) throw() 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdpcomp(_X, _Y); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(double _X, double _Y) throw() 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dpcomp(_X, _Y); 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldpcomp(_X, _Y); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Trc, class _Tre> struct _Combined_type { 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Combined_type< float, double>  { 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Combined_type< float, long double>  { 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty, class _T2> struct _Real_widened { 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< float, float>  { 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< float, double>  { 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< double, float>  { 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< double, double>  { 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> struct _Real_type { 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_type< float>  { 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_type< long double>  { 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _T1, class _T2> inline int 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_fpcomp(_T1 _X, _T2 _Y) throw() 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef typename _Combined_type< float, typename _Real_widened< typename _Real_type< _T1> ::_Type, typename _Real_type< _T2> ::_Type> ::_Type> ::_Type _Tw; 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fpcomp((_Tw)_X, (_Tw)_Y); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isfinite(_Ty _X) throw() 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) <= 0; 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isinf(_Ty _X) throw() 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == 1; 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isnan(_Ty _X) throw() 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == 2; 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isnormal(_Ty _X) throw() 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == (-1); 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & 4) != 0; 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isgreaterequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (2 | 4)) != 0; 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isless(_Ty1 _X, _Ty2 _Y) throw() 
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & 1) != 0; 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
islessequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (1 | 2)) != 0; 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
islessgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (1 | 4)) != 0; 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isunordered(_Ty1 _X, _Ty2 _Y) throw() 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fpcomp(_X, _Y) == 0; 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl abs(int _X); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long __cdecl labs(long _X); 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__int64 __cdecl llabs(__int64 _X); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl acos(double _X); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl asin(double _X); 
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl atan(double _X); 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl atan2(double _Y, double _X); 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl cos(double _X); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl cosh(double _X); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl exp(double _X); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl fabs(double _X); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl fmod(double _X, double _Y); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl log(double _X); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl log10(double _X); 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl pow(double _X, double _Y); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sin(double _X); 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sinh(double _X); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sqrt(double _X); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl tan(double _X); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl tanh(double _X); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl acosh(double _X); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl asinh(double _X); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl atanh(double _X); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl cbrt(double _X); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl ceil(double _X); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl copysign(double _Number, double _Sign); 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl erf(double _X); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl erfc(double _X); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl exp2(double _X); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl expm1(double _X); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl floor(double _X); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl hypot(double _X, double _Y); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _hypot(double _X, double _Y); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogb(double _X); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl lgamma(double _X); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl log1p(double _X); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl log2(double _X); 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl logb(double _X); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrint(double _X); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lround(double _X); 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl _matherr(_exception * _Except); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl modf(double _X, double * _Y); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nan(const char *); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl rint(double _X); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl round(double _X); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl tgamma(double _X); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl trunc(double _X); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _j0(double _X); 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _j1(double _X); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _jn(int _X, double _Y); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _y0(double _X); 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _y1(double _X); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _yn(int _X, double _Y); 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl acoshf(float _X); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl asinhf(float _X); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atanhf(float _X); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl cbrtf(float _X); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _chgsignf(float _X); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl copysignf(float _Number, float _Sign); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl erff(float _X); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl erfcf(float _X); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl expm1f(float _X); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl exp2f(float _X); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fdimf(float _X, float _Y); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fminf(float _X, float _Y); 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogbf(float _X); 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl lgammaf(float _X); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrintf(float _X); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llroundf(float _X); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log1pf(float _X); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log2f(float _X); 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl logbf(float _X); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrintf(float _X); 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lroundf(float _X); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nanf(const char *); 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nearbyintf(float _X); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl remainderf(float _X, float _Y); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl rintf(float _X); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl roundf(float _X); 
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tgammaf(float _X); 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl truncf(float _X); 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _logbf(float _X); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _finitef(float _X); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _isnanf(float _X); 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fpclassf(float _X); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _set_FMA3_enable(int _Flag); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _get_FMA3_enable(); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl acosf(float _X); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl asinf(float _X); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atan2f(float _Y, float _X); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atanf(float _X); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl ceilf(float _X); 
#line 602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl cosf(float _X); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl coshf(float _X); 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl expf(float _X); 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl fabsf(float _X) 
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)fabs(_X); 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl floorf(float _X); 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmodf(float _X, float _Y); 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)frexp(_X, _Y); 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl hypotf(float _X, float _Y) 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypotf(_X, _Y); 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)ldexp(_X, _Y); 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log10f(float _X); 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl logf(float _X); 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl modff(float _X, float * _Y); 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl powf(float _X, float _Y); 
#line 703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl sinf(float _X); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl sinhf(float _X); 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl sqrtf(float _X); 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tanf(float _X); 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tanhf(float _X); 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl acoshl(long double _X); 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl acosl(long double _X) 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return acos((double)_X); 
#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl asinhl(long double _X); 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl asinl(long double _X) 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return asin((double)_X); 
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return atan2((double)_Y, (double)_X); 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl atanhl(long double _X); 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl atanl(long double _X) 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return atan((double)_X); 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl cbrtl(long double _X); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl ceill(long double _X) 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return ceil((double)_X); 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _chgsignl(long double _X) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _chgsign((double)_X); 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _copysign((double)_Number, (double)_Sign); 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl coshl(long double _X) 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return cosh((double)_X); 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl cosl(long double _X) 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return cos((double)_X); 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl erfl(long double _X); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl erfcl(long double _X); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl expl(long double _X) 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return exp((double)_X); 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl exp2l(long double _X); 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl expm1l(long double _X); 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl fabsl(long double _X) 
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fabs((double)_X); 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl floorl(long double _X) 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return floor((double)_X); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fmod((double)_X, (double)_Y); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return frexp((double)_X, _Y); 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogbl(long double _X); 
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypot((double)_X, (double)_Y); 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypot((double)_X, (double)_Y); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return ldexp((double)_X, _Y); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl lgammal(long double _X); 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrintl(long double _X); 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llroundl(long double _X); 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl logl(long double _X) 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return log((double)_X); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl log10l(long double _X) 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return log10((double)_X); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl log1pl(long double _X); 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl log2l(long double _X); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl logbl(long double _X); 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrintl(long double _X); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lroundl(long double _X); 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _F, _I; 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_F = modf((double)_X, &_I); 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
(*_Y) = _I; 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _F; 
#line 896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nanl(const char *); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nearbyintl(long double _X); 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return pow((double)_X, (double)_Y); 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl rintl(long double _X); 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl roundl(long double _X); 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); 
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sinhl(long double _X) 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sinh((double)_X); 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sinl(long double _X) 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sin((double)_X); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sqrtl(long double _X) 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sqrt((double)_X); 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl tanhl(long double _X) 
#line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return tanh((double)_X); 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl tanl(long double _X) 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return tan((double)_X); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl tgammal(long double _X); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl truncl(long double _X); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern double HUGE; 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j0(double _X); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j1(double _X); 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl jn(int _X, double _Y); 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl y0(double _X); 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl y1(double _X); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl yn(int _X, double _Y); 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(pop)
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_calloc_base(size_t _Count, size_t _Size); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
calloc(size_t _Count, size_t _Size); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) int __cdecl _callnewh(size_t _Size); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_expand(void * _Block, size_t _Size); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_free_base(void * _Block); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
free(void * _Block); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_malloc_base(size_t _Size); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
malloc(size_t _Size); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) size_t __cdecl 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_msize(void * _Block); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_realloc_base(void * _Block, size_t _Size); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
realloc(void * _Block, size_t _Size); 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_free(void * _Block); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) size_t __cdecl 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itow_s(int _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltow_s(long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wtof(const __wchar_t * _String); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _String); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wtol(const __wchar_t * _String); 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmakepath_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Drive, const __wchar_t *_Dir, const __wchar_t *_Filename, const __wchar_t *_Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrMsg); 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _wsplitpath_s(const __wchar_t *_Path, __wchar_t (&_Drive)[_DriveSize], __wchar_t (&_Dir)[_DirSize], __wchar_t (&_Name)[_NameSize], __wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wgetenv_s(::size_t *_RequiredCount, __wchar_t (&_Buffer)[_Size], const __wchar_t *_VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wsearchenv_s(const __wchar_t *_Filename, const __wchar_t *_VarName, __wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
}__pragma(pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef int (__cdecl *_onexit_t)(void); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _set_error_mode(int _Mode); 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __sys_errlist(); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __sys_nerr(); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl perror(const char * _ErrMsg); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __p__pgmptr(); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p__fmode(); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _div_t { 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int quot; 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int rem; 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} div_t; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _ldiv_t { 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long quot; 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long rem; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} ldiv_t; 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _lldiv_t { 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 quot; 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 rem; 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} lldiv_t; 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl abs(int _Number); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long __cdecl labs(long _Number); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 __cdecl llabs(__int64 _Number); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 __cdecl _abs64(__int64 _Number); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl srand(unsigned _Seed); 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl rand(); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline long abs(const long _X) throw() 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return labs(_X); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline __int64 abs(const __int64 _X) throw() 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return llabs(_X); 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return ldiv(_A1, _A2); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return lldiv(_A1, _A2); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned char ld[10]; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LDOUBLE; 
#pragma pack ( pop )
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
double x; 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _CRT_DOUBLE; 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
float f; 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _CRT_FLOAT; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long double x; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LONGDOUBLE; 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned char ld12[12]; 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LDBL12; 
#pragma pack ( pop )
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl atoi(const char * _String); 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl atol(const char * _String); 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl atoll(const char * _String); 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int *_PtDec, int *_PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrlen(const char * _String); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbstowcs_s(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _mbstowcs_s_l(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcstombs_s(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcstombs_s_l(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _splitpath_s(const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p___argc(); 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p___argv(); 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p__environ(); 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl getenv(const char * _VarName); 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl getenv_s(::size_t *_RequiredCount, char (&_Buffer)[_Size], const char *_VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl system(const char * _Command); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _putenv(const char * _EnvString); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _searchenv_s(const char *_Filename, const char *_VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _seterrormode(int _Mode); 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl putenv(const char * _EnvString); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#pragma comment(lib, "msvcprtd")
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma(pack ( pop )) 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( push, 8 )
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef __int64 _Longlong; 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef unsigned __int64 _ULonglong; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
namespace std { 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
enum _Uninitialized { 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
_Noinit
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit { 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Lockit(); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
explicit __thiscall _Lockit(int); 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__thiscall ~_Lockit() noexcept; 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_dtor(int); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Lockit_ctor(_Lockit *); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(_Lockit *, int); 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_dtor(_Lockit *); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: _Lockit(const _Lockit &) = delete;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
_Lockit &operator=(const _Lockit &) = delete;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: int _Locktype; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
class __declspec(dllimport) _Init_locks { 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Init_locks(); 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__thiscall ~_Init_locks() noexcept; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma warning(pop)
}
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void)); 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef unsigned long _Uint32t; 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double abs(double _Xx) noexcept 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabs(_Xx); 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double pow(double _Xx, int _Yx) noexcept 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::pow(_Xx, static_cast< double>(_Yx)); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float abs(float _Xx) noexcept 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsf(_Xx); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float acos(float _Xx) noexcept 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acosf(_Xx); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float acosh(float _Xx) noexcept 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acoshf(_Xx); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float asin(float _Xx) noexcept 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinf(_Xx); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float asinh(float _Xx) noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinhf(_Xx); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atan(float _Xx) noexcept 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanf(_Xx); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atanh(float _Xx) noexcept 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanhf(_Xx); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atan2(float _Yx, float _Xx) noexcept 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atan2f(_Yx, _Xx); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cbrt(float _Xx) noexcept 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cbrtf(_Xx); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float ceil(float _Xx) noexcept 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ceilf(_Xx); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float copysign(float _Number, float 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Sign) noexcept 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cos(float _Xx) noexcept 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cosf(_Xx); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cosh(float _Xx) noexcept 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::coshf(_Xx); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float erf(float _Xx) noexcept 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erff(_Xx); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float erfc(float _Xx) noexcept 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfcf(_Xx); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float exp(float _Xx) noexcept 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expf(_Xx); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float exp2(float _Xx) noexcept 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::exp2f(_Xx); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float expm1(float _Xx) noexcept 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expm1f(_Xx); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fabs(float _Xx) noexcept 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsf(_Xx); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fdim(float _Xx, float _Yx) noexcept 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fdimf(_Xx, _Yx); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float floor(float _Xx) noexcept 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::floorf(_Xx); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fma(float _Xx, float _Yx, float 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Zx) noexcept 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaf(_Xx, _Yx, _Zx); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmax(float _Xx, float _Yx) noexcept 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaxf(_Xx, _Yx); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmin(float _Xx, float _Yx) noexcept 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fminf(_Xx, _Yx); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmod(float _Xx, float _Yx) noexcept 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmodf(_Xx, _Yx); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float frexp(float _Xx, int *_Yx) noexcept 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::frexpf(_Xx, _Yx); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float hypot(float _Xx, float _Yx) noexcept 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::hypotf(_Xx, _Yx); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline int ilogb(float _Xx) noexcept 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ilogbf(_Xx); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float ldexp(float _Xx, int _Yx) noexcept 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ldexpf(_Xx, _Yx); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float lgamma(float _Xx) noexcept 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lgammaf(_Xx); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llrint(float _Xx) noexcept 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llrintf(_Xx); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llround(float _Xx) noexcept 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llroundf(_Xx); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log(float _Xx) noexcept 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logf(_Xx); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log10(float _Xx) noexcept 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log10f(_Xx); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log1p(float _Xx) noexcept 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log1pf(_Xx); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log2(float _Xx) noexcept 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log2f(_Xx); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float logb(float _Xx) noexcept 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logbf(_Xx); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lrint(float _Xx) noexcept 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lrintf(_Xx); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lround(float _Xx) noexcept 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lroundf(_Xx); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float modf(float _Xx, float *_Yx) noexcept 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::modff(_Xx, _Yx); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nearbyint(float _Xx) noexcept 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nearbyintf(_Xx); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nextafter(float _Xx, float _Yx) noexcept 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nextafterf(_Xx, _Yx); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nexttoward(float _Xx, long double 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nexttowardf(_Xx, _Yx); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float pow(float _Xx, float 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powf(_Xx, _Yx); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float pow(float _Xx, int _Yx) noexcept 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powf(_Xx, static_cast< float>(_Yx)); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float remainder(float _Xx, float _Yx) noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remainderf(_Xx, _Yx); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float remquo(float _Xx, float _Yx, int *
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Zx) noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remquof(_Xx, _Yx, _Zx); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float rint(float _Xx) noexcept 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::rintf(_Xx); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float round(float _Xx) noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::roundf(_Xx); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float scalbln(float _Xx, long _Yx) noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalblnf(_Xx, _Yx); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float scalbn(float _Xx, int _Yx) noexcept 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalbnf(_Xx, _Yx); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sin(float _Xx) noexcept 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinf(_Xx); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sinh(float _Xx) noexcept 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinhf(_Xx); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sqrt(float _Xx) noexcept 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sqrtf(_Xx); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tan(float _Xx) noexcept 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanf(_Xx); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tanh(float _Xx) noexcept 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanhf(_Xx); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tgamma(float _Xx) noexcept 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tgammaf(_Xx); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float trunc(float _Xx) noexcept 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::truncf(_Xx); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double abs(long double _Xx) noexcept 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsl(_Xx); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double acos(long double _Xx) noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acosl(_Xx); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double acosh(long double _Xx) noexcept 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acoshl(_Xx); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double asin(long double _Xx) noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinl(_Xx); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double asinh(long double _Xx) noexcept 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinhl(_Xx); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atan(long double _Xx) noexcept 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanl(_Xx); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atanh(long double _Xx) noexcept 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanhl(_Xx); 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atan2(long double _Yx, long double 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Xx) noexcept 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atan2l(_Yx, _Xx); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cbrt(long double _Xx) noexcept 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cbrtl(_Xx); 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double ceil(long double _Xx) noexcept 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ceill(_Xx); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double copysign(long double _Number, long double 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Sign) noexcept 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cos(long double _Xx) noexcept 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cosl(_Xx); 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cosh(long double _Xx) noexcept 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::coshl(_Xx); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double erf(long double _Xx) noexcept 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfl(_Xx); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double erfc(long double _Xx) noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfcl(_Xx); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double exp(long double _Xx) noexcept 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expl(_Xx); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double exp2(long double _Xx) noexcept 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::exp2l(_Xx); 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double expm1(long double _Xx) noexcept 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expm1l(_Xx); 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fabs(long double _Xx) noexcept 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsl(_Xx); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fdim(long double _Xx, long double 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fdiml(_Xx, _Yx); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double floor(long double _Xx) noexcept 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::floorl(_Xx); 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fma(long double _Xx, long double 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx, long double _Zx) noexcept 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmal(_Xx, _Yx, _Zx); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmax(long double _Xx, long double 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaxl(_Xx, _Yx); 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmin(long double _Xx, long double 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fminl(_Xx, _Yx); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmod(long double _Xx, long double 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmodl(_Xx, _Yx); 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double frexp(long double _Xx, int *
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::frexpl(_Xx, _Yx); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double hypot(long double _Xx, long double 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::hypotl(_Xx, _Yx); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline int ilogb(long double _Xx) noexcept 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ilogbl(_Xx); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double ldexp(long double _Xx, int 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ldexpl(_Xx, _Yx); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double lgamma(long double _Xx) noexcept 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lgammal(_Xx); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llrint(long double _Xx) noexcept 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llrintl(_Xx); 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llround(long double _Xx) noexcept 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llroundl(_Xx); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log(long double _Xx) noexcept 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logl(_Xx); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log10(long double _Xx) noexcept 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log10l(_Xx); 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log1p(long double _Xx) noexcept 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log1pl(_Xx); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log2(long double _Xx) noexcept 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log2l(_Xx); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double logb(long double _Xx) noexcept 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logbl(_Xx); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lrint(long double _Xx) noexcept 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lrintl(_Xx); 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lround(long double _Xx) noexcept 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lroundl(_Xx); 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double modf(long double _Xx, long double *
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::modfl(_Xx, _Yx); 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nearbyint(long double _Xx) noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nearbyintl(_Xx); 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nextafter(long double _Xx, long double 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nextafterl(_Xx, _Yx); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nexttoward(long double _Xx, long double 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nexttowardl(_Xx, _Yx); 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double pow(long double _Xx, long double 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powl(_Xx, _Yx); 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double pow(long double _Xx, int 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powl(_Xx, static_cast< long double>(_Yx)); 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double remainder(long double _Xx, long double 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remainderl(_Xx, _Yx); 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double remquo(long double _Xx, long double 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx, int *_Zx) noexcept 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remquol(_Xx, _Yx, _Zx); 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double rint(long double _Xx) noexcept 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::rintl(_Xx); 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double round(long double _Xx) noexcept 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::roundl(_Xx); 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double scalbln(long double _Xx, long 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalblnl(_Xx, _Yx); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double scalbn(long double _Xx, int 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalbnl(_Xx, _Yx); 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sin(long double _Xx) noexcept 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinl(_Xx); 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sinh(long double _Xx) noexcept 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinhl(_Xx); 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sqrt(long double _Xx) noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sqrtl(_Xx); 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tan(long double _Xx) noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanl(_Xx); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tanh(long double _Xx) noexcept 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanhl(_Xx); 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tgamma(long double _Xx) noexcept 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tgammal(_Xx); 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double trunc(long double _Xx) noexcept 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::truncl(_Xx); 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::size_t;using ::div_t;using ::ldiv_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::abort;using ::abs;using ::atexit;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atof;using ::atoi;using ::atol;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::bsearch;using ::calloc;using ::div;
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::exit;using ::free;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::labs;using ::ldiv;using ::malloc;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::mblen;using ::mbstowcs;using ::mbtowc;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::qsort;using ::rand;using ::realloc;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::srand;using ::strtod;using ::strtol;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtoul;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::wcstombs;using ::wctomb;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::lldiv_t;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::getenv;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::system;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atoll;using ::llabs;using ::lldiv;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtof;using ::strtold;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtoll;using ::strtoull;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::_Exit;using ::at_quick_exit;using ::quick_exit;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Nil { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template < class _Ty,
 _Ty _Val >
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant < _Ty, _Val > type;

 constexpr operator value_type ( ) const noexcept
  {
  return ( value );
  }

 constexpr value_type operator ( ) ( ) const noexcept
  {
  return ( value );
  }
 };
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef integral_constant< bool, true>  true_type; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef integral_constant< bool, false>  false_type; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Val> 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Cat_base : public integral_constant< bool, _Val>  { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Test, class 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty = void> 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct enable_if { 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct enable_if< true, _Ty>  { 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Test, class 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty1, class 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct conditional { 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty2 type; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1, class 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct conditional< true, _Ty1, _Ty2>  { 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty1 type; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1, class 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_same : public false_type { 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1> 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_same< _Ty1, _Ty1>  : public true_type { 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty, class 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Uty> constexpr bool 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_same_v = (is_same< _Ty, _Uty> ::value); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_const { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_const< const _Ty>  { 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_volatile { 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_volatile< volatile _Ty>  { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_cv { 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef typename remove_const< typename remove_volatile< _Ty> ::type> ::type type; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Is_integral : public false_type { 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< bool>  : public true_type { 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char>  : public true_type { 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned char>  : public true_type { 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed char>  : public true_type { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __wchar_t>  : public true_type { 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed short>  : public true_type { 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned>  : public true_type { 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed int>  : public true_type { 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned long>  : public true_type { 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed long>  : public true_type { 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char16_t>  : public true_type { 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char32_t>  : public true_type { 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __int64>  : public true_type { 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned __int64>  : public true_type { 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_integral : public _Is_integral< typename remove_cv< _Ty> ::type>  { 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_integral_v = (is_integral< _Ty> ::value); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Is_floating_point : public false_type { 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< float>  : public true_type { 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< double>  : public true_type { 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< long double>  : public true_type { 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_floating_point : public _Is_floating_point< typename remove_cv< _Ty> ::type>  { 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_floating_point_v = (is_floating_point< _Ty> ::value); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_arithmetic : public _Cat_base< is_integral< _Ty> ::value || is_floating_point< _Ty> ::value>  { 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_arithmetic_v = (is_arithmetic< _Ty> ::value); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference { 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference< _Ty &>  { 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference< _Ty &&>  { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Wrap_int { 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Wrap_int(int) 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
{ 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Identity { 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(push,3)
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
namespace std { 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template< class _Ty> 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
struct _Promote_to_float { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename conditional< is_integral< _Ty> ::value, double, _Ty> ::type type; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template< class _Ty1, class 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
_Ty2> 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
struct _Common_float_type { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename _Promote_to_float< _Ty1> ::type _Ty1f; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename _Promote_to_float< _Ty2> ::type _Ty2f; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, long double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, long double> ::value, long double, typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, double> ::value, double, float> ::type> ::type type; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value
  && :: std :: is_arithmetic < _Ty2 > :: value,
  typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type
 pow ( const _Ty1 _Left, const _Ty2 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( :: pow ( type ( _Left ), type ( _Right ) ) );
 }
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl acos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acos ( _Ty _Left ) { return ( :: acos ( ( double ) _Left ) ); }
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl asin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asin ( _Ty _Left ) { return ( :: asin ( ( double ) _Left ) ); }
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl atan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atan ( _Ty _Left ) { return ( :: atan ( ( double ) _Left ) ); }
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl atan2(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type atan2 ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: atan2 ( ( type ) _Left, ( type ) _Right ) ); }
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl ceil(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ceil ( _Ty _Left ) { return ( :: ceil ( ( double ) _Left ) ); }
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl cos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cos ( _Ty _Left ) { return ( :: cos ( ( double ) _Left ) ); }
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl cosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cosh ( _Ty _Left ) { return ( :: cosh ( ( double ) _Left ) ); }
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl exp(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp ( _Ty _Left ) { return ( :: exp ( ( double ) _Left ) ); }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl fabs(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type fabs ( _Ty _Left ) { return ( :: fabs ( ( double ) _Left ) ); }
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl floor(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type floor ( _Ty _Left ) { return ( :: floor ( ( double ) _Left ) ); }
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl fmod(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmod ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmod ( ( type ) _Left, ( type ) _Right ) ); }
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl frexp(double, int *); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type frexp ( _Ty _Left, int * _Arg2 ) { return ( :: frexp ( ( double ) _Left, _Arg2 ) ); }
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl ldexp(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ldexp ( _Ty _Left, int _Arg2 ) { return ( :: ldexp ( ( double ) _Left, _Arg2 ) ); }
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl log(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log ( _Ty _Left ) { return ( :: log ( ( double ) _Left ) ); }
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl log10(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log10 ( _Ty _Left ) { return ( :: log10 ( ( double ) _Left ) ); }
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sin ( _Ty _Left ) { return ( :: sin ( ( double ) _Left ) ); }
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sinh ( _Ty _Left ) { return ( :: sinh ( ( double ) _Left ) ); }
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sqrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sqrt ( _Ty _Left ) { return ( :: sqrt ( ( double ) _Left ) ); }
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl tan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tan ( _Ty _Left ) { return ( :: tan ( ( double ) _Left ) ); }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl tanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tanh ( _Ty _Left ) { return ( :: tanh ( ( double ) _Left ) ); }
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline float _Fma(float _Left, float _Middle, float _Right) 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fmaf(_Left, _Middle, _Right); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline double _Fma(double _Left, double _Middle, double _Right) 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fma(_Left, _Middle, _Right); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline long double _Fma(long double _Left, long double _Middle, long double 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
_Right) 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fmal(_Left, _Middle, _Right); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2,
 class _Ty3 > inline
 typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type
 fma ( _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type type;
 return ( _Fma ( ( type ) _Left, ( type ) _Middle, ( type ) _Right ) );
 }
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline float _Remquo(float _Left, float _Right, int *_Pquo) 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquof(_Left, _Right, _Pquo); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline double _Remquo(double _Left, double _Right, int *_Pquo) 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquo(_Left, _Right, _Pquo); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline long double _Remquo(long double _Left, long double _Right, int *_Pquo) 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquol(_Left, _Right, _Pquo); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type
 remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( _Remquo ( ( type ) _Left, ( type ) _Right, _Pquo ) );
 }
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl acosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acosh ( _Ty _Left ) { return ( :: acosh ( ( double ) _Left ) ); }
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl asinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asinh ( _Ty _Left ) { return ( :: asinh ( ( double ) _Left ) ); }
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl atanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atanh ( _Ty _Left ) { return ( :: atanh ( ( double ) _Left ) ); }
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl cbrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cbrt ( _Ty _Left ) { return ( :: cbrt ( ( double ) _Left ) ); }
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl copysign(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type copysign ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: copysign ( ( type ) _Left, ( type ) _Right ) ); }
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl erf(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erf ( _Ty _Left ) { return ( :: erf ( ( double ) _Left ) ); }
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl erfc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erfc ( _Ty _Left ) { return ( :: erfc ( ( double ) _Left ) ); }
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl expm1(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type expm1 ( _Ty _Left ) { return ( :: expm1 ( ( double ) _Left ) ); }
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl exp2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp2 ( _Ty _Left ) { return ( :: exp2 ( ( double ) _Left ) ); }
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fdim(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fdim ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fdim ( ( type ) _Left, ( type ) _Right ) ); }
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fmax(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmax ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmax ( ( type ) _Left, ( type ) _Right ) ); }
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fmin(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmin ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmin ( ( type ) _Left, ( type ) _Right ) ); }
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl hypot(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type hypot ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: hypot ( ( type ) _Left, ( type ) _Right ) ); }
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) int __cdecl ilogb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, int > :: type ilogb ( _Ty _Left ) { return ( :: ilogb ( ( double ) _Left ) ); }
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl lgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type lgamma ( _Ty _Left ) { return ( :: lgamma ( ( double ) _Left ) ); }
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llrint ( _Ty _Left ) { return ( :: llrint ( ( double ) _Left ) ); }
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) __int64 __cdecl llround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llround ( _Ty _Left ) { return ( :: llround ( ( double ) _Left ) ); }
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl log1p(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log1p ( _Ty _Left ) { return ( :: log1p ( ( double ) _Left ) ); }
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl log2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log2 ( _Ty _Left ) { return ( :: log2 ( ( double ) _Left ) ); }
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl logb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type logb ( _Ty _Left ) { return ( :: logb ( ( double ) _Left ) ); }
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) long __cdecl lrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lrint ( _Ty _Left ) { return ( :: lrint ( ( double ) _Left ) ); }
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) long __cdecl lround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lround ( _Ty _Left ) { return ( :: lround ( ( double ) _Left ) ); }
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nearbyint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nearbyint ( _Ty _Left ) { return ( :: nearbyint ( ( double ) _Left ) ); }
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nextafter(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type nextafter ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: nextafter ( ( type ) _Left, ( type ) _Right ) ); }
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nexttoward(double, long double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nexttoward ( _Ty _Left, long double _Arg2 ) { return ( :: nexttoward ( ( double ) _Left, _Arg2 ) ); }
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl remainder(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type remainder ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: remainder ( ( type ) _Left, ( type ) _Right ) ); }
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl rint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type rint ( _Ty _Left ) { return ( :: rint ( ( double ) _Left ) ); }
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl round(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type round ( _Ty _Left ) { return ( :: round ( ( double ) _Left ) ); }
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl scalbln(double, long); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbln ( _Ty _Left, long _Arg2 ) { return ( :: scalbln ( ( double ) _Left, _Arg2 ) ); }
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl scalbn(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbn ( _Ty _Left, int _Arg2 ) { return ( :: scalbn ( ( double ) _Left, _Arg2 ) ); }
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl tgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tgamma ( _Ty _Left ) { return ( :: tgamma ( ( double ) _Left ) ); }
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl trunc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type trunc ( _Ty _Left ) { return ( :: trunc ( ( double ) _Left ) ); }
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
namespace std { 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::abs;using ::acos;using ::asin;
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atan;using ::atan2;using ::ceil;
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cos;using ::cosh;using ::exp;
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabs;using ::floor;using ::fmod;
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexp;using ::ldexp;using ::log;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10;using ::modf;using ::pow;
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sin;using ::sinh;using ::sqrt;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tan;using ::tanh;
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosf;using ::asinf;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atanf;using ::atan2f;using ::ceilf;
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cosf;using ::coshf;using ::expf;
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabsf;using ::floorf;using ::fmodf;
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexpf;using ::ldexpf;using ::logf;
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10f;using ::modff;using ::powf;
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sinf;using ::sinhf;using ::sqrtf;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tanf;using ::tanhf;
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosl;using ::asinl;
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atanl;using ::atan2l;using ::ceill;
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cosl;using ::coshl;using ::expl;
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabsl;using ::floorl;using ::fmodl;
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexpl;using ::ldexpl;using ::logl;
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10l;using ::modfl;using ::powl;
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sinl;using ::sinhl;using ::sqrtl;
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tanl;using ::tanhl;
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::float_t;using ::double_t;
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosh;using ::asinh;using ::atanh;
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrt;using ::erf;using ::erfc;
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1;using ::exp2;
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypot;using ::ilogb;using ::lgamma;
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1p;using ::log2;using ::logb;
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrint;using ::lrint;using ::nearbyint;
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rint;using ::llround;using ::lround;
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdim;using ::fma;using ::fmax;using ::fmin;
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::round;using ::trunc;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainder;using ::remquo;
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysign;using ::nan;using ::nextafter;
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::scalbn;using ::scalbln;
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttoward;using ::tgamma;
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acoshf;using ::asinhf;using ::atanhf;
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrtf;using ::erff;using ::erfcf;
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1f;using ::exp2f;
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypotf;using ::ilogbf;using ::lgammaf;
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1pf;using ::log2f;using ::logbf;
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrintf;using ::lrintf;using ::nearbyintf;
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rintf;using ::llroundf;using ::lroundf;
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdimf;using ::fmaf;using ::fmaxf;using ::fminf;
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::roundf;using ::truncf;
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainderf;using ::remquof;
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysignf;using ::nanf;
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nextafterf;using ::scalbnf;using ::scalblnf;
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttowardf;using ::tgammaf;
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acoshl;using ::asinhl;using ::atanhl;
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrtl;using ::erfl;using ::erfcl;
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1l;using ::exp2l;
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypotl;using ::ilogbl;using ::lgammal;
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1pl;using ::log2l;using ::logbl;
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrintl;using ::lrintl;using ::nearbyintl;
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rintl;using ::llroundl;using ::lroundl;
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdiml;using ::fmal;using ::fmaxl;using ::fminl;
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::roundl;using ::truncl;
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainderl;using ::remquol;
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysignl;using ::nanl;
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nextafterl;using ::scalbnl;using ::scalblnl;
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttowardl;using ::tgammal;
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fpclassify;using ::signbit;
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isfinite;using ::isinf;
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isnan;using ::isnormal;
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isgreater;using ::isgreaterequal;
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isless;using ::islessequal;
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::islessgreater;using ::isunordered;
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
}
#line 9034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl _hypot(double x, double y); 
#line 9035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) float __cdecl _hypotf(float x, float y); 
#line 9045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 9046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _ldsign(long double); 
#line 9089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 9090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _dsign(double); 
#line 9134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 9135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _fdsign(float); 
#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(long double a); 
#line 9178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(double a); 
#line 9216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(float a); 
#line 9223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(long double a); 
#line 9256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(double a); 
#line 9292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(float a); 
#line 9299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 9336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(double a); 
#line 9372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(float a); 
#line 9380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 9381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 abs(__int64) throw(); 
#line 9452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 9456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 9457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline double __cdecl abs(double) throw(); 
#line 9458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fabs(float) throw(); 
#line 9459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl ceil(float) throw(); 
#line 9460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl floor(float) throw(); 
#line 9461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sqrt(float) throw(); 
#line 9462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, float) throw(); 
#line 9487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, int) throw(); 
#line 9488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline double __cdecl pow(double, int) throw(); 
#line 9491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log10(float) throw(); 
#line 9493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmod(float, float) throw(); 
#line 9494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl modf(float, float *) throw(); 
#line 9495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl exp(float) throw(); 
#line 9496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl frexp(float, int *) throw(); 
#line 9497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl ldexp(float, int) throw(); 
#line 9498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl asin(float) throw(); 
#line 9499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sin(float) throw(); 
#line 9500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sinh(float) throw(); 
#line 9501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl acos(float) throw(); 
#line 9502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cos(float) throw(); 
#line 9503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cosh(float) throw(); 
#line 9504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atan(float) throw(); 
#line 9505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atan2(float, float) throw(); 
#line 9506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tan(float) throw(); 
#line 9507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tanh(float) throw(); 
#line 9681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 9682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int __cdecl ilogb(float) throw(); 
#line 9683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl scalbn(float, float) throw(); 
#line 9684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl scalbln(float, long) throw(); 
#line 9685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl exp2(float) throw(); 
#line 9686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl expm1(float) throw(); 
#line 9687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log2(float) throw(); 
#line 9688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log1p(float) throw(); 
#line 9689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl acosh(float) throw(); 
#line 9690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl asinh(float) throw(); 
#line 9691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atanh(float) throw(); 
#line 9692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl hypot(float, float) throw(); 
#line 9693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl norm3d(float, float, float) throw(); 
#line 9694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl norm4d(float, float, float, float) throw(); 
#line 9695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cbrt(float) throw(); 
#line 9696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl erf(float) throw(); 
#line 9697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl erfc(float) throw(); 
#line 9698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl lgamma(float) throw(); 
#line 9699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tgamma(float) throw(); 
#line 9700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl copysign(float, float) throw(); 
#line 9701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl nextafter(float, float) throw(); 
#line 9702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl remainder(float, float) throw(); 
#line 9703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 9704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl round(float) throw(); 
#line 9705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl lround(float) throw(); 
#line 9706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 __cdecl llround(float) throw(); 
#line 9707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl trunc(float) throw(); 
#line 9708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl rint(float) throw(); 
#line 9709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl lrint(float) throw(); 
#line 9710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 __cdecl llrint(float) throw(); 
#line 9711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl nearbyint(float) throw(); 
#line 9712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fdim(float, float) throw(); 
#line 9713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fma(float, float, float) throw(); 
#line 9714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmax(float, float) throw(); 
#line 9715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmin(float, float) throw(); 
#line 9718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float exp10(float a); 
#line 9720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float rsqrt(float a); 
#line 9722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float rcbrt(float a); 
#line 9724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float sinpi(float a); 
#line 9726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cospi(float a); 
#line 9728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline void sincospi(float a, float * sptr, float * cptr); 
#line 9730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline void sincos(float a, float * sptr, float * cptr); 
#line 9732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float j0(float a); 
#line 9734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float j1(float a); 
#line 9736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float jn(int n, float a); 
#line 9738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float y0(float a); 
#line 9740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float y1(float a); 
#line 9742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float yn(int n, float a); 
#line 9744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cyl_bessel_i0(float a); 
#line 9746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cyl_bessel_i1(float a); 
#line 9748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfinv(float a); 
#line 9750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfcinv(float a); 
#line 9752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float normcdfinv(float a); 
#line 9754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float normcdf(float a); 
#line 9756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfcx(float a); 
#line 9758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double copysign(double a, float b); 
#line 9760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float copysign(float a, double b); 
#line 9762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(unsigned a, unsigned b); 
#line 9764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(int a, unsigned b); 
#line 9766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(unsigned a, int b); 
#line 9768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline long min(long a, long b); 
#line 9770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(unsigned long a, unsigned long b); 
#line 9772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(long a, unsigned long b); 
#line 9774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(unsigned long a, long b); 
#line 9776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline __int64 min(__int64 a, __int64 b); 
#line 9778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b); 
#line 9780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b); 
#line 9782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b); 
#line 9784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float min(float a, float b); 
#line 9786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(double a, double b); 
#line 9788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(float a, double b); 
#line 9790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(double a, float b); 
#line 9792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(unsigned a, unsigned b); 
#line 9794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(int a, unsigned b); 
#line 9796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(unsigned a, int b); 
#line 9798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline long max(long a, long b); 
#line 9800 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(unsigned long a, unsigned long b); 
#line 9802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(long a, unsigned long b); 
#line 9804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(unsigned long a, long b); 
#line 9806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline __int64 max(__int64 a, __int64 b); 
#line 9808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b); 
#line 9810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b); 
#line 9812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b); 
#line 9814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float max(float a, float b); 
#line 9816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(double a, double b); 
#line 9818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(float a, double b); 
#line 9820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(double a, float b); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(long double a) 
#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< long double> (a); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(double a) 
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< double> (a); 
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(float a) 
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< float> (a); 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(long double a) 
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< long double> (a); 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(double a) 
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< double> (a); 
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(float a) 
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< float> (a); 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(long double a) 
#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< long double> (a); 
#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(double a) 
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< double> (a); 
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(float a) 
#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< float> (a); 
#line 489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float exp10(float a) 
#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return exp10f(a); 
#line 684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float rsqrt(float a) 
#line 687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return rsqrtf(a); 
#line 689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float rcbrt(float a) 
#line 692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return rcbrtf(a); 
#line 694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float sinpi(float a) 
#line 697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return sinpif(a); 
#line 699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cospi(float a) 
#line 702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cospif(a); 
#line 704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline void sincospi(float a, float *sptr, float *cptr) 
#line 707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
sincospif(a, sptr, cptr); 
#line 709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline void sincos(float a, float *sptr, float *cptr) 
#line 712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
sincosf(a, sptr, cptr); 
#line 714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float j0(float a) 
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return j0f(a); 
#line 719 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float j1(float a) 
#line 722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return j1f(a); 
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float jn(int n, float a) 
#line 727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return jnf(n, a); 
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float y0(float a) 
#line 732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return y0f(a); 
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float y1(float a) 
#line 737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return y1f(a); 
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float yn(int n, float a) 
#line 742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ynf(n, a); 
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cyl_bessel_i0(float a) 
#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cyl_bessel_i0f(a); 
#line 749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cyl_bessel_i1(float a) 
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cyl_bessel_i1f(a); 
#line 754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfinv(float a) 
#line 757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfinvf(a); 
#line 759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfcinv(float a) 
#line 762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfcinvf(a); 
#line 764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float normcdfinv(float a) 
#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return normcdfinvf(a); 
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float normcdf(float a) 
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return normcdff(a); 
#line 774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfcx(float a) 
#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfcxf(a); 
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double copysign(double a, float b) 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return copysign(a, (double)b); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float copysign(float a, double b) 
#line 787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return copysignf(a, (float)b); 
#line 789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(unsigned a, unsigned b) 
#line 792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin(a, b); 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(int a, unsigned b) 
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin((unsigned)a, b); 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(unsigned a, int b) 
#line 802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin(a, (unsigned)b); 
#line 804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline long min(long a, long b) 
#line 807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)min((int)a, (int)b); 
#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)llmin((__int64)a, (__int64)b); 
#line 820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(unsigned long a, unsigned long b) 
#line 824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 826 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(long a, unsigned long b) 
#line 839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 850 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(unsigned long a, long b) 
#line 854 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 min(__int64 a, __int64 b) 
#line 869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return llmin(a, b); 
#line 871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin(a, b); 
#line 876 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 878 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin((unsigned __int64)a, b); 
#line 881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin(a, (unsigned __int64)b); 
#line 886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float min(float a, float b) 
#line 889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fminf(a, b); 
#line 891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(double a, double b) 
#line 894 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin(a, b); 
#line 896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(float a, double b) 
#line 899 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin((double)a, b); 
#line 901 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(double a, float b) 
#line 904 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin(a, (double)b); 
#line 906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(unsigned a, unsigned b) 
#line 909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax(a, b); 
#line 911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(int a, unsigned b) 
#line 914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax((unsigned)a, b); 
#line 916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(unsigned a, int b) 
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax(a, (unsigned)b); 
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 923 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline long max(long a, long b) 
#line 924 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 927 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)max((int)a, (int)b); 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)llmax((__int64)a, (__int64)b); 
#line 936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(unsigned long a, unsigned long b) 
#line 940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(long a, unsigned long b) 
#line 955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(unsigned long a, long b) 
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 max(__int64 a, __int64 b) 
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return llmax(a, b); 
#line 987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
#line 990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax(a, b); 
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax((unsigned __int64)a, b); 
#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax(a, (unsigned __int64)b); 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float max(float a, float b) 
#line 1005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmaxf(a, b); 
#line 1007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(double a, double b) 
#line 1010 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax(a, b); 
#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(float a, double b) 
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax((double)a, b); 
#line 1017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(double a, float b) 
#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax(a, (double)b); 
#line 1022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning(disable : 4211)
#line 1033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int min(int a, int b) 
#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1038 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned umin(unsigned a, unsigned b) 
#line 1039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1041 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 llmin(__int64 a, __int64 b) 
#line 1044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 ullmin(unsigned __int64 a, unsigned __int64 
#line 1049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
b) 
#line 1050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int max(int a, int b) 
#line 1055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned umax(unsigned a, unsigned b) 
#line 1060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1061 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 llmax(__int64 a, __int64 b) 
#line 1065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 ullmax(unsigned __int64 a, unsigned __int64 
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
b) 
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning(default: 4211)
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< class T, int dim = 1> 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
struct surface : public surfaceReference { 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface() 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface(::cudaChannelFormatDesc desc) 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = desc; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< int dim> 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
struct surface< void, dim>  : public surfaceReference { 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface() 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< void> (); 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
struct texture : public textureReference { 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
texture(int norm = 0, ::cudaTextureFilterMode 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
fMode = cudaFilterModePoint, ::cudaTextureAddressMode 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
aMode = cudaAddressModeClamp) 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
{ 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::normalized) = norm; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::filterMode) = fMode; 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[0]) = aMode; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[1]) = aMode; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[2]) = aMode; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::sRGB) = 0; 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
} 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
texture(int norm, ::cudaTextureFilterMode 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
fMode, ::cudaTextureAddressMode 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
aMode, ::cudaChannelFormatDesc 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
desc) 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
{ 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::normalized) = norm; 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::filterMode) = fMode; 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[0]) = aMode; 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[1]) = aMode; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[2]) = aMode; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::channelDesc) = desc; 
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::sRGB) = 0; 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
} 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
}; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
extern "C" {
#line 3230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
}
#line 3238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int mulhi(int a, int b); 
#line 3240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(unsigned a, unsigned b); 
#line 3242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(int a, unsigned b); 
#line 3244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(unsigned a, int b); 
#line 3246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline __int64 mul64hi(__int64 a, __int64 b); 
#line 3248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b); 
#line 3250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b); 
#line 3252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b); 
#line 3254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int float_as_int(float a); 
#line 3256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float int_as_float(int a); 
#line 3258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned float_as_uint(float a); 
#line 3260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float uint_as_float(unsigned a); 
#line 3262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float saturate(float a); 
#line 3264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int mul24(int a, int b); 
#line 3266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned umul24(unsigned a, unsigned b); 
#line 3268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __trap() instead.")) static __inline void trap(); 
#line 3271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __brkpt() instead.")) static __inline void brkpt(int c = 0); 
#line 3273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __syncthreads() instead.")) static __inline void syncthreads(); 
#line 3275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __prof_trigger() instead.")) static __inline void prof_trigger(int e); 
#line 3277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __threadfence() instead.")) static __inline void threadfence(bool global = true); 
#line 3279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mulhi(int a, int b) 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, unsigned b) 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(int a, unsigned b) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, int b) 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline __int64 mul64hi(__int64 a, __int64 b) 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b) 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b) 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b) 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float_as_int(float a) 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int_as_float(int a) 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float_as_uint(float a) 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint_as_float(unsigned a) 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float saturate(float a) 
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mul24(int a, int b) 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned umul24(unsigned a, unsigned b) 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void trap() 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void brkpt(int c) 
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)c;
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void syncthreads() 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void prof_trigger(int e) 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)e;
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}





































#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void threadfence(bool global) 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)global;
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float2int(float a, cudaRoundMode mode) 
#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float2uint(float a, cudaRoundMode mode) 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int2float(int a, cudaRoundMode mode) 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint2float(unsigned a, cudaRoundMode mode) 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern "C" {
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
}
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
extern "C" {
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
}
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
}
#line 1475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1083 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 1084 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 1399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 1407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1958 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1983 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeElementType> , int) {int volatile ___ = 1;::exit(___);}



#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
struct __nv_tex_rmnf_ret { }; 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat> , int) {int volatile ___ = 1;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeElementType> , float) {int volatile ___ = 1;::exit(___);}



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeNormalizedFloat> , float) {int volatile ___ = 1;::exit(___);}



#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}



#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}



#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeElementType> , float, int) {int volatile ___ = 1;::exit(___);}



#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat> , float, int) {int volatile ___ = 1;::exit(___);}



#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeElementType> , float, float, int) {int volatile ___ = 1;::exit(___);}



#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int) {int volatile ___ = 1;::exit(___);}



#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeElementType> , float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 1122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
struct __nv_tex2dgather_ret { }; 
#line 1123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
#line 1125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
#line 1126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
#line 1127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
#line 1128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
#line 1129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
#line 1131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
#line 1132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
#line 1133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
#line 1137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
#line 1138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
#line 1139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
#line 1141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
#line 1142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
#line 1144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
#line 1150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
#line 1151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
#line 1152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
#line 1158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
#line 1160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
#line 1163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex2dgather_ret< T> ::type 
#line 1164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeElementType> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static ::float4 
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}



#line 1238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}



#line 1241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType> , float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType> , float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1872 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 2002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 2133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeElementType> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType> , float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 2386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 2389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeElementType> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 2643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 2646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1Dfetch(T *, ::cudaTextureObject_t, int) {int volatile ___ = 1;::exit(___);}



#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1D(T *, ::cudaTextureObject_t, float) {int volatile ___ = 1;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1D(::cudaTextureObject_t texObject, float x) 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2D(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2D(::cudaTextureObject_t texObject, float x, float y) 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3D(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayered(T *, ::cudaTextureObject_t, float, int) {int volatile ___ = 1;::exit(___);}



#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayered(T *, ::cudaTextureObject_t, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemap(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayered(T *, ::cudaTextureObject_t, float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2Dgather(T *, ::cudaTextureObject_t, float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
#line 662 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
#line 666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLod(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}



#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
#line 730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLod(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
#line 803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredLod(T *, ::cudaTextureObject_t, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
#line 938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredLod(T *, ::cudaTextureObject_t, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1068 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 1073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(T *, ::cudaTextureObject_t, float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DGrad(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 1204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 1208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DGrad(T *, ::cudaTextureObject_t, float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 1222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
#line 1271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 1275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DGrad(T *, ::cudaTextureObject_t, float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 1289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
#line 1338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 1342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(T *, ::cudaTextureObject_t, float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 1356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 1406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 1410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(T *, ::cudaTextureObject_t, float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 1424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
#line 1473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dread(T *, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dwrite(T, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_blockDim; 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_gridDim; 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const int __device_builtin_variable_warpSize; 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
}
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaLaunchKernel(const T *
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::dim3 
#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
gridDim, ::dim3 
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockDim, void **
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
args, ::size_t 
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaSetupArgument(T 
#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
arg, ::size_t 
#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset) 
#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 260 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
event, unsigned 
#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaEventCreateWithFlags(event, flags); 
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
static __inline cudaError_t cudaMallocHost(void **
#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, size_t 
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 328 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostAlloc(ptr, size, flags); 
#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaHostAlloc(T **
#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, ::size_t 
#line 335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 342 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaHostGetDevicePointer(T **
#line 344 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pDevice, void *
#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pHost, unsigned 
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocManaged(T **
#line 451 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 453 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 1) 
#line 455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 457 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaStreamAttachMemAsync(::cudaStream_t 
#line 530 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream, T *
#line 531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 532 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
length = 0, unsigned 
#line 533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 4) 
#line 535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMalloc(T **
#line 541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size) 
#line 544 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocHost(T **
#line 550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, ::size_t 
#line 551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 559 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocPitch(T **
#line 560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t *
#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch, ::size_t 
#line 562 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 563 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height) 
#line 565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 605 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyToSymbol(const T &
#line 606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, const void *
#line 607 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
src, ::size_t 
#line 608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice) 
#line 612 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 613 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 656 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 657 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
#line 658 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, const void *
#line 659 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
src, ::size_t 
#line 660 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 661 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 702 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 703 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyFromSymbol(void *
#line 704 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dst, const T &
#line 705 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, ::size_t 
#line 706 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost) 
#line 710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 754 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 755 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
#line 756 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dst, const T &
#line 757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, ::size_t 
#line 758 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 759 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 760 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 761 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 763 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 764 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 765 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 787 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 788 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetSymbolAddress(void **
#line 789 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const T &
#line 790 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol) 
#line 792 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 794 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 816 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetSymbolSize(::size_t *
#line 818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, const T &
#line 819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol) 
#line 821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 822 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 859 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 860 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 861 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 862 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 864 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc, ::size_t 
#line 865 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size = 4294967295U) 
#line 867 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 868 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
#line 869 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 906 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size = 4294967295U) 
#line 911 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
#line 913 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 960 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 961 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 962 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 963 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 964 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 965 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc, ::size_t 
#line 966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 967 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height, ::size_t 
#line 968 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch) 
#line 970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 971 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
#line 972 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1018 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 1020 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1021 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 1022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 1023 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 1024 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height, ::size_t 
#line 1025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch) 
#line 1027 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1028 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
#line 1029 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1060 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1062 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1063 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1067 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTextureToArray(&tex, array, &desc); 
#line 1068 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1098 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1099 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array) 
#line 1103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
#line 1108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
mipmappedArray, const ::cudaChannelFormatDesc &
#line 1143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
#line 1147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
mipmappedArray) 
#line 1182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaArray_t levelArray; 
#line 1185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
#line 1187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (err != (cudaSuccess)) { 
#line 1188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return err; 
#line 1189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
err = ::cudaGetChannelDesc(&desc, levelArray); 
#line 1192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
#line 1193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode>  &
#line 1218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex) 
#line 1220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaUnbindTexture(&tex); 
#line 1222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetTextureAlignmentOffset(::size_t *
#line 1252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex) 
#line 1255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
#line 1257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncSetCacheConfig(T *
#line 1304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::cudaFuncCache 
#line 1305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cacheConfig) 
#line 1307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncSetSharedMemConfig(T *
#line 1313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::cudaSharedMemConfig 
#line 1314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
config) 
#line 1316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1318 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks, T 
#line 1350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, int 
#line 1351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize) 
#line 1353 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks, T 
#line 1401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, int 
#line 1402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize, unsigned 
#line 1404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 1405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
class __cudaOccupancyB2DHelper { 
#line 1413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size_t n; 
#line 1415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size_t operator()(int) 
#line 1417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return n; 
#line 1419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}; 
#line 1467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1468 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1469 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1471 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, UnaryFunction 
#line 1472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1473 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 1475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1476 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t status; 
#line 1479 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int device; 
#line 1480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaFuncAttributes attr; 
#line 1483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxThreadsPerMultiProcessor; 
#line 1484 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int warpSize; 
#line 1485 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int devMaxThreadsPerBlock; 
#line 1486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int multiProcessorCount; 
#line 1487 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int funcMaxThreadsPerBlock; 
#line 1488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyLimit; 
#line 1489 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int granularity; 
#line 1492 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxBlockSize = 0; 
#line 1493 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int numBlocks = 0; 
#line 1494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxOccupancy = 0; 
#line 1497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeToTryAligned; 
#line 1498 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeToTry; 
#line 1499 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeLimitAligned; 
#line 1500 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyInBlocks; 
#line 1501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyInThreads; 
#line 1502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::size_t dynamicSMemSize; 
#line 1508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaErrorInvalidValue; 
#line 1510 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = ::cudaGetDevice(&device); 
#line 1517 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1519 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1521 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1525 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1527 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaFuncGetAttributes(&attr, func); 
#line 1554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1564 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
granularity = warpSize; 
#line 1567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (blockSizeLimit == 0) { 
#line 1568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1569 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1571 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1573 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1585 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1586 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToTry = blockSizeLimit; 
#line 1587 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} else { 
#line 1588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToTry = blockSizeToTryAligned; 
#line 1589 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1591 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1600 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1601 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1602 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (occupancyInThreads > maxOccupancy) { 
#line 1607 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
maxBlockSize = blockSizeToTry; 
#line 1608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks = occupancyInBlocks; 
#line 1609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
maxOccupancy = occupancyInThreads; 
#line 1610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (occupancyLimit == maxOccupancy) { 
#line 1615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
break; 
#line 1616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1626 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
(*blockSize) = maxBlockSize; 
#line 1628 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1629 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1664 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, UnaryFunction 
#line 1667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1669 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1670 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1671 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSize(int *
#line 1709 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::size_t 
#line 1712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1713 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1714 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1715 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1716 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1766 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 1768 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::size_t 
#line 1771 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1773 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 1774 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1775 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 1776 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1814 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1815 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaLaunch(T *
#line 1816 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func) 
#line 1818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaLaunch((const void *)func); 
#line 1820 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1851 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1852 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 1853 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
attr, T *
#line 1854 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
entry) 
#line 1856 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1857 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 1858 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1880 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim> static __inline ::cudaError_t 
#line 1881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1882 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1883 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1884 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1886 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1887 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
#line 1888 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim> static __inline ::cudaError_t 
#line 1910 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1911 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array) 
#line 1914 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1915 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1916 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1918 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
#line 1919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
typedef 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
struct _iobuf { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
void *_Placeholder; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} FILE; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl __acrt_iob_func(unsigned); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fgetwc(FILE * _Stream); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwchar(); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl getwc(FILE * _Stream); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl getwchar(); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline __wchar_t *__cdecl _getws_s(__wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwchar(__wchar_t _Character); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _putws(const __wchar_t * _Buffer); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _wremove(const __wchar_t * _FileName); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wtmpnam_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4793)
#line 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ::va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable:4793 4996)
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl swprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
swprintf(__wchar_t *const 
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) throw() 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress: 28719)
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
vswprintf(__wchar_t *const 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(suppress: 28719)
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_swprintf_l(__wchar_t *const 
#line 1847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) throw() 
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_vswprintf_l(__wchar_t *const 
#line 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *
#line 1921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswscanf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, _locale_t 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl clearerr(FILE * _Stream); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fclose(FILE * _Stream); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fcloseall(); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl feof(FILE * _Stream); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ferror(FILE * _Stream); 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fflush(FILE * _Stream); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetc(FILE * _Stream); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fgetchar(); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fileno(FILE * _Stream); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _flushall(); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputc(int _Character, FILE * _Stream); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fputchar(int _Character); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) long __cdecl ftell(FILE * _Stream); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _Stream); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getc(FILE * _Stream); 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getchar(); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getmaxstdio(); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline char *__cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getw(FILE * _Stream); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl perror(const char * _ErrorMessage); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _pclose(FILE * _Stream); 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putc(int _Character, FILE * _Stream); 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putchar(int _Character); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl puts(const char * _Buffer); 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _putw(int _Word, FILE * _Stream); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl remove(const char * _FileName); 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _unlink(const char * _FileName); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl unlink(const char * _FileName); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl rewind(FILE * _Stream); 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _rmtmp(); 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _setmaxstdio(int _Maximum); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl tmpfile(); 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file(FILE * _Stream); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _unlock_file(FILE * _Stream); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fclose_nolock(FILE * _Stream); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fflush_nolock(FILE * _Stream); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) long __cdecl _ftell_nolock(FILE * _Stream); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getc_nolock(FILE * _Stream); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int *__cdecl __p__commode(); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_l(FILE *const 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _get_printf_count_output(); 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_l(char *const 
#line 1376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)__va_start(&_ArgList, _Format))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 2004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)__va_start(&_ArgList, _Format))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)) }
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_l(const char *const 
#line 2158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf_s(const char *const 
#line 2211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsscanf_s(const char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#pragma warning(pop)
#line 2310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_l(const char *const 
#line 2322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fcloseall(); 
#line 2448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetchar(); 
#line 2450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fileno(FILE * _Stream); 
#line 2451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl flushall(); 
#line 2452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputchar(int _Ch); 
#line 2453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getw(FILE * _Stream); 
#line 2454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl rmtmp(); 
#line 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
}__pragma(pack ( pop )) 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
extern "C" { typedef FILE FILE; }
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
namespace std { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::FILE;using ::_Mbstatet;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fpos_t;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::clearerr;using ::fclose;using ::feof;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::ferror;using ::fflush;using ::fgetc;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fgetpos;using ::fgets;using ::fopen;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fprintf;using ::fputc;using ::fputs;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fread;using ::freopen;using ::fscanf;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fseek;using ::fsetpos;using ::ftell;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fwrite;using ::getc;using ::getchar;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::perror;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::putc;using ::putchar;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::printf;using ::puts;using ::remove;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::rename;using ::rewind;using ::scanf;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::setbuf;using ::setvbuf;using ::sprintf;
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::sscanf;using ::tmpfile;using ::tmpnam;
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::ungetc;using ::vfprintf;using ::vprintf;
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::vsprintf;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::snprintf;using ::vsnprintf;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::vfscanf;using ::vscanf;using ::vsscanf;
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::memchr;using ::memcmp;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::memcpy;using ::memmove;using ::memset;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strcat;using ::strchr;using ::strcmp;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strcoll;using ::strcpy;using ::strcspn;
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strerror;using ::strlen;using ::strncat;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strncmp;using ::strncpy;using ::strpbrk;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strrchr;using ::strspn;using ::strstr;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strtok;using ::strxfrm;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
using ::ptrdiff_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
}
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
namespace std { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
typedef double max_align_t; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
}
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
using std::max_align_t;
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
template < class _Elem >
 class initializer_list
 {
public :
 typedef _Elem value_type;
 typedef const _Elem & reference;
 typedef const _Elem & const_reference;
 typedef size_t size_type;

 typedef const _Elem * iterator;
 typedef const _Elem * const_iterator;

 constexpr initializer_list ( ) noexcept
  : _First ( 0 ), _Last ( 0 )
  {
  }

 constexpr initializer_list ( const _Elem * _First_arg,
  const _Elem * _Last_arg ) noexcept
  : _First ( _First_arg ), _Last ( _Last_arg )
  {
  }

 constexpr const _Elem * begin ( ) const noexcept
  {
  return ( _First );
  }

 constexpr const _Elem * end ( ) const noexcept
  {
  return ( _Last );
  }

 constexpr size_t size ( ) const noexcept
  {
  return ( ( size_t ) ( _Last - _First ) );
  }

private :
 const _Elem * _First;
 const _Elem * _Last;
 };
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
template < class _Elem > inline
 constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
template < class _Elem > inline
 constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . end ( ) );
 }
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
}
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma warning(push,3)
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma pack ( push, 8 )
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< bool , class 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty1, class 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty2> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _If { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty2 type; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty1, class 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty2> 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _If< true, _Ty1, _Ty2>  { 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty1 type; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Always_false { 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static constexpr bool value = false; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Arg, class 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Result> 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct unary_function { 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Arg argument_type; 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Result result_type; 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Arg1, class 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Arg2, class 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Result> 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct binary_function { 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Arg1 first_argument_type; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Arg2 second_argument_type; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Result result_type; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left + _Right );
  }
 };
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left - _Right );
  }
 };
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left * _Right );
  }
 };
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left == _Right );
  }
 };
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left < _Right );
  }
 };
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct plus< void>  { 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) );
  }
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct minus< void>  { 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) );
  }
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct multiplies< void>  { 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) );
  }
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct equal_to<>  { 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) );
  }
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct less<>  { 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) );
  }
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count) 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static_assert((sizeof(size_t) == (8)), "This code is for 64-bit size_t.");
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
const size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
const size_t _FNV_prime = 1099511628211Ui64; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t _Val = _FNV_offset_basis; 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
for (size_t _Next = (0); _Next < _Count; ++_Next) 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Val ^= ((size_t)(_First[_Next])); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Val *= _FNV_prime; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}  
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return _Val; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Kty >
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator ( ) ( const _Kty & _Keyval ) const
  {
  return ( _Hash_seq ( ( const unsigned char * ) & _Keyval, sizeof ( _Kty ) ) );
  }
 };
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Kty> 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct hash : public _Bitwise_hash< _Kty>  { 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static constexpr bool _Value = __is_enum(_Kty); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static_assert(_Value, "The C++ Standard doesn\'t provide a hash for this type.");
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< bool>  : public _Bitwise_hash< bool>  { 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< char>  : public _Bitwise_hash< char>  { 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< signed char>  : public _Bitwise_hash< signed char>  { 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned char>  : public _Bitwise_hash< unsigned char>  { 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< char16_t>  : public _Bitwise_hash< char16_t>  { 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< char32_t>  : public _Bitwise_hash< char32_t>  { 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< __wchar_t>  : public _Bitwise_hash< __wchar_t>  { 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< short>  : public _Bitwise_hash< short>  { 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned short>  : public _Bitwise_hash< unsigned short>  { 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< int>  : public _Bitwise_hash< int>  { 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned>  : public _Bitwise_hash< unsigned>  { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< long>  : public _Bitwise_hash< long>  { 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned long>  : public _Bitwise_hash< unsigned long>  { 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< __int64>  : public _Bitwise_hash< __int64>  { 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned __int64>  : public _Bitwise_hash< unsigned __int64>  { 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< float>  : public _Bitwise_hash< float>  { 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef float _Kty; 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef std::_Bitwise_hash< float>  _Mybase; 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t operator()(const _Kty &_Keyval) const 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< double>  : public _Bitwise_hash< double>  { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef double _Kty; 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef std::_Bitwise_hash< double>  _Mybase; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t operator()(const _Kty &_Keyval) const 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< long double>  : public _Bitwise_hash< long double>  { 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef long double _Kty; 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef std::_Bitwise_hash< long double>  _Mybase; 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t operator()(const _Kty &_Keyval) const 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct hash< _Ty *>  : public _Bitwise_hash< _Ty *>  { 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace tr1 { 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
using std::hash;
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class ..._Types> 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Arg_types { 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty1> 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Arg_types< _Ty1>  { 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty1 argument_type; 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty1, class 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty2> 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Arg_types< _Ty1, _Ty2>  { 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty1 first_argument_type; 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty2 second_argument_type; 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Is_function { 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef false_type _Bool_type; 
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static constexpr bool _Weird = false; 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...)>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct is_function : public _Is_function< _Ty> ::_Bool_type { 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> constexpr bool 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
is_function_v = (is_function< _Ty> ::value); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty > inline
 constexpr _Ty * addressof ( _Ty & _Val ) noexcept
 {
 return ( __builtin_addressof ( _Val ) );
 }
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ptrty > inline
 auto _Unfancy ( _Ptrty _Ptr )
 {
 return ( :: std :: addressof ( * _Ptr ) );
 }
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty > inline
 _Ty * _Unfancy ( _Ty * _Ptr )
 {
 return ( _Ptr );
 }
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(push,3)
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(disable: 4180 4296)
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma pack ( push, 8 )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_memfunptr { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef false_type _Bool_type; 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_void : public false_type { 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct is_void< void>  : public true_type { }; template<> struct is_void< const void>  : public true_type { }; template<> struct is_void< volatile void>  : public true_type { }; template<> struct is_void< const volatile void>  : public true_type { }; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_const { 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const _Ty type; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_volatile { 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef volatile _Ty type; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_cv { 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const volatile _Ty type; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = _Is_function< _Ty> ::_Weird || is_void< _Ty> ::value> 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_reference { 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty _Lvalue; 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty _Rvalue; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_reference< _Ty, false>  { 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty &_Lvalue; 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty &&_Rvalue; 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_lvalue_reference { 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Add_reference< _Ty> ::_Lvalue type; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_rvalue_reference { 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Add_reference< _Ty> ::_Rvalue type; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> typename add_rvalue_reference< _Ty> ::type declval() noexcept; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_extent { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_extent< _Ty [_Ix]>  { 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_extent< _Ty []>  { 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_all_extents { 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_all_extents< _Ty [_Ix]>  { 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::remove_all_extents< _Ty> ::type type; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_all_extents< _Ty []>  { 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::remove_all_extents< _Ty> ::type type; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_pointer { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct remove_pointer< _Ty *>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *const>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *volatile>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *const volatile>  { typedef _Ty type; }; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = _Is_function< _Ty> ::_Weird> 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_pointer { 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_pointer< _Ty, false>  { 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename remove_reference< _Ty> ::type *type; 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_pointer { 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Add_pointer< _Ty> ::type type; 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_array : public false_type { 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Nx> 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_array< _Ty [_Nx]>  : public true_type { 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_array< _Ty []>  : public true_type { 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_lvalue_reference : public false_type { 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_lvalue_reference< _Ty &>  : public true_type { 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_rvalue_reference : public false_type { 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_rvalue_reference< _Ty &&>  : public true_type { 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_reference : public _Cat_base< is_lvalue_reference< _Ty> ::value || is_rvalue_reference< _Ty> ::value>  { 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Pmf = _Is_memfunptr< _Ty> ::_Bool_type::value> 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_member_object_pointer : public false_type { 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_member_object_pointer< _Ty1 _Ty2::*, false>  : public true_type { 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty2 _Class_type; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_member_object_pointer : public _Is_member_object_pointer< typename remove_cv< _Ty> ::type> ::type { 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_member_function_pointer : public _Is_memfunptr< typename remove_cv< _Ty> ::type> ::_Bool_type { 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_pointer : public false_type { 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_pointer< _Ty *>  : public _Cat_base< (!is_member_object_pointer< _Ty *> ::value) && (!is_member_function_pointer< _Ty *> ::value)>  { 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_pointer : public _Is_pointer< typename remove_cv< _Ty> ::type>  { 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_null_pointer : public _Cat_base< is_same< typename remove_cv< _Ty> ::type, std::nullptr_t> ::value>  { 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_union : public _Cat_base< __is_union(_Ty)>  { 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_class : public _Cat_base< __is_class(_Ty)>  { 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_fundamental : public _Cat_base< (is_arithmetic< _Ty> ::value || is_void< _Ty> ::value) || is_null_pointer< _Ty> ::value>  { 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_object : public _Cat_base< ((!is_function< _Ty> ::value) && (!is_reference< _Ty> ::value)) && (!is_void< _Ty> ::value)>  { 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _From, class 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_To> 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_convertible : public _Cat_base< __is_convertible_to(_From, _To)>  { 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_enum : public _Cat_base< __is_enum(_Ty)>  { 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_compound : public _Cat_base< !is_fundamental< _Ty> ::value>  { 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_member_pointer : public _Cat_base< is_member_object_pointer< _Ty> ::value || is_member_function_pointer< _Ty> ::value>  { 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_scalar : public _Cat_base< (((is_arithmetic< _Ty> ::value || is_enum< _Ty> ::value) || is_pointer< _Ty> ::value) || is_member_pointer< _Ty> ::value) || is_null_pointer< _Ty> ::value>  { 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_const : public false_type { 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_const< const _Ty>  : public true_type { 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_volatile : public false_type { 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_volatile< volatile _Ty>  : public true_type { 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_pod : public _Cat_base< __is_pod(_Ty)>  { 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_empty : public _Cat_base< __is_empty(_Ty)>  { 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_polymorphic : public _Cat_base< __is_polymorphic(_Ty)>  { 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_abstract : public _Cat_base< __is_abstract(_Ty)>  { 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_final : public _Cat_base< __is_final(_Ty)>  { 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_standard_layout : public _Cat_base< __is_standard_layout(_Ty)>  { 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_literal_type : public _Cat_base< __is_literal_type(_Ty)>  { 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivial : public _Cat_base< __is_trivial(_Ty)>  { 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_copyable : public _Cat_base< __is_trivially_copyable(_Ty)>  { 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct has_virtual_destructor : public _Cat_base< __has_virtual_destructor(_Ty)>  { 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_constructible : public _Cat_base< __is_constructible(_Ty, _Args...)>  { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_copy_constructible : public is_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_default_constructible : public is_constructible< _Ty> ::type { 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_move_constructible : public is_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _To, class 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_From> 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_assignable : public integral_constant< bool, __is_assignable(_To, _From)>  { 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_copy_assignable : public is_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_move_assignable : public is_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_destructible : public _Cat_base< __is_destructible(_Ty)>  { 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_constructible : public _Cat_base< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_copy_constructible : public is_trivially_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_default_constructible : public is_trivially_constructible< _Ty> ::type { 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_move_constructible : public is_trivially_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _To, class 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_From> 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_assignable : public _Cat_base< __is_trivially_assignable(_To, _From)>  { 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_copy_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_move_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_destructible : public _Cat_base< __has_trivial_destructor(_Ty)>  { 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_constructible : public _Cat_base< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_copy_constructible : public is_nothrow_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_default_constructible : public is_nothrow_constructible< _Ty> ::type { 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_move_constructible : public is_nothrow_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _To, class 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_From> 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_assignable : public _Cat_base< __is_nothrow_assignable(_To, _From)>  { 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_copy_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_move_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_destructible : public _Cat_base< __is_nothrow_destructible(_Ty)>  { 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = is_integral< _Ty> ::value> 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Sign_base { 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename remove_cv< _Ty> ::type _Uty; 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Cat_base< (((typename remove_cv< _Ty> ::type)(-1)) < ((typename remove_cv< _Ty> ::type)0))>  _Signed; 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Cat_base< (((typename remove_cv< _Ty> ::type)0) < ((typename remove_cv< _Ty> ::type)(-1)))>  _Unsigned; 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Sign_base< _Ty, false>  { 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef is_floating_point< _Ty>  _Signed; 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef false_type _Unsigned; 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_signed : public _Sign_base< _Ty> ::_Signed { 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_unsigned : public _Sign_base< _Ty> ::_Unsigned { 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign { 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static_assert(((is_integral< _Ty> ::value || is_enum< _Ty> ::value) && (!is_same< _Ty, bool> ::value)), "make_signed<T>/make_unsigned<T> require that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool ty" "pe.");
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type _Signed; 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, signed char> ::value, unsigned char, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, short> ::value, unsigned short, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, int> ::value, unsigned, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, long> ::value, unsigned long, unsigned __int64> ::type> ::type> ::type> ::type _Unsigned; 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign< const _Ty>  { 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign< volatile _Ty>  { 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef volatile typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef volatile typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign< const volatile _Ty>  { 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const volatile typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const volatile typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct make_signed { 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Change_sign< _Ty> ::_Signed type; 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct make_unsigned { 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Change_sign< _Ty> ::_Unsigned type; 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { 
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Len> 
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
union _Align_type { 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty _Val; 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
char _Pad[_Len]; 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align, class 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty, bool 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ok> struct _Aligned; 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align, class 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty> 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Align_type< _Ty, _Len>  type; 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, double, false>  { 
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Align_type< double, _Len>  type; 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, int, false>  { 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::_Aligned< _Len, _Align, double, _Align <= integral_constant< unsigned __int64, 8Ui64> ::value> ::type type; 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, short, false>  { 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::_Aligned< _Len, _Align, int, _Align <= integral_constant< unsigned __int64, 4Ui64> ::value> ::type type; 
#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, char, false>  { 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::_Aligned< _Len, _Align, short, _Align <= integral_constant< unsigned __int64, 2Ui64> ::value> ::type type; 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align = 8Ui64> 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct aligned_storage { 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Aligned< _Len, _Align, char, _Align <= integral_constant< unsigned __int64, 1Ui64> ::value> ::type type; 
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t ..._Vals> struct _Maximum; 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct _Maximum< >  { 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t value = (0); 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Val> 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Maximum< _Val>  { 
#line 900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t value = _Val; 
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _First, size_t 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Second, size_t ...
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Rest> 
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Maximum< _First, _Second, _Rest...>  : public _Maximum< (((_First) < _Second) ? _Second : _First), _Rest...>  { 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, class ...
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct aligned_union { 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t alignment_value = (_Maximum< (alignment_of< _Types> ::value)...> ::value); 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename aligned_storage< _Max_len, alignment_value> ::type type; 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct underlying_type { 
#line 926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef __underlying_type(_Ty) type; 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct rank : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct rank< _Ty [_Ix]>  : public integral_constant< unsigned __int64, rank< _Ty> ::value + 1>  { 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct rank< _Ty []>  : public integral_constant< unsigned __int64, rank< _Ty> ::value + 1>  { 
#line 946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx> 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent< _Ty [_Ix], 0>  : public integral_constant< unsigned __int64, _Ix>  { 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx, size_t _Ix> 
#line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent< _Ty [_Ix], _Nx>  : public _Extent< _Ty, _Nx - (1)>  { 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx> 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent< _Ty [], _Nx>  : public _Extent< _Ty, _Nx - (1)>  { 
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx = 0U> 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct extent : public _Extent< _Ty, _Nx>  { 
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Base, class 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Der> 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_base_of : public _Cat_base< __is_base_of(_Base, _Der)>  { 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct decay { 
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename remove_reference< _Ty> ::type _Ty1; 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< is_array< typename remove_reference< _Ty> ::type> ::value, typename remove_extent< typename remove_reference< _Ty> ::type> ::type *, typename _If< is_function< typename remove_reference< _Ty> ::type> ::value, typename add_pointer< typename remove_reference< _Ty> ::type> ::type, typename remove_cv< typename remove_reference< _Ty> ::type> ::type> ::type> ::type type; 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ...> struct _Conjunction; 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool , class 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Lhs, class ...
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_conjunction { 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Lhs type; 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_conjunction< true, _Lhs, _Traits...>  { 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Conjunction< _Traits...> ::type type; 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct _Conjunction< >  { 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef true_type type; 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Conjunction< _Trait>  { 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Trait type; 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Conjunction< _Lhs, _Traits...>  { 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Choose_conjunction< _Lhs::value, _Lhs, _Traits...> ::type type; 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct conjunction : public _Conjunction< _Traits...> ::type { 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ...> struct _Disjunction; 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool , class 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Lhs, class ...
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_disjunction { 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Lhs type; 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_disjunction< false, _Lhs, _Traits...>  { 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Disjunction< _Traits...> ::type type; 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct _Disjunction< >  { 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef false_type type; 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Disjunction< _Trait>  { 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Trait type; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Disjunction< _Lhs, _Traits...>  { 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Choose_disjunction< _Lhs::value, _Lhs, _Traits...> ::type type; 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> 
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct disjunction : public _Disjunction< _Traits...> ::type { 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct negation : public bool_constant< !_Trait::value>  { 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
namespace tr1 { 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_const;
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_cv;
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_pointer;
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_volatile;
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::aligned_storage;
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::alignment_of;
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::conditional;
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::decay;
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::enable_if;
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::extent;
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::false_type;
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::has_virtual_destructor;
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::integral_constant;
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_abstract;
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_arithmetic;
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_array;
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_base_of;
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_class;
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_compound;
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_const;
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_convertible;
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_empty;
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_enum;
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_floating_point;
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_function;
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_fundamental;
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_integral;
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_member_function_pointer;
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_member_object_pointer;
#line 1130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_member_pointer;
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_object;
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_pod;
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_pointer;
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_polymorphic;
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_reference;
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_same;
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_scalar;
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_signed;
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_union;
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_unsigned;
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_void;
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_volatile;
#line 1143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::make_signed;
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::make_unsigned;
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::rank;
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_all_extents;
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_const;
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_cv;
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_extent;
#line 1150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_pointer;
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_reference;
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_volatile;
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::true_type;
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Ty> struct common_type; 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct common_type< _Ty>  { 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename decay< _Ty> ::type type; 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty0, class 
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1> 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct common_type< _Ty0, _Ty1>  { 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename decay< decltype(((_Always_false< _Ty0> ::value) ? std::declval< _Ty0> () : std::declval< _Ty1> ()))> ::type type; 
#line 1176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty0, class 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class ...
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty> 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct common_type< _Ty0, _Ty1, _Ty...>  { 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::common_type< typename std::common_type< _Ty0, _Ty1> ::type, _Ty...> ::type type; 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 _Ty ... _Vals >
 struct integer_sequence
 {
 static_assert ( is_integral < _Ty > :: value,
  "integer_sequence<T, I...> requires T to be an integral type." );

 typedef integer_sequence < _Ty, _Vals ... > type;
 typedef _Ty value_type;

 static constexpr size_t size ( ) noexcept
  {
  return ( sizeof ... ( _Vals ) );
  }
 };
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, _Ty 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 struct identity
 {
 typedef _Ty type;

 const _Ty & operator ( ) ( const _Ty & _Left ) const
  {
  return ( _Left );
  }
 };
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
forward(typename remove_reference< _Ty> ::type &
#line 1274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Arg) noexcept 
#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
{ 
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
} 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
forward(typename remove_reference< _Ty> ::type &&
#line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Arg) noexcept 
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
{ 
#line 1283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static_assert((!is_lvalue_reference< _Ty> ::value), "bad forward call");
#line 1284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
} 
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr typename remove_reference< _Ty> ::type &&
#line 1290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
move(_Ty &&_Arg) noexcept 
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
{ 
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
return static_cast< typename remove_reference< _Ty> ::type &&>(_Arg); 
#line 1293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
} 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 constexpr typename _If < ! is_nothrow_move_constructible < _Ty > :: value
  && is_copy_constructible < _Ty > :: value,
   const _Ty &, _Ty && > :: type
 move_if_noexcept ( _Ty & _Arg ) noexcept
 {
 return ( :: std :: move ( _Arg ) );
 }
#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ...> 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Param_tester { 
#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef void type; 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Types> using void_t = typename _Param_tester< _Types...> ::type; 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmf_object { 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1,
  class ... _Types2 >
  static auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 )
  -> decltype ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) )
  {
  return ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) );
  }
#line 1329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmf_pointer { 
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1,
  class ... _Types2 >
  static auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 )
  -> decltype ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) )
  {
  return ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) );
  }
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmd_object { 
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1 >
  static auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 )
  -> decltype ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd )
  {
  return ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd );
  }
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmd_pointer { 
#line 1358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1 >
  static auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 )
  -> decltype ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd )
  {
  return ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd );
  }
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_functor { 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Callable,
  class ... _Types >
  static auto _Call ( _Callable && _Obj, _Types && ... _Args )
  -> decltype ( :: std :: forward < _Callable > ( _Obj ) (
   :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: forward < _Callable > ( _Obj ) (
   :: std :: forward < _Types > ( _Args ) ... ) );
  }
#line 1378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed = typename decay< _Callable> ::type, bool 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Is_pmf = is_member_function_pointer< _Decayed> ::value, bool 
#line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Is_pmd = is_member_object_pointer< _Decayed> ::value> struct _Invoker1; 
#line 1387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed> 
#line 1390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Decayed, true, false>  : public _If< is_base_of< typename _Is_memfunptr< _Decayed> ::_Class_type, typename decay< _Ty1> ::type> ::value, _Invoker_pmf_object, _Invoker_pmf_pointer> ::type { 
#line 1397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed> 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Decayed, false, true>  : public _If< is_base_of< typename _Is_member_object_pointer< _Decayed> ::_Class_type, typename decay< _Ty1> ::type> ::value, _Invoker_pmd_object, _Invoker_pmd_pointer> ::type { 
#line 1409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed> 
#line 1414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Decayed, false, false>  : public _Invoker_functor { 
#line 1417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class ...
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> struct _Invoker; 
#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable> 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker< _Callable>  : public _Invoker_functor { 
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class ...
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types2> 
#line 1432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker< _Callable, _Ty1, _Types2...>  : public _Invoker1< _Callable, _Ty1>  { 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Callable,
 class ... _Types > inline
 auto invoke ( _Callable && _Obj, _Types && ... _Args )
 -> decltype ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) )
 {
 return ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) );
 }
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Rx, bool 
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = is_void< _Rx> ::value> 
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Forced { 
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unforced { 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Cv_void,
 class ... _Valtys > inline
 void _Invoke_ret ( _Forced < _Cv_void, true >, _Valtys && ... _Vals )
 {
 :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... );
 }
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Rx,
 class ... _Valtys > inline
 _Rx _Invoke_ret ( _Forced < _Rx, false >, _Valtys && ... _Vals )
 {
 return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );
 }
#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class ... _Valtys > inline
 auto _Invoke_ret ( _Forced < _Unforced, false >, _Valtys && ... _Vals )
 -> decltype ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) )
 {
 return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );
 }
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unique_tag_result_of { 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Void, class ...
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Result_of { 
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Types> 
#line 1490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Result_of< void_t< _Unique_tag_result_of, decltype((std::invoke(std::declval< _Types> ()...)))> , _Types...>  { 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef decltype((std::invoke(std::declval< _Types> ()...))) type; 
#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Fty> 
#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct result_of { 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static_assert((_Always_false< _Fty> ::value), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Fty, class ..._Args> struct result_of< _Fty __cdecl (_Args ...)>  : public _Result_of< void, _Fty, _Args...>  { }; template< class _Fty, class ..._Args> struct result_of< _Fty __vectorcall (_Args ...)>  : public _Result_of< void, _Fty, _Args...>  { }; 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_result_type { 
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::result_type result_type; 
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { 
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::argument_type argument_type; 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { 
#line 1552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::first_argument_type first_argument_type; 
#line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::second_argument_type second_argument_type; 
#line 1562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_types { 
#line 1567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Is_function< typename remove_pointer< _Ty> ::type>  _Is_f_or_pf; 
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Is_memfunptr< typename remove_cv< _Ty> ::type>  _Is_pmf; 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< _Is_function< typename remove_pointer< _Ty> ::type> ::_Bool_type::value, _Is_function< typename remove_pointer< _Ty> ::type> , typename _If< _Is_memfunptr< typename remove_cv< _Ty> ::type> ::_Bool_type::value, _Is_memfunptr< typename remove_cv< _Ty> ::type> , _Weak_binary_args< _Ty> > ::type> ::type type; 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 class reference_wrapper
  : public _Weak_types < _Ty > :: type
 {
public :
 static_assert ( is_object < _Ty > :: value || is_function < _Ty > :: value,
  "reference_wrapper<T> requires T to be an object type or a function type."
                       );

 typedef _Ty type;

 reference_wrapper ( _Ty & _Val ) noexcept
  : _Ptr ( :: std :: addressof ( _Val ) )
  {
  }

 operator _Ty & ( ) const noexcept
  {
  return ( * _Ptr );
  }

 _Ty & get ( ) const noexcept
  {
  return ( * _Ptr );
  }

 template < class ... _Types >
  auto operator ( ) ( _Types && ... _Args ) const
  -> decltype ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) );
  }

 reference_wrapper ( _Ty && ) = delete;

private :
 _Ty * _Ptr;
 };
#line 1615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < _Ty >
  ref ( _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < _Ty > ( _Val ) );
 }
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 void ref ( const _Ty && ) = delete;
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < _Ty >
  ref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: ref ( _Val . get ( ) ) );
 }
#line 1632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < const _Ty >
  cref ( const _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < const _Ty > ( _Val ) );
 }
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 void cref ( const _Ty && ) = delete;
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < const _Ty >
  cref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: cref ( _Val . get ( ) ) );
 }
#line 1650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unrefwrap_helper { 
#line 1653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 1654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool _Is_refwrap = false; 
#line 1655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 1660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty &type; 
#line 1661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool _Is_refwrap = true; 
#line 1662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unrefwrap { 
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename decay< _Ty> ::type _Ty1; 
#line 1668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Unrefwrap_helper< typename decay< _Ty> ::type> ::type type; 
#line 1669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool _Is_refwrap = (_Unrefwrap_helper< typename decay< _Ty> ::type> ::_Is_refwrap); 
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
namespace tr1 { 
#line 1674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::cref;
#line 1675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::ref;
#line 1676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::reference_wrapper;
#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::result_of;
#line 1678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 1682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct _Is_nothrow_swappable; 
#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 class = void > inline

 void swap ( _Ty &, _Ty & )
  noexcept ( is_nothrow_move_constructible < _Ty > :: value && is_nothrow_move_assignable < _Ty > :: value );
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 size_t _Size,
 class = typename enable_if < _Is_swappable < _Ty > :: value > :: type > inline
 void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 1709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2, class 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swappable_with_helper : public false_type { 
#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swappable_with_helper_unique_type { }; 
#line 1718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< _Swappable_with_helper_unique_type, decltype((swap(std::declval< _Ty1> (), std::declval< _Ty2> ())))> >  : public true_type { 
#line 1725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_swappable_with : public conjunction< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > ::type { 
#line 1736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_swappable : public _Is_swappable_with< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< _Ty> ::type> ::type { 
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swap_cannot_throw { 
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool value = (noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))); 
#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using type = bool_constant< value> ; 
#line 1762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_nothrow_swappable_with : public conjunction< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > ::type { 
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< _Ty> ::type> ::type { 
#line 1782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 1825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 1828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_const_t = typename add_const< _Ty> ::type; 
#line 1831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_volatile_t = typename add_volatile< _Ty> ::type; 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_cv_t = typename add_cv< _Ty> ::type; 
#line 1837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 1840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_lvalue_reference_t = typename add_lvalue_reference< _Ty> ::type; 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_rvalue_reference_t = typename add_rvalue_reference< _Ty> ::type; 
#line 1846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 1855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 1861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_pointer_t = typename add_pointer< _Ty> ::type; 
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 1865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align = 8Ui64> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
#line 1868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, class ...
#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool _Test, class 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 1879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool _Test, class 
#line 1880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using underlying_type_t = typename underlying_type< _Ty> ::type; 
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_void_v = (is_void< _Ty> ::value); 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_null_pointer_v = (is_null_pointer< _Ty> ::value); 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_array_v = (is_array< _Ty> ::value); 
#line 1901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_pointer_v = (is_pointer< _Ty> ::value); 
#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_lvalue_reference_v = (is_lvalue_reference< _Ty> ::value); 
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_rvalue_reference_v = (is_rvalue_reference< _Ty> ::value); 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_member_object_pointer_v = (is_member_object_pointer< _Ty> ::value); 
#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_member_function_pointer_v = (is_member_function_pointer< _Ty> ::value); 
#line 1911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_enum_v = (is_enum< _Ty> ::value); 
#line 1913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_union_v = (is_union< _Ty> ::value); 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_class_v = (is_class< _Ty> ::value); 
#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_reference_v = (is_reference< _Ty> ::value); 
#line 1919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_fundamental_v = (is_fundamental< _Ty> ::value); 
#line 1921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_object_v = (is_object< _Ty> ::value); 
#line 1923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_scalar_v = (is_scalar< _Ty> ::value); 
#line 1925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_compound_v = (is_compound< _Ty> ::value); 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_member_pointer_v = (is_member_pointer< _Ty> ::value); 
#line 1929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_const_v = (is_const< _Ty> ::value); 
#line 1931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_volatile_v = (is_volatile< _Ty> ::value); 
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivial_v = (is_trivial< _Ty> ::value); 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_copyable_v = (is_trivially_copyable< _Ty> ::value); 
#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_standard_layout_v = (is_standard_layout< _Ty> ::value); 
#line 1939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_pod_v = (is_pod< _Ty> ::value); 
#line 1941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_literal_type_v = (is_literal_type< _Ty> ::value); 
#line 1943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_empty_v = (is_empty< _Ty> ::value); 
#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_polymorphic_v = (is_polymorphic< _Ty> ::value); 
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_abstract_v = (is_abstract< _Ty> ::value); 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_final_v = (is_final< _Ty> ::value); 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_signed_v = (is_signed< _Ty> ::value); 
#line 1953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_unsigned_v = (is_unsigned< _Ty> ::value); 
#line 1955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 1956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> constexpr bool 
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_constructible_v = (is_constructible< _Ty, _Args...> ::value); 
#line 1958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_default_constructible_v = (is_default_constructible< _Ty> ::value); 
#line 1960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_copy_constructible_v = (is_copy_constructible< _Ty> ::value); 
#line 1962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_move_constructible_v = (is_move_constructible< _Ty> ::value); 
#line 1964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Uty> constexpr bool 
#line 1966 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_assignable_v = (is_assignable< _Ty, _Uty> ::value); 
#line 1967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_copy_assignable_v = (is_copy_assignable< _Ty> ::value); 
#line 1969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_move_assignable_v = (is_move_assignable< _Ty> ::value); 
#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1979 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_destructible_v = (is_destructible< _Ty> ::value); 
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> constexpr bool 
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_constructible_v = (is_trivially_constructible< _Ty, _Args...> ::value); 
#line 1983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Ty> ::value); 
#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Ty> ::value); 
#line 1987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Ty> ::value); 
#line 1989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Uty> constexpr bool 
#line 1991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_assignable_v = (is_trivially_assignable< _Ty, _Uty> ::value); 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Ty> ::value); 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Ty> ::value); 
#line 1996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_destructible_v = (is_trivially_destructible< _Ty> ::value); 
#line 1998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> constexpr bool 
#line 2000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_constructible_v = (is_nothrow_constructible< _Ty, _Args...> ::value); 
#line 2001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Ty> ::value); 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Ty> ::value); 
#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Ty> ::value); 
#line 2007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 2008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Uty> constexpr bool 
#line 2009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_assignable_v = (is_nothrow_assignable< _Ty, _Uty> ::value); 
#line 2010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Ty> ::value); 
#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Ty> ::value); 
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_destructible_v = (is_nothrow_destructible< _Ty> ::value); 
#line 2023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
has_virtual_destructor_v = (has_virtual_destructor< _Ty> ::value); 
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
alignment_of_v = (alignment_of< _Ty> ::value); 
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
rank_v = (rank< _Ty> ::value); 
#line 2029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned 
#line 2030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ix = 0U> constexpr size_t 
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
extent_v = (extent< _Ty, _Ix> ::value); 
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Base, class 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Derived> constexpr bool 
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _From, class 
#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_To> constexpr bool 
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_convertible_v = (is_convertible< _From, _To> ::value); 
#line 2038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
conjunction_v = (conjunction< _Traits...> ::value); 
#line 2040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
disjunction_v = (disjunction< _Traits...> ::value); 
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> constexpr bool 
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
negation_v = (negation< _Trait> ::value); 
#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 2049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma warning(push,3)
#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma pack ( push, 8 )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl uncaught_exception() noexcept; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
struct _heapinfo { 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
int *_pentry; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
size_t _size; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
int _useflag; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} _HEAPINFO; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
void *__cdecl _alloca(size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapmin(); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapchk(); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef char __static_assert_t[(sizeof(unsigned) <= (16)) != 0]; 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable:6540)
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
if (_Ptr) 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
(*((unsigned *)_Ptr)) = _Marker; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
_Ptr = (((char *)_Ptr) + 16); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}  
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
return _Ptr; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
size_t _MarkedSize = _Size + (16); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
unsigned _Marker; 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
if (_Memory) 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
_Memory = (((char *)_Memory) - 16); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
_Marker = (*((unsigned *)_Memory)); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
if (_Marker == (56797)) 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
free(_Memory); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}  
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}  
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_handler)(void); 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_function)(void); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw(); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) terminate_handler __cdecl _get_terminate(); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
typedef void (__cdecl *unexpected_handler)(void); 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
typedef void (__cdecl *unexpected_function)(void); 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
struct _EXCEPTION_POINTERS; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) throw(); 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) unexpected_handler __cdecl _get_unexpected(); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
class type_info; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) bool __cdecl __uncaught_exception(); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) int __cdecl __uncaught_exceptions(); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack ( push, 8 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
struct __std_exception_data { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
const char *_What; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
bool _DoFree; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__declspec(dllimport) void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__declspec(dllimport) void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}__pragma(pack ( pop )) 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
namespace std { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class exception { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: exception() throw() : _Data() 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
explicit exception(const char *const _Message) throw() : _Data() 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_data _InitData = {_Message, true}; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_copy(&_InitData, &(_Data)); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
exception(const char *const _Message, int) throw() : _Data() 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
((_Data)._What) = _Message; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
exception(const exception &_Other) throw() : _Data() 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
exception &operator=(const exception &_Other) throw() 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
if (this == (&_Other)) 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
return *this; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}  
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
return *this; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
virtual ~exception() throw() 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
virtual const char *what() const 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
private: __std_exception_data _Data; 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class bad_exception : public exception { 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: bad_exception() throw() : exception("bad exception", 1) 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class bad_alloc : public exception { 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: bad_alloc() throw() : exception("bad allocation", 1) 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
friend class bad_array_new_length; 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
private: bad_alloc(const char *const _Message) throw() : exception(_Message, 1) 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class bad_array_new_length : public bad_alloc { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: bad_array_new_length() throw() : bad_alloc("bad array new length") 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack ( pop )
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
using ::set_terminate;using ::terminate_handler;using ::terminate;using ::set_unexpected;using ::unexpected_handler;using ::unexpected;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
typedef void (__cdecl *_Prhand)(const exception &); 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline terminate_handler __cdecl get_terminate() noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _get_terminate(); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline unexpected_handler __cdecl get_unexpected() noexcept 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _get_unexpected(); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCreate(void *); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(void *); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(void *, const void *); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(void *, const void *); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(const void *, const void *); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(const void *); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(void *, void *); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(void *); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(const void *); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
class exception_ptr { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
public: exception_ptr() throw() 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCreate(this); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr(nullptr_t) throw() 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCreate(this); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
~exception_ptr() throw() 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrDestroy(this); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr(const exception_ptr &_Rhs) throw() 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCopy(this, &_Rhs); 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr &operator=(const exception_ptr &_Rhs) throw() 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrAssign(this, &_Rhs); 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return *this; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr &operator=(nullptr_t) throw() 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr _Ptr; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrAssign(this, &_Ptr); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return *this; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
explicit operator bool() const throw() 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return __ExceptionPtrToBool(this); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] void _RethrowException() const 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrRethrow(this); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
static exception_ptr _Current_exception() throw() 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr _Retval; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCurrentException(&_Retval); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Retval; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr _Retval = 0; 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
if (!_Ptr) 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Retval; 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}  
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Retval; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
private: void *_Data1; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
void *_Data2; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}; 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) throw() 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) throw() 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator==(nullptr_t, const exception_ptr &_Rhs) throw() 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !_Rhs; 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator==(const exception_ptr &_Lhs, nullptr_t) throw() 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !_Lhs; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) throw() 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator!=(nullptr_t _Lhs, const exception_ptr &_Rhs) throw() 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator!=(const exception_ptr &_Lhs, nullptr_t _Rhs) throw() 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline exception_ptr current_exception() noexcept 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return exception_ptr::_Current_exception(); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
_Ptr._RethrowException(); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ex > exception_ptr make_exception_ptr ( _Ex _Except ) noexcept
 {
 return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
 }
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
class nested_exception { 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
public: nested_exception() noexcept : _Exc(::std::current_exception()) 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
nested_exception(const nested_exception &) noexcept = default;
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
virtual ~nested_exception() noexcept = default;
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] void rethrow_nested() const 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
if ((_Exc)) { 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
::std::rethrow_exception(_Exc); } else { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
::std::terminate(); }  
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr nested_ptr() const noexcept 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Exc; 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
private: exception_ptr _Exc; 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}; 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty,
 class _Uty >
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested ( _Ty && _Arg )
  : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( )
  {
  }
 };
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, true_type )
 {
 typedef typename remove_reference < _Ty > :: type _Uty;
 typedef _With_nested < _Ty, _Uty > _Glued;

 throw _Glued ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, false_type )
 {
 typedef typename decay < _Ty > :: type _Decayed;

 throw _Decayed ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void throw_with_nested ( _Ty && _Arg )
 {
 typedef typename remove_reference < _Ty > :: type _Uty;

 integral_constant < bool,
  is_class < _Uty > :: value
  && ! is_base_of < nested_exception, _Uty > :: value
  && ! is_final < _Uty > :: value > _Tag;

 _Throw_with_nested ( :: std :: forward < _Ty > ( _Arg ), _Tag );
 }
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty * _Ptr, true_type )
 {
 const auto _Nested = dynamic_cast < const nested_exception * > ( _Ptr );

 if ( _Nested )
  _Nested -> rethrow_nested ( );
 }
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty *, false_type )
 {
 }
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty > inline
 void rethrow_if_nested ( const _Ty & _Arg )
 {
 integral_constant < bool,
  is_polymorphic < _Ty > :: value
  && ( ! is_base_of < nested_exception, _Ty > :: value
   || is_convertible < _Ty *, nested_exception * > :: value ) > _Tag;

 _Rethrow_if_nested ( :: std :: addressof ( _Arg ), _Tag );
 }
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int8_t; 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef short int16_t; 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int32_t; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 int64_t; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned char uint8_t; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned short uint16_t; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint32_t; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uint64_t; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int_least8_t; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef short int_least16_t; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int_least32_t; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 int_least64_t; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned char uint_least8_t; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned short uint_least16_t; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint_least32_t; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uint_least64_t; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int_fast8_t; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int_fast16_t; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int_fast32_t; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 int_fast64_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned char uint_fast8_t; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint_fast16_t; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint_fast32_t; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uint_fast64_t; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 intmax_t; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uintmax_t; 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int8_t;using ::int16_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int32_t;using ::int64_t;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint8_t;using ::uint16_t;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint32_t;using ::uint64_t;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least8_t;using ::int_least16_t;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least32_t;using ::int_least64_t;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least8_t;using ::uint_least16_t;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least32_t;using ::uint_least64_t;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast8_t;using ::int_fast16_t;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast32_t;using ::int_fast64_t;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast8_t;using ::uint_fast16_t;
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast32_t;using ::uint_fast64_t;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::intmax_t;using ::intptr_t;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uintmax_t;using ::uintptr_t;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
namespace tr1 { 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int8_t;using ::int16_t;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int32_t;using ::int64_t;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint8_t;using ::uint16_t;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint32_t;using ::uint64_t;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least8_t;using ::int_least16_t;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least32_t;using ::int_least64_t;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least8_t;using ::uint_least16_t;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least32_t;using ::uint_least64_t;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast8_t;using ::int_fast16_t;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast32_t;using ::int_fast64_t;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast8_t;using ::uint_fast16_t;
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast32_t;using ::uint_fast64_t;
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::intmax_t;using ::intptr_t;
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uintmax_t;using ::uintptr_t;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma pack ( push, 8 )
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
void __cdecl _Feraise(int); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
typedef 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
union { 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
unsigned short _Word[8]; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
float _Float; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
double _Double; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
long double _Long_double; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
} _Dconst; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) double __cdecl _Cosh(double, double); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _Dtest(double *); 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) double __cdecl _Sinh(double, double); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _Exp(double *, double, short); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) extern _Dconst _Denorm, _Hugeval, _Inf, 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
_Nan, _Snan; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) float __cdecl _FCosh(float, float); 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _FDtest(float *); 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) float __cdecl _FSinh(float, float); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _FExp(float *, float, short); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) extern _Dconst _FDenorm, _FInf, _FNan, _FSnan; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) long double __cdecl _LCosh(long double, long double); 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _LDtest(long double *); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) long double __cdecl _LSinh(long double, long double); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _LExp(long double *, long double, short); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) extern _Dconst _LDenorm, _LInf, _LNan, _LSnan; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
}
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _clearfp(); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
#pragma warning(pop)
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _statusfp(); 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl _fpreset(); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int *__cdecl __fpecode(); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl __fpe_flt_rounds(); 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _scalb(double _X, long _Y); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _logb(double _X); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _nextafter(double _X, double _Y); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl _finite(double _X); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl _isnan(double _X); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl _fpclass(double _X); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) float __cdecl _scalbf(float _X, long _Y); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl fpreset(); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _cgetws_s(__wchar_t (&_Buffer)[_Size], ::size_t *_SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwch(); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwche(); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _putwch(__wchar_t _Character); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _Character); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwch_nolock(); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwche_nolock(); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const unsigned short *__cdecl __pctype_func(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const wctype_t *__cdecl __pwctype_func(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalnum(wint_t _C); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalpha(wint_t _C); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswascii(wint_t _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswblank(wint_t _C); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswcntrl(wint_t _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswdigit(wint_t _C); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswgraph(wint_t _C); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswlower(wint_t _C); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswprint(wint_t _C); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswpunct(wint_t _C); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswspace(wint_t _C); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswupper(wint_t _C); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswxdigit(wint_t _C); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl __iswcsymf(wint_t _C); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl __iswcsym(wint_t _C); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl towupper(wint_t _C); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl towlower(wint_t _C); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl isleadbyte(int _C); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) int __cdecl _wchdir(const __wchar_t * _Path); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32_t { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32i64_t { 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64i32_t { 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64_t { 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmktemp_s(__wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) __wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
{ 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
} 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_ShFlag, int 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
{ 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
} 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef unsigned short _ino_t; 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef _ino_t ino_t; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef _dev_t dev_t; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef _off_t off_t; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat32 { 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat32i64 { 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat64i32 { 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat64 { 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct stat { 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
time_t st_atime; 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
time_t st_mtime; 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
time_t st_ctime; 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
{ 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
} 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
{ 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
} 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma warning(pop)
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__pragma(pack ( pop )) 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
typedef __wchar_t _Wint_t; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) wint_t __cdecl btowc(int _Ch); 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbsrtowcs_s(::size_t *_Retval, __wchar_t (&_Dest)[_Size], const char **_PSource, ::size_t _Count, ::mbstate_t *_State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcrtomb_s(::size_t *_Retval, char (&_Dest)[_Size], __wchar_t _Source, ::mbstate_t *_State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsrtombs_s(::size_t *_Retval, char (&_Dest)[_Size], const __wchar_t **_PSrc, ::size_t _Count, ::mbstate_t *_State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) int __cdecl wctob(wint_t _WCh); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_F, int 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_M) 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
(void)_F; 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return _M; 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl mbsinit(const mbstate_t *
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_P) 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_C, size_t 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_S), (--_N)) { 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
if ((*_S) == _C) { 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return (const __wchar_t *)_S; }  }  
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return 0; 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl wmemcmp(const __wchar_t *
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S2, size_t 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
if ((*_S1) != (*_S2)) { 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return 0; 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S2, size_t 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#pragma warning(push)
#pragma warning(disable : 4995 4996 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S2, size_t 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#pragma warning(push)
#pragma warning(disable : 4996 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_C, size_t 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__wchar_t *_Su = _S; 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_Su), (--_N)) 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
(*_Su) = _C; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
}  
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return _S; 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_C, size_t 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
const __wchar_t *const _SC = _S; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
extern "C" { typedef mbstate_t _Mbstatet; }
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::mbstate_t;using ::tm;using ::wint_t;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::btowc;using ::fgetwc;using ::fgetws;using ::fputwc;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::fputws;using ::fwide;using ::fwprintf;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::fwscanf;using ::getwc;using ::getwchar;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::mbrlen;using ::mbrtowc;using ::mbsrtowcs;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::mbsinit;using ::putwc;using ::putwchar;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::swprintf;using ::swscanf;using ::ungetwc;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::vfwprintf;using ::vswprintf;using ::vwprintf;
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcrtomb;using ::wprintf;using ::wscanf;
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcsrtombs;using ::wcstol;using ::wcscat;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcschr;using ::wcscmp;using ::wcscoll;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcscpy;using ::wcscspn;using ::wcslen;
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcsncat;using ::wcsncmp;using ::wcsncpy;
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcspbrk;using ::wcsrchr;using ::wcsspn;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstod;using ::wcstoul;using ::wcsstr;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstok;using ::wcsxfrm;using ::wctob;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wmemchr;using ::wmemcmp;using ::wmemcpy;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wmemmove;using ::wmemset;using ::wcsftime;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::vfwscanf;using ::vswscanf;using ::vwscanf;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstof;using ::wcstold;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstoll;using ::wcstoull;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
}
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
namespace std { 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
typedef 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
enum { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
denorm_indeterminate = (-1), 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
denorm_absent = 0, 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
denorm_present
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} float_denorm_style; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
typedef 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
enum { 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_indeterminate = (-1), 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_toward_zero = 0, 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_to_nearest, 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_toward_infinity, 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_toward_neg_infinity
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} float_round_style; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
struct _Num_base { 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_denorm_style has_denorm = ((float_denorm_style)denorm_absent); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_denorm_loss = ((bool)false); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_infinity = ((bool)false); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_quiet_NaN = ((bool)false); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_signaling_NaN = ((bool)false); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_bounded = ((bool)false); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_exact = ((bool)false); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_iec559 = ((bool)false); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_integer = ((bool)false); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)false); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_specialized = ((bool)false); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool tinyness_before = ((bool)false); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool traps = ((bool)false); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_round_style round_style = ((float_round_style)round_toward_zero); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)0); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)0); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)0); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)0); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)0); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)0); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)0); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int radix = ((int)0); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template < class _Ty >
 class numeric_limits
  : public _Num_base
 {
public :
 static constexpr _Ty ( min ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty ( max ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty lowest ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty epsilon ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty round_error ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty denorm_min ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty infinity ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty quiet_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty signaling_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }
 };
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template< class _Ty> 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
class numeric_limits< const _Ty>  : public numeric_limits< _Ty>  { 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template< class _Ty> 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
class numeric_limits< volatile _Ty>  : public numeric_limits< _Ty>  { 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template< class _Ty> 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
class numeric_limits< const volatile _Ty>  : public numeric_limits< _Ty>  { 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
struct _Num_int_base : public _Num_base { 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_bounded = ((bool)true); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_exact = ((bool)true); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_integer = ((bool)true); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)true); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_specialized = ((bool)true); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int radix = ((int)2); 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
struct _Num_float_base : public _Num_base { 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_denorm_style has_denorm = ((float_denorm_style)denorm_present); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_denorm_loss = ((bool)true); 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_infinity = ((bool)true); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_quiet_NaN = ((bool)true); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_signaling_NaN = ((bool)true); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_bounded = ((bool)true); 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_exact = ((bool)false); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_iec559 = ((bool)true); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_integer = ((bool)false); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)false); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_specialized = ((bool)true); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool tinyness_before = ((bool)true); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool traps = ((bool)false); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_round_style round_style = ((float_round_style)round_to_nearest); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int radix = ((int)2); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef char _Ty; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -128; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 127; 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)((-128) != 0)); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(8 - (((-128) != 0) ? 1 : 0))); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((8 - (((-128) != 0) ? 1 : 0)) * 301L) / (1000))); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef __wchar_t _Ty; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (_Ty)0; 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (_Ty)65535; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)(0 != 0)); 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(__wchar_t)) - ((0 != 0) ? 1 : 0))); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(__wchar_t)) - ((0 != 0) ? 1 : 0)) * (301L)) / (1000))); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef bool _Ty; 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return false; 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return true; 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)false); 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)1); 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)0); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef signed char _Ty; 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -128; 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 127; 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(8 - 1)); 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((8 - 1) * 301L) / (1000))); 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned char _Ty; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 255; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)8); 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((8) * 301L) / (1000))); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef short _Ty; 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -32768; 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 32767; 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(short)) - (1))); 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(short)) - (1)) * (301L)) / (1000))); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned short _Ty; 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 65535; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned short))); 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned short)) * (301L)) / (1000))); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef char16_t _Ty; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 65535; 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(char16_t))); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(char16_t)) * (301L)) / (1000))); 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef int _Ty; 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (-2147483647) - 1; 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 2147483647; 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(int)) - (1))); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(int)) - (1)) * (301L)) / (1000))); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned _Ty; 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 4294967295U; 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned))); 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned)) * (301L)) / (1000))); 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef long _Ty; 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (-2147483647L) - (1); 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 2147483647L; 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(long)) - (1))); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(long)) - (1)) * (301L)) / (1000))); 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned long _Ty; 
#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 4294967295UL; 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned long))); 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned long)) * (301L)) / (1000))); 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef char32_t _Ty; 
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 4294967295U; 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(char32_t))); 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(char32_t)) * (301L)) / (1000))); 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef __int64 _Ty; 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 966 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (-9223372036854775807i64) - (1); 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 9223372036854775807i64; 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 976 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(__int64)) - (1))); 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(__int64)) - (1)) * (301L)) / (1000))); 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned __int64 _Ty; 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 18446744073709551615Ui64; 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned __int64))); 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned __int64)) * (301L)) / (1000))); 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef float _Ty; 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.175494351e-038F); 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (3.402823466e+038F); 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -max(); 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.192092896e-007F); 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (0.5F); 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.401298464e-045F); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_huge_valf(); 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nanf("0"); 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nansf("1"); 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)24); 
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)6); 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)((2) + (((24) * 301L) / (1000)))); 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)((int)128)); 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)((int)38)); 
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)((int)(-125))); 
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)((int)(-37))); 
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef double _Ty; 
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2250738585072014e-308); 
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.7976931348623157e+308); 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -max(); 
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2204460492503131e-016); 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (0.5); 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (4.9406564584124654e-324); 
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_huge_val(); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nan("0"); 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nans("1"); 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)53); 
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)15); 
#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)((2) + (((53) * 301L) / (1000)))); 
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)((int)1024)); 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)((int)308)); 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)((int)(-1021))); 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)((int)(-307))); 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 1205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef long double _Ty; 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2250738585072014e-308); 
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.7976931348623157e+308); 
#line 1215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -max(); 
#line 1220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2204460492503131e-016); 
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (0.5L); 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (4.9406564584124654e-324); 
#line 1235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_huge_val(); 
#line 1240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nan("0"); 
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nans("1"); 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)53); 
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)15); 
#line 1255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)((2) + (((53) * 301L) / (1000)))); 
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)((int)1024)); 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)((int)308)); 
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)((int)(-1021))); 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)((int)(-307))); 
#line 1261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}
#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
extern "C++" {
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4985)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma pack ( push, 8 )
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
namespace std { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
struct nothrow_t { }; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
extern const nothrow_t nothrow; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
}
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size); 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, const std::nothrow_t &) throw(); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size); 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, const std::nothrow_t &) throw(); 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block) throw(); 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, const std::nothrow_t &) throw(); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block) throw(); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) throw(); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, size_t _Size) throw(); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, size_t _Size) throw(); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void *__cdecl operator new(size_t _Size, void *_Where) throw() 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
(void)_Size; 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
return _Where; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void __cdecl operator delete(void *, void *) throw() 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void *__cdecl operator new[](size_t _Size, void *_Where) throw() 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
(void)_Size; 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
return _Where; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void __cdecl operator delete[](void *, void *) throw() 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
}
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma warning(push,3)
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
typedef void (__cdecl *new_handler)(void); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
__declspec(dllimport) new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
__declspec(dllimport) new_handler __cdecl get_new_handler() noexcept; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
}
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
extern "C++" {
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) throw(); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) throw(); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
}
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef void *_HFILE; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
struct _CrtMemBlockHeader; 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
struct _CrtMemState { 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
_CrtMemBlockHeader *pBlockHeader; 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lCounts[5]; 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lSizes[5]; 
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lHighWaterCount; 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lTotalCount; 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
} _CrtMemState; 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int *__cdecl __p__crtDbgFlag(); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) long *__cdecl __p__crtBreakAlloc(); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(_CRT_ALLOC_HOOK _PfnNewHook); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(_CRT_DUMP_CLIENT _PFnNewDump); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtCheckMemory(); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef void (__cdecl *_CrtDoForAllClientObjectsCallback)(void *, void *); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(_CrtDoForAllClientObjectsCallback _Callback, void * _Context); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(const void * _Block, unsigned _Size, long * _RequestNumber, char ** _FileName, int * _LineNumber); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(const void * _Pointer); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtIsValidPointer(const void * _Pointer, unsigned _Size, int _ReadWrite); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _CrtMemCheckpoint(_CrtMemState * _State); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtMemDifference(_CrtMemState * _State, const _CrtMemState * _OldState, const _CrtMemState * _NewState); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(const _CrtMemState * _State); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(const _CrtMemState * _State); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtReportBlockType(const void * _Block); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(long _NewValue); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtSetDbgFlag(int _NewFlag); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _aligned_free_dbg(void * _Block); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_malloc_dbg(size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) size_t __cdecl _aligned_msize_dbg(void * _Block, size_t _Alignment, size_t _Offset); 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_malloc_dbg(size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_realloc_dbg(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_recalloc_dbg(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_realloc_dbg(void * _Block, size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_recalloc_dbg(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _calloc_dbg(size_t _Count, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _expand_dbg(void * _Block, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _free_dbg(void * _Block, int _BlockUse); 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _malloc_dbg(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) size_t __cdecl _msize_dbg(void * _Block, int _BlockUse); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _realloc_dbg(void * _Block, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl _recalloc_dbg(void * _Block, size_t _Count, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(char ** _PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName, int _BlockType, const char * _FileName, int _LineNumber); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath_dbg(char * _FullPath, const char * _Path, size_t _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _getcwd_dbg(char * _DstBuf, int _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _getdcwd_dbg(int _Drive, char * _DstBuf, int _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup_dbg(const char * _String, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam_dbg(const char * _DirName, const char * _FilePrefix, int _BlockType, const char * _FileName, int _LineNumber); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup_dbg(const __wchar_t * _String, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(__wchar_t ** _PBuffer, size_t * _PBufferSizeInWords, const __wchar_t * _VarName, int _BlockType, const char * _FileName, int _LineNumber); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath_dbg(__wchar_t * _FullPath, const __wchar_t * _Path, size_t _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd_dbg(__wchar_t * _DstBuf, int _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd_dbg(int _Drive, __wchar_t * _DstBuf, int _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam_dbg(const __wchar_t * _DirName, const __wchar_t * _FilePrefix, int _BlockType, const char * _FileName, int _LineNumber); 
#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtDbgReport(int _ReportType, const char * _FileName, int _Linenumber, const char * _ModuleName, const char * _Format, ...); 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtDbgReportW(int _ReportType, const __wchar_t * _FileName, int _LineNumber, const __wchar_t * _ModuleName, const __wchar_t * _Format, ...); 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _VCrtDbgReportA(int _ReportType, void * _ReturnAddress, const char * _FileName, int _LineNumber, const char * _ModuleName, const char * _Format, va_list _ArgList); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _VCrtDbgReportW(int _ReportType, void * _ReturnAddress, const __wchar_t * _FileName, int _LineNumber, const __wchar_t * _ModuleName, const __wchar_t * _Format, va_list _ArgList); 
#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(size_t _NewDebugFillThreshold); 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(); 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(int _ReportType, _HFILE _ReportFile); 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtSetReportMode(int _ReportType, int _ReportMode); 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
extern long _crtAssertBusy; 
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(); 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(_CRT_REPORT_HOOK _PFnNewHook); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtSetReportHook2(int _Mode, _CRT_REPORT_HOOK _PFnNewHook); 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtSetReportHookW2(int _Mode, _CRT_REPORT_HOOKW _PFnNewHook); 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
}
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma warning(push,3)
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
namespace std { 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Longlong streamoff; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Longlong streamsize; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
__declspec(dllimport) extern const streamoff _BADOFF; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Statetype >
 class fpos
 {
 typedef fpos < _Statetype > _Myt;

public :
  fpos ( streamoff _Off = 0 )
  : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( )
  {
  }

  fpos ( _Statetype _State, fpos_t _Fileposition )
  : _Myoff ( 0 ), _Fpos ( _Fileposition ), _Mystate ( _State )
  {
  }

 _Statetype state ( ) const
  {
  return ( _Mystate );
  }

 void state ( _Statetype _State )
  {
  _Mystate = _State;
  }

 fpos_t seekpos ( ) const
  {
  return ( _Fpos );
  }

  operator streamoff ( ) const
  {
  return ( ( streamoff ) ( _Myoff + ( ( long long ) ( _Fpos ) ) ) );
  }

 streamoff operator - ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this - ( streamoff ) _Right );
  }

 _Myt & operator += ( streamoff _Off )
  {
  _Myoff += _Off;
  return ( * this );
  }

 _Myt & operator -= ( streamoff _Off )
  {
  _Myoff -= _Off;
  return ( * this );
  }

 _Myt operator + ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt operator - ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 bool operator == ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this == ( streamoff ) _Right );
  }

 bool operator == ( streamoff _Right ) const
  {
  return ( ( streamoff ) * this == _Right );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

private :
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef fpos< _Mbstatet>  streampos; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos wstreampos; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Int_type >
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare (
    const _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 )
   if ( ! eq ( * _First1, * _First2 ) )
    return ( lt ( * _First1, * _First2 ) ? - 1 : + 1 );
  return ( 0 );
  }

 static size_t __cdecl length ( const _Elem * _First )
  {
  size_t _Count;
  for ( _Count = 0; ! eq ( * _First, _Elem ( ) ); ++ _First )
   ++ _Count;
  return ( _Count );
  }

 static _Elem * __cdecl copy (
    _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  _Elem * _Next = _First1;
  for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
   assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl _Copy_s (
    _Elem * _First1, size_t _Dest_size,
    const _Elem * _First2, size_t _Count )
  {
  { if ( ! ( _Count <= _Dest_size ) ) { ( void ) ( ( ! ! ( ( "_Count <= _Dest_size" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x6f\x73\x66\x77\x64", 173, 0, L"\x25\x6c\x73", L"\x22\x5f\x43\x6f\x75\x6e\x74\x20\x3c\x3d\x20\x5f\x44\x65\x73\x74\x5f\x73\x69\x7a\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x5f\x43\x6f\x75\x6e\x74\x20\x3c\x3d\x20\x5f\x44\x65\x73\x74\x5f\x73\x69\x7a\x65", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x6f\x73\x66\x77\x64", 173, 0 ); return ( 0 ); } };
  return ( copy ( _First1, _First2, _Count ) );
  }

 static const _Elem * __cdecl find (
    const _Elem * _First,
  size_t _Count, const _Elem & _Ch )
  {
  for (; 0 < _Count; -- _Count, ++ _First )
   if ( eq ( * _First, _Ch ) )
    return ( _First );
  return ( 0 );
  }

 static _Elem * __cdecl move (
    _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  _Elem * _Next = _First1;
  if ( _First2 < _Next && _Next < _First2 + _Count )
   for ( _Next += _Count, _First2 += _Count; 0 < _Count; -- _Count )
    assign ( * -- _Next, * -- _First2 );
  else
   for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
    assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl assign (
    _Elem * _First,
  size_t _Count, _Elem _Ch )
  {
  _Elem * _Next = _First;
  for (; 0 < _Count; -- _Count, ++ _Next )
   assign ( * _Next, _Ch );
  return ( _First );
  }

 static void __cdecl assign ( _Elem & _Left, const _Elem & _Right ) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq ( const _Elem & _Left,
  const _Elem & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

 static constexpr bool __cdecl lt ( const _Elem & _Left,
  const _Elem & _Right ) noexcept
  {
  return ( _Left < _Right );
  }

 static constexpr _Elem __cdecl to_char_type (
  const int_type & _Meta ) noexcept
  {
  return ( ( _Elem ) _Meta );
  }

 static constexpr int_type __cdecl to_int_type (
  const _Elem & _Ch ) noexcept
  {
  return ( ( int_type ) _Ch );
  }

 static constexpr bool __cdecl eq_int_type ( const int_type & _Left,
  const int_type & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

 static constexpr int_type __cdecl not_eof (
  const int_type & _Meta ) noexcept
  {
  return ( _Meta != eof ( ) ? ( int_type ) _Meta : ( int_type ) ! eof ( ) );
  }

 static constexpr int_type __cdecl eof ( ) noexcept
  {
  return ( ( int_type ) ( - 1 ) );
  }
 };
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template< class _Elem> 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
struct char_traits : public _Char_traits< _Elem, long>  { 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char16_t>  : public _Char_traits< char16_t, unsigned short>  { 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos u16streampos; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos u32streampos; 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< __wchar_t>  { 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef __wchar_t _Elem; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Elem char_type; 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef wint_t int_type; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos pos_type; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streamoff off_type; 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Mbstatet state_type; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? 0 : ::wmemcmp(_First1, _First2, _Count); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static size_t __cdecl length(const _Elem *_First) 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((*_First) == 0) ? 0 : ::wcslen(_First); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemcpy(_First1, _First2, _Count)); 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl _Copy_s(_Elem *
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First1, size_t _Size_in_words, const _Elem *
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First2, size_t _Count) 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
if ((0) < _Count) { 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
::wmemcpy_s(_First1, _Size_in_words, _First2, _Count); }  
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::wmemchr(_First, _Ch, _Count)); 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemmove(_First1, _First2, _Count)); 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem *)::wmemset(_First, _Ch, _Count); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Left = _Right; 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left < _Right; 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr _Elem __cdecl to_char_type(const int_type &
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Meta; 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl to_int_type(const _Elem &
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) noexcept 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Ch; 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl not_eof(const int_type &
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Meta != (eof())) ? _Meta : (!(eof())); 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl eof() noexcept 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (wint_t)65535; 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< unsigned short>  { 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef unsigned short _Elem; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Elem char_type; 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef wint_t int_type; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos pos_type; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streamoff off_type; 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Mbstatet state_type; 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? 0 : ::wmemcmp((const __wchar_t *)_First1, (const __wchar_t *)_First2, _Count); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static size_t __cdecl length(const _Elem *_First) 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((*_First) == 0) ? 0 : ::wcslen((const __wchar_t *)_First); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemcpy((__wchar_t *)_First1, (const __wchar_t *)_First2, _Count)); 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl _Copy_s(_Elem *
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First1, size_t _Size_in_words, const _Elem *
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First2, size_t _Count) 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
if ((0) < _Count) { 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
::wmemcpy_s((__wchar_t *)_First1, _Size_in_words, (const __wchar_t *)_First2, _Count); }  
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::wmemchr((const __wchar_t *)_First, _Ch, _Count)); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemmove((__wchar_t *)_First1, (const __wchar_t *)_First2, _Count)); 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem *)::wmemset((__wchar_t *)_First, _Ch, _Count); 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Left = _Right; 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left < _Right; 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr _Elem __cdecl to_char_type(const int_type &_Meta) noexcept 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Meta; 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl to_int_type(const _Elem &_Ch) noexcept 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Ch; 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl not_eof(const int_type &_Meta) noexcept 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Meta != (eof())) ? _Meta : (!(eof())); 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl eof() noexcept 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (wint_t)65535; 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char>  { 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef char _Elem; 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Elem char_type; 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef int int_type; 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos pos_type; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streamoff off_type; 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Mbstatet state_type; 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? 0 : ::memcmp(_First1, _First2, _Count); 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static size_t __cdecl length(const _Elem *_First) 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((*_First) == 0) ? 0 : ::strlen(_First); 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::memcpy(_First1, _First2, _Count)); 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl _Copy_s(_Elem *
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First1, size_t _Size_in_bytes, const _Elem *
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First2, size_t _Count) 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
if ((0) < _Count) { 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
::memcpy_s(_First1, _Size_in_bytes, _First2, _Count); }  
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::memchr(_First, _Ch, _Count)); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::memmove(_First1, _First2, _Count)); 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem *)::memset(_First, _Ch, _Count); 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Left = _Right; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((unsigned char)_Left) < ((unsigned char)_Right); 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr _Elem __cdecl to_char_type(const int_type &
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem)_Meta; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl to_int_type(const _Elem &
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) noexcept 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (unsigned char)_Ch; 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl not_eof(const int_type &
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Meta != eof()) ? _Meta : (!(eof())); 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl eof() noexcept 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return -1; 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Ty >
 class allocator;
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
class ios_base; 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ios;
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class istreambuf_iterator;
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class ostreambuf_iterator;
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_streambuf;
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_istream;
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ostream;
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_iostream;
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_stringbuf;
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_istringstream;
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_ostringstream;
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_stringstream;
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_filebuf;
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ifstream;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ofstream;
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_fstream;
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _InIt >
 class num_get;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _OutIt >
 class num_put;
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template< class _Elem> class collate; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ios< char, char_traits< char> >  ios; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_streambuf< char, char_traits< char> >  streambuf; 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istream< char, char_traits< char> >  istream; 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostream< char, char_traits< char> >  ostream; 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_iostream< char, char_traits< char> >  iostream; 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringbuf< char, char_traits< char> , allocator< char> >  stringbuf; 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istringstream< char, char_traits< char> , allocator< char> >  istringstream; 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostringstream< char, char_traits< char> , allocator< char> >  ostringstream; 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringstream< char, char_traits< char> , allocator< char> >  stringstream; 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_filebuf< char, char_traits< char> >  filebuf; 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ifstream< char, char_traits< char> >  ifstream; 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ofstream< char, char_traits< char> >  ofstream; 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_fstream< char, char_traits< char> >  fstream; 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ios< __wchar_t, char_traits< __wchar_t> >  wios; 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_streambuf< __wchar_t, char_traits< __wchar_t> >  wstreambuf; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istream< __wchar_t, char_traits< __wchar_t> >  wistream; 
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostream< __wchar_t, char_traits< __wchar_t> >  wostream; 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_iostream< __wchar_t, char_traits< __wchar_t> >  wiostream; 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringbuf; 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wistringstream; 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wostringstream; 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringstream; 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_filebuf< __wchar_t, char_traits< __wchar_t> >  wfilebuf; 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ifstream< __wchar_t, char_traits< __wchar_t> >  wifstream; 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ofstream< __wchar_t, char_traits< __wchar_t> >  wofstream; 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_fstream< __wchar_t, char_traits< __wchar_t> >  wfstream; 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_get< char, istreambuf_iterator< char, char_traits< char> > >  numget; 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > >  wnumget; 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_put< char, ostreambuf_iterator< char, char_traits< char> > >  numput; 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > >  wnumput; 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef collate< char>  ncollate; 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef collate< __wchar_t>  wcollate; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(push,3)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(disable: 4180 4512)
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 void iter_swap ( _FwdIt1 _Left, _FwdIt2 _Right )
 {
 swap ( * _Left, * _Right );
 }
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty,
 size_t _Size,
 class > inline
 void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 if ( & _Left != & _Right )
  {
  _Ty * _First1 = _Left;
  _Ty * _Last1 = _First1 + _Size;
  _Ty * _First2 = _Right;
  for (; _First1 != _Last1; ++ _First1, ++ _First2 )
   :: std :: iter_swap ( _First1, _First2 );
  }
 }
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty,
 class > inline
 void swap ( _Ty & _Left, _Ty & _Right )
  noexcept ( is_nothrow_move_constructible < _Ty > :: value && is_nothrow_move_assignable < _Ty > :: value )

 {
 _Ty _Tmp = :: std :: move ( _Left );
 _Left = :: std :: move ( _Right );
 _Right = :: std :: move ( _Tmp );
 }
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 void _Swap_adl ( _Ty & _Left, _Ty & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 swap ( _Left, _Right );
 }
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct piecewise_construct_t { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
constexpr piecewise_construct_t piecewise_construct{}; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class ...> class tuple; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 >
 struct pair
 {
 typedef pair < _Ty1, _Ty2 > _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_default_constructible < _Uty1 > :: value
      && is_default_constructible < _Uty2 > :: value > >
  constexpr pair ( )
  : first ( ), second ( )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_copy_constructible < _Uty1 > :: value
      && is_copy_constructible < _Uty2 > :: value >,
  enable_if_t < is_convertible < const _Uty1 &, _Uty1 > :: value
    && is_convertible < const _Uty2 &, _Uty2 > :: value, int > = 0 >
  constexpr pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_copy_constructible < _Uty1 > :: value
      && is_copy_constructible < _Uty2 > :: value >,
  enable_if_t < ! is_convertible < const _Uty1 &, _Uty1 > :: value
    || ! is_convertible < const _Uty2 &, _Uty2 > :: value, int > = 0 >
  constexpr explicit pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 pair ( const pair & ) = default;
 pair ( pair && ) = default;

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, const _Other1 & > :: value
      && is_constructible < _Ty2, const _Other2 & > :: value >,
  enable_if_t < is_convertible < const _Other1 &, _Ty1 > :: value
    && is_convertible < const _Other2 &, _Ty2 > :: value, int > = 0 >
  constexpr pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, const _Other1 & > :: value
      && is_constructible < _Ty2, const _Other2 & > :: value >,
  enable_if_t < ! is_convertible < const _Other1 &, _Ty1 > :: value
    || ! is_convertible < const _Other2 &, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2 >
  _Myt & operator = ( const pair < _Other1, _Other2 > & _Right )
  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 template < class _Tuple1,
  class _Tuple2,
  size_t ... _Indexes1,
  size_t ... _Indexes2 > inline
  pair ( _Tuple1 & _Val1,
   _Tuple2 & _Val2,
   integer_sequence < size_t, _Indexes1 ... >,
   integer_sequence < size_t, _Indexes2 ... > );

 template < class ... _Types1,
  class ... _Types2 > inline
  pair ( piecewise_construct_t,
   tuple < _Types1 ... > _Val1,
   tuple < _Types2 ... > _Val2 );

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < is_convertible < _Other1, _Ty1 > :: value
    && is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < ! is_convertible < _Other1, _Ty1 > :: value
    || ! is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < is_convertible < _Other1, _Ty1 > :: value
    && is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < ! is_convertible < _Other1, _Ty1 > :: value
    || ! is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2 >
  _Myt & operator = ( pair < _Other1, _Other2 > && _Right )
  {
  first = :: std :: forward < _Other1 > ( _Right . first );
  second = :: std :: forward < _Other2 > ( _Right . second );
  return ( * this );
  }

 _Myt & operator = ( _Myt && _Right )
  noexcept ( ( is_nothrow_move_assignable < _Ty1 > :: value && is_nothrow_move_assignable < _Ty2 > :: value ) )

  {
  first = :: std :: forward < _Ty1 > ( _Right . first );
  second = :: std :: forward < _Ty2 > ( _Right . second );
  return ( * this );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 _Ty1 first;
 _Ty2 second;

 void swap ( _Myt & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value )

  {
  if ( this != & _Right )
   {
   _Swap_adl ( first, _Right . first );
   _Swap_adl ( second, _Right . second );
   }
  }
 };
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2,
 class = enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value > > inline
 void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right )
  noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first == _Right . first && _Left . second == _Right . second );
 }
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first < _Right . first ||
  ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second ) );
 }
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr pair < typename _Unrefwrap < _Ty1 > :: type,
  typename _Unrefwrap < _Ty2 > :: type >
  make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 )
 {
 typedef pair < typename _Unrefwrap < _Ty1 > :: type,
  typename _Unrefwrap < _Ty2 > :: type > _Mypair;
 return ( _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ),
  :: std :: forward < _Ty2 > ( _Val2 ) ) );
 }
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace rel_ops { 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator != ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator > ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( _Right < _Left );
 }
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator <= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator >= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace std { 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty, size_t 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Size> class array; 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> struct tuple_size; 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty, size_t 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Size> 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty1, class 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty2> 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class ..._Types> 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< const _Tuple>  : public tuple_size< _Tuple>  { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< volatile _Tuple>  : public tuple_size< _Tuple>  { 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< const volatile _Tuple>  : public tuple_size< _Tuple>  { 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty> constexpr size_t 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> struct tuple_element; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Idx, class 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty, size_t 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Size> 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
static_assert((_Idx < _Size), "array index out of bounds");
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _Ty type; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty1, class 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty2> 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< 0, pair< _Ty1, _Ty2> >  { 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _Ty1 type; 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty1, class 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty2> 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< 1, pair< _Ty1, _Ty2> >  { 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _Ty2 type; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index> 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, tuple< > >  { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
static_assert((_Always_false< integral_constant< unsigned __int64, _Index> > ::value), "tuple index out of bounds");
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _This, class ...
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Rest> 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _This type; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef tuple< _This, _Rest...>  _Ttype; 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_This, class ...
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Rest> 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, const _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef typename add_const< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, volatile _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef typename add_volatile< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, const volatile _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef typename add_cv< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ret,
 class _Pair > inline
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 0 > ) noexcept
 {
 return ( _Pr . first );
 }
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ret,
 class _Pair > inline
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 1 > ) noexcept
 {
 return ( _Pr . second );
 }
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 typedef typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type & _Rtype;
 return ( _Pair_get < _Rtype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty2,
 class _Ty1 > inline
 constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr const typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 typedef const typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  _Ctype;
 return ( _Pair_get < _Ctype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty2,
 class _Ty1 > inline
 constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &&
  get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 typedef typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type && _RRtype;
 return ( :: std :: forward < _RRtype > ( :: std :: get < _Idx > ( _Pr ) ) );
 }
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( :: std :: move ( _Pr ) ) );
 }
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty2,
 class _Ty1 > inline
 constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( :: std :: move ( _Pr ) ) );
 }
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty,
 class _Other = _Ty > inline
 _Ty exchange ( _Ty & _Val, _Other && _New_val )
 {
 _Ty _Old_val = :: std :: move ( _Val );
 _Val = :: std :: forward < _Other > ( _New_val );
 return ( _Old_val );
 }
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept
 {
 return ( _Val );
 }
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty >
 void as_const ( const _Ty && ) = delete;
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace std { 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace tr1 { 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
using std::get;
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
using std::tuple_element;
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
using std::tuple_size;
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma warning(push,3)
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
namespace std { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef const __wchar_t *_Dbfile_t; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef unsigned _Dbline_t; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
__declspec(dllimport) void __cdecl _Debug_message(const __wchar_t *, const __wchar_t *, unsigned); 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_proxy; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_base12; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_base12; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_base0 { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Orphan_all() 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Swap_all(_Container_base0 &) 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_base0 { 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Adopt(const void *) 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
const _Container_base0 *_Getcont() const 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return 0; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_proxy { 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy() : _Mycont((0)), _Myfirstiter((0)) 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
const _Container_base12 *_Mycont; 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 *_Myfirstiter; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_base12 { 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_base12() : _Myproxy((0)) 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_base12(const _Container_base12 &) : _Myproxy((0)) 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_base12 &operator=(const _Container_base12 &) 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return *this; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
~_Container_base12() noexcept 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Orphan_all(); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 **_Getpfirst() const 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return ((_Myproxy) == (0)) ? 0 : (&((_Myproxy)->_Myfirstiter)); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Orphan_all(); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Swap_all(_Container_base12 &); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Myproxy; 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_base12 { 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12() : _Myproxy((0)), _Mynextiter((0)) 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12(const _Iterator_base12 &_Right) : _Myproxy((0)), _Mynextiter((0)) 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((*this) = _Right); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) == (_Right._Myproxy)) { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
; } else { 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Right._Myproxy) != (0)) { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Adopt((_Right._Myproxy)->_Mycont); } else 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Lockit _Lock(3); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Orphan_me(); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  }  
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return *this; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
~_Iterator_base12() noexcept 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Lockit _Lock(3); 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Orphan_me(); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Adopt(const _Container_base12 *_Parent) 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if (_Parent == (0)) 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Lockit _Lock(3); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Orphan_me(); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} else 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Parent_proxy = _Parent->_Myproxy; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) != _Parent_proxy) 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Lockit _Lock(3); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Orphan_me(); 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Mynextiter) = (_Parent_proxy->_Myfirstiter); 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Parent_proxy->_Myfirstiter) = this; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = _Parent_proxy; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Clrcont() 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = (0); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
const _Container_base12 *_Getcont() const 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return ((_Myproxy) == (0)) ? 0 : ((_Myproxy)->_Mycont); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 **_Getpnext() 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return &(_Mynextiter); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Orphan_me() 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) != (0)) 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 **_Pnext = &((_Myproxy)->_Myfirstiter); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
while (((*_Pnext) != (0)) && ((*_Pnext) != this)) { 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pnext = (&((*_Pnext)->_Mynextiter)); }  
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((*_Pnext) == (0)) { 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Debug_message(L"\x49\x54\x45\x52\x41\x54\x4f\x52\x20\x4c\x49\x53\x54\x20\x43\x4f\x52\x52\x55\x50\x54\x45\x44\x21", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 202); }  
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(*_Pnext) = (_Mynextiter); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = (0); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Myproxy; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 *_Mynextiter; 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Container_base12::_Orphan_all() 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) != (0)) 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Lockit _Lock(3); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
for (_Iterator_base12 **_Pnext = &((_Myproxy)->_Myfirstiter); (*_Pnext) != (0); (*_Pnext) = ((*_Pnext)->_Mynextiter)) { 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((*_Pnext)->_Myproxy) = (0); }  
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((_Myproxy)->_Myfirstiter) = (0); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Container_base12::_Swap_all(_Container_base12 &_Right) 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Lockit _Lock(3); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Temp = _Myproxy; 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = (_Right._Myproxy); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Right._Myproxy) = _Temp; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) != (0)) { 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((_Myproxy)->_Mycont) = ((_Container_base12 *)this); }  
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Right._Myproxy) != (0)) { 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((_Right._Myproxy)->_Mycont) = ((_Container_base12 *)(&_Right)); }  
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Container_base12 _Container_base; 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Iterator_base12 _Iterator_base; 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Zero_then_variadic_args_t { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _One_then_variadic_args_t { 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty1,
 class _Ty2,
 bool = is_empty < _Ty1 > :: value && ! is_final < _Ty1 > :: value >
 class _Compressed_pair final
  : private _Ty1

 {
private :
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }


 _Ty1 & _Get_first ( ) noexcept
  {
  return ( * this );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( * this );
  }

 volatile _Ty1 & _Get_first ( ) volatile noexcept
  {
  return ( * this );
  }

 const volatile _Ty1 & _Get_first ( ) const volatile noexcept
  {
  return ( * this );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }

 volatile _Ty2 & _Get_second ( ) volatile noexcept
  {
  return ( _Myval2 );
  }

 const volatile _Ty2 & _Get_second ( ) const volatile noexcept
  {
  return ( _Myval2 );
  }
 };
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty1,
 class _Ty2 >
 class _Compressed_pair < _Ty1, _Ty2, false > final

 {
private :
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }


 _Ty1 & _Get_first ( ) noexcept
  {
  return ( _Myval1 );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( _Myval1 );
  }

 volatile _Ty1 & _Get_first ( ) volatile noexcept
  {
  return ( _Myval1 );
  }

 const volatile _Ty1 & _Get_first ( ) const volatile noexcept
  {
  return ( _Myval1 );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }

 volatile _Ty2 & _Get_second ( ) volatile noexcept
  {
  return ( _Myval2 );
  }

 const volatile _Ty2 & _Get_second ( ) const volatile noexcept
  {
  return ( _Myval2 );
  }
 };
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
 = void> 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper : public false_type { 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper< _Ty, void_t< typename _Ty::_Unchecked_type> >  : public true_type { 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter > inline
 typename _Is_checked_helper < _Iter > :: type _Is_checked ( _Iter )
 {
 return { };
 }
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter > inline
 _Iter _Unchecked ( _Iter _Src )
 {
 return ( _Src );
 }
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter > inline
 _Iter _Unchecked_idl0 ( _Iter _Src )
 {
 return ( _Src );
 }
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _UIter > inline
 _Iter & _Rechecked ( _Iter & _Dest, _UIter _Src )
 {
 _Dest = _Src;
 return ( _Dest );
 }
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct input_iterator_tag { 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Mutable_iterator_tag { 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct output_iterator_tag : public _Mutable_iterator_tag { 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct forward_iterator_tag : public input_iterator_tag, public _Mutable_iterator_tag { 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct bidirectional_iterator_tag : public forward_iterator_tag { 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct random_access_iterator_tag : public bidirectional_iterator_tag { 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _General_ptr_iterator_tag { 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Trivially_copyable_ptr_iterator_tag : public _General_ptr_iterator_tag { 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Really_trivial_ptr_iterator_tag : public _Trivially_copyable_ptr_iterator_tag { 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Any_tag { 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
constexpr _Any_tag() noexcept = default;
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty >
  constexpr _Any_tag ( _Ty && ) noexcept { }
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Category, class 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty, class 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Diff = ptrdiff_t, class 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pointer = _Ty *, class 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Reference = _Ty &> 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator { 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Category iterator_category; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Diff difference_type; 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Pointer pointer; 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Reference reference; 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Category, class 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty, class 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Diff, class 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pointer, class 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Reference, class 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Base> 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator012 : public _Base { 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Category iterator_category; 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Diff difference_type; 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Pointer pointer; 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Reference reference; 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef iterator< output_iterator_tag, void, void, void, void>  _Outit; 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class , class 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
 = void> 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_traits_base { 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::iterator_category iterator_category; 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::value_type value_type; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::difference_type difference_type; 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::pointer pointer; 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::reference reference; 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator_traits : public _Iterator_traits_base< _Iter>  { 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator_traits< _Ty *>  { 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef random_access_iterator_tag iterator_category; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef ptrdiff_t difference_type; 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty *pointer; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty &reference; 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator_traits< const _Ty *>  { 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef random_access_iterator_tag iterator_category; 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef ptrdiff_t difference_type; 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef const _Ty *pointer; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef const _Ty &reference; 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
 = void> 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_iterator : public false_type { 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_iterator< _Ty, void_t< typename iterator_traits< _Ty> ::iterator_category> >  : public true_type { 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _Diff > inline
 auto _Unchecked_n1 ( _Iter _Src, _Diff, false_type )
 {
 return ( _Src );
 }
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _Diff > inline
 auto _Unchecked_n1 ( _Iter _Src, _Diff _Count, true_type )
 {
 if ( 0 < _Count )
  {
  static_cast < void > ( ( _Src ) + ( _Count ) );
  }

 return ( _Unchecked ( _Src ) );
 }
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _Diff > inline
 auto _Unchecked_n ( _Iter _Src, _Diff _Count )
 {
 return ( _Unchecked_n1 ( _Src, _Count, is_base_of < random_access_iterator_tag, _Iter_cat_t < _Iter >> ( ) ) );
 }
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty1, class 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty2> 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_same_size : public bool_constant< sizeof(_Ty1) == sizeof(_Ty2)>  { 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem, bool 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Is_enum = is_enum< _Elem> ::value> 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Unwrap_enum { 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef underlying_type_t< _Elem>  type; 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Unwrap_enum< _Elem, false>  { 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Elem type; 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty1, class 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty2> 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Both_or_neither_bool : public bool_constant< is_same< bool, _Ty1> ::value == is_same< bool, _Ty2> ::value>  { 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Source, class 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Dest> 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Ptr_cat_helper { 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Unwrap_enum< _Source> ::type _USource; 
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Unwrap_enum< _Dest> ::type _UDest; 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef conditional_t< conjunction< _Is_same_size< typename _Unwrap_enum< _Source> ::type, typename _Unwrap_enum< _Dest> ::type> , is_integral< typename _Unwrap_enum< _Source> ::type> , is_integral< typename _Unwrap_enum< _Dest> ::type> , _Both_or_neither_bool< typename _Unwrap_enum< _Source> ::type, typename _Unwrap_enum< _Dest> ::type> , negation< is_volatile< _Source> > , negation< is_volatile< _Dest> > > ::value, _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag>  type; 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Ptr_cat_helper< _Elem, _Elem>  { 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef conditional_t< is_trivially_copyable< _Elem> ::value, conditional_t< is_trivial< _Elem> ::value, _Really_trivial_ptr_iterator_tag, _Trivially_copyable_ptr_iterator_tag> , _General_ptr_iterator_tag>  type; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Anything> 
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Ptr_cat_helper< _Anything *, const _Anything *>  { 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Really_trivial_ptr_iterator_tag type; 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_copy_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable < _Dest &, _Source & > :: value,
  typename _Ptr_cat_helper < remove_const_t < _Source >, _Dest > :: type,
  _General_ptr_iterator_tag >
  _Ptr_copy_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_move_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable < _Dest &, _Source > :: value,
  typename _Ptr_cat_helper < remove_const_t < _Source >, _Dest > :: type,
  _General_ptr_iterator_tag >
  _Ptr_move_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Pr,
 class _Ty1,
 class _Ty2 > inline
 constexpr bool _Debug_lt_pred ( _Pr && _Pred,
  _Ty1 && _Left, _Ty2 && _Right,
  _Dbfile_t _File, _Dbline_t _Line )
  noexcept ( noexcept ( ! _Pred ( _Left, _Right ) ) && noexcept ( _Pred ( _Right, _Left ) ) )

 {
 return ( ! _Pred ( _Left, _Right )
  ? false
  : _Pred ( _Right, _Left )
   ? ( _Debug_message ( L"\x69\x6e\x76\x61\x6c\x69\x64\x20\x63\x6f\x6d\x70\x61\x72\x61\x74\x6f\x72", _File, _Line ), true )
   : true );
 }
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool _Debug_lt ( _Ty1 && _Left, _Ty2 && _Right,
  _Dbfile_t _File, _Dbline_t _Line )
  noexcept ( noexcept ( ! ( _Left < _Right ) ) && noexcept ( _Right < _Left ) )

 {
 return ( _Debug_lt_pred ( less < > ( ),
  :: std :: forward < _Ty1 > ( _Left ), :: std :: forward < _Ty2 > ( _Right ), _File, _Line ) );
 }
#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 void _Debug_pointer ( _InIt &, _Dbfile_t, _Dbline_t )
 {
 }
#line 921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 void _Debug_pointer ( _Ty * _Ptr, _Dbfile_t _File, _Dbline_t _Line )
 {
 if ( _Ptr == 0 )
  _Debug_message ( L"\x69\x6e\x76\x61\x6c\x69\x64\x20\x6e\x75\x6c\x6c\x20\x70\x6f\x69\x6e\x74\x65\x72", _File, _Line );
 }
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 void _Debug_pointer_if ( bool, _InIt &, _Dbfile_t, _Dbline_t )
 {
 }
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 void _Debug_pointer_if ( bool _Test, _Ty * _Ptr,
  _Dbfile_t _File, _Dbline_t _Line )
 {
 if ( _Test && _Ptr == 0 )
  _Debug_message ( L"\x69\x6e\x76\x61\x6c\x69\x64\x20\x6e\x75\x6c\x6c\x20\x70\x6f\x69\x6e\x74\x65\x72", _File, _Line );
 }
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 void _Debug_range2 ( _InIt _First, _InIt _Last,
  _Dbfile_t, _Dbline_t, input_iterator_tag )
 {
 static_cast < void > ( _First == _Last );
 }
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 void _Debug_range2 ( _RanIt _First, _RanIt _Last,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag )
 {
 if ( _First != _Last )
  {
  _Debug_pointer ( _First, _File, _Line );
  _Debug_pointer ( _Last, _File, _Line );
  if ( _Last < _First )
   _Debug_message ( L"\x69\x6e\x76\x61\x6c\x69\x64\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x72\x61\x6e\x67\x65", _File, _Line );
  }
 }
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 void _Debug_range ( _InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line )
 {
 _Debug_range2 ( _First, _Last, _File, _Line, _Iter_cat_t < _InIt > ( ) );
 }
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Pty > inline
 void _Debug_range_ptr2 ( _InIt _First, _InIt _Last, _Pty & _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, input_iterator_tag )
 {
 if ( _First != _Last )
  _Debug_pointer ( _Ptr, _File, _Line );
 }
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt,
 class _Pty > inline
 void _Debug_range_ptr2 ( _RanIt _First, _RanIt _Last, _Pty & _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag )
 {
 if ( _First != _Last )
  {
  _Debug_pointer ( _First, _File, _Line );
  _Debug_pointer ( _Last, _File, _Line );
  if ( _Last < _First )
   _Debug_message ( L"\x69\x6e\x76\x61\x6c\x69\x64\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x72\x61\x6e\x67\x65", _File, _Line );
  _Debug_pointer ( _Ptr, _File, _Line );
  }
 }
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Pty > inline
 void _Debug_range_ptr ( _InIt _First, _InIt _Last, _Pty & _Ptr,
  _Dbfile_t _File, _Dbline_t _Line )
 {
 _Debug_range_ptr2 ( _First, _Last, _Ptr, _File, _Line, _Iter_cat_t < _InIt > ( ) );
 }
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Pr > inline
 void _Debug_order2 ( _InIt, _InIt, _Pr &,
  _Dbfile_t, _Dbline_t, input_iterator_tag )
 {
 }
#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Pr > inline
 void _Debug_order2 ( _FwdIt _First, _FwdIt _Last, _Pr & _Pred,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag )
 {
 for ( _FwdIt _Next = _First; _First != _Last && ++ _Next != _Last; ++ _First )
  if ( _Debug_lt_pred ( _Pred, * _Next, * _First, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1017 ) )
   _Debug_message ( L"\x73\x65\x71\x75\x65\x6e\x63\x65\x20\x6e\x6f\x74\x20\x6f\x72\x64\x65\x72\x65\x64", _File, _Line );
 }
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Pr > inline
 void _Debug_order ( _InIt _First, _InIt _Last, _Pr && _Pred,
  _Dbfile_t _File, _Dbline_t _Line )
 {
 _Debug_range_ptr ( _First, _Last, _Pred, _File, _Line );
 _Debug_order2 ( _First, _Last, _Pred, _File, _Line, _Iter_cat_t < _InIt > ( ) );
 }
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Actual,
 class _Diff > inline
 void _Debug_array_size2 ( _Ty ( & ) [ _Actual ], _Diff _Desired,
  _Dbfile_t _File, _Dbline_t _Line )
 {
 if ( _Actual < _Desired )
  _Debug_message ( L"\x61\x72\x72\x61\x79\x20\x74\x6f\x6f\x20\x73\x6d\x61\x6c\x6c", _File, _Line );
 }
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff > inline
 void _Advance1 ( _InIt & _Where, _Diff _Off, input_iterator_tag )
 {

 if ( _Off < 0 )
  _Debug_message ( L"\x6e\x65\x67\x61\x74\x69\x76\x65\x20\x6f\x66\x66\x73\x65\x74\x20\x69\x6e\x20\x61\x64\x76\x61\x6e\x63\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1063 );


 for (; 0 < _Off; -- _Off )
  ++ _Where;
 }
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt,
 class _Diff > inline
 void _Advance1 ( _BidIt & _Where, _Diff _Off, bidirectional_iterator_tag )
 {
 for (; 0 < _Off; -- _Off )
  ++ _Where;
 for (; _Off < 0; ++ _Off )
  -- _Where;
 }
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt,
 class _Diff > inline
 void _Advance1 ( _RanIt & _Where, _Diff _Off, random_access_iterator_tag )
 {
 _Where += _Off;
 }
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff > inline
 void advance ( _InIt & _Where, _Diff _Off )
 {

 _Advance1 ( _Where, _Off, _Iter_cat_t < remove_const_t < _InIt >> ( ) );
 }
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _Iter_diff_t < _InIt >
  _Distance1 ( _InIt _First, _InIt _Last, input_iterator_tag )
 {
 _Iter_diff_t < _InIt > _Off = 0;
 for (; _First != _Last; ++ _First )
  ++ _Off;

 return ( _Off );
 }
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 _Iter_diff_t < _RanIt >
  _Distance1 ( _RanIt _First, _RanIt _Last, random_access_iterator_tag )
 {

 if ( _First != _Last )
  {
  _Debug_pointer ( _First, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1114 );
  _Debug_pointer ( _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1115 );
  }


 return ( _Last - _First );
 }
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _Iter_diff_t < _InIt >
  distance ( _InIt _First, _InIt _Last )
 {
 return ( _Distance1 ( _First, _Last, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 1130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 )
 {
 static_assert ( is_base_of < input_iterator_tag,
  typename iterator_traits < _InIt > :: iterator_category > :: value,
  "next requires input iterator" );

 :: std :: advance ( _First, _Off );
 return ( _First );
 }
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 )
 {
 static_assert ( is_base_of < bidirectional_iterator_tag,
  typename iterator_traits < _BidIt > :: iterator_category > :: value,
  "prev requires bidirectional iterator" );

 :: std :: advance ( _First, - _Off );
 return ( _First );
 }
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty >
 struct pointer_traits;
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt >
 class reverse_iterator
  : public iterator <
   typename iterator_traits < _RanIt > :: iterator_category,
   typename iterator_traits < _RanIt > :: value_type,
   typename iterator_traits < _RanIt > :: difference_type,
   typename iterator_traits < _RanIt > :: pointer,
   typename iterator_traits < _RanIt > :: reference >
 {
 typedef reverse_iterator < _RanIt > _Myt;

public :
 typedef typename iterator_traits < _RanIt > :: difference_type difference_type;
 typedef typename iterator_traits < _RanIt > :: pointer pointer;
 typedef typename iterator_traits < _RanIt > :: reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator ( )
  : current ( )
  {
  }

 explicit reverse_iterator ( _RanIt _Right )
  : current ( _Right )
  {
  }

 template < class _Other >
  reverse_iterator ( const reverse_iterator < _Other > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _Other >
  _Myt & operator = ( const reverse_iterator < _Other > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  _RanIt _Tmp = current;
  return ( * -- _Tmp );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myt & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

protected :
 _RanIt current;
 };
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _RanIt> 
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper< reverse_iterator< _RanIt> , void>  : public _Is_checked_helper< _RanIt>  { 
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 reverse_iterator < _RanIt > operator + (
  typename reverse_iterator < _RanIt > :: difference_type _Off,
  const reverse_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 >
 auto inline operator - ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
   -> decltype ( _Right . base ( ) - _Left . base ( ) )
 {
 return ( _Right . base ( ) - _Left . base ( ) );
 }
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator == ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . base ( ) == _Right . base ( ) );
 }
#line 1304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator != ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator < ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right . base ( ) < _Left . base ( ) );
 }
#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator > ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator <= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator >= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 reverse_iterator < _RanIt > make_reverse_iterator ( _RanIt _Iter )
 {
 return ( reverse_iterator < _RanIt > ( _Iter ) );
 }
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline begin ( _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline begin ( const _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline end ( _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline end ( const _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array + _Size );
 }
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline cbegin ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
  -> decltype ( :: std :: begin ( _Cont ) )
 {
 return ( :: std :: begin ( _Cont ) );
 }
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline cend ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
  -> decltype ( :: std :: end ( _Cont ) )
 {
 return ( :: std :: end ( _Cont ) );
 }
#line 1409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rbegin ( _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rbegin ( const _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rend ( _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rend ( const _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array + _Size ) );
 }
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array ) );
 }
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 reverse_iterator < const _Elem * >
  rbegin ( :: std :: initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . end ( ) ) );
 }
#line 1454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 reverse_iterator < const _Elem * >
  rend ( :: std :: initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . begin ( ) ) );
 }
#line 1462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline crbegin ( const _Container & _Cont )
  -> decltype ( :: std :: rbegin ( _Cont ) )
 {
 return ( :: std :: rbegin ( _Cont ) );
 }
#line 1469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline crend ( const _Container & _Cont )
  -> decltype ( :: std :: rend ( _Cont ) )
 {
 return ( :: std :: rend ( _Cont ) );
 }
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline size ( const _Container & _Cont )
  -> decltype ( _Cont . size ( ) )
 {
 return ( _Cont . size ( ) );
 }
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( _Size );
 }
#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline empty ( const _Container & _Cont )
  -> decltype ( _Cont . empty ( ) )
 {
 return ( _Cont . empty ( ) );
 }
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( false );
 }
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 constexpr bool empty (
  :: std :: initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . size ( ) == 0 );
 }
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline data ( _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline data ( const _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 constexpr const _Elem * data (
  :: std :: initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size >
 class _Array_const_iterator
  : public _Iterator012 < random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty &,
   _Iterator_base >
 {
public :
 typedef _Array_const_iterator < _Ty, _Size > _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty * pointer;
 typedef const _Ty & reference;
 enum { _EEN_SIZE = _Size };






























































































































 _Array_const_iterator ( )
  : _Ptr ( ),
  _Idx ( 0 )
  {
  }

 explicit _Array_const_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Ptr ( _Parg ),
  _Idx ( _Off )
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  _Idx = _Right - _Ptr;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Ptr + _Idx );
  }

 reference operator * ( ) const
  {

  if ( _Ptr == 0
   || _Size <= _Idx )
   {
   _Debug_message ( L"\x61\x72\x72\x61\x79\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x61\x62\x6c" L"\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1718 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1719, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1719, 0 ); };
   }






  ;

  return ( _Ptr [ _Idx ] );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {

  if ( _Ptr == 0
   || _Size <= _Idx )
   {
   _Debug_message ( L"\x61\x72\x72\x61\x79\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x61\x62\x6c\x65" L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1743 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1744, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1744, 0 ); };
   }






  ++ _Idx;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {

  if ( _Ptr == 0
   || _Idx <= 0 )
   {
   _Debug_message ( L"\x61\x72\x72\x61\x79\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x61\x62\x6c\x65" L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1769 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1770, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1770, 0 ); };
   }






  -- _Idx;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {

  if ( _Size < _Idx + _Off )
   {
   _Debug_message ( L"\x61\x72\x72\x61\x79\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x2b\x20\x6f\x66\x66\x73\x65\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72" L"\x61\x6e\x67\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1794 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1795, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1795, 0 ); };
   }





  _Idx += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Idx < _Right . _Idx
   ? - ( difference_type ) ( _Right . _Idx - _Idx )
   : ( difference_type ) _Idx - _Right . _Idx );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Idx == _Right . _Idx );
  }

 bool operator != ( const _Myiter & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Idx < _Right . _Idx );
  }

 bool operator > ( const _Myiter & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myiter & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myiter & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }


 void _Compat ( const _Myiter & _Right ) const
  {
  if ( _Ptr != _Right . _Ptr )
   {
   _Debug_message ( L"\x61\x72\x72\x61\x79\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1873 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Invalid Argument" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1874, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x49\x6e\x76\x61\x6c\x69\x64\x20" L"\x41\x72\x67\x75\x6d\x65\x6e\x74\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1874, 0 ); };
   }
  }








 pointer _Ptr;
 size_t _Idx;

 };
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 typename _Array_const_iterator < _Ty, _Size > :: _Unchecked_type
  _Unchecked ( _Array_const_iterator < _Ty, _Size > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_const_iterator < _Ty, _Size > &
  _Rechecked ( _Array_const_iterator < _Ty, _Size > & _Iter,
   typename _Array_const_iterator < _Ty, _Size >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_const_iterator < _Ty, _Size > operator + (
  typename _Array_const_iterator < _Ty, _Size > :: difference_type _Off,
  _Array_const_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size >
 class _Array_iterator
  : public _Array_const_iterator < _Ty, _Size >
 {
public :
 typedef _Array_iterator < _Ty, _Size > _Myiter;
 typedef _Array_const_iterator < _Ty, _Size > _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty * pointer;
 typedef _Ty & reference;

 _Array_iterator ( )
  {
  }

 explicit _Array_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Mybase ( _Parg, _Off )
  {
  }
 enum { _EEN_SIZE = _Size };
 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  ( ( _Mybase * ) this ) -> _Rechecked ( _Right );
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( ( pointer ) ( ( _Mybase * ) this ) -> _Unchecked ( ) );
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 typename _Array_iterator < _Ty, _Size > :: _Unchecked_type
  _Unchecked ( _Array_iterator < _Ty, _Size > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_iterator < _Ty, _Size > &
  _Rechecked ( _Array_iterator < _Ty, _Size > & _Iter,
   typename _Array_iterator < _Ty, _Size >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 2044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_iterator < _Ty, _Size > operator + (
  typename _Array_iterator < _Ty, _Size > :: difference_type _Off,
  _Array_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 2054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt >
 class move_iterator
 {
public :
 typedef move_iterator < _RanIt > _Myt;
 typedef typename iterator_traits < _RanIt > :: iterator_category
  iterator_category;
 typedef typename iterator_traits < _RanIt > :: value_type
  value_type;
 typedef typename iterator_traits < _RanIt > :: difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef typename iterator_traits < _RanIt > :: reference _Ref0;
 typedef conditional_t < is_reference < _Ref0 > :: value,
  remove_reference_t < _Ref0 > &&, _Ref0 > reference;
 typedef _RanIt iterator_type;

 move_iterator ( )
  : current ( )
  {
  }

 explicit move_iterator ( iterator_type _Right )
  : current ( _Right )
  {
  }

 template < class _RanIt2 >
  move_iterator ( const move_iterator < _RanIt2 > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _RanIt2 >
  _Myt & operator = ( const move_iterator < _RanIt2 > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  return ( static_cast < reference > ( * current ) );
  }

 pointer operator -> ( ) const
  {
  return ( current );
  }

 _Myt & operator ++ ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 template < class _RanIt2 >
  bool _Equal ( const move_iterator < _RanIt2 > & _Right ) const
  {
  return ( current == _Right . base ( ) );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( :: std :: move ( current [ _Off ] ) );
  }

 template < class _RanIt2 >
  bool _Less ( const move_iterator < _RanIt2 > & _Right ) const
  {
  return ( current < _Right . base ( ) );
  }

 difference_type operator - ( const _Myt & _Right ) const
  {
  return ( current - _Right . base ( ) );
  }

protected :
 iterator_type current;
 };
#line 2185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _RanIt> 
#line 2186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper< move_iterator< _RanIt> , void>  : public _Is_checked_helper< _RanIt>  { 
#line 2189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt,
 class _Diff > inline
 move_iterator < _RanIt >
  operator + ( _Diff _Off,
  const move_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 2201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 >
 auto inline operator - (
  move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
   -> decltype ( _Left . base ( ) - _Right . base ( ) )
 {
 return ( _Left . base ( ) - _Right . base ( ) );
 }
#line 2211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator == (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }
#line 2220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator != (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator < (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Less ( _Right ) );
 }
#line 2238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator > (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator <= (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator >= (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 move_iterator < _RanIt > make_move_iterator ( _RanIt _Iter )
 {
 return ( move_iterator < _RanIt > ( _Iter ) );
 }
#line 2273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Traits >
 struct _Char_traits_eq
 {
 typedef typename _Traits :: char_type _Elem;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: eq ( _Left, _Right ) );
  }
 };
#line 2285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Traits >
 struct _Char_traits_lt
 {
 typedef typename _Traits :: char_type _Elem;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: lt ( _Left, _Right ) );
  }
 };
#line 2297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_memmove ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 const char * const _First_ch = reinterpret_cast < const char * > ( _First );
 const char * const _Last_ch = reinterpret_cast < const char * > ( _Last );
 char * const _Dest_ch = reinterpret_cast < char * > ( _Dest );
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove ( _Dest_ch, _First_ch, _Count );
 return ( reinterpret_cast < _OutIt > ( _Dest_ch + _Count ) );
 }
#line 2310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }
#line 2320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {

 return ( _Copy_unchecked1 ( _First, _Last,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Copy_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 static_cast < void > ( ( _Dest ) + ( ( _Last ) - ( _First ) ) );
 return ( _Rechecked ( _Dest,
  _Copy_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2362 );
 return ( _Copy_no_deprecate1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _InIt > ( ), _Iter_cat_t < _OutIt > ( ) ) );
 }
#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::copy\' with parameters that may be unsafe - this call relies on the caller to check that the passed values are co" "rrect. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 return ( _Copy_no_deprecate ( _First, _Last, _Dest ) );
 }
#line 2377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutTy,
 size_t _OutSize > inline
 _OutTy * copy ( _InIt _First, _InIt _Last,
  _OutTy ( & _Dest ) [ _OutSize ] )
 {
 return ( _Unchecked (
  _Copy_no_deprecate ( _First, _Last,
   _Array_iterator < _OutTy, _OutSize > ( _Dest ) ) ) );
 }
#line 2390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag )
 {
 if ( 0 < _Count )
  {
  * _Dest = * _First;
  while ( 0 < -- _Count )
   * ++ _Dest = * ++ _First;
  return ( ++ _Dest );
  }

 return ( _Dest );
 }
#line 2407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }
#line 2418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked1 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {


 return ( _Copy_n_unchecked2 ( _First, _Count,
  _Dest, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 2430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked1 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 if ( 0 < _Count )
  return ( _Copy_memmove ( _First, _First + _Count, _Dest ) );
 return ( _Dest );
 }
#line 2441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {
 return ( _Copy_n_unchecked1 ( _First, _Count,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt copy_n ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {

 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::copy_n\' with parameters that may be unsafe - this call relies on the caller to check that the passed values are " "correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" "" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 return ( _Rechecked ( _Dest,
  _Copy_n_unchecked ( _Unchecked_n ( _First, _Count ), _Count, _Unchecked_n ( _Dest, _Count ) ) ) );
 }
#line 2464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutIt > inline
 _OutIt copy_n ( _InTy ( & _First ) [ _InSize ], _Diff _Count,
  _OutIt _Dest )
 {

 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::copy_n\' with parameters that may be unsafe - this call relies on the caller to check that the passed values are " "correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" "" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 _Debug_array_size2 ( _First, _Count, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2473 );
 return ( _Rechecked ( _Dest,
  _Copy_n_unchecked ( _First, _Count, _Unchecked_n ( _Dest, _Count ) ) ) );
 }
#line 2478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize > inline
 _OutTy * copy_n ( _InIt _First, _Diff _Count,
  _OutTy ( & _Dest ) [ _OutSize ] )
 {
 _Debug_array_size2 ( _Dest, _Count, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2485 );
 return ( _Copy_n_unchecked ( _Unchecked_n ( _First, _Count ), _Count, _Dest ) );
 }
#line 2489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize > inline
 _OutTy * copy_n ( _InTy ( & _First ) [ _InSize ], _Diff _Count,
  _OutTy ( & _Dest ) [ _OutSize ] )
 {
 _Debug_array_size2 ( _First, _Count, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2497 );
 _Debug_array_size2 ( _Dest, _Count, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2498 );
 return ( _Copy_n_unchecked ( _First, _Count, _Dest ) );
 }
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_memmove ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 const char * const _First_ch = reinterpret_cast < const char * > ( _First );
 const char * const _Last_ch = reinterpret_cast < const char * > ( _Last );
 char * const _Dest_ch = reinterpret_cast < char * > ( _Dest );
 const size_t _Count = _Last_ch - _First_ch;
 return ( static_cast < _BidIt2 > (
  :: memmove ( _Dest_ch - _Count, _First_ch, _Count ) ) );
 }
#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = * -- _Last;
 return ( _Dest );
 }
#line 2527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 return ( _Copy_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Copy_backward_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 static_cast < void > ( ( _Dest ) - ( ( _Last ) - ( _First ) ) );
 return ( _Rechecked ( _Dest,
  _Copy_backward_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::copy_backward\' with parameters that may be unsafe - this call relies on the caller to check that the passed valu" "es are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Ite" "rators\'" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2569 );
 return ( _Copy_backward1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _BidIt1 > ( ), _Iter_cat_t < _BidIt2 > ( ) ) );
 }
#line 2575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = :: std :: move ( * _First );
 return ( _Dest );
 }
#line 2585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 return ( _Move_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Move_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 static_cast < void > ( ( _Dest ) + ( ( _Last ) - ( _First ) ) );
 return ( _Rechecked ( _Dest,
  _Move_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2626 );
 return ( _Move_no_deprecate1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _InIt > ( ), _Iter_cat_t < _OutIt > ( ) ) );
 }
#line 2631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _InIt, class 
#line 2632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_OutIt> inline _OutIt 
#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
move(_InIt _First, _InIt _Last, _OutIt 
#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Dest) 
#line 2635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 2636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Unchecked_iterators { __declspec(deprecated("Call to \'std::move\' with parameters that may be unsafe - this call relies on the caller to check that the passed values are co" "rrect. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'")) static void _Deprecate(std::false_type) { } static void _Deprecate(std::true_type) { } }; _Unchecked_iterators::_Deprecate(_Is_checked(_Dest)); 
#line 2637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return _Move_no_deprecate(_First, _Last, _Dest); 
#line 2638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 2641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _InIt, class 
#line 2642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_OutTy, size_t 
#line 2643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_OutSize> inline _OutTy *
#line 2644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
move(_InIt _First, _InIt _Last, _OutTy (&
#line 2645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Dest)[_OutSize]) 
#line 2646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 2647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return _Unchecked(_Move_no_deprecate(_First, _Last, ((_Array_iterator< _OutTy, _OutSize> )(_Dest)))); 
#line 2650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = :: std :: move ( * -- _Last );
 return ( _Dest );
 }
#line 2664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 return ( _Move_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Move_backward_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 static_cast < void > ( ( _Dest ) - ( ( _Last ) - ( _First ) ) );
 return ( _Rechecked ( _Dest,
  _Move_backward_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::move_backward\' with parameters that may be unsafe - this call relies on the caller to check that the passed valu" "es are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Ite" "rators\'" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2706 );
 return ( _Move_backward1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _BidIt1 > ( ), _Iter_cat_t < _BidIt2 > ( ) ) );
 }
#line 2712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 2713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_character : public false_type { 
#line 2716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template<> struct _Is_character< char>  : public true_type { 
#line 2722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template<> struct _Is_character< signed char>  : public true_type { 
#line 2728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template<> struct _Is_character< unsigned char>  : public true_type { 
#line 2734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _FwdIt, class 
#line 2737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty> 
#line 2738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Fill_memset_is_safe_helper { 
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Iter_value_t< _FwdIt>  _Value_type; 
#line 2750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename conjunction< is_pointer< _FwdIt> , disjunction< conjunction< _Is_character< _Ty> , _Is_character< _Iter_value_t< _FwdIt> > > , conjunction< is_same< bool, _Ty> , is_same< bool, _Iter_value_t< _FwdIt> > > > > ::type type; 
#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 typename _Fill_memset_is_safe_helper < _FwdIt, _Ty > :: type
 _Fill_memset_is_safe ( const _FwdIt &, const _Ty & )
 {
 return { };
 }
#line 2761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  * _First = _Val;
 }
#line 2769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, true_type )
 {
 :: memset ( _First, _Val, _Last - _First );
 }
#line 2776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Fill_unchecked1 ( _First, _Last, _Val, _Fill_memset_is_safe ( _First, _Val ) );
 }
#line 2783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void fill ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2787 );
 _Fill_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val );
 }
#line 2792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked1 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, false_type )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
  * _Dest = _Val;
 return ( _Dest );
 }
#line 2802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked1 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, true_type )
 {
 if ( 0 < _Count )
  {
  :: memset ( _Dest, _Val, _Count );
  return ( _Dest + _Count );
  }

 return ( _Dest );
 }
#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked ( _OutIt _Dest, _Diff _Count, const _Ty & _Val )
 {

 return ( _Fill_n_unchecked1 ( _Dest, _Count, _Val, _Fill_memset_is_safe ( _Dest, _Val ) ) );
 }
#line 2825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt fill_n ( _OutIt _Dest, _Diff _Count, const _Ty & _Val )
 {
 return ( _Rechecked ( _Dest,
  _Fill_n_unchecked ( _Unchecked_n ( _Dest, _Count ), _Count, _Val ) ) );
 }
#line 2835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 2837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Value_equality_is_bitwise_equality : public bool_constant< (static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))>  { 
#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2845 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2, class 
#line 2847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pr> 
#line 2848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper : public false_type { 
#line 2852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 2856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem1, _Elem2, equal_to<> >  : public conjunction< _Is_same_size< _Elem1, _Elem2> , is_integral< _Elem1> , is_integral< _Elem2> , negation< is_same< bool, _Elem1> > , negation< is_same< bool, _Elem2> > , negation< is_volatile< _Elem1> > , negation< is_volatile< _Elem2> > , _Value_equality_is_bitwise_equality< _Elem1, _Elem2> > ::type { 
#line 2870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 2874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem1 *, _Elem2 *, equal_to<> >  : public is_same< remove_cv_t< _Elem1> , remove_cv_t< _Elem2> > ::type { 
#line 2877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 2880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, _Char_traits_eq< char_traits< _Elem> > >  : public _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to< _Elem> >  : public _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter1,
 class _Iter2,
 class _Pr > inline
 false_type _Equal_memcmp_is_safe ( const _Iter1 &, const _Iter2 &, const _Pr & )
 {
 return { };
 }
#line 2900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _Pr > inline
 typename _Equal_memcmp_is_safe_helper <
  remove_const_t < _Obj1 >,
  remove_const_t < _Obj2 >,
  _Pr > :: type
  _Equal_memcmp_is_safe ( _Obj1 * const &, _Obj2 * const &, const _Pr & )
 {
 return { };
 }
#line 2912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, false_type )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( true );
 }
#line 2924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr &, true_type )
 {
 const char * const _First1_ch = reinterpret_cast < const char * > ( _First1 );
 const char * const _First2_ch = reinterpret_cast < const char * > ( _First2 );
 const size_t _Count = reinterpret_cast < const char * > ( _Last1 ) - _First1_ch;
 return ( :: memcmp ( _First1_ch, _First2_ch, _Count ) == 0 );
 }
#line 2936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred )
 {
 return ( _Equal_unchecked1 ( _First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe ( _First1, _First2, _Pred ) ) );
 }
#line 2946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, input_iterator_tag, input_iterator_tag )
 {
 return ( _Equal_unchecked ( _First1, _Last1, _Unchecked_idl0 ( _First2 ), _Pred ) );
 }
#line 2955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, random_access_iterator_tag, random_access_iterator_tag )
 {
 static_cast < void > ( ( _First2 ) + ( ( _Last1 ) - ( _First1 ) ) );
 return ( _Equal_unchecked ( _First1, _Last1, _Unchecked ( _First2 ), _Pred ) );
 }
#line 2965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred )
 {
 _Debug_range_ptr ( _First1, _Last1, _First2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2971 );
 _Debug_pointer_if ( _First1 != _Last1, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 2972 );
 return ( _Equal_no_deprecate1 ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _First2, _Pred, _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 2977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred )
 {
 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::equal\' with parameters that may be unsafe - this call relies on the caller to check that the passed values are c" "orrect. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" "" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _First2 ) ) );
 return ( _Equal_no_deprecate ( _First1, _Last1, _First2, _Pred ) );
 }
#line 2988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t < ! is_same < _InTy *, _Pr > :: value > > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InTy ( & _First2 ) [ _InSize ], _Pr _Pred )
 {
 return ( _Equal_no_deprecate ( _First1, _Last1,
  _Array_iterator < _InTy, _InSize > ( _First2 ), _Pred ) );
 }
#line 3002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2,
  equal_to < > ( ) ) );
 }
#line 3012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InTy,
 size_t _InSize > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InTy ( & _First2 ) [ _InSize ] )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2,
  equal_to < > ( ) ) );
 }
#line 3024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred,
   input_iterator_tag, input_iterator_tag )
 {

 _Debug_pointer_if ( _First1 != _Last1 && _First2 != _Last2, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3032 );
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred,
   random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  return ( false );
 _Debug_pointer_if ( _First1 != _Last1, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3049 );
 return ( _Equal_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 _Debug_range ( _First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3059 );
 _Debug_range ( _First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3060 );
 return ( _Equal_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred,
   _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2, _Last2,
  equal_to < > ( ) ) );
 }
#line 3077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 3078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2, class 
#line 3079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_FTy> 
#line 3080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Lex_compare_check_element_types_helper : public conjunction< _Is_character< _Elem1> , _Is_character< _Elem2> , _Is_character< _FTy> , is_unsigned< _FTy> > ::type { 
#line 3088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 3091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 3092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Lex_compare_check_element_types_helper< _Elem1, _Elem2, void>  : public conjunction< _Is_character< _Elem1> , _Is_character< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > ::type { 
#line 3100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Memcmp_pr> 
#line 3103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Lex_compare_optimize { 
#line 3105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Memcmp_pr, class 
#line 3108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Obj1, class 
#line 3109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Obj2, class 
#line 3110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_FTy> using _Lex_compare_check_element_types = _Lex_compare_optimize< conditional_t< _Lex_compare_check_element_types_helper< remove_const_t< _Obj1> , remove_const_t< _Obj2> , _FTy> ::value, _Memcmp_pr, void> > ; 
#line 3115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 _Lex_compare_optimize < void > _Lex_compare_memcmp_classify ( const _InIt1 &, const _InIt2 &, const _Pr & )
 {

 return { };
 }
#line 3124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _FTy > inline
 _Lex_compare_check_element_types < less < int >, _Obj1, _Obj2, _FTy >
  _Lex_compare_memcmp_classify ( _Obj1 * const &, _Obj2 * const &, const less < _FTy > & )
 {
 return { };
 }
#line 3133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred, _Lex_compare_optimize < void > )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  {
  if ( _Debug_lt_pred ( _Pred, * _First1, * _First2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3141 ) )
   return ( true );
  else if ( _Pred ( * _First2, * _First1 ) )
   return ( false );
  }

 return ( _First1 == _Last1 && _First2 != _Last2 );
 }
#line 3150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr > inline
 bool _Lex_compare_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr &, _Lex_compare_optimize < _Memcmp_pr > )
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp ( _First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2 );
 return ( _Memcmp_pr { } ( _Ans, 0 ) || _Ans == 0 && _Num1 < _Num2 );
 }
#line 3163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred )
 {
 return ( _Lex_compare_unchecked1 ( _First1, _Last1, _First2, _Last2, _Pred,
  _Lex_compare_memcmp_classify ( _First1, _First2, _Pred ) ) );
 }
#line 3173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 _Debug_range ( _First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3179 );
 _Debug_range ( _First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3180 );
 _Debug_pointer_if ( _First1 != _Last1 && _First2 != _Last2, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3181 );
 return ( _Lex_compare_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred ) );
 }
#line 3187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: lexicographical_compare ( _First1, _Last1,
  _First2, _Last2, less < > ( ) ) );
 }
#line 3197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, true_type, _Any_tag )
 {
 return ( ( - 128 ) <= _Val && _Val <= 127 );
 }
#line 3203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, true_type )
 {
 return ( _Val <= 127 || static_cast < _Ty > ( ( - 128 ) ) <= _Val );
 }
#line 3209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, false_type )
 {
 return ( _Val <= 127 );
 }
#line 3215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, true_type, _Any_tag )
 {
 return ( 0 <= _Val && _Val <= 255 );
 }
#line 3221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, false_type, _Any_tag )
 {
 return ( _Val <= 255 );
 }
#line 3227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 bool _Within_limits ( _InIt, const _Ty & _Val )
 {
 typedef typename remove_pointer < _InIt > :: type _Elem;
 return ( _Within_limits ( _Val, is_signed < _Elem > ( ), is_signed < _Ty > ( ),
  integral_constant < bool, - 1 == static_cast < _Ty > ( - 1 ) > ( ) ) );
 }
#line 3236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 bool _Within_limits ( _InIt, const bool & )
 {
 return ( true );
 }
#line 3242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, _InIt _Last, const _Ty & _Val, true_type )
 {
 if ( ! _Within_limits ( _First, _Val ) )
  return ( _Last );
 _First = static_cast < _InIt > ( :: memchr (
  _First, static_cast < unsigned char > ( _Val ), _Last - _First ) );
 return ( _First ? _First : _Last );
 }
#line 3253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, _InIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   break;
 return ( _First );
 }
#line 3263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {

 typedef integral_constant < bool,
  ( is_same < _InIt, char * > :: value
  || is_same < _InIt, signed char * > :: value
  || is_same < _InIt, unsigned char * > :: value
  || is_same < _InIt, const char * > :: value
  || is_same < _InIt, const signed char * > :: value
  || is_same < _InIt, const unsigned char * > :: value )
  && is_integral < _Ty > :: value
 > _Memchr_opt;
 return ( _Find_unchecked1 ( _First, _Last, _Val, _Memchr_opt ( ) ) );
 }
#line 3280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt find ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3284 );
 return ( _Rechecked ( _First,
  _Find_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val ) ) );
 }
#line 3290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _InIt _Find_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr & _Pred )
 {
 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First, _Val ) )
   break;
 return ( _First );
 }
#line 3302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _Iter_diff_t < _InIt >
  _Count_unchecked ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   ++ _Count;
 return ( _Count );
 }
#line 3315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _Iter_diff_t < _InIt >
  count ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3320 );
 return ( _Count_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val ) );
 }
#line 3325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _Iter_diff_t < _InIt >
  _Count_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr & _Pred )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First, _Val ) )
   ++ _Count;
 return ( _Count );
 }
#line 3340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 &, _FwdIt2 &, _Pr &,
  forward_iterator_tag, forward_iterator_tag )
 {
 }
#line 3348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 & _Last1, _FwdIt2 & _Last2, _Pr & _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag )
 {

 while ( _Pred ( * -- _Last1, * -- _Last2 ) )
  ;
 ++ _Last1;
 ++ _Last2;
 }
#line 3362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Check_match_counts ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred )
 {
 _Trim_matching_suffixes ( _Last1, _Last2, _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) );
 for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 )
  if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) )
   {
   _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
   if ( _Count2 == 0 )
    return ( false );
   _FwdIt1 _Skip1 = :: std :: next ( _Next1 );
   _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
   if ( _Count2 != _Count1 )
    return ( false );
   }

 return ( true );
 }
#line 3386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   _FwdIt2 _Last2 = :: std :: next ( _First2,
    :: std :: distance ( _First1, _Last1 ) );
   return ( _Check_match_counts ( _First1, _Last1,
    _First2, _Last2, _Pred ) );
   }

 return ( true );
 }
#line 3404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate1 ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred, forward_iterator_tag, forward_iterator_tag )
 {
 return ( _Is_permutation_unchecked ( _First1, _Last1, _Unchecked_idl0 ( _First2 ), _Pred ) );
 }
#line 3413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate1 ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred, random_access_iterator_tag, random_access_iterator_tag )
 {
 static_cast < void > ( ( _First2 ) + ( ( _Last1 ) - ( _First1 ) ) );
 return ( _Is_permutation_unchecked ( _First1, _Last1, _Unchecked ( _First2 ), _Pred ) );
 }
#line 3423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred )
 {
 _Debug_range_ptr ( _First1, _Last1, _First2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3429 );
 _Debug_pointer_if ( _First1 != _Last1, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3430 );
 return ( _Is_permutation_no_deprecate1 ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _First2, _Pred, _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred )
 {
 struct _Unchecked_iterators { static void __declspec ( deprecated ( "Call to \'std::is_permutation\' with parameters that may be unsafe - this call relies on the caller to check that the passed val" "ues are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked It" "erators\'" ) ) _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _First2 ) ) );
 return ( _Is_permutation_no_deprecate ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t < ! is_same < _InTy *, _Pr > :: value > > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy ( & _First2 ) [ _InSize ], _Pr _Pred )
 {
 return ( _Is_permutation_no_deprecate ( _First1, _Last1,
  _Array_iterator < _InTy, _InSize > ( _First2 ), _Pred ) );
 }
#line 3460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, equal_to < > ( ) ) );
 }
#line 3471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _InTy,
 size_t _InSize > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy ( & _First2 ) [ _InSize ] )
 {
 return ( :: std :: is_permutation ( _First1, _Last1, _First2, equal_to < > ( ) ) );
 }
#line 3482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred,
  forward_iterator_tag, forward_iterator_tag )
 {

 _Debug_pointer_if ( _First1 != _Last1 && _First2 != _Last2, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3490 );
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   if ( :: std :: distance ( _First1, _Last1 )
    != :: std :: distance ( _First2, _Last2 ) )
    return ( false );
   else
    return ( _Check_match_counts ( _First1, _Last1,
     _First2, _Last2, _Pred ) );
   }

 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred,
  random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  return ( false );
 _Debug_pointer_if ( _First1 != _Last1, _Pred, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3515 );
 return ( _Is_permutation_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {

 _Debug_range ( _First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3526 );
 _Debug_range ( _First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3527 );
 return ( _Is_permutation_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, _Last2, equal_to < > ( ) ) );
 }
#line 3544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked ( _BidIt _First, _BidIt _Last )
 {
 for (; _First != _Last && _First != -- _Last; ++ _First )
  :: std :: iter_swap ( _First, _Last );
 }
#line 3551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 void reverse ( _BidIt _First, _BidIt _Last )
 {
 _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3554 );
 _Reverse_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ) );
 }
#line 3559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked1 ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag )
 {
 for ( _FwdIt _Next = _Mid, _Res = _Last;; )
  {
  :: std :: iter_swap ( _First, _Next );
  if ( ++ _First == _Mid )
   {
   if ( ++ _Next == _Last )
    return ( _Res == _Last ? _Mid : _Res );
   else
    _Mid = _Next;
   }
  else if ( ++ _Next == _Last )
   {
   if ( _Res == _Last )
    _Res = _First;
   _Next = _Mid;
   }
  }
 }
#line 3582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked (
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last )
 {
 while ( _First != _Sentinel && _Last != _Sentinel )
  :: std :: iter_swap ( _First ++, -- _Last );
 return ( :: std :: make_pair ( _First, _Last ) );
 }
#line 3591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 _BidIt _Rotate_unchecked1 ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 pair < _BidIt, _BidIt > _Tmp = _Reverse_until_sentinel_unchecked ( _First, _Mid, _Last );
 _Reverse_unchecked ( _Tmp . first, _Tmp . second );
 return ( _Mid != _Tmp . first ? _Tmp . first : _Tmp . second );
 }
#line 3602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 _RanIt _Rotate_unchecked1 ( _RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 _Reverse_unchecked ( _First, _Last );
 return ( _First + ( _Last - _Mid ) );
 }
#line 3612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 if ( _First == _Mid )
  return ( _Last );
 if ( _Mid == _Last )
  return ( _First );
 return ( _Rotate_unchecked1 ( _First, _Mid, _Last, _Iter_cat_t < _FwdIt > ( ) ) );
 }
#line 3622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 _Debug_range ( _First, _Mid, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3625 );
 _Debug_range ( _Mid, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 3626 );
 return ( _Rechecked ( _First,
  _Rotate_unchecked ( _Unchecked ( _First ), _Unchecked ( _Mid ),
  _Unchecked ( _Last ) ) ) );
 }
#line 3633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Diff,
 class _Urng >
 class _Rng_from_urng
 {
public :
 typedef typename make_unsigned < _Diff > :: type _Ty0;
 typedef typename _Urng :: result_type _Ty1;

 typedef typename _If < sizeof ( _Ty1 ) < sizeof ( _Ty0 ),
  _Ty0, _Ty1 > :: type _Udiff;


 explicit _Rng_from_urng ( _Urng & _Func )
  : _Ref ( _Func ), _Bits ( 8 * sizeof ( _Udiff ) ), _Bmask ( _Udiff ( - 1 ) )
  {
  for (; ( _Urng :: max ) ( ) - ( _Urng :: min ) ( ) < _Bmask; _Bmask >>= 1 )
   -- _Bits;
  }

 _Diff operator ( ) ( _Diff _Index )
  {
  for (;; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while ( _Mask < _Udiff ( _Index - 1 ) )
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits ( );
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if ( _Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff ( _Index - 1 ) )
    return ( _Ret % _Index );
   }
  }

 _Udiff _Get_all_bits ( )
  {
  _Udiff _Ret = 0;

  for ( size_t _Num = 0; _Num < 8 * sizeof ( _Udiff );
   _Num += _Bits )
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits ( );
   }

  return ( _Ret );
  }

 _Rng_from_urng ( const _Rng_from_urng & ) = delete;
 _Rng_from_urng & operator = ( const _Rng_from_urng & ) = delete;

private :
 _Udiff _Get_bits ( )
  {
  for (;; )
   {
   _Udiff _Val = _Ref ( ) - ( _Urng :: min ) ( );

   if ( _Val <= _Bmask )
    return ( _Val );
   }
  }

 _Urng & _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };
#line 3712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem >
 class __declspec ( dllimport ) _Yarn
 {
public :
 typedef _Yarn < _Elem > _Myt;

  _Yarn ( )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  }

  _Yarn ( const _Myt & _Right )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  * this = _Right;
  }

  _Yarn ( const _Elem * _Right )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  * this = _Right;
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  return ( * this = _Right . _Myptr );
  }

 _Myt & operator = ( const _Elem * _Right )
  {
  if ( _Myptr != _Right )
   {
   _Tidy ( );

   if ( _Right != 0 )
    {
    const _Elem * _Ptr = _Right;
    while ( * _Ptr != ( _Elem ) 0 )
     ++ _Ptr;
    size_t _Count = ( ( const char * ) ++ _Ptr - ( const char * ) _Right );


    _Myptr = ( _Elem * ) _malloc_dbg ( _Count, 2,
     "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3755 );





    if ( _Myptr != 0 )
     :: memcpy ( _Myptr, _Right, _Count );
    }
   }

  return ( * this );
  }

  ~ _Yarn ( ) noexcept
  {
  _Tidy ( );
  }

 bool empty ( ) const
  {
  return ( _Myptr == 0 );
  }

 const _Elem * c_str ( ) const
  {
  return ( _Myptr != 0 ? _Myptr : & _Nul );
  }

 bool _Empty ( ) const
  {
  return ( _Myptr == 0 );
  }

 const _Elem * _C_str ( ) const
  {
  return ( _Myptr != 0 ? _Myptr : & _Nul );
  }

private :
 void _Tidy ( )
  {
  if ( _Myptr != 0 )


   _free_dbg ( _Myptr, 2 );





  _Myptr = 0;
  }

 _Elem * _Myptr;
 _Elem _Nul;
 };
#line 3814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Alloc> 
#line 3816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Has_allocator_type { 
#line 3818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Uty> static auto _Fn(int)->is_convertible< _Alloc, typename _Uty::allocator_type> ; 
#line 3822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Uty> static auto _Fn(_Wrap_int)->false_type; 
#line 3826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef decltype((_Fn< _Ty> (0))) type; 
#line 3827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct allocator_arg_t { 
#line 3832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
constexpr allocator_arg_t allocator_arg{}; 
#line 3836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc(); 
#line 3837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument(const char *); 
#line 3838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error(const char *); 
#line 3839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range(const char *); 
#line 3840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error(const char *); 
#line 3841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error(const char *); 
#line 3842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}
#line 3844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
namespace std { 
#line 3846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Alloc> 
#line 3848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { 
#line 3851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Alloc> constexpr bool 
#line 3856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 3858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}
#line 3860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(push,3)
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(disable: 4100)
#line 3861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
namespace std { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
__declspec(allocator) inline void *_Allocate(size_t _Count, size_t _Sz, bool 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Try_aligned_allocation = true) 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
void *_Ptr = (0); 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if (_Count == (0)) { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
return _Ptr; }  
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if ((((size_t)(-1)) / _Sz) < _Count) { 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Xbad_alloc(); }  
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const size_t _User_size = _Count * _Sz; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if (_Try_aligned_allocation && ((4096) <= _User_size)) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
static_assert((sizeof(void *) < (32)), "Big allocations should at least match vector register size");
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const size_t _Block_size = ((((2) * sizeof(void *)) + (32)) - (1)) + _User_size; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if (_Block_size <= _User_size) { 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Xbad_alloc(); }  
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_container = reinterpret_cast< uintptr_t>(::operator new(_Block_size)); 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Ptr_container != (0))) { (void)(((!(!(("_Ptr_container != 0") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 70, 0, L"\x25\x6c\x73", L"\x22\x5f\x50\x74\x72\x5f\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x20\x21\x3d\x20\x30\x22\x20\x26\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x41\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 70, 0); }  ; } ; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = (reinterpret_cast< void *>((_Ptr_container + ((((2) * sizeof(void *)) + (32)) - (1))) & (~(32 - 1)))); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
((static_cast< uintptr_t *>(_Ptr))[-1]) = _Ptr_container; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
((static_cast< uintptr_t *>(_Ptr))[-2]) = 18085043209519168250Ui64; 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} else 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = ::operator new(_User_size); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Ptr != (0))) { (void)(((!(!(("_Ptr != 0") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 84, 0, L"\x25\x6c\x73", L"\x22\x5f\x50\x74\x72\x20\x21\x3d\x20\x30\x22\x20\x26\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x41\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 84, 0); }  ; } ; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}  
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
return _Ptr; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
inline void _Deallocate(void *_Ptr, size_t _Count, size_t _Sz) 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Count <= (((size_t)(-1)) / _Sz))) { (void)(((!(!(("_Count <= (size_t)(-1) / _Sz") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 94, 0, L"\x25\x6c\x73", L"\x22\x5f\x43\x6f\x75\x6e\x74\x20\x3c\x3d\x20\x28\x73\x69\x7a\x65\x5f\x74\x29\x28\x2d\x31\x29\x20\x2f\x20\x5f\x53\x7a\x22\x20\x26" L"\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x44\x65\x61\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 94, 0); }  ; } ; 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const size_t _User_size = _Count * _Sz; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if ((4096) <= _User_size) 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_user = reinterpret_cast< uintptr_t>(_Ptr); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!((_Ptr_user & (32 - 1)) == (0))) { (void)(((!(!(("(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 100, 0, L"\x25\x6c\x73", L"\x22\x28\x5f\x50\x74\x72\x5f\x75\x73\x65\x72\x20\x26\x20\x28\x5f\x42\x49\x47\x5f\x41\x4c\x4c\x4f\x43\x41\x54\x49\x4f\x4e\x5f\x41" L"\x4c\x49\x47\x4e\x4d\x45\x4e\x54\x20\x2d\x20\x31\x29\x29\x20\x3d\x3d\x20\x30\x22\x20\x26\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x44\x65\x61\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 100, 0); }  ; } ; 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_container = *(reinterpret_cast< uintptr_t *>(_Ptr_ptr)); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(((reinterpret_cast< uintptr_t *>(_Ptr_ptr))[-1]) == 18085043209519168250Ui64)) { (void)(((!(!(("reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 110, 0, L"\x25\x6c\x73", L"\x22\x72\x65\x69\x6e\x74\x65\x72\x70\x72\x65\x74\x5f\x63\x61\x73\x74\x3c\x75\x69\x6e\x74\x70\x74\x72\x5f\x74\x20\x2a\x3e\x28\x5f" L"\x50\x74\x72\x5f\x70\x74\x72\x29\x5b\x2d\x31\x5d\x20\x3d\x3d\x20\x5f\x42\x49\x47\x5f\x41\x4c\x4c\x4f\x43\x41\x54\x49\x4f\x4e\x5f" L"\x53\x45\x4e\x54\x49\x4e\x45\x4c\x22\x20\x26\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x44\x65\x61\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 110, 0); }  ; } ; 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Ptr_container < _Ptr_user)) { (void)(((!(!(("_Ptr_container < _Ptr_user") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 114, 0, L"\x25\x6c\x73", L"\x22\x5f\x50\x74\x72\x5f\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x20\x3c\x20\x5f\x50\x74\x72\x5f\x75\x73\x65\x72\x22\x20\x26\x26\x20" L"\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x44\x65\x61\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 114, 0); }  ; } ; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(((2) * sizeof(void *)) <= (_Ptr_user - _Ptr_container))) { (void)(((!(!(("2 * sizeof(void *) <= _Ptr_user - _Ptr_container") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 118, 0, L"\x25\x6c\x73", L"\x22\x32\x20\x2a\x20\x73\x69\x7a\x65\x6f\x66\x28\x76\x6f\x69\x64\x20\x2a\x29\x20\x3c\x3d\x20\x5f\x50\x74\x72\x5f\x75\x73\x65\x72" L"\x20\x2d\x20\x5f\x50\x74\x72\x5f\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x22\x20\x26\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x44\x65\x61\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 118, 0); }  ; } ; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!((_Ptr_user - _Ptr_container) <= ((((2) * sizeof(void *)) + (32)) - (1)))) { (void)(((!(!(("_Ptr_user - _Ptr_container <= _NON_USER_SIZE") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 126, 0, L"\x25\x6c\x73", L"\x22\x5f\x50\x74\x72\x5f\x75\x73\x65\x72\x20\x2d\x20\x5f\x50\x74\x72\x5f\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x20\x3c\x3d\x20\x5f" L"\x4e\x4f\x4e\x5f\x55\x53\x45\x52\x5f\x53\x49\x5a\x45\x22\x20\x26\x26\x20\x30"))) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"\x73\x74\x64\x3a\x3a\x5f\x44\x65\x61\x6c\x6c\x6f\x63\x61\x74\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 126, 0); }  ; } ; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}  
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
::operator delete(_Ptr); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty1,
 class _Ty2 > inline
 void _Construct ( _Ty1 * _Ptr, _Ty2 && _Val )
 {
 void * _Vptr = _Ptr;
 :: new ( _Vptr ) _Ty1 ( :: std :: forward < _Ty2 > ( _Val ) );
 }
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty1 > inline
 void _Construct ( _Ty1 * _Ptr )
 {
 void * _Vptr = _Ptr;

 :: new ( _Vptr ) _Ty1 ( );
 }
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alty> 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Is_simple_alloc : public _Cat_base< ((((is_same< typename _Alty::size_type, unsigned __int64> ::value && is_same< typename _Alty::difference_type, __int64> ::value) && is_same< typename _Alty::pointer, typename _Alty::value_type *> ::value) && is_same< typename _Alty::const_pointer, const typename _Alty::value_type *> ::value) && is_same< typename _Alty::reference, typename _Alty::value_type &> ::value) && is_same< typename _Alty::const_reference, const typename _Alty::value_type &> ::value>  { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Value_type> 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Simple_types { 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Value_type value_type; 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef size_t size_type; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef ptrdiff_t difference_type; 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef value_type *pointer; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef const value_type *const_pointer; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef value_type &reference; 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef const value_type &const_reference; 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alty, class 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Pointer> 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_voidptr { 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef typename _Alty::template rebind< void> ::other _Alvoid; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef typename _Alvoid::pointer type; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alty, class 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ty> 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_voidptr< _Alty, _Ty *>  { 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef void *type; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> struct _Get_first_parameter; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< template< class , class ...>  class _Ty, class 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_First, class ...
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Rest> 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _First type; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Newfirst, class 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ty> struct _Replace_first_parameter; 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Newfirst, 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class , class ...>  class _Ty, class 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_First, class ...
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Rest> 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Ty< _Newfirst, _Rest...>  type; 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_element_type { 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::element_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Get_first_parameter< _Uty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_ptr_difference_type { 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::difference_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< __int64> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty, class 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Other> 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_rebind_type { 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::template rebind< _Other> ::other> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Replace_first_parameter< _Other, _Uty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits
 {
 typedef typename _Get_element_type < _Ty > :: type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type < _Ty > :: type difference_type;

 template < class _Other >
  using rebind = typename _Get_rebind_type < _Ty, _Other > :: type;

 typedef typename _If < is_void < element_type > :: value,
  char &,
  typename add_lvalue_reference < element_type > :: type > :: type _Reftype;

 static pointer pointer_to ( _Reftype _Val )
  {
  return ( _Ty :: pointer_to ( _Val ) );
  }
 };
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits < _Ty * >
 {
 typedef _Ty element_type;
 typedef _Ty * pointer;
 typedef ptrdiff_t difference_type;

 template < class _Other >
  using rebind = _Other *;

 typedef typename _If < is_void < _Ty > :: value,
  char &,
  typename add_lvalue_reference < _Ty > :: type > :: type _Reftype;

 static pointer pointer_to ( _Reftype _Val )
  {
  return ( :: std :: addressof ( _Val ) );
  }
 };
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ptrty > inline
 void _Destroy ( _Ptrty _Ptr )
 {
 typedef typename pointer_traits < _Ptrty > :: element_type _Ty;
 _Ptr -> ~ _Ty ( );
 }
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ptrty > inline
 auto _Const_cast ( _Ptrty _Ptr )
 {
 using _Elem = typename pointer_traits < _Ptrty > :: element_type;
 using _Modifiable = remove_const_t < _Elem >;
 using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

 return ( pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) ) );
 }
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty > inline
 auto _Const_cast ( _Ty * _Ptr )
 {
 return ( const_cast < remove_const_t < _Ty > * > ( _Ptr ) );
 }
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_pointer_type { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Ty::value_type *> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_const_pointer_type { 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::const_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< const typename _Ty::value_type> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_void_pointer_type { 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::void_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< void> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_const_void_pointer_type { 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::const_void_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< const void> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_difference_type { 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::difference_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Get_ptr_difference_type< typename _Get_pointer_type< _Ty> ::type> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_size_type { 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::size_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename make_unsigned< typename _Get_difference_type< _Ty> ::type> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_propagate_on_container_copy { 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_copy_assignment> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_propagate_on_container_move { 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_move_assignment> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_propagate_on_container_swap { 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_swap> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_is_always_equal { 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::is_always_equal> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename is_empty< _Ty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> class allocator; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc >
 struct _Wrap_alloc;
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc> 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Unwrap_alloc { 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Alloc type; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc> 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Unwrap_alloc< _Wrap_alloc< _Alloc> >  { 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Alloc type; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc> using _Unwrap_alloc_t = typename _Unwrap_alloc< _Alloc> ::type; 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
 = void> 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Is_default_allocator : public false_type { 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Is_default_allocator< allocator< _Ty> , typename allocator< _Ty> ::_Not_user_specialized>  : public true_type { 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Alloc_allocate { 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
  class _Size_type,
  class _Const_void_pointer >
  static auto _Fn ( int, _Alloc & _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint )
   -> decltype ( _Al . allocate ( _Count, _Hint ) )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
  class _Size_type,
  class _Const_void_pointer >
  static auto _Fn ( _Wrap_int, _Alloc & _Al,
   _Size_type _Count,
   _Const_void_pointer )
   -> decltype ( _Al . allocate ( _Count ) )
  {
  return ( _Al . allocate ( _Count ) );
  }
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_construct_tag { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Void, class ...
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Types> 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_construct : public true_type { 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class ...
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Args> 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_construct< void_t< _Has_no_alloc_construct_tag, decltype(((std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class ...
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class ...
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Args> using _Uses_default_construct_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ::type; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_destroy_tag { 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
 = void> 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_destroy : public true_type { 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr> 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< _Has_no_alloc_destroy_tag, decltype(((std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))))> >  : public false_type { 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr> using _Uses_default_destroy_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ::type; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Alloc_max_size { 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( int, const _Ty & _Al ) noexcept
   -> decltype ( _Al . max_size ( ) )
  {
  return ( _Al . max_size ( ) );
  }
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( _Wrap_int, const _Ty & ) noexcept
   -> typename _Get_size_type < _Ty > :: type
  {
  return ( ( numeric_limits < typename _Get_size_type < _Ty > :: type > :: max ) ( )
   / sizeof ( typename _Ty :: value_type ) );
  }
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Alloc_select { 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( int, const _Ty & _Al )
   -> decltype ( ( _Ty ) _Al . select_on_container_copy_construction ( ) )
  {
  return ( _Al . select_on_container_copy_construction ( ) );
  }
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( _Wrap_int, const _Ty & _Al )
   -> _Ty
  {
  return ( _Al );
  }
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc >
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc :: value_type value_type;

 typedef typename _Get_pointer_type < _Alloc > :: type
  pointer;
 typedef typename _Get_const_pointer_type < _Alloc > :: type
  const_pointer;
 typedef typename _Get_void_pointer_type < _Alloc > :: type
  void_pointer;
 typedef typename _Get_const_void_pointer_type < _Alloc > :: type
  const_void_pointer;

 typedef typename _Get_size_type < _Alloc > :: type size_type;
 typedef typename _Get_difference_type < _Alloc > :: type difference_type;

 typedef typename _Get_propagate_on_container_copy < _Alloc > :: type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move < _Alloc > :: type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap < _Alloc > :: type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal < _Alloc > :: type
  is_always_equal;

 template < class _Other >
  using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

 template < class _Other >
  using rebind_traits = allocator_traits < rebind_alloc < _Other > >;

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count,
  const_void_pointer _Hint )
  {
  return ( _Alloc_allocate :: _Fn ( 0, _Al, _Count, _Hint ) );
  }

 static void deallocate ( _Alloc & _Al,
  pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( true_type, _Alloc &, _Ty * _Ptr,
   _Types && ... _Args )
  {
  :: new ( static_cast < void * > ( _Ptr ) )
   _Ty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( false_type, _Alloc & _Al, _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Construct1 ( _Uses_default_construct_t < _Unwrap_alloc_t < _Alloc >, _Ty *, _Types ... > ( ),
   _Al, _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc &, _Ty * _Ptr, true_type )
  {
  _Ptr -> ~ _Ty ( );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc & _Al, _Ty * _Ptr, false_type )
  {
  _Al . destroy ( _Ptr );
  }

 template < class _Ty >
  static void destroy ( _Alloc & _Al, _Ty * _Ptr )
  {
  _Destroy1 ( _Al, _Ptr, _Uses_default_destroy_t < _Unwrap_alloc_t < _Alloc >, _Ty * > ( ) );
  }

 static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Alloc_max_size :: _Fn ( 0, _Al ) );
  }

 static _Alloc select_on_container_copy_construction (
  const _Alloc & _Al )
  {
  return ( _Alloc_select :: _Fn ( 0, _Al ) );
  }
 };
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 class allocator
 {
public :
 static_assert ( ! is_const < _Ty > :: value,
  "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                             );

 typedef void _Not_user_specialized;

 typedef _Ty value_type;

 typedef value_type * pointer;
 typedef const value_type * const_pointer;

 typedef value_type & reference;
 typedef const value_type & const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template < class _Other >
  struct rebind
  {
  typedef allocator < _Other > other;
  };

 pointer address ( reference _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 const_pointer address ( const_reference _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 allocator ( ) noexcept
  {
  }

 allocator ( const allocator < _Ty > & ) noexcept
  {
  }

 template < class _Other >
  allocator ( const allocator < _Other > & ) noexcept
  {
  }

 template < class _Other >
  allocator < _Ty > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }

 void deallocate ( pointer _Ptr, size_type _Count )
  {
  _Deallocate ( _Ptr, _Count, sizeof ( _Ty ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count )
  {
  return ( static_cast < pointer > ( _Allocate ( _Count, sizeof ( _Ty ) ) ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count, const void * )
  {
  return ( allocate ( _Count ) );
  }

 template < class _Objty,
  class ... _Types >
  void construct ( _Objty * _Ptr, _Types && ... _Args )
  {
  :: new ( ( void * ) _Ptr ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Uty >
  void destroy ( _Uty * _Ptr )
  {
  _Ptr -> ~ _Uty ( );
  }

 size_t max_size ( ) const noexcept
  {
  return ( ( size_t ) ( - 1 ) / sizeof ( _Ty ) );
  }
 };
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack(8)
template<> 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
class allocator< void>  { 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
public: typedef void _Not_user_specialized; 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef void value_type; 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef void *pointer; 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef const void *const_pointer; 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Other> 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct rebind { 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef std::allocator< _Other>  other; 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
allocator() noexcept 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
allocator(const std::allocator< void>  &) noexcept 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Other >
  allocator ( const allocator < _Other > & ) noexcept
  {
  }
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Other >
  allocator < void > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#pragma pack(8)
template < class _Ty,
 class _Other > inline
 bool operator == ( const allocator < _Ty > &,
  const allocator < _Other > & ) noexcept
 {
 return ( true );
 }
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty,
 class _Other > inline
 bool operator != ( const allocator < _Ty > & _Left,
  const allocator < _Other > & _Right ) noexcept
 {
 return ( false );
 }
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct allocator_traits < allocator < _Ty > >
 {
 typedef allocator < _Ty > _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type * pointer;
 typedef const value_type * const_pointer;
 typedef void * void_pointer;
 typedef const void * const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template < class _Other >
  using rebind_alloc = allocator < _Other >;

 template < class _Other >
  using rebind_traits = allocator_traits < allocator < _Other > >;

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count,
  const_void_pointer _Hint )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }

 static void deallocate ( _Alloc & _Al,
  pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Objty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Objty * _Ptr,
   _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Uty >
  static void destroy ( _Alloc & _Al, _Uty * _Ptr )
  {
  _Al . destroy ( _Ptr );
  }

 static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Al . max_size ( ) );
  }

 static _Alloc select_on_container_copy_construction (
  const _Alloc & _Al )
  {
  return ( _Al );
  }
 };
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc >
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits < _Alloc > _Mytraits;

 typedef typename _Mytraits :: value_type value_type;

 typedef typename _Mytraits :: pointer pointer;
 typedef typename _Mytraits :: const_pointer const_pointer;
 typedef typename _Mytraits :: void_pointer void_pointer;
 typedef typename _Mytraits :: const_void_pointer const_void_pointer;

 typedef typename _If < is_void < value_type > :: value,
  int, value_type > :: type & reference;
 typedef typename _If < is_void < const value_type > :: value,
  const int, const value_type > :: type & const_reference;

 typedef typename _Mytraits :: size_type size_type;
 typedef typename _Mytraits :: difference_type difference_type;

 typedef typename _Mytraits :: propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits :: propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits :: propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits :: is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction ( _Nil = _Nil ( ) ) const
  {
  return ( _Mytraits :: select_on_container_copy_construction ( * this ) );
  }

 template < class _Other >
  struct rebind
  {
  typedef typename _Mytraits :: template rebind_alloc < _Other >
   _Other_alloc;
  typedef _Wrap_alloc < _Other_alloc > other;
  };

 pointer address ( reference _Val ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( _Val ) );
  }

 const_pointer address ( const_reference _Val ) const
  {
  return ( pointer_traits < const_pointer > :: pointer_to ( _Val ) );
  }

 _Wrap_alloc ( ) noexcept ( is_nothrow_default_constructible < _Alloc > :: value )
  : _Mybase ( )
  {
  }

 _Wrap_alloc ( const _Wrap_alloc & _Right ) noexcept
  : _Mybase ( _Right )
  {
  }

 _Wrap_alloc ( _Wrap_alloc && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right ) )
  {
  }

 template < class _Other >
  _Wrap_alloc ( _Other && _Right ) noexcept
  : _Mybase ( :: std :: forward < _Other > ( _Right ) )
  {
  }

 _Wrap_alloc & operator = ( const _Wrap_alloc & _Right )
  {
  _Mybase :: operator = ( _Right );
  return ( * this );
  }

 _Wrap_alloc & operator = ( _Wrap_alloc && _Right )
  {
  _Mybase :: operator = ( :: std :: move ( _Right ) );
  return ( * this );
  }

 template < class _Other >
  _Wrap_alloc & operator = ( _Other && _Right )
  {
  _Mybase :: operator = ( :: std :: forward < _Other > ( _Right ) );
  return ( * this );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count )
  {
  return ( _Mybase :: allocate ( _Count ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil ( ) )
  {
  return ( _Mytraits :: allocate ( * this, _Count, _Hint ) );
  }

 void deallocate ( pointer _Ptr, size_type _Count )
  {
  _Mybase :: deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  void construct ( _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Mytraits :: construct ( * this, _Ptr,
   :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Ty >
  void destroy ( _Ty * _Ptr )
  {
  _Mytraits :: destroy ( * this, _Ptr );
  }

 size_type max_size ( _Nil = _Nil ( ) ) const noexcept
  {
  return ( _Mytraits :: max_size ( * this ) );
  }
 };
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty,
 class _Other > inline
 bool operator == ( const _Wrap_alloc < _Ty > & _Left,
  const _Wrap_alloc < _Other > & _Right ) noexcept
 {
 return ( static_cast < const _Ty & > ( _Left )
  == static_cast < const _Other & > ( _Right ) );
 }
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty,
 class _Other > inline
 bool operator != ( const _Wrap_alloc < _Ty > & _Left,
  const _Wrap_alloc < _Other > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocca ( _Alty & _Left, const _Alty & _Right, true_type ) noexcept
 {
 _Left = _Right;
 }
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocca ( _Alty &, const _Alty &, false_type ) noexcept
 {
 }
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocca ( _Alty & _Left, const _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_copy_assignment _Tag;
 _Pocca ( _Left, _Right, _Tag );
 }
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocma ( _Alty & _Left, _Alty & _Right, true_type ) noexcept
 {
 _Left = :: std :: move ( _Right );
 }
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocma ( _Alty &, _Alty &, false_type ) noexcept
 {
 }
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocma ( _Alty & _Left, _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_move_assignment _Tag;
 _Pocma ( _Left, _Right, _Tag );
 }
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right, true_type ) noexcept
 {
 _Swap_adl ( _Left, _Right );
 }
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right, false_type ) noexcept
 {
 if ( _Left != _Right )
  {

  _Debug_message ( L"\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x66\x6f\x72\x20\x73\x77\x61\x70" L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79\x30", 1080 );



  }
 }
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_swap _Tag;
 _Pocs ( _Left, _Right, _Tag );
 }
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range1 ( _Ptr _First, _Ptr _Last, _Wrap_alloc < _Alloc > & _Al, false_type )
 {
 for (; _First != _Last; ++ _First )
  _Al . destroy ( _Unfancy ( _First ) );
 }
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range1 ( _Ptr, _Ptr, _Wrap_alloc < _Alloc > &, true_type )
 {

 }
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range ( _Ptr _First, _Ptr _Last, _Wrap_alloc < _Alloc > & _Al )
 {


 typedef typename _Alloc :: value_type _Val;
 _Destroy_range1 ( _First, _Last, _Al, typename conjunction <
  is_trivially_destructible < _Val >,
  _Uses_default_destroy < _Alloc, _Val * >> :: type ( ) );
 }
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt _First, _FwdIt _Last, false_type )
 {
 for (; _First != _Last; ++ _First )
  _Destroy ( _First );
 }
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt, _FwdIt, true_type )
 {

 }
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range ( _FwdIt _First, _FwdIt _Last )
 {


 _Destroy_range1 ( _First, _Last, is_trivially_destructible < _Iter_value_t < _FwdIt >> ( ) );
 }
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
enum memory_order { 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_relaxed, 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_consume, 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_acquire, 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_release, 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_acq_rel, 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_seq_cst
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
} memory_order; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef _Uint32t _Uint4_t; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef _Uint4_t _Atomic_integral_t; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef long _Atomic_flag_t; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef _Atomic_integral_t _Atomic_counter_t; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
inline _Atomic_integral_t _Get_atomic_count(const _Atomic_counter_t &_Counter) 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
return _Counter; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
inline void _Init_atomic_counter(_Atomic_counter_t &_Counter, _Atomic_integral_t 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
_Value) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
_Counter = _Value; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
extern "C" {
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock(); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock(); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
}
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
}
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
struct __declspec(align(16)) _SETJMP_FLOAT128 { 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Part[2]; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
} SETJMP_FLOAT128; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef SETJMP_FLOAT128 _JBTYPE; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
struct _JUMP_BUFFER { 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Frame; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rbx; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rsp; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rbp; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rsi; 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rdi; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R12; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R13; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R14; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R15; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rip; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned long MxCsr; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned short FpCsr; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned short Spare; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm6; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm7; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm8; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm9; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm10; 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm11; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm12; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm13; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm14; 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm15; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
} _JUMP_BUFFER; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef _JBTYPE jmp_buf[16]; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
int __cdecl _setjmp(jmp_buf _Buf); 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
#pragma warning(push)
#pragma warning(disable:4987)
__declspec(noreturn) void __cdecl longjmp(jmp_buf _Buf, int _Value) throw(...); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
}
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
#pragma warning(pop)
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
__pragma(pack ( pop )) 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
typedef 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
union __declspec(intrin_type) __declspec(align(8)) __m64 { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned __int64 m64_u64; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
float m64_f32[2]; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
char m64_i8[8]; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
short m64_i16[4]; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
int m64_i32[2]; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
__int64 m64_i64; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned char m64_u8[8]; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned short m64_u16[4]; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned m64_u32[2]; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
} __m64; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
}
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
typedef 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
union __declspec(intrin_type) __declspec(align(16)) __m128 { 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
float m128_f32[4]; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned __int64 m128_u64[2]; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
char m128_i8[16]; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
short m128_i16[8]; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
int m128_i32[4]; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
__int64 m128_i64[2]; 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned char m128_u8[16]; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned short m128_u16[8]; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned m128_u32[4]; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
} __m128; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern "C" {
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_add_ss(__m128 _A, __m128 _B); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_add_ps(__m128 _A, __m128 _B); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B); 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_div_ss(__m128 _A, __m128 _B); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_div_ps(__m128 _A, __m128 _B); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sqrt_ss(__m128 _A); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sqrt_ps(__m128 _A); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rcp_ss(__m128 _A); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rcp_ps(__m128 _A); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rsqrt_ss(__m128 _A); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rsqrt_ps(__m128 _A); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_min_ss(__m128 _A, __m128 _B); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_min_ps(__m128 _A, __m128 _B); 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_max_ss(__m128 _A, __m128 _B); 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_max_ps(__m128 _A, __m128 _B); 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_and_ps(__m128 _A, __m128 _B); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_or_ps(__m128 _A, __m128 _B); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B); 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comieq_ss(__m128 _A, __m128 _B); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comilt_ss(__m128 _A, __m128 _B); 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comile_ss(__m128 _A, __m128 _B); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comigt_ss(__m128 _A, __m128 _B); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comige_ss(__m128 _A, __m128 _B); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comineq_ss(__m128 _A, __m128 _B); 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomile_ss(__m128 _A, __m128 _B); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B); 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomige_ss(__m128 _A, __m128 _B); 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_cvt_ss2si(__m128 _A); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_cvtt_ss2si(__m128 _A); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cvt_si2ss(__m128, int); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern float _mm_cvtss_f32(__m128 _A); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __int64 _mm_cvtss_si64(__m128 _A); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __int64 _mm_cvttss_si64(__m128 _A); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cvtsi64_ss(__m128 _A, __int64 _B); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned _Imm8); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadh_pi(__m128, const __m64 *); 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_movehl_ps(__m128, __m128); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_movelh_ps(__m128, __m128); 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storeh_pi(__m64 *, __m128); 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadl_pi(__m128, const __m64 *); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storel_pi(__m64 *, __m128); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_movemask_ps(__m128 _A); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ss(float _A); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ps1(float _A); 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D); 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D); 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_setzero_ps(); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_load_ss(const float * _A); 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_load_ps1(const float * _A); 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_load_ps(const float * _A); 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadr_ps(const float * _A); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadu_ps(const float * _A); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_store_ss(float * _V, __m128 _A); 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_store_ps1(float * _V, __m128 _A); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_store_ps(float * _V, __m128 _A); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storer_ps(float * _V, __m128 _A); 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storeu_ps(float * _V, __m128 _A); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_prefetch(const char * _A, int _Sel); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_move_ss(__m128 _A, __m128 _B); 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_sfence(); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern unsigned _mm_getcsr(); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_setcsr(unsigned); 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
}
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
typedef 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
union __declspec(intrin_type) __declspec(align(16)) __m128i { 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
char m128i_i8[16]; 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
short m128i_i16[8]; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
int m128i_i32[4]; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
__int64 m128i_i64[2]; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned char m128i_u8[16]; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned short m128i_u16[8]; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned m128i_u32[4]; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned __int64 m128i_u64[2]; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
} __m128i; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
typedef 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
struct __declspec(intrin_type) __declspec(align(16)) __m128d { 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
double m128d_f64[2]; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
} __m128d; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern "C" {
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_add_sd(__m128d _A, __m128d _B); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_add_pd(__m128d _A, __m128d _B); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sqrt_pd(__m128d _A); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_div_sd(__m128d _A, __m128d _B); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_div_pd(__m128d _A, __m128d _B); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_min_sd(__m128d _A, __m128d _B); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_min_pd(__m128d _A, __m128d _B); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_max_sd(__m128d _A, __m128d _B); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_max_pd(__m128d _A, __m128d _B); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_and_pd(__m128d _A, __m128d _B); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_or_pd(__m128d _A, __m128d _B); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B); 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B); 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B); 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B); 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comieq_sd(__m128d _A, __m128d _B); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comilt_sd(__m128d _A, __m128d _B); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comile_sd(__m128d _A, __m128d _B); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comigt_sd(__m128d _A, __m128d _B); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comige_sd(__m128d _A, __m128d _B); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comineq_sd(__m128d _A, __m128d _B); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B); 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B); 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomile_sd(__m128d _A, __m128d _B); 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomige_sd(__m128d _A, __m128d _B); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtepi32_pd(__m128i _A); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtpd_epi32(__m128d _A); 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvttpd_epi32(__m128d _A); 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_cvtepi32_ps(__m128i _A); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtps_epi32(__m128 _A); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvttps_epi32(__m128 _A); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_cvtpd_ps(__m128d _A); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtps_pd(__m128 _A); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_cvtsd_si32(__m128d _A); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_cvttsd_si32(__m128d _A); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B); 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B); 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_movemask_pd(__m128d _A); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_load_pd(const double * _Dp); 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_load1_pd(const double * _Dp); 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadr_pd(const double * _Dp); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadu_pd(const double * _Dp); 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_load_sd(const double * _Dp); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadh_pd(__m128d _A, const double * _Dp); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadl_pd(__m128d _A, const double * _Dp); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_set_sd(double _W); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_set1_pd(double _A); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_set_pd(double _Z, double _Y); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_setr_pd(double _Y, double _Z); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_setzero_pd(); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_move_sd(__m128d _A, __m128d _B); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store_sd(double * _Dp, __m128d _A); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store1_pd(double * _Dp, __m128d _A); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store_pd(double * _Dp, __m128d _A); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storeu_pd(double * _Dp, __m128d _A); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storer_pd(double * _Dp, __m128d _A); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storeh_pd(double * _Dp, __m128d _A); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storel_pd(double * _Dp, __m128d _A); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi8(__m128i _A, __m128i _B); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B); 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B); 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_and_si128(__m128i _A, __m128i _B); 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_or_si128(__m128i _A, __m128i _B); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B); 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_si128(__m128i _A, int _Imm); 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_epi16(__m128i _A, int _Count); 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_epi32(__m128i _A, int _Count); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_epi64(__m128i _A, int _Count); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count); 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srai_epi16(__m128i _A, int _Count); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count); 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srai_epi32(__m128i _A, int _Count); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count); 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_si128(__m128i _A, int _Imm); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_epi16(__m128i _A, int _Count); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count); 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_epi32(__m128i _A, int _Count); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_epi64(__m128i _A, int _Count); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B); 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B); 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B); 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtsi32_si128(int _A); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_cvtsi128_si32(__m128i _A); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B); 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B); 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_extract_epi16(__m128i _A, int _Imm); 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm); 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_movemask_epi8(__m128i _A); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm); 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm); 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B); 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B); 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B); 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B); 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_load_si128(const __m128i * _P); 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_loadu_si128(const __m128i * _P); 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_loadl_epi64(const __m128i * _P); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1, __int64 _I0); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0); 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4, short _W3, short _W2, short _W1, short _W0); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12, char _B11, char _B10, char _B9, char _B8, char _B7, char _B6, char _B5, char _B4, char _B3, char _B2, char _B1, char _B0); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi32(int _I); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi16(short _W); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi8(char _B); 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setl_epi64(__m128i _Q); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3); 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3, short _W4, short _W5, short _W6, short _W7); 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12, char _B11, char _B10, char _B9, char _B8, char _B7, char _B6, char _B5, char _B4, char _B3, char _B2, char _B1, char _B0); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setzero_si128(); 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store_si128(__m128i * _P, __m128i _B); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storeu_si128(__m128i * _P, __m128i _B); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storel_epi64(__m128i * _P, __m128i _Q); 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char * _P); 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_move_epi64(__m128i _Q); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_pd(double * _Dp, __m128d _A); 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_si128(__m128i * _P, __m128i _A); 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_clflush(const void * _P); 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_lfence(); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_mfence(); 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_si32(int * _P, int _I); 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_pause(); 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern double _mm_cvtsd_f64(__m128d _A); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_castpd_ps(__m128d); 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_castpd_si128(__m128d); 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_castps_pd(__m128); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_castps_si128(__m128); 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_castsi128_ps(__m128i); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_castsi128_pd(__m128i); 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __int64 _mm_cvtsd_si64(__m128d); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __int64 _mm_cvttsd_si64(__m128d); 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtsi64_sd(__m128d, __int64); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtsi64_si128(__int64); 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __int64 _mm_cvtsi128_si64(__m128i); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
}
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern "C" {
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_addsub_ps(__m128, __m128); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_hadd_ps(__m128, __m128); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_hsub_ps(__m128, __m128); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_movehdup_ps(__m128); 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_moveldup_ps(__m128); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_addsub_pd(__m128d, __m128d); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_hadd_pd(__m128d, __m128d); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_hsub_pd(__m128d, __m128d); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_loaddup_pd(const double *); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_movedup_pd(__m128d); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128i _mm_lddqu_si128(const __m128i *); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern void _mm_monitor(const void *, unsigned, unsigned); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern void _mm_mwait(unsigned, unsigned); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadd_epi16(__m128i, __m128i); 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadd_epi32(__m128i, __m128i); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadds_epi16(__m128i, __m128i); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsub_epi16(__m128i, __m128i); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsub_epi32(__m128i, __m128i); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsubs_epi16(__m128i, __m128i); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_maddubs_epi16(__m128i, __m128i); 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_mulhrs_epi16(__m128i, __m128i); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_shuffle_epi8(__m128i, __m128i); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi8(__m128i, __m128i); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi16(__m128i, __m128i); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi32(__m128i, __m128i); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_alignr_epi8(__m128i, __m128i, int); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi8(__m128i); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi16(__m128i); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi32(__m128i); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
}
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern "C" {
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_blend_epi16(__m128i, __m128i, const int); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_blendv_epi8(__m128i, __m128i, __m128i mask); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_blend_ps(__m128, __m128, const int); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_blendv_ps(__m128, __m128, __m128); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_blend_pd(__m128d, __m128d, const int); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_dp_ps(__m128, __m128, const int); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_dp_pd(__m128d, __m128d, const int); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cmpeq_epi64(__m128i, __m128i); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epi8(__m128i, __m128i); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epi8(__m128i, __m128i); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epu16(__m128i, __m128i); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epu16(__m128i, __m128i); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epi32(__m128i, __m128i); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epi32(__m128i, __m128i); 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epu32(__m128i, __m128i); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epu32(__m128i, __m128i); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_mullo_epi32(__m128i, __m128i); 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_mul_epi32(__m128i, __m128i); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_testz_si128(__m128i, __m128i); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_testc_si128(__m128i, __m128i); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_testnzc_si128(__m128i, __m128i); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_insert_ps(__m128, __m128, const int); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_ps(__m128, const int); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_insert_epi8(__m128i, int, const int); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_insert_epi32(__m128i, int, const int); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_insert_epi64(__m128i, __int64, const int); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_epi8(__m128i, const int); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_epi32(__m128i, const int); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __int64 _mm_extract_epi64(__m128i, const int); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_minpos_epu16(__m128i); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_round_pd(__m128d, int); 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_round_sd(__m128d, __m128d, int); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_round_ps(__m128, int); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_round_ss(__m128, __m128, int); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi8_epi32(__m128i); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi16_epi32(__m128i); 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi8_epi64(__m128i); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi32_epi64(__m128i); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi16_epi64(__m128i); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi8_epi16(__m128i); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu8_epi32(__m128i); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu16_epi32(__m128i); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu8_epi64(__m128i); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu32_epi64(__m128i); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu16_epi64(__m128i); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu8_epi16(__m128i); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_packus_epi32(__m128i, __m128i); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_mpsadbw_epu8(__m128i, __m128i, const int); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_stream_load_si128(const __m128i *); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
}
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern "C" {
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpistrm(__m128i, __m128i, const int); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistri(__m128i, __m128i, const int); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpestrm(__m128i, int, __m128i, int, const int); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestri(__m128i, int, __m128i, int, const int); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistrz(__m128i, __m128i, const int); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistrc(__m128i, __m128i, const int); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistrs(__m128i, __m128i, const int); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistro(__m128i, __m128i, const int); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistra(__m128i, __m128i, const int); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestrz(__m128i, int, __m128i, int, const int); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestrc(__m128i, int, __m128i, int, const int); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestrs(__m128i, int, __m128i, int, const int); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestro(__m128i, int, __m128i, int, const int); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestra(__m128i, int, __m128i, int, const int); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpgt_epi64(__m128i, __m128i); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_popcnt_u32(unsigned); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __int64 _mm_popcnt_u64(unsigned __int64); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u8(unsigned, unsigned char); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u16(unsigned, unsigned short); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u32(unsigned, unsigned); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern "C" {
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesdec_si128(__m128i, __m128i); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesdeclast_si128(__m128i, __m128i); 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesenc_si128(__m128i, __m128i); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesenclast_si128(__m128i, __m128i); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesimc_si128(__m128i); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aeskeygenassist_si128(__m128i, const int); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_clmulepi64_si128(__m128i, __m128i, const int); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
}
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern "C" {
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
union __declspec(intrin_type) __declspec(align(32)) __m256 { 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
float m256_f32[8]; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
} __m256; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
struct __declspec(intrin_type) __declspec(align(32)) __m256d { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
double m256d_f64[4]; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
} __m256d; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
union __declspec(intrin_type) __declspec(align(32)) __m256i { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
char m256i_i8[32]; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
short m256i_i16[16]; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
int m256i_i32[8]; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
__int64 m256i_i64[4]; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned char m256i_u8[32]; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned short m256i_u16[16]; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned m256i_u32[8]; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned __int64 m256i_u64[4]; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
} __m256i; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_add_ps(__m256, __m256); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_and_ps(__m256, __m256); 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_div_ps(__m256, __m256); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int); 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d); 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d); 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_max_ps(__m256, __m256); 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_min_ps(__m256, __m256); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256); 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_or_ps(__m256, __m256); 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d); 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256); 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d); 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256); 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int); 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int); 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int); 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int); 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int); 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_comi_ss(__m128, __m128, const int); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i); 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d); 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtps_epi32(__m256); 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtps_pd(__m128); 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d); 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d); 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvttps_epi32(__m256); 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int); 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int); 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int); 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_zeroall(); 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_zeroupper(); 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i); 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i); 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permute_ps(__m256, int); 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_permute_ps(__m128, int); 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i); 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute_pd(__m256d, int); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_permute_pd(__m128d, int); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int); 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int); 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ss(const float *); 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_broadcast_ss(const float *); 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_broadcast_sd(const double *); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ps(const __m128 *); 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_broadcast_pd(const __m128d *); 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int); 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int); 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int); 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_load_pd(const double *); 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_store_pd(double *, __m256d); 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_load_ps(const float *); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_store_ps(float *, __m256); 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_loadu_pd(const double *); 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_storeu_pd(double *, __m256d); 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_loadu_ps(const float *); 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_storeu_ps(float *, __m256); 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_load_si256(const __m256i *); 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_store_si256(__m256i *, __m256i); 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_loadu_si256(const __m256i *); 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i); 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_maskload_pd(const double *, __m256i); 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_maskload_pd(const double *, __m128i); 
#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d); 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_maskload_ps(const float *, __m256i); 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256); 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_maskload_ps(const float *, __m128i); 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128); 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_movehdup_ps(__m256); 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_moveldup_ps(__m256); 
#line 886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_movedup_pd(__m256d); 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_lddqu_si256(const __m256i *); 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_si256(__m256i *, __m256i); 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_pd(double *, __m256d); 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_ps(float *, __m256); 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_rcp_ps(__m256); 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_rsqrt_ps(__m256); 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_sqrt_pd(__m256d); 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_sqrt_ps(__m256); 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_round_pd(__m256d, int); 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_round_ps(__m256, int); 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d); 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256); 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d); 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256); 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_si256(__m256i, __m256i); 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testc_si256(__m256i, __m256i); 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i); 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_pd(__m256d, __m256d); 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testc_pd(__m256d, __m256d); 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testz_pd(__m128d, __m128d); 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testc_pd(__m128d, __m128d); 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d); 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_ps(__m256, __m256); 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testc_ps(__m256, __m256); 
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testnzc_ps(__m256, __m256); 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testz_ps(__m128, __m128); 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testc_ps(__m128, __m128); 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testnzc_ps(__m128, __m128); 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_pd(__m256d); 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_ps(__m256); 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_setzero_pd(); 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_setzero_ps(); 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setzero_si256(); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_set_pd(double, double, double, double); 
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float); 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short); 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int); 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64, __int64, __int64); 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double); 
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float); 
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short); 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int); 
#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64, __int64, __int64); 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_set1_pd(double); 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_set1_ps(float); 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi8(char); 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi16(short); 
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi32(int); 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi64x(__int64); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_castpd_ps(__m256d); 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_castps_pd(__m256); 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_castps_si256(__m256); 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_castpd_si256(__m256d); 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_castsi256_ps(__m256i); 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_castsi256_pd(__m256i); 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_castps256_ps128(__m256); 
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d); 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_castsi256_si128(__m256i); 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_castps128_ps256(__m128); 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d); 
#line 1188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_castsi128_si256(__m128i); 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cvtph_ps(__m128i); 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtph_ps(__m128i); 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_cvtps_ph(__m128, const int); 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int); 
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _xgetbv(unsigned); 
#line 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsetbv(unsigned, unsigned __int64); 
#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsave(void *, unsigned __int64); 
#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsave64(void *, unsigned __int64); 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaveopt(void *, unsigned __int64); 
#line 1241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaveopt64(void *, unsigned __int64); 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsavec(void *, unsigned __int64); 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsavec64(void *, unsigned __int64); 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstor(const void *, unsigned __int64); 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstor64(const void *, unsigned __int64); 
#line 1268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaves(void *, unsigned __int64); 
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaves64(void *, unsigned __int64); 
#line 1278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstors(const void *, unsigned __int64); 
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstors64(const void *, unsigned __int64); 
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxsave(void *); 
#line 1289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxsave64(void *); 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxrstor(const void *); 
#line 1298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxrstor64(const void *); 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand16_step(unsigned short *); 
#line 1308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand32_step(unsigned *); 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand64_step(unsigned __int64 *); 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _readfsbase_u32(); 
#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _readgsbase_u32(); 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _readfsbase_u64(); 
#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _readgsbase_u64(); 
#line 1325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writefsbase_u32(unsigned); 
#line 1326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writegsbase_u32(unsigned); 
#line 1327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writefsbase_u64(unsigned __int64); 
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writegsbase_u64(unsigned __int64); 
#line 1334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128); 
#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d); 
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128); 
#line 1337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d); 
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128); 
#line 1339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d); 
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128); 
#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d); 
#line 1342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128); 
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d); 
#line 1344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128); 
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d); 
#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128); 
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d); 
#line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128); 
#line 1349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d); 
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256); 
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d); 
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256); 
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d); 
#line 1355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256); 
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d); 
#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256); 
#line 1358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d); 
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128); 
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d); 
#line 1366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128); 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d); 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256); 
#line 1370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d); 
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256); 
#line 1372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d); 
#line 1378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i); 
#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i); 
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i); 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i); 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i); 
#line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i); 
#line 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i); 
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i); 
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i); 
#line 1393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i); 
#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i); 
#line 1395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i); 
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i); 
#line 1397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i); 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i); 
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i); 
#line 1401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i); 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i); 
#line 1403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i); 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i); 
#line 1410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i); 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i); 
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i); 
#line 1413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i); 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_abs_epi8(__m256i); 
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_abs_epi16(__m256i); 
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_abs_epi32(__m256i); 
#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i); 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i); 
#line 1425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i); 
#line 1426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i); 
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i); 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i); 
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i); 
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i); 
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i); 
#line 1434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i); 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i); 
#line 1436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i); 
#line 1438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i); 
#line 1439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i); 
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i); 
#line 1441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i); 
#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i); 
#line 1444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i); 
#line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i); 
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i); 
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i); 
#line 1450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i); 
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i); 
#line 1452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i); 
#line 1454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i); 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i); 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i); 
#line 1458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i); 
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i); 
#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i); 
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i); 
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i); 
#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i); 
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i); 
#line 1468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i); 
#line 1470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i); 
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i); 
#line 1473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int); 
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_si256(__m256i, const int); 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int); 
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i); 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i); 
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i); 
#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_epi16(__m256i, int); 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int); 
#line 1490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int); 
#line 1492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i); 
#line 1493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i); 
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i); 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i); 
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i); 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i); 
#line 1501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srai_epi16(__m256i, int); 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int); 
#line 1504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i); 
#line 1506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i); 
#line 1508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i); 
#line 1509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i); 
#line 1510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i); 
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_epi16(__m256i, int); 
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int); 
#line 1514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int); 
#line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i); 
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i); 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i); 
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i); 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int); 
#line 1528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_blend_epi32(__m256i, __m256i, const int); 
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int); 
#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i); 
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int); 
#line 1535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i); 
#line 1536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i); 
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i); 
#line 1538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i); 
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i); 
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i); 
#line 1542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i); 
#line 1543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i); 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i); 
#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i); 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i); 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i); 
#line 1550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i); 
#line 1551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int); 
#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int); 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int); 
#line 1556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int); 
#line 1557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int); 
#line 1563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_broadcastss_ps(__m128); 
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d); 
#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastb_epi8(__m128i); 
#line 1567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i); 
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i); 
#line 1569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i); 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcastss_ps(__m128); 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d); 
#line 1574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i); 
#line 1575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i); 
#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i); 
#line 1577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i); 
#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i); 
#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i); 
#line 1587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i); 
#line 1588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i); 
#line 1589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i); 
#line 1590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i); 
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i); 
#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i); 
#line 1594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i); 
#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i); 
#line 1596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i); 
#line 1597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i); 
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i); 
#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_epi8(__m256i); 
#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_maskload_epi32(const int *, __m128i); 
#line 1613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_maskload_epi64(const __int64 *, __m128i); 
#line 1616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_epi32(int *, __m128i, __m128i); 
#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_epi64(__int64 *, __m128i, __m128i); 
#line 1623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_maskload_epi32(const int *, __m256i); 
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_maskload_epi64(const __int64 *, __m256i); 
#line 1628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_epi32(int *, __m256i, __m256i); 
#line 1631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_epi64(__int64 *, __m256i, __m256i); 
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i); 
#line 1640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i); 
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int); 
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int); 
#line 1645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int); 
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_stream_load_si256(const __m256i *); 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d, const double *, __m128i, __m256d, const int); 
#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256, const float *, __m256i, __m256, const int); 
#line 1668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d, const double *, __m256i, __m256d, const int); 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128, const float *, __m256i, __m128, const int); 
#line 1679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d, const double *, __m128i, __m128d, const int); 
#line 1684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128, const float *, __m128i, __m128, const int); 
#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d, const double *, __m128i, __m128d, const int); 
#line 1694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128, const float *, __m128i, __m128, const int); 
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i, const int *, __m256i, __m256i, const int); 
#line 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i, const __int64 *, __m128i, __m256i, const int); 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i, const int *, __m256i, __m128i, const int); 
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i, const __int64 *, __m256i, __m256i, const int); 
#line 1722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i, const int *, __m128i, __m128i, const int); 
#line 1727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int); 
#line 1732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i, const int *, __m128i, __m128i, const int); 
#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int); 
#line 1747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_i32gather_pd(const double *, __m128i, const int); 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_i32gather_ps(const float *, __m256i, const int); 
#line 1753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_i64gather_pd(const double *, __m256i, const int); 
#line 1756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_i64gather_ps(const float *, __m256i, const int); 
#line 1760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_i32gather_pd(const double *, __m128i, const int); 
#line 1763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_i32gather_ps(const float *, __m128i, const int); 
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_i64gather_pd(const double *, __m128i, const int); 
#line 1769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_i64gather_ps(const float *, __m128i, const int); 
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_i32gather_epi32(const int *, __m256i, const int); 
#line 1776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_i32gather_epi64(const __int64 *, __m128i, const int); 
#line 1779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_i64gather_epi32(const int *, __m256i, const int); 
#line 1782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_i64gather_epi64(const __int64 *, __m256i, const int); 
#line 1786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i32gather_epi32(const int *, __m128i, const int); 
#line 1789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i32gather_epi64(const __int64 *, __m128i, const int); 
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i64gather_epi32(const int *, __m128i, const int); 
#line 1795 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i64gather_epi64(const __int64 *, __m128i, const int); 
#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _bextr_u32(unsigned, unsigned, unsigned); 
#line 1808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _blsi_u32(unsigned); 
#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _blsmsk_u32(unsigned); 
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _blsr_u32(unsigned); 
#line 1811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _bzhi_u32(unsigned, unsigned); 
#line 1813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _mulx_u32(unsigned, unsigned, unsigned *); 
#line 1816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _pdep_u32(unsigned, unsigned); 
#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _pext_u32(unsigned, unsigned); 
#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _rorx_u32(unsigned, const unsigned); 
#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int _sarx_i32(int, unsigned); 
#line 1824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _shlx_u32(unsigned, unsigned); 
#line 1826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _shrx_u32(unsigned, unsigned); 
#line 1830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _bextr_u64(unsigned __int64, unsigned, unsigned); 
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _blsi_u64(unsigned __int64); 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _blsmsk_u64(unsigned __int64); 
#line 1835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _blsr_u64(unsigned __int64); 
#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _bzhi_u64(unsigned __int64, unsigned); 
#line 1838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _mulx_u64(unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _pdep_u64(unsigned __int64, unsigned __int64); 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _pext_u64(unsigned __int64, unsigned __int64); 
#line 1845 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _rorx_u64(unsigned __int64, const unsigned); 
#line 1847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _sarx_i64(__int64, unsigned); 
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _shlx_u64(unsigned __int64, unsigned); 
#line 1851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _shrx_u64(unsigned __int64, unsigned); 
#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _lzcnt_u32(unsigned); 
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _lzcnt_u64(unsigned __int64); 
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _tzcnt_u32(unsigned); 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _invpcid(unsigned, void *); 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void _Store_HLERelease(volatile long *, long); 
#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void _StorePointer_HLERelease(void *volatile *, void *); 
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchange_HLEAcquire(volatile long *, long); 
#line 1891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchange_HLERelease(volatile long *, long); 
#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedExchangePointer_HLEAcquire(void *volatile *, void *); 
#line 1893 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedExchangePointer_HLERelease(void *volatile *, void *); 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedCompareExchange_HLEAcquire(volatile long *, long, long); 
#line 1896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedCompareExchange_HLERelease(volatile long *, long, long); 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedCompareExchange64_HLEAcquire(volatile __int64 *, __int64, __int64); 
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedCompareExchange64_HLERelease(volatile __int64 *, __int64, __int64); 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedCompareExchangePointer_HLEAcquire(void *volatile *, void *, void *); 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedCompareExchangePointer_HLERelease(void *volatile *, void *, void *); 
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchangeAdd_HLEAcquire(volatile long *, long); 
#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchangeAdd_HLERelease(volatile long *, long); 
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedAnd_HLEAcquire(volatile long *, long); 
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedAnd_HLERelease(volatile long *, long); 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedOr_HLEAcquire(volatile long *, long); 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedOr_HLERelease(volatile long *, long); 
#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedXor_HLEAcquire(volatile long *, long); 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedXor_HLERelease(volatile long *, long); 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset_HLEAcquire(long *, long); 
#line 1913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset_HLERelease(long *, long); 
#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *, long); 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset_HLERelease(long *, long); 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void _Store64_HLERelease(volatile __int64 *, __int64); 
#line 1919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchange64_HLEAcquire(volatile __int64 *, __int64); 
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchange64_HLERelease(volatile __int64 *, __int64); 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchangeAdd64_HLEAcquire(volatile __int64 *, __int64); 
#line 1923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchangeAdd64_HLERelease(volatile __int64 *, __int64); 
#line 1925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedAnd64_HLEAcquire(volatile __int64 *, __int64); 
#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedAnd64_HLERelease(volatile __int64 *, __int64); 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedOr64_HLEAcquire(volatile __int64 *, __int64); 
#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedOr64_HLERelease(volatile __int64 *, __int64); 
#line 1929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedXor64_HLEAcquire(volatile __int64 *, __int64); 
#line 1930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedXor64_HLERelease(volatile __int64 *, __int64); 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *, __int64); 
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *, __int64); 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *, __int64); 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *, __int64); 
#line 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _xbegin(); 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xend(); 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xabort(const unsigned); 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _xtest(); 
#line 1960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed16_step(unsigned short *); 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed32_step(unsigned *); 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed64_step(unsigned __int64 *); 
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned short __cdecl _load_be_u16(const void *); 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _load_be_u32(const void *); 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _load_be_u64(const void *); 
#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _store_be_u16(void *, unsigned short); 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _store_be_u32(void *, unsigned); 
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _store_be_u64(void *, unsigned __int64); 
#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i); 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i); 
#line 2014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i); 
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int); 
#line 2017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i); 
#line 2018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i); 
#line 2019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i); 
#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_set_ptr_bounds(const void *, size_t); 
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t); 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_copy_ptr_bounds(const void *, const void *); 
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_init_ptr_bounds(const void *); 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *); 
#line 2029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_chk_ptr_lbounds(const void *); 
#line 2030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_chk_ptr_ubounds(const void *); 
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t); 
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_load_ptr_bounds(const void **, const void *); 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern const void *__cdecl _bnd_get_ptr_lbound(const void *); 
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern const void *__cdecl _bnd_get_ptr_ubound(const void *); 
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
}
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
extern "C" {
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_macc_ps(__m128, __m128, __m128); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_macc_pd(__m128d, __m128d, __m128d); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_macc_ss(__m128, __m128, __m128); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_macc_sd(__m128d, __m128d, __m128d); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_maddsub_ps(__m128, __m128, __m128); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_msubadd_ps(__m128, __m128, __m128); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_msub_ps(__m128, __m128, __m128); 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_msub_pd(__m128d, __m128d, __m128d); 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_msub_ss(__m128, __m128, __m128); 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_msub_sd(__m128d, __m128d, __m128d); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmacc_ps(__m128, __m128, __m128); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmacc_ss(__m128, __m128, __m128); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d); 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmsub_ps(__m128, __m128, __m128); 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmsub_ss(__m128, __m128, __m128); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d); 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddw_epi8(__m128i); 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epi8(__m128i); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epi8(__m128i); 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epi16(__m128i); 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epi16(__m128i); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epi32(__m128i); 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddw_epu8(__m128i); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epu8(__m128i); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epu8(__m128i); 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epu16(__m128i); 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epu16(__m128i); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epu32(__m128i); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_hsubw_epi8(__m128i); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_hsubd_epi16(__m128i); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_hsubq_epi32(__m128i); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_cmov_si128(__m128i, __m128i, __m128i); 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i); 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi8(__m128i, __m128i); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi16(__m128i, __m128i); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi32(__m128i, __m128i); 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi64(__m128i, __m128i); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi8(__m128i, int); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi16(__m128i, int); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi32(__m128i, int); 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi64(__m128i, int); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi8(__m128i, __m128i); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi16(__m128i, __m128i); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi32(__m128i, __m128i); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi64(__m128i, __m128i); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi8(__m128i, __m128i); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi16(__m128i, __m128i); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi32(__m128i, __m128i); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi64(__m128i, __m128i); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu8(__m128i, __m128i, int); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu16(__m128i, __m128i, int); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu32(__m128i, __m128i, int); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu64(__m128i, __m128i, int); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi8(__m128i, __m128i, int); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi16(__m128i, __m128i, int); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi32(__m128i, __m128i, int); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi64(__m128i, __m128i, int); 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_frcz_ps(__m128); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_frcz_pd(__m128d); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_frcz_ss(__m128, __m128); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_frcz_sd(__m128d, __m128d); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_macc_ps(__m256, __m256, __m256); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_maddsub_ps(__m256, __m256, __m256); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_msubadd_ps(__m256, __m256, __m256); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_msub_ps(__m256, __m256, __m256); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_nmacc_ps(__m256, __m256, __m256); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_nmsub_ps(__m256, __m256, __m256); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_frcz_ps(__m256); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_frcz_pd(__m256d); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void __llwpcb(void *); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void *__slwpcb(); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void __lwpval32(unsigned, unsigned, unsigned); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned char __lwpins32(unsigned, unsigned, unsigned); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void __lwpval64(unsigned __int64, unsigned, unsigned); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned char __lwpins64(unsigned __int64, unsigned, unsigned); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _bextr_u32(unsigned, unsigned, unsigned); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _andn_u32(unsigned, unsigned); 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _tzcnt_u32(unsigned); 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _lzcnt_u32(unsigned); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsr_u32(unsigned); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsmsk_u32(unsigned); 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsi_u32(unsigned); 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _bextr_u64(unsigned __int64, unsigned, unsigned); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _lzcnt_u64(unsigned __int64); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsr_u64(unsigned __int64); 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsmsk_u64(unsigned __int64); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsi_u64(unsigned __int64); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _bextri_u32(unsigned, unsigned); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcfill_u32(unsigned); 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsfill_u32(unsigned); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcs_u32(unsigned); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _tzmsk_u32(unsigned); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcic_u32(unsigned); 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsic_u32(unsigned); 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _t1mskc_u32(unsigned); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcmsk_u32(unsigned); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blci_u32(unsigned); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _bextri_u64(unsigned __int64, unsigned); 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcfill_u64(unsigned __int64); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsfill_u64(unsigned __int64); 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcs_u64(unsigned __int64); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _tzmsk_u64(unsigned __int64); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcic_u64(unsigned __int64); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsic_u64(unsigned __int64); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _t1mskc_u64(unsigned __int64); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcmsk_u64(unsigned __int64); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blci_u64(unsigned __int64); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_monitorx(const void *, unsigned, unsigned); 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_mwaitx(unsigned, unsigned, unsigned); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_clzero(const void *); 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
}
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
extern "C" {
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_AddressOfReturnAddress(); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedAnd16_np(volatile short * _Value, short _Mask); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedAnd64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedAnd8_np(volatile char * _Value, char _Mask); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedAnd_np(volatile long * _Value, long _Mask); 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _InterlockedCompareExchange128(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _InterlockedCompareExchange128_np(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedCompareExchange16_np(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedCompareExchange64_np(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_InterlockedCompareExchangePointer(void *volatile * _Destination, void * _Exchange, void * _Comparand); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_InterlockedCompareExchangePointer_np(void *volatile * _Destination, void * _Exchange, void * _Comparand); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedCompareExchange_np(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedDecrement(volatile long * _Addend); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedDecrement16(volatile short * _Addend); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedDecrement64(volatile __int64 * _Addend); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_InterlockedExchangePointer(void *volatile * _Target, void * _Value); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedIncrement(volatile long * _Addend); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedIncrement16(volatile short * _Addend); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedIncrement64(volatile __int64 * _Addend); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedOr16_np(volatile short * _Value, short _Mask); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedOr64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedOr8_np(volatile char * _Value, char _Mask); 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedOr_np(volatile long * _Value, long _Mask); 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedXor16_np(volatile short * _Value, short _Mask); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedXor64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedXor8_np(volatile char * _Value, char _Mask); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedXor_np(volatile long * _Value, long _Mask); 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _ReadBarrier(); 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _ReadWriteBarrier(); 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_ReturnAddress(); 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _WriteBarrier(); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsbyte(unsigned long, unsigned char); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsdword(unsigned long, unsigned long); 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsqword(unsigned long, unsigned __int64); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsword(unsigned long, unsigned short); 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __code_seg(const char *); 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cpuid(int [4], int); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cpuidex(int [4], int, int); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cdecl __debugbreak(); 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 __emul(int, int); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __emulu(unsigned, unsigned); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__declspec(noreturn) void __fastfail(unsigned); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __faststorefence(); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __getcallerseflags(); 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __halt(); 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __inbyte(unsigned short); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __inbytestring(unsigned short, unsigned char *, unsigned long); 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsbyte(unsigned long); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsdword(unsigned long); 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsqword(unsigned long); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsword(unsigned long); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __indword(unsigned short); 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __indwordstring(unsigned short, unsigned long *, unsigned long); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __int2c(); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __invlpg(void *); 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __inword(unsigned short); 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __inwordstring(unsigned short, unsigned short *, unsigned long); 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __lidt(void *); 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __ll_lshift(unsigned __int64, int); 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 __ll_rshift(__int64, int); 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __lzcnt(unsigned); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __lzcnt16(unsigned short); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __lzcnt64(unsigned __int64); 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsb(unsigned char *, const unsigned char *, size_t); 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsd(unsigned long *, const unsigned long *, size_t); 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsq(unsigned __int64 *, const unsigned __int64 *, size_t); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsw(unsigned short *, const unsigned short *, size_t); 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 __mulh(__int64, __int64); 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __nop(); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __nvreg_restore_fence(); 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __nvreg_save_fence(); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outbyte(unsigned short, unsigned char); 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outbytestring(unsigned short, unsigned char *, unsigned long); 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outdword(unsigned short, unsigned long); 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outdwordstring(unsigned short, unsigned long *, unsigned long); 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outword(unsigned short, unsigned short); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outwordstring(unsigned short, unsigned short *, unsigned long); 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __popcnt(unsigned); 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __popcnt16(unsigned short); 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __popcnt64(unsigned __int64); 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __rdtsc(); 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __rdtscp(unsigned *); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr0(); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr2(); 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr3(); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr4(); 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr8(); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readdr(unsigned); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readeflags(); 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __readgsbyte(unsigned long); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __readgsdword(unsigned long); 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readgsqword(unsigned long); 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __readgsword(unsigned long); 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readmsr(unsigned long); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readpmc(unsigned long); 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __segmentlimit(unsigned long); 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __sidt(void *); 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosb(unsigned char *, unsigned char, size_t); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosd(unsigned long *, unsigned long, size_t); 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosq(unsigned __int64 *, unsigned __int64, size_t); 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosw(unsigned short *, unsigned short, size_t); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_clgi(); 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_invlpga(void *, int); 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_skinit(int); 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_stgi(); 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_vmload(size_t); 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_vmrun(size_t); 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_vmsave(size_t); 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __ud2(); 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __ull_rshift(unsigned __int64, int); 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __umulh(unsigned __int64, unsigned __int64); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __vmx_off(); 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_on(unsigned __int64 *); 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmclear(unsigned __int64 *); 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmlaunch(); 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmptrld(unsigned __int64 *); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __vmx_vmptrst(unsigned __int64 *); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmread(size_t, size_t *); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmresume(); 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmwrite(size_t, size_t); 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __wbinvd(); 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr0(unsigned __int64); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr3(unsigned __int64); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr4(unsigned __int64); 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr8(unsigned __int64); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writedr(unsigned, unsigned __int64); 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writeeflags(unsigned __int64); 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsbyte(unsigned long, unsigned char); 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsdword(unsigned long, unsigned long); 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsqword(unsigned long, unsigned __int64); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsword(unsigned long, unsigned short); 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writemsr(unsigned long, unsigned __int64); 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittest(const long *, long); 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittest64(const __int64 *, __int64); 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandcomplement(long *, long); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandcomplement64(__int64 *, __int64); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandreset(long *, long); 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandreset64(__int64 *, __int64); 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandset(long *, long); 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandset64(__int64 *, __int64); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __cdecl _byteswap_ulong(unsigned long); 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __cdecl _byteswap_ushort(unsigned short); 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cdecl _disable(); 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cdecl _enable(); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandreset(volatile long *, long); 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandreset64(volatile __int64 *, __int64); 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandset(volatile long *, long); 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandset64(volatile __int64 *, __int64); 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __cdecl _lrotl(unsigned long, int); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __cdecl _lrotr(unsigned long, int); 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _m_prefetch(void *); 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _m_prefetchw(const volatile void *); 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_abs_epi16(__m128i); 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_abs_epi32(__m128i); 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_abs_epi8(__m128i); 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi16(__m128i, __m128i); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi32(__m128i, __m128i); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi64(__m128i, __m128i); 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi8(__m128i, __m128i); 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_add_pd(__m128d, __m128d); 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_add_ps(__m128, __m128); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_add_sd(__m128d, __m128d); 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_add_ss(__m128, __m128); 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epi16(__m128i, __m128i); 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epi8(__m128i, __m128i); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epu16(__m128i, __m128i); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epu8(__m128i, __m128i); 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_addsub_pd(__m128d, __m128d); 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_addsub_ps(__m128, __m128); 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_alignr_epi8(__m128i, __m128i, int); 
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_and_pd(__m128d, __m128d); 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_and_ps(__m128, __m128); 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_and_si128(__m128i, __m128i); 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_andnot_pd(__m128d, __m128d); 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_andnot_ps(__m128, __m128); 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_andnot_si128(__m128i, __m128i); 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_avg_epu16(__m128i, __m128i); 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_avg_epu8(__m128i, __m128i); 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_blend_epi16(__m128i, __m128i, int); 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_blend_pd(__m128d, __m128d, int); 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_blend_ps(__m128, __m128, int); 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i); 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d); 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_blendv_ps(__m128, __m128, __m128); 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clflush(const void *); 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clflushopt(const void *); 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clwb(const void *); 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clzero(const void *); 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi16(__m128i, __m128i); 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi32(__m128i, __m128i); 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi64(__m128i, __m128i); 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi8(__m128i, __m128i); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpeq_pd(__m128d, __m128d); 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpeq_ps(__m128, __m128); 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpeq_sd(__m128d, __m128d); 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpeq_ss(__m128, __m128); 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestra(__m128i, int, __m128i, int, int); 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestrc(__m128i, int, __m128i, int, int); 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestri(__m128i, int, __m128i, int, int); 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int); 
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestro(__m128i, int, __m128i, int, int); 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestrs(__m128i, int, __m128i, int, int); 
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestrz(__m128i, int, __m128i, int, int); 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpge_pd(__m128d, __m128d); 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpge_ps(__m128, __m128); 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpge_sd(__m128d, __m128d); 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpge_ss(__m128, __m128); 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi16(__m128i, __m128i); 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi32(__m128i, __m128i); 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi64(__m128i, __m128i); 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi8(__m128i, __m128i); 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpgt_pd(__m128d, __m128d); 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpgt_ps(__m128, __m128); 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpgt_sd(__m128d, __m128d); 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpgt_ss(__m128, __m128); 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistra(__m128i, __m128i, int); 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistrc(__m128i, __m128i, int); 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistri(__m128i, __m128i, int); 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpistrm(__m128i, __m128i, int); 
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistro(__m128i, __m128i, int); 
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistrs(__m128i, __m128i, int); 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistrz(__m128i, __m128i, int); 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmple_pd(__m128d, __m128d); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmple_ps(__m128, __m128); 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmple_sd(__m128d, __m128d); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmple_ss(__m128, __m128); 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmplt_epi16(__m128i, __m128i); 
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmplt_epi32(__m128i, __m128i); 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmplt_epi8(__m128i, __m128i); 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmplt_pd(__m128d, __m128d); 
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmplt_ps(__m128, __m128); 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmplt_sd(__m128d, __m128d); 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmplt_ss(__m128, __m128); 
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpneq_pd(__m128d, __m128d); 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpneq_ps(__m128, __m128); 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpneq_sd(__m128d, __m128d); 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpneq_ss(__m128, __m128); 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnge_pd(__m128d, __m128d); 
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnge_ps(__m128, __m128); 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnge_sd(__m128d, __m128d); 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnge_ss(__m128, __m128); 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpngt_pd(__m128d, __m128d); 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpngt_ps(__m128, __m128); 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpngt_sd(__m128d, __m128d); 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpngt_ss(__m128, __m128); 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnle_pd(__m128d, __m128d); 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnle_ps(__m128, __m128); 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnle_sd(__m128d, __m128d); 
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnle_ss(__m128, __m128); 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnlt_pd(__m128d, __m128d); 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnlt_ps(__m128, __m128); 
#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnlt_sd(__m128d, __m128d); 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnlt_ss(__m128, __m128); 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpord_pd(__m128d, __m128d); 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpord_ps(__m128, __m128); 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpord_sd(__m128d, __m128d); 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpord_ss(__m128, __m128); 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpunord_pd(__m128d, __m128d); 
#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpunord_ps(__m128, __m128); 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpunord_sd(__m128d, __m128d); 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpunord_ss(__m128, __m128); 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comieq_sd(__m128d, __m128d); 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comieq_ss(__m128, __m128); 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comige_sd(__m128d, __m128d); 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comige_ss(__m128, __m128); 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comigt_sd(__m128d, __m128d); 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comigt_ss(__m128, __m128); 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comile_sd(__m128d, __m128d); 
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comile_ss(__m128, __m128); 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comilt_sd(__m128d, __m128d); 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comilt_ss(__m128, __m128); 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comineq_sd(__m128d, __m128d); 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comineq_ss(__m128, __m128); 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_crc32_u16(unsigned, unsigned short); 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_crc32_u32(unsigned, unsigned); 
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64); 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_crc32_u8(unsigned, unsigned char); 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvt_si2ss(__m128, int); 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvt_ss2si(__m128); 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi16_epi32(__m128i); 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi16_epi64(__m128i); 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi32_epi64(__m128i); 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtepi32_pd(__m128i); 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtepi32_ps(__m128i); 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi8_epi16(__m128i); 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi8_epi32(__m128i); 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi8_epi64(__m128i); 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu16_epi32(__m128i); 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu16_epi64(__m128i); 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu32_epi64(__m128i); 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu8_epi16(__m128i); 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu8_epi32(__m128i); 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu8_epi64(__m128i); 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtpd_epi32(__m128d); 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtpd_ps(__m128d); 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtps_epi32(__m128); 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtps_pd(__m128); 
#line 800 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvtsd_si32(__m128d); 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsd_si64(__m128d); 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsd_si64x(__m128d); 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtsd_ss(__m128, __m128d); 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvtsi128_si32(__m128i); 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsi128_si64(__m128i); 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsi128_si64x(__m128i); 
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtsi32_sd(__m128d, int); 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtsi32_si128(int); 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtsi64_sd(__m128d, __int64); 
#line 810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtsi64_si128(__int64); 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtsi64_ss(__m128, __int64); 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtsi64x_sd(__m128d, __int64); 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtsi64x_si128(__int64); 
#line 814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtsi64x_ss(__m128, __int64); 
#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtss_sd(__m128d, __m128); 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtss_si64(__m128); 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtss_si64x(__m128); 
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvtt_ss2si(__m128); 
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvttpd_epi32(__m128d); 
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvttps_epi32(__m128); 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvttsd_si32(__m128d); 
#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttsd_si64(__m128d); 
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttsd_si64x(__m128d); 
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttss_si64(__m128); 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttss_si64x(__m128); 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_div_pd(__m128d, __m128d); 
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_div_ps(__m128, __m128); 
#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_div_sd(__m128d, __m128d); 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_div_ss(__m128, __m128); 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_dp_pd(__m128d, __m128d, int); 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_dp_ps(__m128, __m128, int); 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_epi16(__m128i, int); 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_epi32(__m128i, int); 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_extract_epi64(__m128i, int); 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_epi8(__m128i, int); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_ps(__m128, int); 
#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_extract_si64(__m128i, __m128i); 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_extracti_si64(__m128i, int, int); 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_getcsr(); 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hadd_epi16(__m128i, __m128i); 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hadd_epi32(__m128i, __m128i); 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_hadd_pd(__m128d, __m128d); 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_hadd_ps(__m128, __m128); 
#line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hadds_epi16(__m128i, __m128i); 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hsub_epi16(__m128i, __m128i); 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hsub_epi32(__m128i, __m128i); 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_hsub_pd(__m128d, __m128d); 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_hsub_ps(__m128, __m128); 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hsubs_epi16(__m128i, __m128i); 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi16(__m128i, int, int); 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi32(__m128i, int, int); 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi64(__m128i, __int64, int); 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi8(__m128i, int, int); 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_insert_ps(__m128, __m128, int); 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_si64(__m128i, __m128i); 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_inserti_si64(__m128i, __m128i, int, int); 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_lddqu_si128(const __m128i *); 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_lfence(); 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_load1_pd(const double *); 
#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_load_pd(const double *); 
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_load_ps(const float *); 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_load_ps1(const float *); 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_load_sd(const double *); 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_load_si128(const __m128i *); 
#line 873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_load_ss(const float *); 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loaddup_pd(const double *); 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadh_pd(__m128d, const double *); 
#line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadh_pi(__m128, const __m64 *); 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_loadl_epi64(const __m128i *); 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadl_pd(__m128d, const double *); 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadl_pi(__m128, const __m64 *); 
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadr_pd(const double *); 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadr_ps(const float *); 
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadu_pd(const double *); 
#line 883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadu_ps(const float *); 
#line 884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_loadu_si128(const __m128i *); 
#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_madd_epi16(__m128i, __m128i); 
#line 886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_maddubs_epi16(__m128i, __m128i); 
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_maskmoveu_si128(__m128i, __m128i, char *); 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epi16(__m128i, __m128i); 
#line 890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epi32(__m128i, __m128i); 
#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epi8(__m128i, __m128i); 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epu16(__m128i, __m128i); 
#line 893 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epu32(__m128i, __m128i); 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epu8(__m128i, __m128i); 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_max_pd(__m128d, __m128d); 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_max_ps(__m128, __m128); 
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_max_sd(__m128d, __m128d); 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_max_ss(__m128, __m128); 
#line 899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_mfence(); 
#line 900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epi16(__m128i, __m128i); 
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epi32(__m128i, __m128i); 
#line 902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epi8(__m128i, __m128i); 
#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epu16(__m128i, __m128i); 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epu32(__m128i, __m128i); 
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epu8(__m128i, __m128i); 
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_min_pd(__m128d, __m128d); 
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_min_ps(__m128, __m128); 
#line 908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_min_sd(__m128d, __m128d); 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_min_ss(__m128, __m128); 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_minpos_epu16(__m128i); 
#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_monitor(const void *, unsigned, unsigned); 
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_move_epi64(__m128i); 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_move_sd(__m128d, __m128d); 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_move_ss(__m128, __m128); 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_movedup_pd(__m128d); 
#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_movehdup_ps(__m128); 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_movehl_ps(__m128, __m128); 
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_moveldup_ps(__m128); 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_movelh_ps(__m128, __m128); 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_movemask_epi8(__m128i); 
#line 921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_movemask_pd(__m128d); 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_movemask_ps(__m128); 
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int); 
#line 926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mul_epi32(__m128i, __m128i); 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mul_epu32(__m128i, __m128i); 
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_mul_pd(__m128d, __m128d); 
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_mul_ps(__m128, __m128); 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_mul_sd(__m128d, __m128d); 
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_mul_ss(__m128, __m128); 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mulhi_epi16(__m128i, __m128i); 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mulhi_epu16(__m128i, __m128i); 
#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mulhrs_epi16(__m128i, __m128i); 
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mullo_epi16(__m128i, __m128i); 
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mullo_epi32(__m128i, __m128i); 
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_mwait(unsigned, unsigned); 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_or_pd(__m128d, __m128d); 
#line 941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_or_ps(__m128, __m128); 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_or_si128(__m128i, __m128i); 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packs_epi16(__m128i, __m128i); 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packs_epi32(__m128i, __m128i); 
#line 945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packus_epi16(__m128i, __m128i); 
#line 946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packus_epi32(__m128i, __m128i); 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_pause(); 
#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_popcnt_u32(unsigned); 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_popcnt_u64(unsigned __int64); 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_prefetch(const char *, int); 
#line 951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rcp_ps(__m128); 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rcp_ss(__m128); 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_round_pd(__m128d, int); 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_round_ps(__m128, int); 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_round_sd(__m128d, __m128d, int); 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_round_ss(__m128, __m128, int); 
#line 957 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rsqrt_ps(__m128); 
#line 958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rsqrt_ss(__m128); 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sad_epu8(__m128i, __m128i); 
#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi16(short); 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi32(int); 
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi64x(__int64); 
#line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi8(char); 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_set1_pd(double); 
#line 969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short); 
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi32(int, int, int, int); 
#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi64x(__int64, __int64); 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_set_pd(double, double); 
#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_set_ps(float, float, float, float); 
#line 979 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_set_ps1(float); 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_set_sd(double); 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_set_ss(float); 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_setcsr(unsigned); 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setl_epi64(__m128i); 
#line 984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short); 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi32(int, int, int, int); 
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi64x(__int64, __int64); 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_setr_pd(double, double); 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_setr_ps(float, float, float, float); 
#line 994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_setzero_pd(); 
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_setzero_ps(); 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setzero_si128(); 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_sfence(); 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shuffle_epi32(__m128i, int); 
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shuffle_epi8(__m128i, __m128i); 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_shuffle_pd(__m128d, __m128d, int); 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_shuffle_ps(__m128, __m128, unsigned); 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shufflehi_epi16(__m128i, int); 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shufflelo_epi16(__m128i, int); 
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sign_epi16(__m128i, __m128i); 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sign_epi32(__m128i, __m128i); 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sign_epi8(__m128i, __m128i); 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sll_epi16(__m128i, __m128i); 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sll_epi32(__m128i, __m128i); 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sll_epi64(__m128i, __m128i); 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_epi16(__m128i, int); 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_epi32(__m128i, int); 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_epi64(__m128i, int); 
#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_si128(__m128i, int); 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sqrt_pd(__m128d); 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sqrt_ps(__m128); 
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sqrt_sd(__m128d, __m128d); 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sqrt_ss(__m128); 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sra_epi16(__m128i, __m128i); 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sra_epi32(__m128i, __m128i); 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srai_epi16(__m128i, int); 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srai_epi32(__m128i, int); 
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srl_epi16(__m128i, __m128i); 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srl_epi32(__m128i, __m128i); 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srl_epi64(__m128i, __m128i); 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_epi16(__m128i, int); 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_epi32(__m128i, int); 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_epi64(__m128i, int); 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_si128(__m128i, int); 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store1_pd(double *, __m128d); 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_pd(double *, __m128d); 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_ps(float *, __m128); 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_ps1(float *, __m128); 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_sd(double *, __m128d); 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_si128(__m128i *, __m128i); 
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_ss(float *, __m128); 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeh_pd(double *, __m128d); 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeh_pi(__m64 *, __m128); 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storel_epi64(__m128i *, __m128i); 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storel_pd(double *, __m128d); 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storel_pi(__m64 *, __m128); 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storer_pd(double *, __m128d); 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storer_ps(float *, __m128); 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeu_pd(double *, __m128d); 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeu_ps(float *, __m128); 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeu_si128(__m128i *, __m128i); 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_stream_load_si128(const __m128i *); 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_pd(double *, __m128d); 
#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_ps(float *, __m128); 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_sd(double *, __m128d); 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_si128(__m128i *, __m128i); 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_si32(int *, int); 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_si64x(__int64 *, __int64); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_ss(float *, __m128); 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi16(__m128i, __m128i); 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi32(__m128i, __m128i); 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi64(__m128i, __m128i); 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi8(__m128i, __m128i); 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sub_pd(__m128d, __m128d); 
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sub_ps(__m128, __m128); 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sub_sd(__m128d, __m128d); 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sub_ss(__m128, __m128); 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epi16(__m128i, __m128i); 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epi8(__m128i, __m128i); 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epu16(__m128i, __m128i); 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epu8(__m128i, __m128i); 
#line 1073 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_testc_si128(__m128i, __m128i); 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_testnzc_si128(__m128i, __m128i); 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_testz_si128(__m128i, __m128i); 
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomieq_sd(__m128d, __m128d); 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomieq_ss(__m128, __m128); 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomige_sd(__m128d, __m128d); 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomige_ss(__m128, __m128); 
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomigt_sd(__m128d, __m128d); 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomigt_ss(__m128, __m128); 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomile_sd(__m128d, __m128d); 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomile_ss(__m128, __m128); 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomilt_sd(__m128d, __m128d); 
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomilt_ss(__m128, __m128); 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomineq_sd(__m128d, __m128d); 
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomineq_ss(__m128, __m128); 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi16(__m128i, __m128i); 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi32(__m128i, __m128i); 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi64(__m128i, __m128i); 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi8(__m128i, __m128i); 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_unpackhi_pd(__m128d, __m128d); 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_unpackhi_ps(__m128, __m128); 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi16(__m128i, __m128i); 
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi32(__m128i, __m128i); 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi64(__m128i, __m128i); 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi8(__m128i, __m128i); 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_unpacklo_pd(__m128d, __m128d); 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_unpacklo_ps(__m128, __m128); 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_xor_pd(__m128d, __m128d); 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_xor_ps(__m128, __m128); 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_xor_si128(__m128i, __m128i); 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct); 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift); 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift); 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift); 
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift); 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int __cdecl _setjmp(jmp_buf); 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int __cdecl _setjmpex(jmp_buf); 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _rsm(); 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _lgdt(void *); 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _sgdt(void *); 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _clac(); 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _stac(); 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *); 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *); 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *); 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *); 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_monitorx(const void *, unsigned, unsigned); 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_mwaitx(unsigned, unsigned, unsigned); 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
}
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(push,3)
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
namespace std { 
#pragma warning(disable: 4127)
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(disable: 4251)
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Ax = allocator < _Elem > >
 class basic_string;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr >
 class _String_const_iterator
  : public _Iterator012 < random_access_iterator_tag,
   typename _Mystr :: value_type,
   typename _Mystr :: difference_type,
   typename _Mystr :: const_pointer,
   typename _Mystr :: const_reference,
   _Iterator_base >
 {
public :
 typedef _String_const_iterator < _Mystr > _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr :: value_type value_type;
 typedef typename _Mystr :: difference_type difference_type;
 typedef typename _Mystr :: const_pointer pointer;
 typedef typename _Mystr :: const_reference reference;

 _String_const_iterator ( )
  : _Ptr ( )
  {
  }

 _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Ptr ( _Parg )
  {
  this -> _Adopt ( _Pstring );
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Ptr );
  }

 reference operator * ( ) const
  {

  const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
  const auto _Contptr = _Mycont ? _Mycont -> _Myptr ( ) : 0;
  if ( _Mycont == 0
   || _Ptr == nullptr_t { }
   || _Unfancy ( _Ptr ) < _Contptr
   || _Contptr + _Mycont -> _Mysize <= _Unfancy ( _Ptr ) )
   {
   _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x61\x62" L"\x6c\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 76 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 77, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 77, 0 ); };
   }









  ;

  return ( * _Ptr );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {

  const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
  if ( _Mycont == 0
   || _Ptr == nullptr_t { }
   || _Mycont -> _Myptr ( ) + _Mycont -> _Mysize <= _Unfancy ( _Ptr ) )
   {
   _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x61\x62\x6c" L"\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 106 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 107, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 107, 0 ); };
   }








  ++ _Ptr;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {

  const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
  if ( _Mycont == 0
   || _Ptr == nullptr_t { }
   || _Unfancy ( _Ptr ) <= _Mycont -> _Myptr ( ) )
   {
   _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x61\x62\x6c" L"\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 136 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 137, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 137, 0 ); };
   }








  -- _Ptr;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {

  if ( _Off != 0 )
   {
   const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
   const auto _Contptr = _Mycont ? _Mycont -> _Myptr ( ) : 0;
   if ( _Mycont == 0
    || _Ptr == nullptr_t { }
    || _Unfancy ( _Ptr ) + _Off < _Contptr
    || _Contptr + _Mycont -> _Mysize < _Unfancy ( _Ptr ) + _Off )
    {
    _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x2b\x20\x6f\x66\x66\x73\x65\x74\x20\x6f\x75\x74\x20\x6f\x66\x20" L"\x72\x61\x6e\x67\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 170 );
    { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Out of Range" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 171, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x4f\x75\x74\x20\x6f\x66\x20\x52" L"\x61\x6e\x67\x65\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 171, 0 ); };
    }
   }













  _Ptr += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr - _Right . _Ptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr == _Right . _Ptr );
  }

 bool operator != ( const _Myiter & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr < _Right . _Ptr );
  }

 bool operator > ( const _Myiter & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myiter & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myiter & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }


 void _Compat ( const _Myiter & _Right ) const
  {
  if ( this -> _Getcont ( ) != _Right . _Getcont ( ) )
   {
   _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 256 );
   { ( void ) ( ( ! ! ( ( "Standard C++ Libraries Invalid Argument" && 0 ) ) ) || ( 1 != _CrtDbgReportW ( 2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 257, 0, L"\x25\x6c\x73", L"\x22\x53\x74\x61\x6e\x64\x61\x72\x64\x20\x43\x2b\x2b\x20\x4c\x69\x62\x72\x61\x72\x69\x65\x73\x20\x49\x6e\x76\x61\x6c\x69\x64\x20" L"\x41\x72\x67\x75\x6d\x65\x6e\x74\x22\x20\x26\x26\x20\x30" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", __LPREFIX ( __FUNCTION__ ), L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 257, 0 ); };
   }
  }













 pointer _Ptr;
 };
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 typename _String_const_iterator < _Mystr > :: _Unchecked_type
  _Unchecked ( _String_const_iterator < _Mystr > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_const_iterator < _Mystr >
  _Rechecked ( _String_const_iterator < _Mystr > & _Iter,
   typename _String_const_iterator < _Mystr >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_const_iterator < _Mystr > operator + (
  typename _String_const_iterator < _Mystr >
   :: difference_type _Off,
  _String_const_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr >
 class _String_iterator
  : public _String_const_iterator < _Mystr >
 {
public :
 typedef _String_iterator < _Mystr > _Myiter;
 typedef _String_const_iterator < _Mystr > _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr :: value_type value_type;
 typedef typename _Mystr :: difference_type difference_type;
 typedef typename _Mystr :: pointer pointer;
 typedef typename _Mystr :: reference reference;

 _String_iterator ( )
  {
  }

 _String_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Mybase ( _Parg, _Pstring )
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  this -> _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Const_cast ( this -> _Ptr ) );
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 typename _String_iterator < _Mystr > :: _Unchecked_type
  _Unchecked ( _String_iterator < _Mystr > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_iterator < _Mystr >
  _Rechecked ( _String_iterator < _Mystr > & _Iter,
   typename _String_iterator < _Mystr >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_iterator < _Mystr > operator + (
  typename _String_iterator < _Mystr >
   :: difference_type _Off,
  _String_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Value_type, class 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Size_type, class 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Difference_type, class 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Pointer, class 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Const_pointer, class 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Reference, class 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Const_reference> 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
struct _String_iter_types { 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Value_type value_type; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Size_type size_type; 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Difference_type difference_type; 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Pointer pointer; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Const_pointer const_pointer; 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Reference reference; 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Const_reference const_reference; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
}; 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Ty, class 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Alloc0> 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
struct _String_base_types { 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Alloc0 _Alloc; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _String_base_types _Myt; 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Wrap_alloc< _Alloc0>  _Alty0; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef typename _Wrap_alloc< _Alloc0> ::template rebind< _Ty> ::other _Alty; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef typename _If< _Is_simple_alloc< typename _Wrap_alloc< _Alloc0> ::template rebind< _Ty> ::other> ::value, _Simple_types< typename _Alty::value_type> , _String_iter_types< typename _Alty::value_type, typename _Alty::size_type, typename _Alty::difference_type, typename _Alty::pointer, typename _Alty::const_pointer, typename _Alty::reference, typename _Alty::const_reference> > ::type _Val_types; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
}; 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Val_types >
 class _String_val
  : public _Container_base
 {
public :
 typedef _String_val < _Val_types > _Myt;

 typedef typename _Val_types :: value_type value_type;
 typedef typename _Val_types :: size_type size_type;
 typedef typename _Val_types :: difference_type difference_type;
 typedef typename _Val_types :: pointer pointer;
 typedef typename _Val_types :: const_pointer const_pointer;
 typedef typename _Val_types :: reference reference;
 typedef typename _Val_types :: const_reference const_reference;

 typedef _String_iterator < _Myt > iterator;
 typedef _String_const_iterator < _Myt > const_iterator;

 _String_val ( )
  : _Bx ( ),
  _Mysize ( 0 ),
  _Myres ( 0 )
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1
   : 16 / sizeof ( value_type ) };
 enum
  {
  _ALLOC_MASK = sizeof ( value_type ) <= 1 ? 15
   : sizeof ( value_type ) <= 2 ? 7
   : sizeof ( value_type ) <= 4 ? 3
   : sizeof ( value_type ) <= 8 ? 1 : 0 };

 value_type * _Myptr ( )
  {
  return ( this -> _BUF_SIZE <= _Myres
   ? _Unfancy ( _Bx . _Ptr )
   : _Bx . _Buf );
  }

 const value_type * _Myptr ( ) const
  {
  return ( this -> _BUF_SIZE <= _Myres
   ? _Unfancy ( _Bx . _Ptr )
   : _Bx . _Buf );
  }

 union _Bxty
  {
  _Bxty ( )
   {
   }

  ~ _Bxty ( ) noexcept
   {
   }

  value_type _Buf [ _BUF_SIZE ];
  pointer _Ptr;
  char _Alias [ _BUF_SIZE ];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Alloc_types >
 class _String_alloc
 {
public :
 typedef _String_alloc < _Alloc_types > _Myt;
 typedef typename _Alloc_types :: _Alloc _Alloc;
 typedef typename _Alloc_types :: _Alty _Alty;
 typedef typename _Alloc_types :: _Val_types _Val_types;

 typedef typename _Val_types :: value_type value_type;
 typedef typename _Val_types :: size_type size_type;
 typedef typename _Val_types :: difference_type difference_type;
 typedef typename _Val_types :: pointer pointer;
 typedef typename _Val_types :: const_pointer const_pointer;
 typedef typename _Val_types :: reference reference;
 typedef typename _Val_types :: const_reference const_reference;

 typedef _String_iterator < _String_val < _Val_types > > iterator;
 typedef _String_const_iterator < _String_val < _Val_types > > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val < _Val_types > :: _BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val < _Val_types > :: _ALLOC_MASK
  };

 value_type * _Myptr ( )
  {
  return ( _Get_data ( ) . _Myptr ( ) );
  }

 const value_type * _Myptr ( ) const
  {
  return ( _Get_data ( ) . _Myptr ( ) );
  }


























 _String_alloc ( )
  : _Mypair ( _Zero_then_variadic_args_t ( ) )
  {
  _Alloc_proxy ( );
  }

 template < class _Any_alloc,
  class = enable_if_t < ! is_same < decay_t < _Any_alloc >, _Myt > :: value > >
  _String_alloc ( _Any_alloc && _Al )
  : _Mypair ( _One_then_variadic_args_t ( ),
   :: std :: forward < _Any_alloc > ( _Al ) )
  {
  _Alloc_proxy ( );
  }

 ~ _String_alloc ( ) noexcept
  {
  _Free_proxy ( );
  }

 void _Copy_alloc ( const _Alty & _Al )
  {
  _Free_proxy ( );
  _Pocca ( _Getal ( ), _Al );
  _Alloc_proxy ( );
  }

 void _Move_alloc ( _Alty & _Al )
  {
  _Free_proxy ( );
  _Pocma ( _Getal ( ), _Al );
  _Alloc_proxy ( );
  }

 void _Alloc_proxy ( )
  {
  typename _Alty :: template rebind < _Container_proxy > :: other
   _Alproxy ( _Getal ( ) );
  _Myproxy ( ) = _Unfancy ( _Alproxy . allocate ( 1 ) );
  _Alproxy . construct ( _Myproxy ( ), _Container_proxy ( ) );
  _Myproxy ( ) -> _Mycont = & _Get_data ( );
  }

 void _Free_proxy ( )
  {
  typename _Alty :: template rebind < _Container_proxy > :: other
   _Alproxy ( _Getal ( ) );
  _Orphan_all ( );
  _Alproxy . destroy ( _Myproxy ( ) );
  _Alproxy . deallocate ( _Alproxy . address ( * _Myproxy ( ) ), 1 );
  _Myproxy ( ) = 0;
  }

 _Iterator_base12 * * _Getpfirst ( ) const
  {
  return ( _Get_data ( ) . _Getpfirst ( ) );
  }

 _Container_proxy * & _Myproxy ( ) noexcept
  {
  return ( _Get_data ( ) . _Myproxy );
  }

 _Container_proxy * const & _Myproxy ( ) const noexcept
  {
  return ( _Get_data ( ) . _Myproxy );
  }


 void _Orphan_all ( )
  {
  _Get_data ( ) . _Orphan_all ( );
  }

 void _Swap_all ( _Myt & _Right )
  {
  _Get_data ( ) . _Swap_all ( _Right . _Get_data ( ) );
  }

 _Alty & _Getal ( ) noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 const _Alty & _Getal ( ) const noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 _String_val < _Val_types > & _Get_data ( ) noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 const _String_val < _Val_types > & _Get_data ( ) const noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 typedef typename _String_val < _Val_types > :: _Bxty _Bxty;

 _Bxty & _Bx ( ) noexcept
  {
  return ( _Get_data ( ) . _Bx );
  }

 const _Bxty & _Bx ( ) const noexcept
  {
  return ( _Get_data ( ) . _Bx );
  }

 size_type & _Mysize ( ) noexcept
  {
  return ( _Get_data ( ) . _Mysize );
  }

 const size_type & _Mysize ( ) const noexcept
  {
  return ( _Get_data ( ) . _Mysize );
  }

 size_type & _Myres ( ) noexcept
  {
  return ( _Get_data ( ) . _Myres );
  }

 const size_type & _Myres ( ) const noexcept
  {
  return ( _Get_data ( ) . _Myres );
  }

private :
 _Compressed_pair < _Alty, _String_val < _Val_types > > _Mypair;
 };
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_string
  : public _String_alloc < _String_base_types < _Elem, _Alloc > >
 {
public :
 typedef basic_string < _Elem, _Traits, _Alloc > _Myt;
 typedef _String_alloc < _String_base_types < _Elem, _Alloc > > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase :: _Alty _Alty;

 typedef typename _Mybase :: value_type value_type;
 typedef typename _Mybase :: size_type size_type;
 typedef typename _Mybase :: difference_type difference_type;
 typedef typename _Mybase :: pointer pointer;
 typedef typename _Mybase :: const_pointer const_pointer;
 typedef typename _Mybase :: reference reference;
 typedef typename _Mybase :: const_reference const_reference;

 typedef typename _Mybase :: iterator iterator;
 typedef typename _Mybase :: const_iterator const_iterator;

 typedef :: std :: reverse_iterator < iterator > reverse_iterator;
 typedef :: std :: reverse_iterator < const_iterator > const_reverse_iterator;

 basic_string ( const _Myt & _Right )

  : _Mybase ( _Right . _Getal ( ) . select_on_container_copy_construction ( ) )


  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }

 basic_string ( const _Myt & _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }

 basic_string ( ) noexcept ( is_nothrow_default_constructible < _Alloc > :: value )
  : _Mybase ( )
  {
  _Tidy ( );
  }

 explicit basic_string ( const _Alloc & _Al ) noexcept
  : _Mybase ( _Al )
  {
  _Tidy ( );
  }

 basic_string ( const _Myt & _Right, size_type _Roff,
  size_type _Count = npos )
  : _Mybase ( _Right . _Getal ( ) )
  {
  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Myt & _Right, size_type _Roff, size_type _Count,
  const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Elem * _Ptr, size_type _Count )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * _Ptr, size_type _Count, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * _Ptr )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

 basic_string ( const _Elem * _Ptr, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

 basic_string ( size_type _Count, _Elem _Ch )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 basic_string ( size_type _Count, _Elem _Ch, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 template < class _Iter,
  class = typename enable_if < _Is_iterator < _Iter > :: value,
   void > :: type >
  basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
  : _Mybase ( _Al )
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 868 );
  _Tidy ( );
  _Construct ( _Unchecked ( _First ), _Unchecked ( _Last ), _Iter_cat_t < _Iter > ( ) );
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, input_iterator_tag )
  {
  try {
  for (; _First != _Last; ++ _First )
   append ( ( size_type ) 1, ( _Elem ) * _First );
  } catch ( ... ) {
  _Tidy ( true );
  throw;
  }
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, forward_iterator_tag )
  {
  size_type _Count = :: std :: distance ( _First, _Last );
  reserve ( _Count );
  _Construct ( _First, _Last, input_iterator_tag ( ) );
  }

 void _Construct ( _Elem * _First,
  _Elem * _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   assign ( _First, _Last - _First );
  }

 void _Construct ( const _Elem * _First,
  const _Elem * _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   assign ( _First, _Last - _First );
  }

 basic_string ( _Myt && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right . _Getal ( ) ) )
  {
  _Tidy ( );
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 basic_string ( _Myt && _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  if ( this -> _Getal ( ) != _Right . _Getal ( ) )
   assign ( _Right . begin ( ), _Right . end ( ) );
  else
   _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  noexcept ( _Alty :: propagate_on_container_move_assignment :: value || _Alty :: is_always_equal :: value )

  {
  if ( this != & _Right )
   {
   _Tidy ( true );

   if ( _Alty :: propagate_on_container_move_assignment :: value
    && this -> _Getal ( ) != _Right . _Getal ( ) )
    this -> _Move_alloc ( _Right . _Getal ( ) );

   if ( this -> _Getal ( ) != _Right . _Getal ( ) )
    assign ( _Right . begin ( ), _Right . end ( ) );
   else
    _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
   }
  return ( * this );
  }

 _Myt & assign ( _Myt && _Right ) noexcept
  {
  if ( this == & _Right )
   ;
  else if ( get_allocator ( ) != _Right . get_allocator ( )
   && this -> _BUF_SIZE <= _Right . _Myres ( ) )
   * this = _Right;
  else
   {
   _Tidy ( true );
   _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
   }
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( _Right . _Myres ( ) < this -> _BUF_SIZE )
   _Traits :: move ( this -> _Bx ( ) . _Buf, _Right . _Bx ( ) . _Buf,
    _Right . _Mysize ( ) + 1 );
  else
   {
   this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Right . _Bx ( ) . _Ptr );
   _Right . _Bx ( ) . _Ptr = pointer ( );
   }
  this -> _Mysize ( ) = _Right . _Mysize ( );
  this -> _Myres ( ) = _Right . _Myres ( );
  _Right . _Tidy ( );
  }

 basic_string ( :: std :: initializer_list < _Elem > _Ilist,
  const _Alloc & _Al = allocator_type ( ) )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ilist . begin ( ), _Ilist . end ( ) );
  }

 _Myt & operator = ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & operator += ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & assign ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & append ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 iterator insert ( const_iterator _Where,
  :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( insert ( _Where, _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( replace ( _First, _Last, _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 ~ basic_string ( ) noexcept
  {
  _Tidy ( true );
  }

  static const size_type npos;

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   if ( this -> _Getal ( ) != _Right . _Getal ( )
    && _Alty :: propagate_on_container_copy_assignment :: value )
    {
    _Tidy ( true );
    this -> _Copy_alloc ( _Right . _Getal ( ) );
    }

   assign ( _Right );
   }
  return ( * this );
  }

 _Myt & operator = ( const _Elem * _Ptr )
  {
  return ( assign ( _Ptr ) );
  }

 _Myt & operator = ( _Elem _Ch )
  {
  return ( assign ( 1, _Ch ) );
  }

 _Myt & operator += ( const _Myt & _Right )
  {
  return ( append ( _Right ) );
  }

 _Myt & operator += ( const _Elem * _Ptr )
  {
  return ( append ( _Ptr ) );
  }

 _Myt & operator += ( _Elem _Ch )
  {
  return ( append ( ( size_type ) 1, _Ch ) );
  }

 _Myt & append ( const _Myt & _Right )
  {
  return ( append ( _Right, 0, npos ) );
  }

 _Myt & append ( const _Myt & _Right,
  size_type _Roff, size_type _Count = npos )
  {
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: copy ( this -> _Myptr ( ) + this -> _Mysize ( ),
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr, size_type _Count )
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1088 );
  if ( _Inside ( _Ptr ) )
   return ( append ( * this,
    _Ptr - this -> _Myptr ( ), _Count ) );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: copy ( this -> _Myptr ( ) + this -> _Mysize ( ), _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr )
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1106 );
  return ( append ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & append ( size_type _Count, _Elem _Ch )
  {
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Chassign ( this -> _Mysize ( ), _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  append ( _Iter _First, _Iter _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const _Myt & _Right )
  {
  return ( assign ( _Right, 0, npos ) );
  }

 _Myt & assign ( const _Myt & _Right,
  size_type _Roff, size_type _Count = npos )
  {
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );

  if ( this == & _Right )
   erase ( ( size_type ) ( _Roff + _Count ) ), erase ( 0, _Roff );
  else if ( _Grow ( _Count ) )
   {
   _Traits :: copy ( this -> _Myptr ( ),
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr, size_type _Count )
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1166 );
  if ( _Inside ( _Ptr ) )
   return ( assign ( * this,
    _Ptr - this -> _Myptr ( ), _Count ) );

  if ( _Grow ( _Count ) )
   {
   _Traits :: copy ( this -> _Myptr ( ), _Ptr, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr )
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1181 );
  return ( assign ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & assign ( size_type _Count, _Elem _Ch )
  {
  if ( _Count == npos )
   _Xlen ( );

  if ( _Grow ( _Count ) )
   {
   _Chassign ( 0, _Count, _Ch );
   _Eos ( _Count );
   }
  return ( * this );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  assign ( _Iter _First, _Iter _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & insert ( size_type _Off, const _Myt & _Right )
  {
  return ( insert ( _Off, _Right, 0, npos ) );
  }

 _Myt & insert ( size_type _Off,
  const _Myt & _Right, size_type _Roff, size_type _Count = npos )
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   if ( this == & _Right )
    _Traits :: move ( this -> _Myptr ( ) + _Off,
     this -> _Myptr ( ) + ( _Off < _Roff ? _Roff + _Count : _Roff ),
      _Count );
   else
    _Traits :: copy ( this -> _Myptr ( ) + _Off,
     _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off,
  const _Elem * _Ptr, size_type _Count )
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1251 );
  if ( _Inside ( _Ptr ) )
   return ( insert ( _Off, * this,
    _Ptr - this -> _Myptr ( ), _Count ) );
  _Check_offset ( _Off );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );
  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   _Traits :: copy ( this -> _Myptr ( ) + _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off, const _Elem * _Ptr )
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1272 );
  return ( insert ( _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & insert ( size_type _Off,
  size_type _Count, _Elem _Ch )
  {
  _Check_offset ( _Off );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );
  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 iterator insert ( const_iterator _Where )
  {
  return ( insert ( _Where, _Elem ( ) ) );
  }

 iterator insert ( const_iterator _Where, _Elem _Ch )
  {
  size_type _Off = _Where - begin ( );
  insert ( _Off, 1, _Ch );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where, size_type _Count, _Elem _Ch )
  {
  size_type _Off = _Where - begin ( );
  insert ( _Off, _Count, _Ch );
  return ( begin ( ) + _Off );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   iterator > :: type
  insert ( const_iterator _Where, _Iter _First, _Iter _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where,
  const_pointer _First, const_pointer _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where,
  const_iterator _First, const_iterator _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 _Myt & erase ( size_type _Off = 0 )
  {
  _Check_offset ( _Off );
  _Eos ( _Off );
  return ( * this );
  }

 _Myt & erase ( size_type _Off, size_type _Count )
  {
  _Check_offset ( _Off );
  if ( this -> _Mysize ( ) - _Off <= _Count )
   _Eos ( _Off );
  else if ( 0 < _Count )
   {
   value_type * _Ptr = this -> _Myptr ( ) + _Off;
   size_type _Newsize = this -> _Mysize ( ) - _Count;
   _Traits :: move ( _Ptr, _Ptr + _Count, _Newsize - _Off );
   _Eos ( _Newsize );
   }
  return ( * this );
  }

 iterator erase ( const_iterator _Where )
  {
  size_type _Count = _Where - begin ( );
  erase ( _Count, 1 );
  return ( begin ( ) + _Count );
  }

 iterator erase ( const_iterator _First, const_iterator _Last )
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1370 );
  size_type _Count = _First - begin ( );
  erase ( _Count, _Last - _First );
  return ( begin ( ) + _Count );
  }

 void clear ( ) noexcept
  {
  _Eos ( 0 );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Myt & _Right )
  {
  return ( replace ( _Off, _N0, _Right, 0, npos ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Myt & _Right, size_type _Roff,
   size_type _Count = npos )
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );

  const size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;
  const size_type _Newsize = this -> _Mysize ( ) + _Count - _N0;
  if ( this -> _Mysize ( ) < _Newsize )
   _Grow ( _Newsize );

  if ( _Count == _N0 )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( this != & _Right )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: copy ( this -> _Myptr ( ) + _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Count < _N0 )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _Count );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   }
  else if ( _Roff <= _Off )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Off + _N0 <= _Roff )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + ( _Roff + _Count - _N0 ),
    _Count );
   }
  else
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _N0 );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _N0,
    this -> _Myptr ( ) + _Roff + _Count,
    _Count - _N0 );
   }

  _Eos ( _Newsize );
  return ( * this );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count )
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1454 );
  if ( _Inside ( _Ptr ) )
   return ( replace ( _Off, _N0, * this,
    _Ptr - this -> _Myptr ( ),
    _Count ) );
  _Check_offset ( _Off );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );
  size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0,
    _Nm );
  const size_type _Num = this -> _Mysize ( ) + _Count - _N0;
  if ( ( 0 < _Count || 0 < _N0 )
   && _Grow ( _Num ) )
   {
   if ( _N0 < _Count )
    _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
     this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: copy ( this -> _Myptr ( ) + _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Elem * _Ptr )
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1484 );
  return ( replace ( _Off, _N0, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch )
  {
  _Check_offset ( _Off );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );
  size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0,
    _Nm );
  const size_type _Num = this -> _Mysize ( ) + _Count - _N0;
  if ( ( 0 < _Count || 0 < _N0 )
   && _Grow ( _Num ) )
   {
   if ( _N0 < _Count )
    _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
     this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Myt & _Right )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Right ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Elem * _Ptr, size_type _Count )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Ptr, _Count ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Elem * _Ptr )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Ptr ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Count, _Ch ) );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  replace ( const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2 )
  {
  _Myt _Right ( _First2, _Last2 );
  replace ( _First, _Last, _Right );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 iterator begin ( ) noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ), _Mydata ) );
  }

 const_iterator begin ( ) const noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( const_iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ), _Mydata ) );
  }

 iterator end ( ) noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ) + _Mydata -> _Mysize, _Mydata ) );
  }

 const_iterator end ( ) const noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( const_iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ) + _Mydata -> _Mysize, _Mydata ) );
  }

 reverse_iterator rbegin ( ) noexcept
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const noexcept
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( ) noexcept
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const noexcept
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 const_iterator cbegin ( ) const noexcept
  {
  return ( begin ( ) );
  }

 const_iterator cend ( ) const noexcept
  {
  return ( end ( ) );
  }

 const_reverse_iterator crbegin ( ) const noexcept
  {
  return ( rbegin ( ) );
  }

 const_reverse_iterator crend ( ) const noexcept
  {
  return ( rend ( ) );
  }

 void shrink_to_fit ( )
  {
  if ( ( size ( ) | this -> _ALLOC_MASK ) < capacity ( ) )
   {
   _Myt _Tmp ( * this );
   swap ( _Tmp );
   }
  }

 reference at ( size_type _Off )
  {
  _Check_offset_exclusive ( _Off );
  return ( this -> _Myptr ( ) [ _Off ] );
  }

 const_reference at ( size_type _Off ) const
  {
  _Check_offset_exclusive ( _Off );
  return ( this -> _Myptr ( ) [ _Off ] );
  }

 reference operator [ ] ( size_type _Off )
  {

  if ( this -> _Mysize ( ) < _Off )
   _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1682 );





  return ( this -> _Myptr ( ) [ _Off ] );
  }

 const_reference operator [ ] ( size_type _Off ) const
  {

  if ( this -> _Mysize ( ) < _Off )
   _Debug_message ( L"\x73\x74\x72\x69\x6e\x67\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1695 );





  return ( this -> _Myptr ( ) [ _Off ] );
  }

 void push_back ( _Elem _Ch )
  {
  auto & _Dx = this -> _Get_data ( );
  auto & _Sz = _Dx . _Mysize;
  if ( _Sz == _Dx . _Myres )
   _Grow ( _Sz + 1 );
  auto _Ptr = _Dx . _Myptr ( );
  _Traits :: assign ( _Ptr [ _Sz ], _Ch );
  ++ _Sz;
  _Traits :: assign ( _Ptr [ _Sz ], _Elem ( ) );
  }

 void pop_back ( )
  {
  erase ( this -> _Mysize ( ) - 1 );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

 const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

 const _Elem * c_str ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }

 const _Elem * data ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }








 size_type length ( ) const noexcept
  {
  return ( this -> _Mysize ( ) );
  }

 size_type size ( ) const noexcept
  {
  return ( this -> _Mysize ( ) );
  }

 size_type max_size ( ) const noexcept
  {
  const size_type _Num = this -> _Getal ( ) . max_size ( );
  return ( _Num <= 1 ? 1 : _Num - 1 );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Elem ( ) );
  }

 void resize ( size_type _Newsize, _Elem _Ch )
  {
  if ( _Newsize <= this -> _Mysize ( ) )
   _Eos ( _Newsize );
  else
   append ( _Newsize - this -> _Mysize ( ), _Ch );
  }

 size_type capacity ( ) const noexcept
  {
  return ( this -> _Myres ( ) );
  }

 void reserve ( size_type _Newcap = 0 )
  {
  if ( this -> _Mysize ( ) <= _Newcap && this -> _Myres ( ) != _Newcap )
   {
   size_type _Size = this -> _Mysize ( );
   if ( _Grow ( _Newcap, true ) )
    _Eos ( _Size );
   }
  }

 bool empty ( ) const noexcept
  {
  return ( this -> _Mysize ( ) == 0 );
  }

 __declspec ( deprecated ( "Call to \'std::basic_string::copy\' with parameters that may be unsafe - this call relies on the caller to check that the passed" " values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checke" "d Iterators\'" ) )
 size_type copy ( _Elem * _Ptr,
  size_type _Count, size_type _Off = 0 ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1811 );
  _Check_offset ( _Off );
  _Count = _Clamp_suffix_size ( _Off, _Count );
  _Traits :: copy ( _Ptr, this -> _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 size_type _Copy_s ( _Elem * _Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0 ) const
  {
  _Debug_pointer_if ( _Count != 0, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1821 );
  _Check_offset ( _Off );
  _Count = _Clamp_suffix_size ( _Off, _Count );
  _Traits :: _Copy_s ( _Dest, _Dest_size, this -> _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 void _Swap_bx ( _Myt & _Right )
  {
  if ( this -> _BUF_SIZE <= this -> _Myres ( ) )
   if ( this -> _BUF_SIZE <= _Right . _Myres ( ) )
    _Swap_adl ( this -> _Bx ( ) . _Ptr, _Right . _Bx ( ) . _Ptr );
   else
    {
    pointer _Ptr = this -> _Bx ( ) . _Ptr;
    this -> _Getal ( ) . destroy ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ) );
    _Traits :: copy ( this -> _Bx ( ) . _Buf,
     _Right . _Bx ( ) . _Buf, _Right . _Mysize ( ) + 1 );
    this -> _Getal ( ) . construct ( :: std :: addressof ( _Right . _Bx ( ) . _Ptr ), _Ptr );
    }
  else
   if ( _Right . _Myres ( ) < this -> _BUF_SIZE )
    :: std :: swap ( this -> _Bx ( ) . _Buf, _Right . _Bx ( ) . _Buf );
   else
    {
    pointer _Ptr = _Right . _Bx ( ) . _Ptr;
    this -> _Getal ( ) . destroy ( :: std :: addressof ( _Right . _Bx ( ) . _Ptr ) );
    _Traits :: copy ( _Right . _Bx ( ) . _Buf,
     this -> _Bx ( ) . _Buf, this -> _Mysize ( ) + 1 );
    this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Ptr );
    }
  }

 void swap ( _Myt & _Right )
  noexcept ( _Alty :: propagate_on_container_swap :: value || _Alty :: is_always_equal :: value )

  {
  if ( this != & _Right )
   {
   _Pocs ( this -> _Getal ( ), _Right . _Getal ( ) );
   this -> _Swap_all ( _Right );
   _Swap_bx ( _Right );
   :: std :: swap ( this -> _Mysize ( ), _Right . _Mysize ( ) );
   :: std :: swap ( this -> _Myres ( ), _Right . _Myres ( ) );
   }
  }

 size_type find ( const _Myt & _Right, size_type _Off = 0 ) const noexcept
  {
  return ( find ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1876 );
  if ( _Count == 0 && _Off <= this -> _Mysize ( ) )
   return ( _Off );

  size_type _Nm;
  if ( _Off < this -> _Mysize ( ) && _Count <= ( _Nm = this -> _Mysize ( ) - _Off ) )
   {
   const _Elem * _Uptr, * _Vptr;
   for ( _Nm -= _Count - 1, _Vptr = this -> _Myptr ( ) + _Off;
    ( _Uptr = _Traits :: find ( _Vptr, _Nm, * _Ptr ) ) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1 )
    if ( _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find ( const _Elem * _Ptr, size_type _Off = 0 ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1896 );
  return ( find ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find ( _Elem _Ch, size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type rfind ( const _Myt & _Right, size_type _Off = npos ) const noexcept
  {
  return ( rfind ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type rfind ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1913 );
  if ( _Count == 0 )
   return ( _Off < this -> _Mysize ( ) ? _Off
    : this -> _Mysize ( ) );
  if ( _Count <= this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( ) +
    ( _Off < this -> _Mysize ( ) - _Count ? _Off
     : this -> _Mysize ( ) - _Count );
   for (;; -- _Uptr )
    if ( _Traits :: eq ( * _Uptr, * _Ptr )
     && _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type rfind ( const _Elem * _Ptr, size_type _Off = npos ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1935 );
  return ( rfind ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type rfind ( _Elem _Ch, size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_of ( const _Myt & _Right,
  size_type _Off = 0 ) const noexcept
  {
  return ( find_first_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1953 );
  if ( 0 < _Count && _Off < this -> _Mysize ( ) )
   {
   const _Elem * const _Vptr = this -> _Myptr ( ) + this -> _Mysize ( );
   for ( const _Elem * _Uptr = this -> _Myptr ( ) + _Off;
    _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1969 );
  return ( find_first_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_of ( _Elem _Ch,
  size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_of ( const _Myt & _Right,
  size_type _Off = npos ) const noexcept
  {
  return ( find_last_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1988 );
  if ( 0 < _Count && 0 < this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( )
    + ( _Off < this -> _Mysize ( ) ? _Off : this -> _Mysize ( ) - 1 );
   for (;; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2006 );
  return ( find_last_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_of ( _Elem _Ch,
  size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_not_of ( const _Myt & _Right,
  size_type _Off = 0 ) const noexcept
  {
  return ( find_first_not_of ( _Right . _Myptr ( ), _Off,
   _Right . size ( ) ) );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2026 );
  if ( _Off < this -> _Mysize ( ) )
   {
   const _Elem * const _Vptr = this -> _Myptr ( ) + this -> _Mysize ( );
   for ( const _Elem * _Uptr = this -> _Myptr ( ) + _Off;
    _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }
  return ( npos );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2041 );
  return ( find_first_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_not_of ( _Elem _Ch,
  size_type _Off = 0 ) const
  {
  return ( find_first_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_not_of ( const _Myt & _Right,
  size_type _Off = npos ) const noexcept
  {
  return ( find_last_not_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2060 );
  if ( 0 < this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( )
    + ( _Off < this -> _Mysize ( ) ? _Off : this -> _Mysize ( ) - 1 );
   for (;; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }
  return ( npos );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2077 );
  return ( find_last_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_not_of ( _Elem _Ch,
  size_type _Off = npos ) const
  {
  return ( find_last_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 _Myt substr ( size_type _Off = 0, size_type _Count = npos ) const
  {
  return ( _Myt ( * this, _Off, _Count, get_allocator ( ) ) );
  }

 static int _Traits_compare ( const _Elem * const _Left, const size_type _Left_size,
  const _Elem * const _Right, const size_type _Right_size )
  {
  const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
  const int _Ans = _Traits :: compare ( _Left, _Right, _Min_size );

  if ( _Ans != 0 )
   return ( _Ans );

  if ( _Left_size < _Right_size )
   return ( - 1 );

  if ( _Left_size > _Right_size )
   return ( 1 );

  return ( 0 );
  }

 size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const
  {
  const size_type _Max_effective_size = this -> _Mysize ( ) - _Off;
  if ( _Size <= _Max_effective_size )
   return ( _Size );
  else
   return ( _Max_effective_size );
  }

 int compare ( const _Myt & _Right ) const noexcept
  {
  return ( _Traits_compare ( this -> _Myptr ( ), this -> _Mysize ( ),
   _Right . _Myptr ( ), _Right . _Mysize ( ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right ) const
  {
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Right . _Myptr ( ), _Right . _Mysize ( ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right,
  size_type _Roff, size_type _Count = npos ) const
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Right . _Myptr ( ) + _Roff, _Right . _Clamp_suffix_size ( _Roff, _Count ) ) );
  }

 int compare ( const _Elem * _Ptr ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2145 );
  return ( _Traits_compare ( this -> _Myptr ( ), this -> _Mysize ( ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off, size_type _N0, const _Elem * _Ptr ) const
  {
  _Debug_pointer ( _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2152 );
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count ) const
  {
  _Debug_pointer_if ( _Count != 0, _Ptr, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2161 );
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Count ) );
  }

 allocator_type get_allocator ( ) const noexcept
  {
  allocator_type _Ret ( this -> _Getal ( ) );
  return ( _Ret );
  }

 void _Chassign ( size_type _Off, size_type _Count, _Elem _Ch )
  {
  if ( _Count == 1 )
   _Traits :: assign ( * ( this -> _Myptr ( ) + _Off ), _Ch );
  else
   _Traits :: assign ( this -> _Myptr ( ) + _Off, _Count, _Ch );
  }

 void _Copy ( size_type _Newsize, size_type _Oldlen )
  {
  size_type _Newres = _Newsize | this -> _ALLOC_MASK;
  if ( max_size ( ) < _Newres )
   _Newres = _Newsize;
  else if ( this -> _Myres ( ) / 2 <= _Newres / 3 )
   ;
  else if ( this -> _Myres ( ) <= max_size ( ) - this -> _Myres ( ) / 2 )
   _Newres = this -> _Myres ( )
    + this -> _Myres ( ) / 2;
  else
   _Newres = max_size ( );

  pointer _Ptr;
  try {
   _Ptr = this -> _Getal ( ) . allocate ( _Newres + 1 );
  } catch ( ... ) {
   _Newres = _Newsize;
   try {
    _Ptr = this -> _Getal ( ) . allocate ( _Newres + 1 );
   } catch ( ... ) {
   _Tidy ( true );
   throw;
   }
  }

  if ( 0 < _Oldlen )
   _Traits :: copy ( _Unfancy ( _Ptr ), this -> _Myptr ( ),
    _Oldlen );
  _Tidy ( true );
  this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Ptr );
  this -> _Myres ( ) = _Newres;
  _Eos ( _Oldlen );
  }

 void _Eos ( size_type _Newsize )
  {
  auto & _Dx = this -> _Get_data ( );
  _Traits :: assign ( _Dx . _Myptr ( ) [ _Dx . _Mysize = _Newsize ], _Elem ( ) );
  }

 bool _Grow ( size_type _Newsize,
  bool _Trim = false )
  {
  if ( max_size ( ) < _Newsize )
   _Xlen ( );
  if ( this -> _Myres ( ) < _Newsize )
   _Copy ( _Newsize, this -> _Mysize ( ) );
  else if ( _Trim && _Newsize < this -> _BUF_SIZE )
   _Tidy ( true,
    _Newsize < this -> _Mysize ( ) ? _Newsize : this -> _Mysize ( ) );
  else if ( _Newsize == 0 )
   _Eos ( 0 );
  return ( 0 < _Newsize );
  }

 bool _Inside ( const _Elem * _Ptr )
  {
  if ( _Ptr == nullptr_t { } || _Ptr < this -> _Myptr ( )
   || this -> _Myptr ( ) + this -> _Mysize ( ) <= _Ptr )
   return ( false );
  else
   return ( true );
  }

 void _Tidy ( bool _Built = false,
  size_type _Newsize = 0 )
  {
  if ( ! _Built )
   ;
  else if ( this -> _BUF_SIZE <= this -> _Myres ( ) )
   {
   pointer _Ptr = this -> _Bx ( ) . _Ptr;
   this -> _Getal ( ) . destroy ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ) );
   if ( 0 < _Newsize )
    _Traits :: copy ( this -> _Bx ( ) . _Buf,
     _Unfancy ( _Ptr ), _Newsize );
   this -> _Getal ( ) . deallocate ( _Ptr, this -> _Myres ( ) + 1 );
   }
  this -> _Myres ( ) = this -> _BUF_SIZE - 1;
  _Eos ( _Newsize );
  }

 [ [ noreturn ] ] void _Xlen ( ) const
  {
  _Xlength_error ( "string too long" );
  }

 void _Check_offset ( const size_type _Off ) const
  {
  if ( this -> _Mysize ( ) < _Off )
   _Xran ( );
  }

 void _Check_offset_exclusive ( const size_type _Off ) const
  {
  if ( this -> _Mysize ( ) <= _Off )
   _Xran ( );
  }

 [ [ noreturn ] ] void _Xran ( ) const
  {
  _Xout_of_range ( "invalid string position" );
  }
 };
#line 2288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Elem, class 
#line 2289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Traits, class 
#line 2290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Alloc> const typename basic_string< _Elem, _Traits, _Alloc> ::size_type 
#line 2292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
basic_string< _Elem, _Traits, _Alloc> ::npos = ((typename ::std::basic_string< _Elem, _Traits, typename _String_base_types< _Elem, _Alloc> ::_Alloc> ::size_type)(-1)); 
#line 2297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > & _Right )
   noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 2307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Traits :: length ( _Left ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( 1 + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Traits :: length ( _Right ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + 1 );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 2397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 if ( _Right . size ( ) <= _Left . capacity ( ) - _Left . size ( )
  || _Right . capacity ( ) - _Right . size ( ) < _Left . size ( ) )
  return ( :: std :: move ( _Left . append ( _Right ) ) );
 else
  return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem * _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 typedef typename basic_string < _Elem, _Traits, _Alloc > :: size_type
  size_type;
 return ( :: std :: move ( _Right . insert ( ( size_type ) 0, ( size_type ) 1, _Left ) ) );
 }
#line 2433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem * _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 2443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem _Right )
 {
 return ( :: std :: move ( _Left . append ( 1, _Right ) ) );
 }
#line 2453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) == 0 );
 }
#line 2463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) == 0 );
 }
#line 2473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) == 0 );
 }
#line 2483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 2523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) > 0 );
 }
#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 2543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Right < _Left );
 }
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Right < _Left );
 }
#line 2573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< char, char_traits< char> , allocator< char> >  string; 
#line 2636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstring; 
#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
 struct hash < basic_string < _Elem, _Traits, _Alloc > >
 {
 typedef basic_string < _Elem, _Traits, _Alloc > argument_type;
 typedef size_t result_type;

 size_t operator ( ) ( const argument_type & _Keyval ) const
  {
  return ( _Hash_seq ( ( const unsigned char * ) _Keyval . c_str ( ),
   _Keyval . size ( ) * sizeof ( _Elem ) ) );
  }
 };
#line 2655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> >  u16string; 
#line 2657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> >  u32string; 
#line 2658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
}
#line 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma warning(push,3)
#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class logic_error : public exception { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef exception _Mybase; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit logic_error(const char *_Message) : _Mybase(_Message) 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class domain_error : public logic_error { 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit domain_error(const char *_Message) : _Mybase(_Message) 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class invalid_argument : public logic_error { 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit invalid_argument(const char *_Message) : _Mybase(_Message) 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class length_error : public logic_error { 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit length_error(const char *_Message) : _Mybase(_Message) 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class out_of_range : public logic_error { 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit out_of_range(const char *_Message) : _Mybase(_Message) 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class runtime_error : public exception { 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef exception _Mybase; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit runtime_error(const char *_Message) : _Mybase(_Message) 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class overflow_error : public runtime_error { 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit overflow_error(const char *_Message) : _Mybase(_Message) 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class underflow_error : public runtime_error { 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit underflow_error(const char *_Message) : _Mybase(_Message) 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class range_error : public runtime_error { 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit range_error(const char *_Message) : _Mybase(_Message) 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma warning(pop)
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(push,3)
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(disable: 4275)
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma pack ( pop )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data { 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char *_UndecoratedName; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char _DecoratedName[1]; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#pragma warning(pop)
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__declspec(dllimport) int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__declspec(dllimport) size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__declspec(dllimport) const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}__pragma(pack ( pop )) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class type_info { 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: type_info(const type_info &) = delete;
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
type_info &operator=(const type_info &) = delete;
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
size_t hash_code() const throw() 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_hash(&(_Data)); 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
bool operator==(const type_info &_Other) const throw() 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
bool operator!=(const type_info &_Other) const throw() 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
bool before(const type_info &_Other) const throw() 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char *name() const throw() 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char *raw_name() const throw() 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return (_Data)._DecoratedName; 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
virtual ~type_info() throw(); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: mutable __std_type_info_data _Data; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
using ::type_info;
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class bad_cast : public exception { 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: bad_cast() throw() : exception("bad cast", 1) 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
static bad_cast __construct_from_string_literal(const char *const _Message) throw() 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return bad_cast(_Message, 1); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: bad_cast(const char *const _Message, int) throw() : exception(_Message, 1) 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class bad_typeid : public exception { 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: bad_typeid() throw() : exception("bad typeid", 1) 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
static bad_typeid __construct_from_string_literal(const char *const _Message) throw() 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return bad_typeid(_Message, 1); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
friend class __non_rtti_object; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: bad_typeid(const char *const _Message, int) throw() : exception(_Message, 1) 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class __non_rtti_object : public bad_typeid { 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) throw() 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __non_rtti_object(_Message, 1); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: __non_rtti_object(const char *const _Message, int) throw() : bad_typeid(_Message, 1) 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(pop)
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isctype(int _C, int _Type); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isalpha(int _C); 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isupper(int _C); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl islower(int _C); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isdigit(int _C); 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isxdigit(int _C); 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isspace(int _C); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl ispunct(int _C); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isblank(int _C); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isalnum(int _C); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isprint(int _C); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isgraph(int _C); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl iscntrl(int _C); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl toupper(int _C); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl tolower(int _C); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _tolower(int _C); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _toupper(int _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __isascii(int _C); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __toascii(int _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __iscsymf(int _C); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __iscsym(int _C); 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _chvalidator(int _Ch, int _Mask); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _chvalidator_l(_locale_t, int _Ch, int _Mask); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline int __cdecl _chvalidchk_l(const int 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_C, const int 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Locale) 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return _chvalidator_l(_Locale, _C, _Mask); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline int __cdecl _ischartype_l(const int 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_C, const int 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Locale) 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
if (_Locale && ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1)) 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return _isctype_l(_C, _Mask, _Locale); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}  
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return _chvalidchk_l(_C, _Mask, _Locale); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
struct lconv { 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *decimal_point; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *thousands_sep; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *grouping; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *int_curr_symbol; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *currency_symbol; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *mon_decimal_point; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *mon_thousands_sep; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *mon_grouping; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *positive_sign; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *negative_sign; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char int_frac_digits; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char frac_digits; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char p_cs_precedes; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char p_sep_by_space; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char n_cs_precedes; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char n_sep_by_space; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char p_sign_posn; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char n_sign_posn; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_decimal_point; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_thousands_sep; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_int_curr_symbol; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_currency_symbol; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_mon_decimal_point; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_mon_thousands_sep; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_positive_sign; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_negative_sign; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
}; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) void __cdecl _lock_locales(); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) void __cdecl _unlock_locales(); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) int __cdecl _configthreadlocale(int _Flag); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) lconv *__cdecl localeconv(); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) _locale_t __cdecl _get_current_locale(); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) _locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) void __cdecl _free_locale(_locale_t _Locale); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) __wchar_t **__cdecl ___lc_locale_name_func(); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) unsigned __cdecl ___lc_codepage_func(); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) unsigned __cdecl ___lc_collate_cp_func(); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
}
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma warning(push,3)
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__pragma(pack ( pop )) 
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma pack ( push, 8 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
extern "C" {
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
struct _Collvec { 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Page; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__wchar_t *_LocaleName; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
} _Collvec; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
struct _Ctypevec { 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Page; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
const short *_Table; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
int _Delfl; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__wchar_t *_LocaleName; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
} _Ctypevec; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
struct _Cvtvec { 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Page; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Mbcurmax; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
int _Isclocale; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned char _Isleadbyte[32]; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
} _Cvtvec; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _Collvec __cdecl _Getcoll(); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _Ctypevec __cdecl _Getctype(); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Getdateorder(); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) float __cdecl _Stof(const char *, char **, long); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) double __cdecl _Stod(const char *, char **, long); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) long double __cdecl _Stold(const char *, char **, long); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
}
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
extern "C" {
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
}
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(push,3)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(disable: 4412)
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
class __declspec(dllimport) _Timevec { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
public: _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec(const _Timevec &_Right) 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((*this) = _Right); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
~_Timevec() noexcept 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free(_Timeptr); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec &operator=(const _Timevec &_Right) 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
(_Timeptr) = (_Right._Timeptr); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
(((_Timevec *)(&_Right))->_Timeptr) = (0); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return *this; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
void *_Getptr() const 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Timeptr; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
private: void *_Timeptr; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
class __declspec(dllimport) _Locinfo { 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
public: typedef ::_Collvec _Collvec; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
typedef ::_Ctypevec _Ctypevec; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
typedef ::_Cvtvec _Cvtvec; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
typedef std::_Timevec _Timevec; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Pch == (0)) { 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo_ctor(this, _Pch); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Pch == (0)) { 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo_ctor(this, _Cat, _Pch); 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
~_Locinfo() noexcept 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo_dtor(this); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo &_Addcats(int _Cat, const char *_Pch) 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Pch == (0)) { 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getname() const 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (_Newlocname)._C_str(); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Collvec _Getcoll() const 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getcoll(); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Ctypevec _Getctype() const 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getctype(); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Cvtvec _Getcvt() const 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getcvt(); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const lconv *_Getlconv() const 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return localeconv(); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec _Gettnames() const 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ((_Timevec)(::_Gettnames())); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getdays() const 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Ptr = ::_Getdays(); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_Days) = _Ptr); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getmonths() const 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Ptr = ::_Getmonths(); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_Months) = _Ptr); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getfalse() const 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return "false"; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Gettrue() const 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return "true"; 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
int _Getdateorder() const 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getdateorder(); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec _W_Gettnames() const 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ((_Timevec)(::_W_Gettnames())); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const unsigned short *_W_Getdays() const 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_W_Days) = _Ptr); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (const unsigned short *)((!(_W_Days)._Empty()) ? (_W_Days)._C_str() : (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79")); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const unsigned short *_W_Getmonths() const 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_W_Months) = _Ptr); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (const unsigned short *)((!(_W_Months)._Empty()) ? (_W_Months)._C_str() : (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72")); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo(const _Locinfo &) = delete;
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo &operator=(const _Locinfo &) = delete;
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
private: _Lockit _Lock; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Months; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Days; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Months; 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Oldlocname; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Newlocname; 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template < class _Elem > inline
 int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( * _First1 < * _First2 )
   return ( - 1 );
  else if ( * _First2 < * _First1 )
   return ( + 1 );
 return ( _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0 );
 }
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template < class _Elem > inline
 size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 size_t _Count = _Last2 - _First2;
 if ( _Count <= ( size_t ) ( _Last1 - _First1 ) )
  :: memcpy_s ( ( _First1 ), ( ( _Last1 - _First1 ) * sizeof ( _Elem ) ), ( _First2 ), ( _Count * sizeof ( _Elem ) ) );

 return ( _Count );
 }
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(char *
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First1, char *_Last1, const char *
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First1, __wchar_t *_Last1, const __wchar_t *
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma warning(push,3)
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
class __declspec(dllimport) _Facet_base { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
public: virtual ~_Facet_base() noexcept 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
{ 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
} 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
virtual void _Incref() = 0; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
virtual _Facet_base *_Decref() = 0; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
}; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
}
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push,3)
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(disable: 4412 28197)
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
namespace std { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class _Locbase { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: static const int collate = ((1 << 1) >> 1); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int ctype = ((1 << 2) >> 1); 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int monetary = ((1 << 3) >> 1); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int numeric = ((1 << 4) >> 1); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int time = ((1 << 5) >> 1); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int messages = ((1 << 6) >> 1); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int all = (((1 << (6 + 1)) >> 1) - 1); 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int none = 0; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::collate; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::ctype; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::monetary; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::numeric; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::time; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::messages; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::all; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::none; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class locale; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet >
 const _Facet & __cdecl use_facet ( const locale & );
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Elem> class collate; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
struct __declspec(dllimport) _Crt_new_delete { 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void *__cdecl operator new(size_t _Size) 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void *_Ptr = operator new(_Size, nothrow); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptr) { 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xbad_alloc(); }  
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ptr; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void *__cdecl operator new(size_t _Size, const nothrow_t &) noexcept 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _malloc_dbg((_Size > (0)) ? _Size : (1), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 74); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void __cdecl operator delete(void *_Ptr) noexcept 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free(_Ptr); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void __cdecl operator delete(void *_Ptr, const nothrow_t &) noexcept 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
operator delete(_Ptr); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void *__cdecl operator new(size_t, void *_Ptr) noexcept 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ptr; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void __cdecl operator delete(void *, void *) noexcept 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef int category; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) id { 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: id(size_t _Val = 0) : _Id(_Val) 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
operator size_t() 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Id) == (0)) 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Lockit _Lock(0); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Id) == (0)) { 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Id) = (++_Id_cnt); }  
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Id; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: size_t _Id; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static int _Id_cnt; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: id(const id &) = delete;
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
id &operator=(const id &) = delete;
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class _Locimp; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) facet : public _Facet_base, public _Crt_new_delete { 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (size_t)(-1); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual void _Incref() 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Facet_base *_Decref() 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) { 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this; } else { 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; }  
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Atomic_counter_t _Myrefs; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: explicit facet(size_t _Initrefs = 0) 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual ~facet() noexcept 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: facet(const facet &) = delete;
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
facet &operator=(const facet &) = delete;
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) _Locimp : public facet { 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~_Locimp() noexcept 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp_dtor(this); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
friend class locale; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp(bool _Transparent) : facet(1), _Facetvec((0)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((0)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp_ctor(this, _Right); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Addfac(facet *_Pfacet, size_t _Id) 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
facet **_Facetvec; 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Facetcount; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
category _Catmask; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Xparent; 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Yarn< char>  _Name; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static _Locimp *_Clocptr; 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: _Locimp &operator=(const _Locimp &) = delete;
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
  class _Traits,
  class _Alloc >
  bool operator ( ) ( const basic_string < _Elem, _Traits, _Alloc > & _Left,
   const basic_string < _Elem, _Traits, _Alloc > & _Right ) const
  {
  const :: std :: collate < _Elem > & _Coll_fac =
   use_facet < :: std :: collate < _Elem > > ( * this );

  return ( _Coll_fac . compare ( _Left . c_str ( ), _Left . c_str ( ) + _Left . size ( ),
   _Right . c_str ( ), _Right . c_str ( ) + _Right . size ( ) ) < 0 );
  }
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet >
  locale combine ( const locale & _Loc ) const
  {
  _Facet * _Facptr;

  try {
   _Facptr = ( _Facet * ) & use_facet < _Facet > ( _Loc );
  } catch ( ... ) {
   _Xruntime_error ( "locale::combine facet missing" );
  }

  _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
  _Newimp -> _Addfac ( _Facptr, _Facet :: id );
  _Newimp -> _Catmask = none;
  _Newimp -> _Name = "*";
  return ( locale ( _Newimp ) );
  }
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet >
  locale ( const locale & _Loc, const _Facet * _Facptr )
   : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) )
  {
  if ( _Facptr != 0 )
   {
   _Ptr -> _Addfac ( ( _Facet * ) _Facptr, _Facet :: id );
   _Ptr -> _Catmask = none;
   _Ptr -> _Name = "*";
   }
  }
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(_Uninitialized) 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale() noexcept : _Ptr(_Init(true)) 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Loc, const locale &_Other, category 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Cat != none) 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
try { 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} catch (...) { 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
throw; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: void _Construct(const string &_Str, category 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Bad = false; 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Init(); 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Cat != none) 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
try { 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (this->_Badname(_Lobj)) { 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bad = true; } else 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ptr)->_Catmask) = _Cat; 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} catch (...) { 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
throw; 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bad) 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xruntime_error("bad locale name"); 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: explicit locale(const char *_Locname, category 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Locname == (0)) { 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xruntime_error("bad locale name"); }  
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Loc, const char *_Locname, category 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Locname == (0)) { 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xruntime_error("bad locale name"); }  
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit locale(const string &_Str, category 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Loc, const string &_Str, category 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
~locale() noexcept 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ptr) != (0)) { 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); }  
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale &operator=(const locale &_Right) noexcept 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ptr) != (_Right._Ptr)) 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ptr) = (_Right._Ptr); 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return *this; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
string name() const 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Ptr) == (0)) ? string() : ((_Ptr)->_Name).c_str()); 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *c_str() const 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((_Ptr) == (0)) ? "" : ((_Ptr)->_Name).c_str(); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const facet *_Getfacet(size_t _Id) const 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (0); 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Facptr != (0)) || (!((_Ptr)->_Xparent))) { 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Facptr; } else 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Id < (_Ptr0->_Facetcount)) ? (_Ptr0->_Facetvec)[_Id] : (0); 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool operator==(const locale &_Loc) const 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((_Ptr) == (_Loc._Ptr)) || (((this->name()).compare("*") != 0) && ((this->name()).compare(_Loc.name()) == 0)); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool operator!=(const locale &_Right) const 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return !((*this) == _Right); 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static const locale &__cdecl 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
classic(); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static locale __cdecl 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
global(const locale &); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static locale __cdecl 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
empty(); 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static _Locimp *__cdecl 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Init(bool _Do_incref = false); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static _Locimp *__cdecl 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Getgloballocale(); 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static void __cdecl 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Setgloballocale(void *); 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Badname(const _Locinfo &_Lobj) 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp *_Ptr; 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Facet> 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
struct _Facetptr { 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const locale::facet *_Psave; 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Facet> const locale::facet *
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Facetptr< _Facet> ::_Psave = (0); 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet > inline
 const _Facet & __cdecl use_facet ( const locale & _Loc )

 {





 { :: std :: _Lockit _Lock ( 0 );
  const locale :: facet * _Psave =
   _Facetptr < _Facet > :: _Psave;

  size_t _Id = _Facet :: id;
  const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

  if ( _Pf != 0 )
   ;
  else if ( _Psave != 0 )
   _Pf = _Psave;
  else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == ( size_t ) ( - 1 ) )



   throw :: std :: bad_cast ( );





  else
   {
   _Pf = _Psave;
   _Facetptr < _Facet > :: _Psave = _Psave;

   locale :: facet * _Pfmod = ( _Facet * ) _Psave;
   _Pfmod -> _Incref ( );





   _Facet_Register ( _Pfmod );

   }

  return ( ( const _Facet & ) ( * _Pf ) );
 }

 }
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _InIt > inline
 int __cdecl _Getloctxt ( _InIt & _First, _InIt & _Last, size_t _Numfields,
  const _Elem * _Ptr )
 {
 for ( size_t _Off = 0; _Ptr [ _Off ] != ( _Elem ) 0; ++ _Off )
  if ( _Ptr [ _Off ] == _Ptr [ 0 ] )
   ++ _Numfields;
 string _Str ( _Numfields, '\000' );

 int _Ans = - 2;
 for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 )
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++ _Field )
   {
   for (; _Ptr [ _Off ] != ( _Elem ) 0 && _Ptr [ _Off ] != _Ptr [ 0 ]; ++ _Off )
    ;

   if ( _Str [ _Field ] != '\000' )
    _Off += _Str [ _Field ];
   else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
    || _Ptr [ _Off ] == ( _Elem ) 0 )
    {
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
    _Ans = ( int ) _Field;
    }
   else if ( _First == _Last || _Ptr [ _Off ] != * _First )
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
   else
    _Prefix = true;
   }

  if ( ! _Prefix || _First == _Last )
   break;
  }
 return ( _Ans );
 }
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 char __cdecl _Maklocbyte ( _Elem _Char,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( char ) ( unsigned char ) _Char );
 }
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Byte = '\000'; 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Byte; 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Byte = '\000'; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Wcrtomb(&_Byte, (__wchar_t)_Char, &_Mbst1, &_Cvt); 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Byte; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 _Elem __cdecl _Maklocchr ( char _Byte, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( _Elem ) ( unsigned char ) _Byte );
 }
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t _Wc = L'\x0'; 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wc; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Wc = ((unsigned short)0); 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wc; 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 _Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 size_t _Count = :: strlen ( _Ptr ) + 1;

 _Elem * _Ptrdest = ( _Elem * ) _calloc_dbg ( _Count, sizeof ( _Elem ),
  2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 723 );

 if ( ! _Ptrdest )
  _Xbad_alloc ( );

 #pragma warning(push)
 #pragma warning(disable: 6011)
 for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr )
  * _Ptrnext = ( _Elem ) ( unsigned char ) * _Ptr;
 #pragma warning(pop)

 return ( _Ptrdest );
 }
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Count, _Count1; 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Wchars; 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *_Ptr1; 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t _Wc; 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrdest = (__wchar_t *)_calloc_dbg(_Wchars, sizeof(__wchar_t), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 756); 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptrdest) { 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xbad_alloc(); }  
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 6011)
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#pragma warning(pop)
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ptrdest; 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Count, _Count1; 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Wchars; 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *_Ptr1; 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Wc; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc((__wchar_t *)(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 795 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrdest = (__wchar_t *)_calloc_dbg(_Wchars, sizeof(__wchar_t), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 796); 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptrdest) { 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xbad_alloc(); }  
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (unsigned short *)_Ptrdest; 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) codecvt_base : public locale::facet { 
#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: enum { 
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ok, partial, error, noconv}; 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef int result; 
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool always_noconv() const noexcept 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_always_noconv(); 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int max_length() const noexcept 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_max_length(); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int encoding() const noexcept 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_encoding(); 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 845 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual ~codecvt_base() noexcept 
#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual bool do_always_noconv() const noexcept 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 1; 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 1; 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt
  : public codecvt_base
 {
public :
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in ( _Statype & _State,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  return ( do_in ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result out ( _Statype & _State,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_out ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result unshift ( _Statype & _State,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_unshift ( _State, _First2, _Last2, _Mid2 ) );
  }

 int length ( _Statype & _State, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( do_length ( _State, _First1, _Last1, _Count ) );
  }

  static locale :: id id;

 explicit codecvt ( size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Locinfo ( ) );
  }

  codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new codecvt < _Elem, _Byte, _Statype > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ codecvt ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

 virtual bool do_always_noconv ( ) const noexcept
  {
  return ( is_same < _Byte, _Elem > :: value );
  }

 virtual result do_in ( _Statype &,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if ( is_same < _Byte, _Elem > :: value )
   return ( noconv );
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
    * _Mid2 = ( _Elem ) * _Mid1;
   return ( ok );
   }
  }

 virtual result do_out ( _Statype &,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if ( is_same < _Byte, _Elem > :: value )
   return ( noconv );
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
    * _Mid2 = ( _Byte ) * _Mid1;
   return ( ok );
   }
  }

 virtual result do_unshift ( _Statype &,
  _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const
  {
  _Mid2 = _First2;
  return ( ok );
  }

 virtual int do_length ( _Statype &, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( ( int ) ( _Count < ( size_t ) ( _Last1 - _First1 )
   ? _Count : _Last1 - _First1 ) );
  }
 };
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Elem, class 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte, class 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype> locale::id 
#line 994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
enum _Codecvt_mode { 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Consume_header = 4, 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Generate_header = 2
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef std::codecvt< char16_t, char, _Mbstatet>  _Mybase; 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char16_t _Elem; 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &) 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) { 
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch; 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra, _Nskip; 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) <= 1) { 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_By < 128) || (192 <= _By)) { 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else 
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)((*_Pstate) | (_By & 63))); 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
continue; 
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 128) { 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = _By), (_Nextra = 0); } else { 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 192) 
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 224) { 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 31)), (_Nextra = 1); } else { 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 240) { 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 15)), (_Nextra = 2); } else { 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 248) { 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 7)), (_Nextra = 3); } else { 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 3)), (_Nextra = ((_By < 252) ? 4 : 5)); }  }  }  }  }  
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1 = _Mid1; 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Nextra == 0) { 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; } else { 
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) { 
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else { 
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) { 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); }  }  }  }  
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < _Nskip) { 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch <<= 6; }  
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((((_Maxcode) < (1114111)) ? _Maxcode : (1114111)) < _Ch) { 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((65535) < _Ch) 
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Ch0 = (unsigned short)((55296) | ((_Ch >> 10) - (64))); 
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch0); 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = ((unsigned short)((56320) | (_Ch & (1023)))); 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
continue; 
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Nskip == 0) { 
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Mid1 == _Last1) 
#line 1159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_By = ((unsigned char)(*(_Mid1++)))) < 128) || (192 <= _By)) { 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch |= (_By & 63); }  }  }  
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ans == (_Mybase::partial)) 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (0); 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} }  
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch; 
#line 1203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Ch1 = (unsigned short)(*_Mid1); 
#line 1204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Save = false; 
#line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (1 < (*_Pstate)) 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ch1 < 56320) || (57344 <= _Ch1)) { 
#line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; }  
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = (((*_Pstate) << 10) | (_Ch1 - 56320)); 
#line 1211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((55296 <= _Ch1) && (_Ch1 < 56320)) 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = (((_Ch1 - 55296) + 64) << 10); 
#line 1215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Save = true; 
#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = _Ch1; }  }  
#line 1220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _By; 
#line 1221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra; 
#line 1223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (128)) { 
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)_Ch)), (_Nextra = 0); } else { 
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (2048)) { 
#line 1226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((192) | (_Ch >> 6)))), (_Nextra = 1); } else { 
#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (65536)) { 
#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((224) | (_Ch >> 12)))), (_Nextra = 2); } else { 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((240) | (_Ch >> 18)))), (_Nextra = 3); }  }  }  
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < _Nput) { 
#line 1235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else { 
#line 1236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((*_Pstate) != 0) || (((_Mode) & (_Generate_header)) == 0)) { 
#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (3 + _Nput)) { 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else 
#line 1241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  }  
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Save || (_Nextra < 3)) 
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = _By; 
#line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
--_Nput; 
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; 0 < _Nput; --_Nput) { 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); }  
#line 1256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = ((unsigned short)(_Save ? _Ch >> 10 : (1))); 
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (1 < (*_Pstate)) ? _Mybase::error : _Mybase::ok; 
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Wchars = (0); 
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Wchars < _Count) && (_First1 != _Last1);) 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem *_Mid2; 
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 1284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2)) 
#line 1286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::noconv:  
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)(_Wchars + (_Last1 - _First1)); 
#line 1290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::ok:  
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Mid2 == ((&_Ch) + 1)) { 
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; }  
#line 1293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1 = _Mid1; 
#line 1294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 1305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Mode) & (_Consume_header)) != 0) ? 9 : ((((_Mode) & (_Generate_header)) != 0) ? 7 : 6); 
#line 1314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef std::codecvt< char32_t, char, _Mbstatet>  _Mybase; 
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char32_t _Elem; 
#line 1334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &) 
#line 1407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char *_Pstate = (char *)(&_State); 
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch; 
#line 1422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra; 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 128) { 
#line 1425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = _By), (_Nextra = 0); } else { 
#line 1426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 192) 
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; 
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 224) { 
#line 1432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 31)), (_Nextra = 1); } else { 
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 240) { 
#line 1434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 15)), (_Nextra = 2); } else { 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 248) { 
#line 1436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 7)), (_Nextra = 3); } else { 
#line 1438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 3)), (_Nextra = ((_By < 252) ? 4 : 5)); }  }  }  }  }  
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Nextra == 0) { 
#line 1441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; } else { 
#line 1442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last1 - _Mid1) < (_Nextra + 1)) { 
#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else { 
#line 1445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) { 
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); }  }  }  }  
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ans == (_Mybase::partial)) 
#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (0); 
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; }  
#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char *_Pstate = (char *)(&_State); 
#line 1482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _By; 
#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra; 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch = (unsigned long)(*_Mid1); 
#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; }  
#line 1494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (128)) { 
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)_Ch)), (_Nextra = 0); } else { 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (2048)) { 
#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((192) | (_Ch >> 6)))), (_Nextra = 1); } else { 
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (65536)) { 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((224) | (_Ch >> 12)))), (_Nextra = 2); } else { 
#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (2097152)) { 
#line 1501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((240) | (_Ch >> 18)))), (_Nextra = 3); } else { 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (67108864)) { 
#line 1503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((248) | (_Ch >> 24)))), (_Nextra = 4); } else { 
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((252) | ((_Ch >> 30) & (3))))), (_Nextra = 5); }  }  }  }  }  
#line 1507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_Mode) & (_Generate_header)) == 0) { 
#line 1511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) { 
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::partial; } else 
#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (1 + _Nextra)) { 
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  
#line 1525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for ((*(_Mid2++)) = _By; 0 < _Nextra;) { 
#line 1527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); }  
#line 1528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &, _Byte *
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::ok; 
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Wchars = 0; 
#line 1543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (((size_t)_Wchars) < _Count) && (_First1 != _Last1);) 
#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem *_Mid2; 
#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 1551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2)) 
#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::noconv:  
#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)(_Wchars + ((int)(_Last1 - _First1))); 
#line 1557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::ok:  
#line 1558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Mid2 == ((&_Ch) + 1)) { 
#line 1559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; }  
#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1 = _Mid1; 
#line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 1574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 1577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 1583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef __wchar_t _Elem; 
#line 1600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 1666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 1668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1674); 
#line 1675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1675); 
#line 1676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (_Mid1 == _Last1) ? ok : partial; 
#line 1678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1, &_State, &(_Cvt))) 
#line 1683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 1685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _Last1; 
#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; 
#line 1691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 1692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Mid2) == ((_Elem)0)) { 
#line 1693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 1699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid2; 
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (ok); 
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1710); 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1711); 
#line 1712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((int)5) <= (_Last2 - _Mid2)) { 
#line 1717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); }  } else 
#line 1723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < _Bytes) 
#line 1731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else 
#line 1736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); 
#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 1742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1747); 
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (ok); 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (error); } else { 
#line 1756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (partial); 
#line 1760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < _Bytes) 
#line 1762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  }  
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1772); 
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Wchars; 
#line 1774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for ((_Wchars = 0), (_Mid1 = _First1); (((size_t)_Wchars) < _Count) && (_Mid1 != _Last1);) 
#line 1779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 1783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1, &_Mystate, &(_Cvt))) 
#line 1785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 1787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 1789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 1790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 1793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch == ((_Elem)0)) { 
#line 1794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 1799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 1800 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 1802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 1808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 1813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 5; 
#line 1815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; 
#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 1824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef unsigned short _Elem; 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1889 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1908); 
#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1909); 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (_Mid1 == _Last1) ? ok : partial; 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc((__wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1, &_State, &(_Cvt))) 
#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 1919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _Last1; 
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 1923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; 
#line 1925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Mid2) == ((_Elem)0)) { 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid2; 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (ok); 
#line 1936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1944); 
#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1945); 
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((int)5) <= (_Last2 - _Mid2)) { 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); }  } else 
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < _Bytes) 
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1966 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else 
#line 1970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1972 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); 
#line 1973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 1976 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1979 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First2, _Last2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 1981); 
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (ok); 
#line 1984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (error); } else { 
#line 1990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (partial); 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < _Bytes) 
#line 1996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  }  
#line 2000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 2001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First1, _Last1, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2006); 
#line 2007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Wchars; 
#line 2008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 2009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for ((_Wchars = 0), (_Mid1 = _First1); (((size_t)_Wchars) < _Count) && (_Mid1 != _Last1);) 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 2017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc((__wchar_t *)(&_Ch), _Mid1, _Last1 - _Mid1, &_Mystate, &(_Cvt))) 
#line 2019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 2023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch == ((_Elem)0)) { 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 2038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 2044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 5; 
#line 2049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; 
#line 2054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 2058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt_byname
  : public codecvt < _Elem, _Byte, _Statype >
 {
public :
 explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ codecvt_byname ( ) noexcept
  {
  }
 };
#line 2086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 2089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
struct __declspec(dllimport) ctype_base : public locale::facet { 
#line 2093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
enum { 
#line 2094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
alnum = 263, alpha = 259, 
#line 2095 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
cntrl = 32, digit = 4, graph = 279, 
#line 2096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
lower = 2, print = 471, 
#line 2097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
punct = 16, space = 72, upper = 1, 
#line 2098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
xdigit = 128, blank = 72}; 
#line 2099 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef short mask; 
#line 2101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 2103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual ~ctype_base() noexcept 
#line 2107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 2114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem >
 class ctype
  : public ctype_base
 {
public :
 typedef _Elem char_type;

 bool is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( do_is ( _Maskval, _Ch ) );
  }

 const _Elem * is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  return ( do_is ( _First, _Last, _Dest ) );
  }

 const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_is ( _Maskval, _First, _Last ) );
  }

 const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_not ( _Maskval, _First, _Last ) );
  }

 _Elem tolower ( _Elem _Ch ) const
  {
  return ( do_tolower ( _Ch ) );
  }

 const _Elem * tolower ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_tolower ( _First, _Last ) );
  }

 _Elem toupper ( _Elem _Ch ) const
  {
  return ( do_toupper ( _Ch ) );
  }

 const _Elem * toupper ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_toupper ( _First, _Last ) );
  }

 _Elem widen ( char _Byte ) const
  {
  return ( do_widen ( _Byte ) );
  }

 const char * widen ( const char * _First, const char * _Last,
  _Elem * _Dest ) const
  {
  return ( do_widen ( _First, _Last, _Dest ) );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  return ( do_narrow ( _Ch, _Dflt ) );
  }

 const _Elem * narrow ( const _Elem * _First, const _Elem * _Last,
  char _Dflt, char * _Dest ) const
  {
  return ( do_narrow ( _First, _Last, _Dflt, _Dest ) );
  }

  static locale :: id id;

 explicit ctype ( size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new ctype < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ ctype ( ) noexcept
  {
  if ( _Ctype . _Delfl )
   :: free ( ( void * ) _Ctype . _Table );

  :: free ( _Ctype . _LocaleName );
  }

 void _Init ( const _Locinfo & _Lobj )
  {
  _Ctype = _Lobj . _Getctype ( );
  _Cvt = _Lobj . _Getcvt ( );
  }

 virtual bool do_is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( ( _Ctype . _Table [ ( unsigned char ) narrow ( _Ch ) ]
   & _Maskval ) != 0 );
  }

 virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2235 );
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Ctype . _Table [ ( unsigned char ) narrow ( * _First ) ];
  return ( _First );
  }

 virtual const _Elem * do_scan_is ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2244 );
  for (; _First != _Last && ! is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual const _Elem * do_scan_not ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2253 );
  for (; _First != _Last && is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual _Elem do_tolower ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_tolower ( _Elem * _First,
  const _Elem * _Last ) const
  {
  _Debug_range ( ( const _Elem * ) _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2271 );
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_toupper ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_toupper ( _Elem * _First,
  const _Elem * _Last ) const
  {
  _Debug_range ( ( const _Elem * ) _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2293 );
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_widen ( char _Byte ) const
  {
  return ( _Maklocchr ( _Byte, ( _Elem * ) 0, _Cvt ) );
  }

 virtual const char * do_widen ( const char * _First,
  const char * _Last, _Elem * _Dest ) const
  {
  _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2311 );
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Maklocchr ( * _First, ( _Elem * ) 0, _Cvt );
  return ( _First );
  }

 char _Donarrow ( _Elem _Ch, char _Dflt ) const
  {
  char _Byte;
  if ( _Ch == ( _Elem ) 0 )
   return ( '\000' );
  else if ( ( _Byte = _Maklocbyte ( ( _Elem ) _Ch, _Cvt ) ) == '\000' )
   return ( _Dflt );
  else
   return ( _Byte );
  }

 virtual char do_narrow ( _Elem _Ch, char _Dflt ) const
  {
  return ( _Donarrow ( _Ch, _Dflt ) );
  }

 virtual const _Elem * do_narrow ( const _Elem * _First,
  const _Elem * _Last, char _Dflt, char * _Dest ) const
  {
  _Debug_range_ptr ( _First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2336 );
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Donarrow ( * _First, _Dflt );
  return ( _First );
  }

private :
 _Locinfo :: _Ctypevec _Ctype;
 _Locinfo :: _Cvtvec _Cvt;
 };
#line 2348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Elem> locale::id 
#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype< _Elem> ::id; 
#line 2353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) ctype< char>  : public ctype_base { 
#line 2356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef std::ctype< char>  _Myt; 
#line 2359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef char _Elem; 
#line 2360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem char_type; 
#line 2362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((((_Ctype)._Table)[(unsigned char)_Ch]) & _Maskval) != 0; 
#line 2365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *
#line 2368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2370); 
#line 2371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = (((_Ctype)._Table)[(unsigned char)(*_First)]); }  
#line 2373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *
#line 2377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2379); 
#line 2380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *
#line 2386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2388); 
#line 2389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 2438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype(const mask *_Table = 0, bool 
#line 2439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Deletetable = false, size_t 
#line 2440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Refs = 0) : ctype_base(_Refs) 
#line 2442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Tidy(); 
#line 2448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Table != (0)) 
#line 2449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Table) = _Table; 
#line 2451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else 
#line 2454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Table) = classic_table(); 
#line 2456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Delfl) = 0; 
#line 2457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 2458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 2468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 2473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const mask *table() const noexcept 
#line 2476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Ctype)._Table; 
#line 2478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const mask *__cdecl classic_table() noexcept 
#line 2481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Myt &_Ctype_fac = use_facet< std::ctype< char> > (locale::classic()); 
#line 2483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ctype_fac.table(); 
#line 2484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const size_t table_size = (1 << 8); 
#line 2490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Tidy(); 
#line 2493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Tidy() 
#line 2501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < ((_Ctype)._Delfl)) { 
#line 2503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((void *)((_Ctype)._Table)); } else { 
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_Ctype)._Delfl) < 0) { 
#line 2505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete [] ((_Ctype)._Table); }  }  
#line 2507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Elem)_Tolower((unsigned char)_Ch, &(_Ctype)); 
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range((const _Elem *)_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2518); 
#line 2519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = ((_Elem)_Tolower((unsigned char)(*_First), &(_Ctype))); }  
#line 2521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Elem)_Toupper((unsigned char)_Ch, &(_Ctype)); 
#line 2527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range((const _Elem *)_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2532); 
#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = ((_Elem)_Toupper((unsigned char)(*_First), &(_Ctype))); }  
#line 2535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Byte; 
#line 2541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_widen(const char *_First, const char *
#line 2544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2546); 
#line 2547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Dest, _First, _Last - _First); 
#line 2548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Last; 
#line 2549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_narrow(_Elem _Ch, char) const 
#line 2552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ch; 
#line 2554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, char, char *_Dest) const 
#line 2558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2559); 
#line 2560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Dest, _First, _Last - _First); 
#line 2561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Last; 
#line 2562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) ctype< __wchar_t>  : public ctype_base { 
#line 2573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef std::ctype< __wchar_t>  _Myt; 
#line 2576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef __wchar_t _Elem; 
#line 2577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem char_type; 
#line 2579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 2646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 2667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 2673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((void *)((_Ctype)._Table)); }  
#line 2675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2692); 
#line 2693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2699); 
#line 2700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2708); 
#line 2709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 2717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range((const _Elem *)_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2722); 
#line 2723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = _Towlower(*_First, &(_Ctype)); }  
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 2731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range((const _Elem *)_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2736); 
#line 2737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = _Towupper(*_First, &(_Ctype)); }  
#line 2739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Dowiden(char _Byte) const 
#line 2743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t _Wc; 
#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (__wchar_t)((wint_t)65535) : _Wc; 
#line 2748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 2753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const char *do_widen(const char *_First, const char *
#line 2756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2758); 
#line 2759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); }  
#line 2761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Buf[5]; 
#line 2767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 
#line 2770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 2775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, char _Dflt, char *_Dest) const 
#line 2779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2780); 
#line 2781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
#line 2783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2788 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 2789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) ctype< unsigned short>  : public ctype_base { 
#line 2797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef std::ctype< unsigned short>  _Myt; 
#line 2800 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef unsigned short _Elem; 
#line 2801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem char_type; 
#line 2803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2821 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2853 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 2870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 2897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((void *)((_Ctype)._Table)); }  
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2916); 
#line 2917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)::_Getwctypes((const __wchar_t *)_First, (const __wchar_t *)_Last, _Dest, &(_Ctype)); 
#line 2919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2924); 
#line 2925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range(_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2933); 
#line 2934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 2942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range((const _Elem *)_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2947); 
#line 2948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = (_Towlower(*_First, &(_Ctype))); }  
#line 2950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 2956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range((const _Elem *)_First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2961); 
#line 2962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = (_Towupper(*_First, &(_Ctype))); }  
#line 2964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Dowiden(char _Byte) const 
#line 2968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Wc; 
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (unsigned short)((wint_t)65535) : _Wc; 
#line 2973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2976 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 2978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const char *do_widen(const char *_First, const char *
#line 2981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 2983); 
#line 2984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); }  
#line 2986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Buf[5]; 
#line 2992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 
#line 2995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 3000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 3003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, char _Dflt, char *_Dest) const 
#line 3004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Debug_range_ptr(_First, _Last, _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x61\x6c\x65", 3005); 
#line 3006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
#line 3008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 3009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 3013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 3014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 3018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem >
 class ctype_byname
 : public ctype < _Elem >
 {
public :
 explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ ctype_byname ( ) noexcept
  {
  }
 };
#line 3041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class ctype_byname< char>  : public ctype< char>  { 
#line 3045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: explicit ctype_byname(const char *_Locname, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Locname)), _Refs) 
#line 3047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype_byname(const string &_Str, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Str.c_str())), _Refs) 
#line 3052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype_byname() noexcept 
#line 3057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 3064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template class __declspec(dllimport) codecvt< char, char, _Mbstatet> ;
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}
#line 3069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma warning(push,3)
#line 3070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
namespace std { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
enum class errc { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
address_family_not_supported = 102, 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
address_in_use = 100, 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
address_not_available, 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
already_connected = 113, 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
argument_list_too_long = 7, 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
argument_out_of_domain = 33, 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bad_address = 14, 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bad_file_descriptor = 9, 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bad_message = 104, 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
broken_pipe = 32, 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_aborted = 106, 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_already_in_progress = 103, 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_refused = 107, 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_reset, 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
cross_device_link = 18, 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
destination_address_required = 109, 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
device_or_resource_busy = 16, 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
directory_not_empty = 41, 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
executable_format_error = 8, 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
file_exists = 17, 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
file_too_large = 27, 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
filename_too_long = 38, 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
function_not_supported = 40, 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
host_unreachable = 110, 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
identifier_removed, 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
illegal_byte_sequence = 42, 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inappropriate_io_control_operation = 25, 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
interrupted = 4, 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
invalid_argument = 22, 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
invalid_seek = 29, 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
io_error = 5, 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
is_a_directory = 21, 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
message_size = 115, 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
network_down, 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
network_reset, 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
network_unreachable, 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_buffer_space, 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_child_process = 10, 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_link = 121, 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_lock_available = 39, 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_message_available = 120, 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_message = 122, 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_protocol_option, 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_space_on_device = 28, 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_stream_resources = 124, 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_device_or_address = 6, 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_device = 19, 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_file_or_directory = 2, 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_process, 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_a_directory = 20, 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_a_socket = 128, 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_a_stream = 125, 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_connected, 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_enough_memory = 12, 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_supported = 129, 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_canceled = 105, 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_in_progress = 112, 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_not_permitted = 1, 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_not_supported = 130, 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_would_block = 140, 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
owner_dead = 133, 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
permission_denied = 13, 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protocol_error = 134, 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protocol_not_supported, 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
read_only_file_system = 30, 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
resource_deadlock_would_occur = 36, 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
resource_unavailable_try_again = 11, 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
result_out_of_range = 34, 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
state_not_recoverable = 127, 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
stream_timeout = 137, 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
text_file_busy = 139, 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
timed_out = 138, 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_files_open_in_system = 23, 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_files_open, 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_links = 31, 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_symbolic_link_levels = 114, 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
value_too_large = 132, 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
wrong_protocol_type = 136
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef errc _Errc; 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
enum class io_errc { 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
stream = 1
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef io_errc _Io_errc; 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Enum> 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
struct is_error_code_enum : public false_type { 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template<> struct is_error_code_enum< io_errc>  : public true_type { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Ty> constexpr bool 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Enum> 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
struct is_error_condition_enum : public false_type { 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template<> struct is_error_condition_enum< errc>  : public true_type { 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Ty> constexpr bool 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_code; 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_condition; 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Errc) noexcept; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Io_errc) noexcept; 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Errc) noexcept; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Io_errc) noexcept; 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_category; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &generic_category() noexcept; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &iostream_category() noexcept; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &system_category() noexcept; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_category { 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: error_category() noexcept 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (reinterpret_cast< uintptr_t>(this)); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual ~error_category() noexcept 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept = 0; 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errval) const = 0; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bool operator==(const error_category &_Right) const noexcept 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return (_Addr) == (_Right._Addr); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bool operator!=(const error_category &_Right) const noexcept 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((*this) == _Right); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bool operator<(const error_category &_Right) const noexcept 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return (_Addr) < (_Right._Addr); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_category(const error_category &) = delete;
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_category &operator=(const error_category &) = delete;
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protected: uintptr_t _Addr; 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
enum: uintptr_t { 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Future_addr = 1Ui64, 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Generic_addr = 3Ui64, 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Iostream_addr = 5Ui64, 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_System_addr = 7Ui64
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_code { 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: typedef error_code _Myt; 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_code() noexcept : _Myval(0), _Mycat(&system_category()) 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum,
  class = typename enable_if < is_error_code_enum < _Enum > :: value,
   void > :: type >
  error_code ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ), _Mycat ( 0 )
  {
  * this = make_error_code ( _Errcode );
  }
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = _Val; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum >
  typename enable_if < is_error_code_enum < _Enum > :: value,
   error_code > :: type & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_code ( _Errcode );
  return ( * this );
  }
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void clear() noexcept 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = 0; 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&system_category()); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
int value() const noexcept 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Myval; 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category &category() const noexcept 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return *(_Mycat); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition default_error_condition() const noexcept; 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
string message() const 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->category().message(this->value()); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
explicit operator bool() const noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->value() != 0; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
private: int _Myval; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category *_Mycat; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_condition { 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: typedef error_condition _Myt; 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_condition() noexcept : _Myval(0), _Mycat(&generic_category()) 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum,
  class = typename enable_if < is_error_condition_enum < _Enum > :: value,
   void > :: type >
  error_condition ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ), _Mycat ( 0 )
  {
  * this = make_error_condition ( _Errcode );
  }
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = _Val; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum >
  typename enable_if < is_error_condition_enum < _Enum > :: value,
   error_condition > :: type & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_condition ( _Errcode );
  return ( * this );
  }
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void clear() noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = 0; 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&generic_category()); 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
int value() const noexcept 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Myval; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category &category() const noexcept 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return *(_Mycat); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
string message() const 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->category().message(this->value()); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
explicit operator bool() const noexcept 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->value() != 0; 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
private: int _Myval; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category *_Mycat; 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_code &
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_code &
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_condition &
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Right.category().equivalent(_Right.value(), _Left) || _Left.category().equivalent(_Right, _Left.value()); 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_condition &
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_code &
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_code &
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_condition &
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_condition &
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator<(const error_code &
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator<(const error_condition &
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition error_category::default_error_condition(int _Errval) const noexcept 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition(_Errval, *this); 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool error_category::equivalent(int _Errval, const error_condition &
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Cond) const noexcept 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool error_category::equivalent(const error_code &_Code, int 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Errval) const noexcept 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition error_code::default_error_condition() const noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->category().default_error_condition(this->value()); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Errc _Errno) noexcept 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_code((int)_Errno, generic_category()); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Io_errc _Errno) noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_code((int)_Errno, iostream_category()); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Errc _Errno) noexcept 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition((int)_Errno, generic_category()); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Io_errc _Errno) noexcept 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition((int)_Errno, iostream_category()); 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template<> struct hash< error_code>  { 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef error_code argument_type; 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef size_t result_type; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
size_t operator()(const argument_type &_Keyval) const 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return std::hash< int> ()(_Keyval.value()); 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _System_error : public runtime_error { 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
static string _Makestr(error_code _Errcode, string _Message) 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (!_Message.empty()) { 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message.append(": "); }  
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message.append(_Errcode.message()); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Message; 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protected: _System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_code _Mycode; 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class system_error : public _System_error { 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef _System_error _Mybase; 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: system_error(error_code _Errcode) : _Mybase(_Errcode, "") 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat), "") 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const string &
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const char *
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_code &code() const noexcept 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Mycode; 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
__declspec(dllimport) const char *__cdecl _Syserror_map(int); 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
__declspec(dllimport) int __cdecl _Winerror_map(int); 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
__declspec(dllimport) unsigned long __cdecl _Winerror_message(unsigned long _Message_id, char * _Narrow, unsigned long _Size); 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _Generic_error_category : public error_category { 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: _Generic_error_category() noexcept 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (_Generic_addr); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "generic"; 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errcode) const 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Syserror_map(_Errcode); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _Iostream_error_category : public _Generic_error_category { 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: _Iostream_error_category() noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (_Iostream_addr); 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "iostream"; 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errcode) const 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (_Errcode == ((int)io_errc::stream)) { 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "iostream stream error"; } else { 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->_Generic_error_category::message(_Errcode); }  
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _System_error_category : public error_category { 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: _System_error_category() noexcept 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (_System_addr); 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "system"; 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errcode) const 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const unsigned long _Size = (32767); 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
string _Narrow(_Size, '\000'); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const unsigned long _Val = _Winerror_message(static_cast< unsigned long>(_Errcode), &_Narrow[0], _Size); 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (_Val == (0)) { 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "unknown error"; }  
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Narrow.resize(_Val); 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Narrow.shrink_to_fit(); 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Narrow; 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual error_condition default_error_condition(int _Errval) const noexcept 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
int _Posv = _Winerror_map(_Errval); 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (_Posv != 0) { 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition(_Posv, generic_category()); } else { 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition(_Errval, system_category()); }  
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Ty >
 struct _Immortalizer
 {
 _Immortalizer ( )
  {
  :: new ( static_cast < void * > ( & _Storage ) ) _Ty ( );
  }

 ~ _Immortalizer ( ) noexcept
  {
  }

 _Immortalizer ( const _Immortalizer & ) = delete;
 _Immortalizer & operator = ( const _Immortalizer & ) = delete;

 typename aligned_union < 1, _Ty > :: type _Storage;
 };
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Ty > inline
 _Ty & _Immortalize ( )
 {
  static _Immortalizer < _Ty > _Static;
 return ( * reinterpret_cast < _Ty * > ( & _Static . _Storage ) );
 }
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &generic_category() noexcept 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Immortalize< _Generic_error_category> (); 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &iostream_category() noexcept 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Immortalize< _Iostream_error_category> (); 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &system_category() noexcept 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Immortalize< _System_error_category> (); 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(push,3)
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(disable: 4412)
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
namespace std { 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class _Iosb { 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Fmtflags { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fmtmask = 65535, _Fmtzero = 0}; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags skipws = ((_Fmtflags)1); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags unitbuf = ((_Fmtflags)2); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags uppercase = ((_Fmtflags)4); 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags showbase = ((_Fmtflags)8); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags showpoint = ((_Fmtflags)16); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags showpos = ((_Fmtflags)32); 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags left = ((_Fmtflags)64); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags right = ((_Fmtflags)128); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags internal = ((_Fmtflags)256); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags dec = ((_Fmtflags)512); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags oct = ((_Fmtflags)1024); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags hex = ((_Fmtflags)2048); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags scientific = ((_Fmtflags)4096); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags fixed = ((_Fmtflags)8192); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags hexfloat = ((_Fmtflags)12288); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags boolalpha = ((_Fmtflags)16384); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags _Stdio = ((_Fmtflags)32768); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags adjustfield = ((_Fmtflags)((64 | 128) | 256)); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags basefield = ((_Fmtflags)((512 | 1024) | 2048)); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags floatfield = ((_Fmtflags)(4096 | 8192)); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Iostate { 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Statmask = 23}; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate goodbit = ((_Iostate)0); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate eofbit = ((_Iostate)1); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate failbit = ((_Iostate)2); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate badbit = ((_Iostate)4); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Openmode { 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Openmask = 255}; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode in = ((_Openmode)1); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode out = ((_Openmode)2); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode ate = ((_Openmode)4); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode app = ((_Openmode)8); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode trunc = ((_Openmode)16); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode _Nocreate = ((_Openmode)64); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode _Noreplace = ((_Openmode)128); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode binary = ((_Openmode)32); 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Seekdir { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Seekbeg, 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Seekcur, 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Seekend
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Seekdir beg = (_Seekbeg); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Seekdir cur = (_Seekcur); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Seekdir end = (_Seekend); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum { 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Openprot = 64}; 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::skipws; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::unitbuf; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::uppercase; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::showbase; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::showpoint; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::showpos; 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::left; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::right; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::internal; 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::dec; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::oct; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::hex; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::scientific; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::fixed; 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::hexfloat; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::boolalpha; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::_Stdio; 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::adjustfield; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::basefield; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::floatfield; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::goodbit; 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::eofbit; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::failbit; 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::badbit; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::in; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::out; 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::ate; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::app; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::trunc; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::_Nocreate; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::_Noreplace; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::binary; 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::beg; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::cur; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::end; 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class __declspec(dllimport) ios_base : public _Iosb< int>  { 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: typedef int fmtflags; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef int iostate; 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef int openmode; 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef int seekdir; 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef std::streamoff streamoff; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef std::streampos streampos; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum event { 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
erase_event, imbue_event, copyfmt_event}; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef void (__cdecl *event_callback)(event, ios_base &, int); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef unsigned io_state, open_mode, seek_dir; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class failure : public system_error { 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: explicit failure(const string &_Message, const error_code &
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
explicit failure(const char *_Message, const error_code &
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class __declspec(dllimport) Init { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: Init() 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Init_ctor(this); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
~Init() noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Init_dtor(this); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
private: static void __cdecl _Init_ctor(Init *); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static void __cdecl _Init_dtor(Init *); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int _Init_cnt; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int &__cdecl _Init_cnt_func(); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
explicit operator bool() const 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return !this->fail(); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool operator!() const 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->fail(); 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void clear(iostate _State, bool _Reraise) 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Mystate) = ((iostate)(_State & (_Statmask))); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Mystate) & (_Except)) == 0) { 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
; } else { 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_Reraise) { 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw; } else { 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Mystate) & (_Except)) & badbit) { 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw ((failure)("ios_base::badbit set")); } else { 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Mystate) & (_Except)) & failbit) { 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw ((failure)("ios_base::failbit set")); } else { 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw ((failure)("ios_base::eofbit set")); }  }  }  }  
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void clear(iostate _State = goodbit) 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear(_State, false); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void clear(io_state _State) 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear((iostate)_State); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate rdstate() const 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Mystate; 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void setstate(iostate _State, bool _Exreraise) 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_State != goodbit) { 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear((iostate)(((int)this->rdstate()) | ((int)_State)), _Exreraise); }  
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void setstate(iostate _State) 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_State != goodbit) { 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear((iostate)(((int)this->rdstate()) | ((int)_State)), false); }  
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void setstate(io_state _State) 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->setstate((iostate)_State); 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool good() const 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->rdstate() == goodbit; 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool eof() const 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return ((int)this->rdstate()) & ((int)eofbit); 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool fail() const 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return (((int)this->rdstate()) & (((int)badbit) | ((int)failbit))) != 0; 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool bad() const 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return (((int)this->rdstate()) & ((int)badbit)) != 0; 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate exceptions() const 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Except; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void exceptions(iostate _Newexcept) 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Except) = ((iostate)(((int)_Newexcept) & ((int)_Statmask))); 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear(_Mystate); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void exceptions(io_state _State) 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->exceptions((iostate)_State); 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags flags() const 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Fmtfl; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags flags(fmtflags _Newfmtflags) 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Oldfmtflags = _Fmtfl; 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(((int)_Newfmtflags) & ((int)_Fmtmask))); 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldfmtflags; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags) 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Oldfmtflags = _Fmtfl; 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(((int)(_Fmtfl)) | (((int)_Newfmtflags) & ((int)_Fmtmask)))); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldfmtflags; 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Oldfmtflags = _Fmtfl; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)((((int)(_Fmtfl)) & ((int)(~_Mask))) | ((((int)_Newfmtflags) & ((int)_Mask)) & ((int)_Fmtmask)))); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldfmtflags; 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void unsetf(fmtflags _Mask) 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(((int)(_Fmtfl)) & ((int)(~_Mask)))); 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize precision() const 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Prec; 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize precision(streamsize _Newprecision) 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Oldprecision = _Prec; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Prec) = _Newprecision; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldprecision; 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize width() const 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Wide; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize width(streamsize _Newwidth) 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Oldwidth = _Wide; 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Wide) = _Newwidth; 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldwidth; 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale getloc() const 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *(_Ploc); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale imbue(const locale &_Loc) 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale _Oldlocale = *(_Ploc); 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
((*(_Ploc)) = _Loc); 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Callfns(imbue_event); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldlocale; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int __cdecl xalloc() 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Index++; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
long &iword(int _Idx) 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->_Findarr(_Idx)._Lo; 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void *&pword(int _Idx) 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->_Findarr(_Idx)._Vp; 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void register_callback(event_callback _Pfn, int 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Idx) 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
ios_base &copyfmt(const ios_base &_Other) 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (this != (&_Other)) 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Tidy(); 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = (_Other._Fmtfl); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Prec) = (_Other._Prec); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Wide) = (_Other._Wide); 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Ptr = _Other._Arr; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for ((_Arr) = (0); _Ptr != (0); _Ptr = (_Ptr->_Next)) { 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Ptr->_Lo) != (0)) || ((_Ptr->_Vp) != (0))) 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  }  
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Fnarray *_Pfa = _Other._Calls; _Pfa != (0); _Pfa = (_Pfa->_Next)) { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); }  
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Callfns(copyfmt_event); 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->exceptions(_Other._Except); 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *this; 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static bool __cdecl sync_with_stdio(bool _Newsync = true) 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
const bool _Oldsync = _Sync; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Sync = _Newsync; 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldsync; 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void swap(ios_base &_Right) 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (this != (&_Right)) 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Mystate, _Right._Mystate); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Except, _Right._Except); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Prec, _Right._Prec); 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Wide, _Right._Wide); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Arr, _Right._Arr); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Calls, _Right._Calls); 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Ploc, _Right._Ploc); 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
virtual ~ios_base() noexcept 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Ios_base_dtor(this); 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static void __cdecl _Addstd(ios_base *); 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
size_t _Stdstr; 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
protected: ios_base() 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void _Init() 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Ploc) = (0); 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Stdstr) = (0); 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Except) = goodbit; 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(skipws | dec)); 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Prec) = (6); 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Wide) = (0); 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Arr) = (0); 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Calls) = (0); 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear(goodbit); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Ploc) = (new locale); 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
private: struct _Iosarray : public _Crt_new_delete { 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((0)) 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Next; 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
int _Index; 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
long _Lo; 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void *_Vp; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
struct _Fnarray : public _Crt_new_delete { 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray *_Next; 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
int _Index; 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
event_callback _Pfn; 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void _Callfns(event _Ev) 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Fnarray *_Pfa = _Calls; _Pfa != (0); _Pfa = (_Pfa->_Next)) { 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); }  
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray &_Findarr(int _Idx) 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Ptr1, *_Ptr2; 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for ((_Ptr1 = (_Arr)), (_Ptr2 = (0)); _Ptr1 != (0); _Ptr1 = (_Ptr1->_Next)) { 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if ((_Ptr1->_Index) == _Idx) { 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *_Ptr1; } else { 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Ptr2 == (0)) && ((_Ptr1->_Lo) == (0))) && ((_Ptr1->_Vp) == (0))) { 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Ptr2 = _Ptr1; }  }  }  
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_Ptr2 != (0)) 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Ptr2->_Index) = _Idx; 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *_Ptr2; 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *(_Arr); 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void _Tidy() 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Callfns(erase_event); 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Ptr1, *_Ptr2; 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Ptr1 = (_Arr); _Ptr1 != (0); _Ptr1 = _Ptr2) 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Ptr2 = (_Ptr1->_Next); 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
delete _Ptr1; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Arr) = (0); 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray *_Pfa1, *_Pfa2; 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Pfa1 = (_Calls); _Pfa1 != (0); _Pfa1 = _Pfa2) 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Pfa2 = (_Pfa1->_Next); 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
delete _Pfa1; 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Calls) = (0); 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate _Mystate; 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate _Except; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Fmtfl; 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Prec; 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Wide; 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Arr; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray *_Calls; 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale *_Ploc; 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int _Index; 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static bool _Sync; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: ios_base(const ios_base &) = delete;
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
ios_base &operator=(const ios_base &) = delete;
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(disable: 4251)
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class basic_streambuf
 {
 typedef basic_streambuf < _Elem, _Traits > _Myt;

protected :
  basic_streambuf ( )
  : _Plocale ( new locale )
  {
  _Init ( );
  }

  basic_streambuf ( _Uninitialized )
  {
  }

  basic_streambuf ( const _Myt & _Right )
  : _Plocale ( new locale ( _Right . getloc ( ) ) )
  {
  _Init ( );
  setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
  setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   pubimbue ( _Right . getloc ( ) );
   }
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Elem * _Pfirst0 = pbase ( );
   _Elem * _Pnext0 = pptr ( );
   _Elem * _Pend = epptr ( );
   _Elem * _Gfirst0 = eback ( );
   _Elem * _Gnext0 = gptr ( );
   _Elem * _Gend = egptr ( );

   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );

   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   _Right . setg ( _Gfirst0, _Gnext0, _Gend );

   :: std :: swap ( _Plocale, _Right . _Plocale );
   }
  }

public :
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~ basic_streambuf ( ) noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 pos_type pubseekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekoff ( _Off, _Way, _Mode ) );
  }


 pos_type pubseekoff ( off_type _Off,
  ios_base :: seek_dir _Way,
  ios_base :: open_mode _Mode )
  {
  return ( pubseekoff ( _Off, ( ios_base :: seekdir ) _Way,
   ( ios_base :: openmode ) _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekpos ( _Pos, _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: open_mode _Mode )
  {
  return ( seekpos ( _Pos, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * pubsetbuf ( _Elem * _Buffer,
  streamsize _Count )
  {
  return ( setbuf ( _Buffer, _Count ) );
  }

 locale pubimbue ( const locale & _Newlocale )
  {
  locale _Oldlocale = * _Plocale;
  imbue ( _Newlocale );
  * _Plocale = _Newlocale;
  return ( _Oldlocale );
  }

 locale getloc ( ) const
  {
  return ( * _Plocale );
  }

 streamsize in_avail ( )
  {
  streamsize _Res = _Gnavail ( );
  return ( 0 < _Res ? _Res : showmanyc ( ) );
  }

 int pubsync ( )
  {
  return ( sync ( ) );
  }

 int_type sbumpc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( ) );
  }

 int_type sgetc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( ) );
  }

 streamsize sgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsgetn ( _Ptr, _Count ) );
  }

 int_type snextc ( )
  {
  return ( 1 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
   : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) )
    ? _Traits :: eof ( ) : sgetc ( ) );
  }

 int_type sputbackc ( _Elem _Ch )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] )
   ? _Traits :: to_int_type ( * _Gndec ( ) )
   : pbackfail ( _Traits :: to_int_type ( _Ch ) ) );
  }


 void stossc ( )
  {
  if ( 0 < _Gnavail ( ) )
   _Gninc ( );
  else
   uflow ( );
  }


 int_type sungetc ( )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( ) );
  }

 int_type sputc ( _Elem _Ch )
  {
  return ( 0 < _Pnavail ( )
   ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch )
   : overflow ( _Traits :: to_int_type ( _Ch ) ) );
  }

 streamsize sputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsputn ( _Ptr, _Count ) );
  }

 virtual void _Lock ( )
  {
  }

 virtual void _Unlock ( )
  {
  }

protected :
 _Elem * eback ( ) const
  {
  return ( * _IGfirst );
  }

 _Elem * gptr ( ) const
  {
  return ( * _IGnext );
  }

 _Elem * pbase ( ) const
  {
  return ( * _IPfirst );
  }

 _Elem * pptr ( ) const
  {
  return ( * _IPnext );
  }

 _Elem * egptr ( ) const
  {
  return ( * _IGnext + * _IGcount );
  }

 void gbump ( int _Off )
  {
  * _IGcount -= _Off;
  * _IGnext += _Off;
  }

 void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IGfirst = _First;
  * _IGnext = _Next;
  * _IGcount = ( int ) ( _Last - _Next );
  }

 _Elem * epptr ( ) const
  {
  return ( * _IPnext + * _IPcount );
  }

 _Elem * _Gndec ( )
  {
  ++ * _IGcount;
  return ( -- * _IGnext );
  }

 _Elem * _Gninc ( )
  {
  -- * _IGcount;
  return ( ( * _IGnext ) ++ );
  }

 _Elem * _Gnpreinc ( )
  {
  -- * _IGcount;
  return ( ++ ( * _IGnext ) );
  }

 streamsize _Gnavail ( ) const
  {
  return ( * _IGnext != 0 ? * _IGcount : 0 );
  }

 void pbump ( int _Off )
  {
  * _IPcount -= _Off;
  * _IPnext += _Off;
  }

 void setp ( _Elem * _First, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _First;
  * _IPcount = ( int ) ( _Last - _First );
  }

 void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _Next;
  * _IPcount = ( int ) ( _Last - _Next );
  }

 _Elem * _Pninc ( )
  {
  -- * _IPcount;
  return ( ( * _IPnext ) ++ );
  }

 streamsize _Pnavail ( ) const
  {
  return ( * _IPnext != 0 ? * _IPcount : 0 );
  }

 void _Init ( )
  {
  _IGfirst = & _Gfirst;
  _IPfirst = & _Pfirst;
  _IGnext = & _Gnext;
  _IPnext = & _Pnext;
  _IGcount = & _Gcount;
  _IPcount = & _Pcount;
  setp ( 0, 0 );
  setg ( 0, 0, 0 );
  }

 void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc,
  _Elem * * _Pf, _Elem * * _Pn, int * _Pc )
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type pbackfail ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual streamsize showmanyc ( )
  {
  return ( 0 );
  }

 virtual int_type underflow ( )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type uflow ( )
  {
  return ( _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) )
   ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) ) );
  }

 virtual streamsize xsgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Size = _Gnavail ( ) ) )
    {
    if ( _Count < _Size )
     _Size = _Count;
    _Traits :: copy ( _Ptr, gptr ( ), ( size_t ) _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
    break;
   else
    {
    * _Ptr ++ = _Traits :: to_char_type ( _Meta );
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual streamsize xsputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  streamsize _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Size = _Pnavail ( ) ) )
    {
    if ( _Count < _Size )
     _Size = _Count;
    _Traits :: copy ( pptr ( ), _Ptr, ( size_t ) _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) )
    break;
   else
    {
    ++ _Ptr;
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual pos_type seekoff ( off_type,
  ios_base :: seekdir,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual pos_type seekpos ( pos_type,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual _Myt * setbuf ( _Elem *, streamsize )
  {
  return ( this );
  }

 virtual int sync ( )
  {
  return ( 0 );
  }

 virtual void imbue ( const locale & )
  {
  }

private :
 _Elem * _Gfirst;
 _Elem * _Pfirst;
 _Elem * * _IGfirst;
 _Elem * * _IPfirst;
 _Elem * _Gnext;
 _Elem * _Pnext;
 _Elem * * _IGnext;
 _Elem * * _IPnext;

 int _Gcount;
 int _Pcount;
 int * _IGcount;
 int * _IPcount;

protected :
 locale * _Plocale;
 };
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< char, char_traits< char> > ;
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< __wchar_t, char_traits< __wchar_t> > ;
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class istreambuf_iterator
  : public iterator < input_iterator_tag,
   _Elem, typename _Traits :: off_type, const _Elem *, _Elem >
 {
 typedef istreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_istream < _Elem, _Traits > istream_type;

 typedef typename traits_type :: int_type int_type;
 typedef const _Elem * pointer;

 constexpr istreambuf_iterator ( streambuf_type * _Sb = 0 ) noexcept
  : _Strbuf ( _Sb ), _Got ( _Sb == 0 ), _Val ( )
  {
  }

 istreambuf_iterator ( istream_type & _Istr ) noexcept
  : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( _Istr . rdbuf ( ) == 0 )
  {
  }

 _Elem operator * ( ) const
  {
  if ( ! _Got )
   _Peek ( );


  if ( _Strbuf == 0 )
   _Debug_message ( L"\x69\x73\x74\x72\x65\x61\x6d\x62\x75\x66\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66" L"\x65\x72\x65\x6e\x63\x61\x62\x6c\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x73" L"\x74\x72\x65\x61\x6d\x62\x75\x66", 517 );


  return ( _Val );
  }

 const _Elem * operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myt & operator ++ ( )
  {

  if ( _Strbuf == 0 )
   _Debug_message ( L"\x69\x73\x74\x72\x65\x61\x6d\x62\x75\x66\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65" L"\x6d\x65\x6e\x74\x61\x62\x6c\x65", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x73" L"\x74\x72\x65\x61\x6d\x62\x75\x66", 532 );


  _Inc ( );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  if ( ! _Got )
   _Peek ( );
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 bool equal ( const _Myt & _Right ) const
  {
  if ( ! _Got )
   _Peek ( );
  if ( ! _Right . _Got )
   _Right . _Peek ( );
  return ( ( _Strbuf == 0 && _Right . _Strbuf == 0 )
   || ( _Strbuf != 0 && _Right . _Strbuf != 0 ) );
  }

private :
 void _Inc ( )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Strbuf -> sbumpc ( ) ) )
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek ( ) const
  {
  int_type _Meta;
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Meta = _Strbuf -> sgetc ( ) ) )
   _Strbuf = 0;
  else
   _Val = traits_type :: to_char_type ( _Meta );
  _Got = true;
  return ( _Val );
  }

 mutable streambuf_type * _Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template< class _Elem, class 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
_Traits> 
#pragma pack(8)
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
struct _Is_checked_helper< istreambuf_iterator< _Elem, _Traits> , void>  : public true_type { 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
}; 
#pragma pack()
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits > inline
 bool operator == (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( _Left . equal ( _Right ) );
 }
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits > inline
 bool operator != (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_ostream < _Elem, _Traits > ostream_type;

 ostreambuf_iterator ( streambuf_type * _Sb ) noexcept
  : _Failed ( false ), _Strbuf ( _Sb )
  {
  }

 ostreambuf_iterator ( ostream_type & _Ostr ) noexcept
  : _Failed ( false ), _Strbuf ( _Ostr . rdbuf ( ) )
  {
  }

 _Myt & operator = ( _Elem _Right )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( _Traits :: eof ( ),
    _Strbuf -> sputc ( _Right ) ) )
   _Failed = true;
  return ( * this );
  }

 _Myt & operator * ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( int )
  {
  return ( * this );
  }

 bool failed ( ) const noexcept
  {
  return ( _Failed );
  }

private :
 bool _Failed;
 streambuf_type * _Strbuf;
 };
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template< class _Elem, class 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
_Traits> 
#pragma pack(8)
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
struct _Is_checked_helper< ostreambuf_iterator< _Elem, _Traits> , void>  : public true_type { 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
}; 
#pragma pack()
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
}
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(push,3)
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(disable: 4189 4275)
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma pack ( push, 8 )
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern float __cdecl _Stofx(const char *, char **, long, int *); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern double __cdecl _Stodx(const char *, char **, long, int *); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern long double __cdecl _Stoldx(const char *, char **, long, int *); 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern long __cdecl _Stolx(const char *, char **, int, int *); 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern unsigned long __cdecl _Stoulx(const char *, char **, int, int *); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern __int64 __cdecl _Stollx(const char *, char **, int, int *); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
}
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
namespace std { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
{ 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = 0; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
double _Val = ::strtod(_Str, _Endptr); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (_Pten != 0) { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Val *= ::pow((10.0), static_cast< double>(_Pten)); }  
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
return _Val; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
} 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
{ 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = 0; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
float _Val = ::strtof(_Str, _Endptr); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (_Pten != 0) { 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Val *= ::powf((10.0F), static_cast< float>(_Pten)); }  
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
return _Val; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
} 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem > inline
 size_t _Find_elem ( _Elem * _Base, _Elem _Ch )
 {
 _Elem * _Ptr = _Base;
 for (; * _Ptr != ( _Elem ) 0 && * _Ptr != _Ch; ++ _Ptr )
  ;
 return ( ( size_t ) ( _Ptr - _Base ) );
 }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
{ 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
size_t _Count = ::wcslen(_Ptr) + (1); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__wchar_t *_Ptrdest = (__wchar_t *)_calloc_dbg(_Count, sizeof(__wchar_t), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 102); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (!_Ptrdest) { 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Xbad_alloc(); }  
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
return _Ptrdest; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
} 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem >
 class numpunct
  : public locale :: facet
 {
public :
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  string_type;
 typedef _Elem char_type;

  __declspec ( dllimport ) static locale :: id id;

 _Elem decimal_point ( ) const
  {
  return ( do_decimal_point ( ) );
  }

 _Elem thousands_sep ( ) const
  {
  return ( do_thousands_sep ( ) );
  }

 string grouping ( ) const
  {
  return ( do_grouping ( ) );
  }

 string_type falsename ( ) const
  {
  return ( do_falsename ( ) );
  }

 string_type truename ( ) const
  {
  return ( do_truename ( ) );
  }

 explicit numpunct ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
   if ( _Kseparator == 0 )
    _Kseparator =
     _Maklocchr ( ',', ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  }
  }

 numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj, _Isdef );
  }

 static size_t _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new numpunct < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ), 0, true );
  return ( 4 );
  }

protected :
 virtual ~ numpunct ( ) noexcept
  {
  _Tidy ( );
  }

 numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj ( _Locname );
   _Init ( _Lobj, _Isdef );
  }
  }

 template < class _Elem2 >
  void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt )
  {
  _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], ( _Elem2 * ) 0, _Cvt );
  _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], ( _Elem2 * ) 0, _Cvt );
  }

 template < >
  void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec )
  {
  _Dp = ( _Elem ) _Ptr -> _W_decimal_point [ 0 ];
  _Kseparator = ( _Elem ) _Ptr -> _W_thousands_sep [ 0 ];
  }

 void _Init ( const _Locinfo & _Lobj, bool _Isdef = false )
  {
  const lconv * _Ptr = _Lobj . _Getlconv ( );
  _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, ( char * ) 0, _Lobj . _Getcvt ( ) );

  _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), ( _Elem * ) 0, _Cvt );
  _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), ( _Elem * ) 0, _Cvt );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }

  if ( _Isdef )
   {

   _Dp = _Maklocchr ( '.', ( _Elem * ) 0, _Cvt );
   _Kseparator = _Maklocchr ( ',', ( _Elem * ) 0, _Cvt );
   }
  else
   _Getvals ( ( _Elem ) 0, _Ptr, _Cvt );
  }

 virtual _Elem do_decimal_point ( ) const
  {
  return ( _Dp );
  }

 virtual _Elem do_thousands_sep ( ) const
  {
  return ( _Kseparator );
  }

 virtual string do_grouping ( ) const
  {
  return ( string ( _Grouping ) );
  }

 virtual string_type do_falsename ( ) const
  {
  return ( string_type ( _Falsename ) );
  }

 virtual string_type do_truename ( ) const
  {
  return ( string_type ( _Truename ) );
  }

private :
 void _Tidy ( )
  {
  :: free ( ( void * ) _Grouping );
  :: free ( ( void * ) _Falsename );
  :: free ( ( void * ) _Truename );
  }

 const char * _Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem * _Falsename;
 const _Elem * _Truename;
 };
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem >
 class numpunct_byname
  : public numpunct < _Elem >
 {
public :
 explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Locname, _Refs )
  {
  }

 explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Str . c_str ( ), _Refs )
  {
  }

protected :
 virtual ~ numpunct_byname ( ) noexcept
  {
  }
 };
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template< class _Elem> locale::id 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
numpunct< _Elem> ::id; 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem,
 class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_get
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_get < _Elem, _InIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_get ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_get ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

protected :
 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 427 );
  int _Ans = - 1;

  if ( _Iosbase . flags ( ) & ios_base :: boolalpha )
   {
   typedef typename _Mystr :: size_type _Mystrsize;
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str ( ( _Mystrsize ) 1, ( char_type ) 0 );
   _Str += _Punct_fac . falsename ( );
   _Str += ( char_type ) 0;
   _Str += _Punct_fac . truename ( );
   _Ans = _Getloctxt ( _First, _Last, ( size_t ) 2, _Str . c_str ( ) );
   }
  else
   {
   char _Ac [ 32 ], * _Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx ( _Ac, & _Ep,
    _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
     _Iosbase . getloc ( ) ), & _Errno );
   if ( _Ep != _Ac && _Errno == 0 && _Ulo <= 1 )
    _Ans = _Ulo;
   }

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ans < 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans != 0;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 464 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 65535 < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = ( unsigned short ) ( _Ac [ 0 ] == '-'
    ? 0 - _Ans : _Ans );
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 487 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 4294967295U < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = _Ac [ 0 ] == '-' ? 0 - _Ans : _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 509 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 529 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 549 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 569 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }







 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 595 );
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexpf ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 619 );
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexp ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 643 );
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexpl ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }



 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  _Debug_range ( _First, _Last, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 669 );
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;

  int _Base = _Getifld ( _Ac, _First, _Last, ios_base :: hex,
   _Iosbase . getloc ( ) );
  const unsigned long long _Ans =
   ( sizeof ( void * ) == sizeof ( unsigned long ) )
    ? ( unsigned long long ) :: _Stoulx ( _Ac, & _Ep, _Base, & _Errno )
    : :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = ( void * ) ( ( char * ) 0 + _Ans );
  return ( _First );
  }

private :
 int __cdecl _Getifld ( char * _Ac,
  _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield,
   const locale & _Loc ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Loc );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Grouping . size ( ) == 0
   ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24 };
  static const char _Src [ ] = { "0123456789ABCDEFabcdef-+Xx" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Loc );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  _Basefield &= ios_base :: basefield;
  int _Base = _Basefield == ios_base :: oct ? 8
   : _Basefield == ios_base :: hex ? 16
   : _Basefield == ios_base :: _Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if ( _First != _Last && * _First == _Atoms [ 0 ] )
   {
   _Seendigit = true, ++ _First;
   if ( _First != _Last && ( * _First == _Atoms [ _NUMGET_XOFF + 1 ]
     || * _First == _Atoms [ _NUMGET_XOFF ] )
    && ( _Base == 0 || _Base == 16 ) )
    _Base = 16, _Seendigit = false, ++ _First;
   else if ( _Base == 0 )
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups ( ( size_t ) 1, ( char ) _Seendigit );
  size_t _Group = 0;

  for ( char * const _Pe = & _Ac [ 32 - 1 ];
   _First != _Last; ++ _First )
   {
   size_t _Idx = _Find_elem ( _Atoms, * _First );
   if ( _Idx < _Dlen )
    {
    * _Ptr = _Src [ _Idx ];
    if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe )
     ++ _Ptr, _Nonzero = true;
    _Seendigit = true;
    if ( _Groups [ _Group ] != 127 )
     ++ _Groups [ _Group ];
    }
   else if ( _Groups [ _Group ] == '\000'
    || _Kseparator == ( _Elem ) 0
    || * _First != _Kseparator )
    break;
   else
    {
    _Groups . append ( ( string :: size_type ) 1, '\000' );
    ++ _Group;
    }
   }

  if ( _Group == 0 )
   ;
  else if ( '\000' < _Groups [ _Group ] )
   ++ _Group;
  else
   _Seendigit = false;

  for ( const char * _Pg = & _Grouping [ 0 ]; _Seendigit && 0 < _Group; )
   if ( * _Pg == 127 )
    break;
   else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
    || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
    _Seendigit = false;
   else if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;

  if ( _Seendigit && ! _Nonzero )
   * _Ptr ++ = '0';
  else if ( ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Base );
  }

 int __cdecl _Getffld ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: hexfloat )
   return ( _Getffldx ( _Ac, _First, _Last,
    _Iosbase, _Phexexp ) );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  char * _Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12 };
  static const char _Src [ ] = { "0123456789-+Ee" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  char * _Leading = _Ptr;
  * _Ptr ++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
     _Seendigit = true, ++ _First )
    if ( _Max_sig_dig <= _Significant )
     {
     ++ _Pten;
     if ( 0 < _Idx )
      _Sticky = true;
     }
    else if ( _Idx == 0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10 )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      {
      ++ _Pten;
      if ( 0 < _Idx )
       _Sticky = true;
      }
     else if ( _Idx == 0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   while ( ! _Bad && 0 < _Group )
    if ( * _Pg == 127 )
     break;
    else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( * _Phexexp != 1000000000 && _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ++ _First )
    -- _Pten;
   if ( _Pten < 0 )
    * _Ptr ++ = '0', ++ _Pten;
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }
   else if ( 0 < _Idx )
    _Sticky = true;

  if ( _Sticky )
   {
   char * _Px = _Ptr;
   for (; -- _Px != _Leading; )
    {
    if ( * _Px == localeconv ( ) -> decimal_point [ 0 ] )
     ;
    else if ( * _Px != '9' )
     {
     ++ * _Px;
     break;
     }
    else
     * _Px = '0';
    }

   if ( _Px == _Leading )
    {
    * _Px = '1';
    ++ _Pten;
    }
   }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _NUMGET_EOFF + 1 ]
    || * _First == _Atoms [ _NUMGET_EOFF ] ) )
   {
   * _Ptr ++ = 'e', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _Atoms [ 0 ]; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Pten );
  }

 int __cdecl _Getffldx ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26 };
  static const char _Src [ ] = { "0123456789ABCDEFabcdef-+XxPp" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  * _Ptr ++ = '0';
  * _Ptr ++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if ( _First == _Last || * _First != _Atoms [ 0 ] )
   ;
  else if ( ++ _First != _Last
   && ( * _First == _Atoms [ _NUMGET_XOFF + 1 ]
    || * _First == _Atoms [ _NUMGET_XOFF ] ) )
   ++ _First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++ _First )
    if ( _Max_sig_dig <= _Significant )
     ++ _Phex;
    else if ( _Idx == 0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      ++ _Phex;
     else if ( _Idx == 0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   while ( ! _Bad && 0 < _Group )
    if ( * _Pg == 127 )
     break;
    else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _Seendigit && _Significant == 0 )
   * _Ptr ++ = '0';

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ++ _First )
    -- _Phex;
   if ( _Phex < 0 )
    * _Ptr ++ = '0', ++ _Phex;
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _NUMGET_POFF + 1 ]
    || * _First == _Atoms [ _NUMGET_POFF ] ) )
   {
   * _Ptr ++ = 'p', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _Atoms [ 0 ]; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  * _Phexexp = _Phex;
  return ( 0 );
  }



 };
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template< class _Elem, class 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_InIt> locale::id 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
num_get< _Elem, _InIt> ::id; 
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem,
 class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_put
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_put < _Elem, _OutIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_put ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_put ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

protected :
 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  _Debug_pointer ( _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 1256 );
  if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) )
   return ( do_put ( _Dest, _Iosbase, _Fill, ( long ) _Val ) );
  else
   {
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str;
   if ( _Val )
    _Str . assign ( _Punct_fac . truename ( ) );
   else
    _Str . assign ( _Punct_fac . falsename ( ) );

   size_t _Fillcount = _Iosbase . width ( ) <= 0
    || ( size_t ) _Iosbase . width ( ) <= _Str . size ( )
     ? 0 : ( size_t ) _Iosbase . width ( ) - _Str . size ( );

   if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
    {
    _Dest = _Rep ( _Dest, _Fill, _Fillcount );
    _Fillcount = 0;
    }
   _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
   _Iosbase . width ( 0 );
   return ( _Rep ( _Dest, _Fill, _Fillcount ) );
   }
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabs ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexp ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }
  _Buf . resize ( _Bufsize + 50 );

  int _Ngen = :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), ( int ) _Precision, _Val );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabsl ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexpl ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }
  _Buf . resize ( _Bufsize + 50 );

  int _Ngen = :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), ( int ) _Precision, _Val );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  char _Buf [ 2 * 32 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) );
  }

private :
 char * __cdecl _Ffmt ( char * _Fmt,
  char _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showpoint )
   * _Ptr ++ = '#';
  * _Ptr ++ = '.';
  * _Ptr ++ = '*';
  if ( _Spec != '\000' )
   * _Ptr ++ = _Spec;

  ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
  if ( _Flags & ios_base :: uppercase )
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'A'
    : _Ffl == ios_base :: scientific ? 'E' : 'G';
  else
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'a'
    : _Ffl == ios_base :: scientific ? 'e' : 'g';

  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Fput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
   size_t _Count ) const
  {
  _Debug_pointer ( _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 1414 );
  size_t _Prefix = 0 < _Count && ( * _Buf == '+' || * _Buf == '-' )
   ? 1 : 0;

  const char * _Exps;
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat )
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
    && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn ( & _Buf [ 0 ], _Exps );
  char _Dp [ 2 ] = { "." };
  _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
  const size_t _Poff =
   :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Mystr _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

  if ( _Poff != _Count )
   _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char * _Pg = & _Grouping [ 0 ];
  while ( * _Pg != 127 && '\000' < * _Pg
   && ( size_t ) * _Pg < _Off - _Prefix )
   {
   _Groupstring . insert ( _Off -= * _Pg, ( size_t ) 1, _Kseparator );
   if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 char * __cdecl _Ifmt ( char * _Fmt,
  const char * _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showbase )
   * _Ptr ++ = '#';
  if ( _Spec [ 0 ] != 'L' )
   * _Ptr ++ = _Spec [ 0 ];
  else

   {
   * _Ptr ++ = 'I';
   * _Ptr ++ = '6';
   * _Ptr ++ = '4';
   }

  ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
  * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
   : _Basefield != ios_base :: hex ? _Spec [ 1 ]
   : _Flags & ios_base :: uppercase ? 'X' : 'x';
  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Iput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, char * _Buf, size_t _Count ) const
  {
  _Debug_pointer ( _Dest, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6c\x6f\x63\x6e\x75\x6d", 1516 );
  size_t _Prefix = 0 < _Count && ( * _Buf == '+' || * _Buf == '-' )
   ? 1 : 0;
  if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex
   && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
   && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
   _Prefix += 2;

  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Mystr _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg != 127 && '\000' < * _Pg )
   {
   const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
   while ( * _Pg != 127 && '\000' < * _Pg
    && ( size_t ) * _Pg < _Count - _Prefix )
    {
    _Count -= * _Pg;
    _Groupstring . insert ( _Count, 1, _Kseparator );
    if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
    }
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 _OutIt __cdecl _Put ( _OutIt _Dest,
  const _Elem * _Ptr, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr )
   * _Dest = * _Ptr;
  return ( _Dest );
  }

 _OutIt __cdecl _Rep ( _OutIt _Dest,
  _Elem _Ch, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
   * _Dest = _Ch;
  return ( _Dest );
  }
 };
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template< class _Elem, class 
#line 1592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_OutIt> locale::id 
#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
num_put< _Elem, _OutIt> ::id; 
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template locale::id numpunct< char> ::id;
#line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
#line 1604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template locale::id numpunct< __wchar_t> ::id;
#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
}
#line 1621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(disable: 4189)
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template < class _Elem,
 class _Traits >
 class basic_ios
  : public ios_base
 {
public :
 typedef basic_ios < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ctype < _Elem > _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_ios ( _Mysb * _Strbuf )
  {
  init ( _Strbuf );
  }

 virtual ~ basic_ios ( ) noexcept
  {
  }

 void clear ( iostate _State = goodbit,
  bool _Reraise = false )
  {
  ios_base :: clear ( ( iostate ) ( _Mystrbuf == 0
   ? ( int ) _State | ( int ) badbit : ( int ) _State ), _Reraise );
  }


 void clear ( io_state _State )
  {
  clear ( ( iostate ) _State );
  }


 void setstate ( iostate _State,
  bool _Reraise = false )
  {
  if ( _State != goodbit )
   clear ( ( iostate ) ( ( int ) rdstate ( ) | ( int ) _State ), _Reraise );
  }


 void setstate ( io_state _State )
  {
  setstate ( ( iostate ) _State );
  }


 _Myt & copyfmt ( const _Myt & _Right )
  {
  _Tiestr = _Right . tie ( );
  _Fillch = _Right . fill ( );
  ios_base :: copyfmt ( _Right );
  return ( * this );
  }

 _Myos * tie ( ) const
  {
  return ( _Tiestr );
  }

 _Myos * tie ( _Myos * _Newtie )
  {
  _Myos * _Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return ( _Oldtie );
  }

 _Mysb * rdbuf ( ) const
  {
  return ( _Mystrbuf );
  }

 _Mysb * rdbuf ( _Mysb * _Strbuf )
  {
  _Mysb * _Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear ( );
  return ( _Oldstrbuf );
  }

 locale imbue ( const locale & _Loc )
  {
  locale _Oldlocale = ios_base :: imbue ( _Loc );
  if ( rdbuf ( ) != 0 )
   rdbuf ( ) -> pubimbue ( _Loc );
  return ( _Oldlocale );
  }

 _Elem fill ( ) const
  {
  return ( _Fillch );
  }

 _Elem fill ( _Elem _Newfill )
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return ( _Oldfill );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . narrow ( _Ch, _Dflt ) );
  }

 _Elem widen ( char _Byte ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . widen ( _Byte ) );
  }

 void move ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this -> swap ( _Right );
   }
  }

 void move ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right ) noexcept
  {
  ios_base :: swap ( _Right );
  :: std :: swap ( _Fillch, _Right . _Fillch );
  :: std :: swap ( _Tiestr, _Right . _Tiestr );
  }

 void set_rdbuf ( _Mysb * _Strbuf )
  {
  _Mystrbuf = _Strbuf;
  }

protected :
 void init ( _Mysb * _Strbuf = 0,
  bool _Isstd = false )
  {
  _Init ( );
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen ( ' ' );

  if ( _Mystrbuf == 0 )
   setstate ( badbit );

  if ( _Isstd )
   _Addstd ( this );
  }

  basic_ios ( )
  {
  }

private :
 _Mysb * _Mystrbuf;
 _Myos * _Tiestr;
 _Elem _Fillch;

public :
  basic_ios ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;
 };
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template class __declspec(dllimport) basic_ios< char, char_traits< char> > ;
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template class __declspec(dllimport) basic_ios< __wchar_t, char_traits< __wchar_t> > ;
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::boolalpha); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl dec(ios_base &_Iosbase) 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::dec, _Iosb< int> ::basefield); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::floatfield); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl fixed(ios_base &_Iosbase) 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::fixed, _Iosb< int> ::floatfield); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl hex(ios_base &_Iosbase) 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::hex, _Iosb< int> ::basefield); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::hexfloat, _Iosb< int> ::floatfield); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
namespace tr1 { 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
using std::hexfloat;
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
}
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl internal(ios_base &_Iosbase) 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::internal, _Iosb< int> ::adjustfield); 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl left(ios_base &_Iosbase) 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::left, _Iosb< int> ::adjustfield); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::boolalpha); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showbase); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showpoint); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showpos); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::skipws); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::unitbuf); 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::uppercase); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl oct(ios_base &_Iosbase) 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::oct, _Iosb< int> ::basefield); 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl right(ios_base &_Iosbase) 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::right, _Iosb< int> ::adjustfield); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl scientific(ios_base &_Iosbase) 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::scientific, _Iosb< int> ::floatfield); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl showbase(ios_base &_Iosbase) 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showbase); 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showpoint); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl showpos(ios_base &_Iosbase) 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showpos); 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl skipws(ios_base &_Iosbase) 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::skipws); 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::unitbuf); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::uppercase); 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
}
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(disable: 4189 4390)
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
namespace std { 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma vtordisp(push, 2)
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits >
 class basic_ostream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_ostream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ostreambuf_iterator < _Elem, _Traits > _Iter;
 typedef num_put < _Elem, _Iter > _Nput;

 explicit basic_ostream (
  basic_streambuf < _Elem, _Traits > * _Strbuf,

  bool _Isstd = false )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_ostream ( _Uninitialized, bool _Addit = true )
  {
  if ( _Addit )
   this -> _Addstd ( this );
  }

protected :
  basic_ostream ( _Myt && _Right )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   _Myios :: swap ( _Right );
  }

public :
  basic_ostream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_ostream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Ostr )
   : _Myostr ( _Ostr )
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myostr;

 private :
  _Sentry_base & operator = ( const _Sentry_base & );
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Ostr )
   : _Sentry_base ( _Ostr )
   {
   if ( _Ostr . good ( ) && _Ostr . tie ( ) != 0 && _Ostr . tie ( ) != & _Ostr )
    _Ostr . tie ( ) -> flush ( );
   _Ok = _Ostr . good ( );
   }

   ~ sentry ( ) noexcept
   {

   if ( ! :: std :: uncaught_exception ( ) )
    this -> _Myostr . _Osfx ( );




   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool opfx ( )
  {
  if ( this -> good ( ) && _Myios :: tie ( ) != 0 && _Myios :: tie ( ) != this )
   _Myios :: tie ( ) -> flush ( );
  return ( this -> good ( ) );
  }

 void osfx ( )
  {
  _Osfx ( );
  }

 void _Osfx ( )
  {
  try {
  if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf )
   if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
  } catch ( ... ) {
  }
  }























 _Myt & operator << ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  _Debug_pointer ( _Pfn, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6f" L"\x73\x74\x72\x65\x61\x6d", 198 );
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  _Debug_pointer ( _Pfn, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6f" L"\x73\x74\x72\x65\x61\x6d", 204 );
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  _Debug_pointer ( _Pfn, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6f" L"\x73\x74\x72\x65\x61\x6d", 211 );
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator << ( bool _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned short ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 _Myt & operator << ( unsigned short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned int ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( float _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( double ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( const void * _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   for ( int_type _Meta = _Traits :: eof ( );; _Copied = true )
    {
    try {
    _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
     ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
    } catch ( ... ) {
     _Myios :: setstate ( ios_base :: failbit );
     throw;
    }

    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     break;

    try {
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
      _Myios :: rdbuf ( ) -> sputc (
       _Traits :: to_char_type ( _Meta ) ) ) )
      {
      _State |= ios_base :: badbit;
      break;
      }
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

  this -> width ( 0 );
  _Myios :: setstate ( _Strbuf == 0 ? ios_base :: badbit
   : ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & put ( _Elem _Ch )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & write ( const _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else if ( 0 < _Count )
   {
   _Debug_pointer ( _Str, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6f" L"\x73\x74\x72\x65\x61\x6d", 562 );
   try {
   if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & flush ( )
  {
  if ( _Myios :: rdbuf ( ) != 0 )
   {
   const sentry _Ok ( * this );

   if ( _Ok && _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
   }
  return ( * this );
  }

 _Myt & seekp ( pos_type _Pos )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekp ( off_type _Off, ios_base :: seekdir _Way )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 pos_type tellp ( )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: out ) );
  else
   return ( pos_type ( _BADOFF ) );
  }
 };
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma vtordisp(pop)
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template class __declspec(dllimport) basic_ostream< char, char_traits< char> > ;
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template class __declspec(dllimport) basic_ostream< __wchar_t, char_traits< __wchar_t> > ;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) :: strlen ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, char _Ch )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr,
  const char * _Val )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, char _Ch )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const signed char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, signed char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits,
 class _Ty > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > && _Ostr, const _Ty & _Val )
 {
 return ( _Ostr << _Val );
 }
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl endl ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Ostr . widen ( '\n' ) );
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Elem ( ) );
 return ( _Ostr );
 }
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > & _Ostr,
   const error_code & _Errcode )
 {
 return ( _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( ) );
 }
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
}
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(disable: 4189)
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
namespace std { 
#pragma vtordisp(push, 2)
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_istream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_istream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef istreambuf_iterator < _Elem, _Traits > _Iter;
 typedef ctype < _Elem > _Ctype;
 typedef num_get < _Elem, _Iter > _Nget;











 explicit basic_istream ( _Mysb * _Strbuf,
  bool _Isstd = false )

  : _Chcount ( 0 )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_istream ( _Uninitialized )
  {
  this -> _Addstd ( this );
  }

protected :
  basic_istream ( _Myt && _Right )
  : _Chcount ( _Right . _Chcount )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  _Right . _Chcount = 0;
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  _Myios :: swap ( _Right );
  :: std :: swap ( _Chcount, _Right . _Chcount );
  }

public :
  basic_istream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_istream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;


 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Istr )
   : _Myistr ( _Istr )
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myistr;

 private :
  _Sentry_base & operator = ( const _Sentry_base & );
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Istr, bool _Noskip = false )
   : _Sentry_base ( _Istr )
   {
   _Ok = this -> _Myistr . _Ipfx ( _Noskip );
   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool _Ipfx ( bool _Noskip = false )
  {
  if ( this -> good ( ) )
   {
   if ( _Myios :: tie ( ) != 0 )
    _Myios :: tie ( ) -> flush ( );

   if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws )
    {
    const _Ctype & _Ctype_fac = use_facet < _Ctype > ( this -> getloc ( ) );

    try {
    int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

    for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
      {
      _Myios :: setstate ( ios_base :: eofbit );
      break;
      }
     else if ( ! _Ctype_fac . is ( _Ctype :: space,
      _Traits :: to_char_type ( _Meta ) ) )
      break;
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

   if ( this -> good ( ) )
    return ( true );
   }
  _Myios :: setstate ( ios_base :: failbit );
  return ( false );
  }

 bool ipfx ( bool _Noskip = false )
  {
  return ( _Ipfx ( _Noskip ) );
  }

 void isfx ( )
  {
  }























 _Myt & operator >> ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  _Debug_pointer ( _Pfn, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 199 );
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  _Debug_pointer ( _Pfn, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 205 );
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  _Debug_pointer ( _Pfn, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 212 );
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator >> ( bool & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 32768 ) || 32767 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = ( short ) _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 _Myt & operator >> ( unsigned short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 2147483647 - 1 ) || 2147483647 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( float & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( void * & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
       _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     _Copied = true;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 int_type get ( )
  {
  int_type _Meta = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   else
    {
    _Myios :: rdbuf ( ) -> sbumpc ( );
    ++ _Chcount;
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & get ( _Elem * _Str, streamsize _Count )
  {
  return ( get ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Traits :: to_char_type ( _Meta ) == _Delim )
     break;
    else
     {
     _Debug_pointer ( _Str, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 572 );
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Chcount == 0
   ? _State | ios_base :: failbit : _State );
  * _Str = _Elem ( );
  return ( * this );
  }

 _Myt & get ( _Elem & _Ch )
  {
  int_type _Meta = get ( );
  if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _Ch = _Traits :: to_char_type ( _Meta );
  return ( * this );
  }

 _Myt & get ( _Mysb & _Strbuf )
  {
  return ( get ( _Strbuf, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Mysb & _Strbuf, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits :: to_char_type ( _Meta );
      if ( _Ch == _Delim
       || _Traits :: eq_int_type ( _Traits :: eof ( ),
        _Strbuf . sputc ( _Ch ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  if ( _Chcount == 0 )
   _State |= ios_base :: failbit;
  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & getline ( _Elem * _Str, streamsize _Count )
  {
  return ( getline ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & getline ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   int_type _Metadelim = _Traits :: to_int_type ( _Delim );

   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Meta == _Metadelim )
     {
     ++ _Chcount;
     _Myios :: rdbuf ( ) -> sbumpc ( );
     break;
     }
    else if ( -- _Count <= 0 )
     {
     _State |= ios_base :: failbit;
     break;
     }
    else
     {
     _Debug_pointer ( _Str, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 675 );
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  * _Str = _Elem ( );
  _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & ignore ( streamsize _Count = 1,
  int_type _Metadelim = _Traits :: eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   for (;; )
    {
    int_type _Meta;
    if ( _Count != ( numeric_limits < streamsize > :: max ) ( )
     && -- _Count < 0 )
     break;
    else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     ++ _Chcount;
     if ( _Meta == _Metadelim )
      break;
     }
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & read ( _Elem * _Str, streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   _Debug_pointer ( _Str, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 732 );
   const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
   _Chcount += _Num;
   if ( _Num != _Count )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize readsome ( _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );
  streamsize _Num;

  if ( ! _Ok )
   _State |= ios_base :: failbit;
  else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 )
   _State |= ios_base :: eofbit;
  else if ( 0 < _Count && 0 < _Num )
   {
   _Debug_pointer ( _Str, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 758 );
   read ( _Str, _Num < _Count ? _Num : _Count );
   }

  _Myios :: setstate ( _State );
  return ( gcount ( ) );
  }

 int_type peek ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) )
    _State |= ios_base :: eofbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & putback ( _Elem _Ch )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & unget ( )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sungetc ( ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize gcount ( ) const
  {
  return ( _Chcount );
  }

 int sync ( )
  {
  const sentry _Ok ( * this, true );

  if ( _Myios :: rdbuf ( ) == 0 )
   return ( - 1 );
  else if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
   {
   _Myios :: setstate ( ios_base :: badbit );
   return ( - 1 );
   }
  else
   return ( 0 );
  }

 _Myt & seekg ( pos_type _Pos )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekg ( off_type _Off, ios_base :: seekdir _Way )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 pos_type tellg ( )
  {
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: in ) );
  else
   return ( pos_type ( _BADOFF ) );
  }

private :
 streamsize _Chcount;
 };
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma vtordisp(pop)
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_istream< char, char_traits< char> > ;
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_istream< __wchar_t, char_traits< __wchar_t> > ;
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_iostream
 : public basic_istream < _Elem, _Traits >,
  public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_iostream < _Elem, _Traits > _Myt;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
  : _Myis ( _Strbuf, false ),
   _Myos ( _Noinit, false )
  {
  }

protected :
  basic_iostream ( _Myt && _Right )
  : _Myis ( _Right . rdbuf ( ), false ),
   _Myos ( _Noinit, false )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   _Myios :: swap ( _Right );
  }

public :
  basic_iostream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_iostream ( ) noexcept
  {
  }
 };
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_iostream< char, char_traits< char> > ;
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_iostream< __wchar_t, char_traits< __wchar_t> > ;
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str )
 {
 _Debug_pointer ( _Str, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74" L"\x20\x56\x69\x73\x75\x61\x6c\x20\x53\x74\x75\x64\x69\x6f\x20\x31\x34\x2e\x30\x5c\x56\x43\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x73\x74\x72\x65\x61\x6d", 1009 );
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;
 ios_base :: iostate _State = ios_base :: goodbit;
 _Elem * _Str0 = _Str;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

  try {
  streamsize _Count = 0 < _Istr . width ( ) ? _Istr . width ( )
   : ( numeric_limits < streamsize > :: max ) ( );
  typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
  _Elem _Ch;
  for (; 0 < -- _Count; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Ch = _Traits :: to_char_type ( _Meta ) )
     || _Ch == _Elem ( ) )
    break;
   else
    * _Str ++ = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 * _Str = _Elem ( );
 _Istr . width ( 0 );
 _Istr . setstate ( _Str == _Str0 ? _State | ios_base :: failbit : _State );
 return ( _Istr );
 }
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 typename _Myis :: int_type _Meta;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  try {
  _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _State |= ios_base :: eofbit | ios_base :: failbit;
  else
   _Ch = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits,
 class _Ty > inline
 basic_istream < _Elem, _Traits > &
  operator >> ( basic_istream < _Elem, _Traits > && _Istr, _Ty & _Val )
 {
 return ( _Istr >> _Val );
 }
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > &
  __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;

 if ( ! _Istr . eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const typename _Myis :: sentry _Ok ( _Istr, true );

  if ( _Ok )
   {
   const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

   try {
   for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );;
    _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( ! _Ctype_fac . is ( _Ctype :: space,
     _Traits :: to_char_type ( _Meta ) ) )
     break;
   } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
   }

  _Istr . setstate ( _State );
  }
 return ( _Istr );
 }
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
}
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef ctype < _Elem > _Ctype;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );
  _Str . erase ( );

  try {
  _Mysizt _Size = 0 < _Istr . width ( )
   && ( _Mysizt ) _Istr . width ( ) < _Str . max_size ( )
    ? ( _Mysizt ) _Istr . width ( ) : _Str . max_size ( );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Traits :: to_char_type ( _Meta ) ) )
    break;
   else
    {
    _Str . append ( 1, _Traits :: to_char_type ( _Meta ) );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . width ( 0 );
 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr, true );

 if ( _Ok )
  {
  try {
  _Str . erase ( );
  const typename _Traits :: int_type _Metadelim =
   _Traits :: to_int_type ( _Delim );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (;; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Traits :: eq_int_type ( _Meta, _Metadelim ) )
    {
    _Changed = true;
    _Istr . rdbuf ( ) -> sbumpc ( );
    break;
    }
   else if ( _Str . max_size ( ) <= _Str . size ( ) )
    {
    _State |= ios_base :: failbit;
    break;
    }
   else
    {
    _Str += _Traits :: to_char_type ( _Meta );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( _Istr, _Str, _Istr . widen ( '\n' ) ) );
 }
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( :: std :: move ( _Istr ) >> _Str );
 }
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 return ( getline ( :: std :: move ( _Istr ), _Str, _Delim ) );
 }
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) ) );
 }
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr,
  const basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 _Mysizt _Size = _Str . size ( );
 _Mysizt _Pad = _Ostr . width ( ) <= 0 || ( _Mysizt ) _Ostr . width ( ) <= _Size
  ? 0 : ( _Mysizt ) _Ostr . width ( ) - _Size;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
 try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Str . c_str ( ), ( streamsize ) _Size )
    != ( streamsize ) _Size )
    _State |= ios_base :: badbit;
  else
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline int stoi(const string &_Str, size_t *_Idx = 0, int 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoi argument"); }  
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((((*_errno()) == 34) || (_Ans < ((-2147483647) - 1))) || ((2147483647) < _Ans)) { 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoi argument out of range"); }  
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return (int)_Ans; 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long stol(const string &_Str, size_t *_Idx = 0, int 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stol argument"); }  
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stol argument out of range"); }  
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned long stoul(const string &_Str, size_t *_Idx = 0, int 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned long _Ans = ::strtoul(_Ptr, &_Eptr, _Base); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoul argument"); }  
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoul argument out of range"); }  
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline __int64 stoll(const string &_Str, size_t *_Idx = 0, int 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__int64 _Ans = ::strtoll(_Ptr, &_Eptr, _Base); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoll argument"); }  
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoll argument out of range"); }  
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned __int64 stoull(const string &_Str, size_t *_Idx = 0, int 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned __int64 _Ans = ::strtoull(_Ptr, &_Eptr, _Base); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoull argument"); }  
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoull argument out of range"); }  
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline float stof(const string &_Str, size_t *_Idx = 0) 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
float _Ans = ::strtof(_Ptr, &_Eptr); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stof argument"); }  
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stof argument out of range"); }  
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline double stod(const string &_Str, size_t *_Idx = 0) 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
double _Ans = ::strtod(_Ptr, &_Eptr); 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stod argument"); }  
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stod argument out of range"); }  
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long double stold(const string &_Str, size_t *_Idx = 0) 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long double _Ans = ::strtold(_Ptr, &_Eptr); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stold argument"); }  
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stold argument out of range"); }  
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline int stoi(const wstring &_Str, size_t *_Idx = 0, int 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoi argument"); }  
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((((*_errno()) == 34) || (_Ans < ((-2147483647) - 1))) || ((2147483647) < _Ans)) { 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoi argument out of range"); }  
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return (int)_Ans; 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long stol(const wstring &_Str, size_t *_Idx = 0, int 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stol argument"); }  
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stol argument out of range"); }  
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned long stoul(const wstring &_Str, size_t *_Idx = 0, int 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned long _Ans = ::wcstoul(_Ptr, &_Eptr, _Base); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoul argument"); }  
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoul argument out of range"); }  
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline __int64 stoll(const wstring &_Str, size_t *_Idx = 0, int 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__int64 _Ans = ::wcstoll(_Ptr, &_Eptr, _Base); 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoll argument"); }  
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoll argument out of range"); }  
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned __int64 stoull(const wstring &_Str, size_t *_Idx = 0, int 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned __int64 _Ans = ::wcstoull(_Ptr, &_Eptr, _Base); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoull argument"); }  
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoull argument out of range"); }  
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline float stof(const wstring &_Str, size_t *_Idx = 0) 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
float _Ans = ::wcstof(_Ptr, &_Eptr); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stof argument"); }  
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stof argument out of range"); }  
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline double stod(const wstring &_Str, size_t *_Idx = 0) 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
double _Ans = ::wcstod(_Ptr, &_Eptr); 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stod argument"); }  
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stod argument out of range"); }  
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long double stold(const wstring &_Str, size_t *_Idx = 0) 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long double _Ans = ::wcstold(_Ptr, &_Eptr); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stold argument"); }  
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stold argument out of range"); }  
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(push)
#pragma warning(disable: 4127)
template < class _Elem,
 class _UTy > inline
 _Elem * _UIntegral_to_buff ( _Elem * _RNext, _UTy _UVal )
 {
 static_assert ( is_unsigned < _UTy > :: value, "_UTy must be unsigned" );


 auto _UVal_trunc = _UVal;



















 do
  {
  * -- _RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while ( _UVal_trunc != 0 );
 return ( _RNext );
 }
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(pop)
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Ty > inline
 basic_string < _Elem > _Integral_to_string ( const _Ty _Val )
 {
 static_assert ( is_integral < _Ty > :: value, "_Ty must be integral" );
 using _UTy = make_unsigned_t < _Ty >;
 _Elem _Buff [ 21 ];
 _Elem * const _Buff_end = :: std :: end ( _Buff );
 _Elem * _RNext = _Buff_end;
 auto _UVal = static_cast < _UTy > ( _Val );
 if ( _Val < 0 )
  {
  _RNext = _UIntegral_to_buff ( _RNext, 0 - _UVal );
  * -- _RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff ( _RNext, _UVal );

 return ( basic_string < _Elem > ( _RNext, _Buff_end ) );
 }
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Ty > inline
 string _Floating_to_string ( const char * _Fmt, _Ty _Val )
 {
 static_assert ( is_floating_point < _Ty > :: value,
  "_Ty must be floating point" );

 int _Len = :: _scprintf ( _Fmt, _Val );
 string _Str ( _Len + 1, '\000' );
 :: sprintf_s ( & _Str [ 0 ], _Len + 1, _Fmt, _Val );
 _Str . resize ( _Len );
 return ( _Str );
 }
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Ty > inline
 wstring _Floating_to_wstring ( const wchar_t * _Fmt, _Ty _Val )
 {
 static_assert ( is_floating_point < _Ty > :: value,
  "_Ty must be floating point" );

 int _Len = :: _scwprintf ( _Fmt, _Val );
 wstring _Str ( _Len + 1, L'\x0' );
 :: swprintf_s ( & _Str [ 0 ], _Len + 1, _Fmt, _Val );
 _Str . resize ( _Len );
 return ( _Str );
 }
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(int _Val) 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(unsigned _Val) 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(long _Val) 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(unsigned long _Val) 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(__int64 _Val) 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(unsigned __int64 _Val) 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(float _Val) 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_string("%f", _Val); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(double _Val) 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_string("%f", _Val); 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(long double _Val) 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_string("%Lf", _Val); 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(int _Val) 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(unsigned _Val) 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(long _Val) 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(unsigned long _Val) 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(__int64 _Val) 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(unsigned __int64 _Val) 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(float _Val) 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_wstring(L"\x25\x66", _Val); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(double _Val) 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_wstring(L"\x25\x66", _Val); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(long double _Val) 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_wstring(L"\x25\x4c\x66", _Val); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline namespace literals { 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline namespace string_literals { 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string operator ""s(const char *_Str, size_t _Len) 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return string(_Str, _Len); 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring operator ""s(const __wchar_t *_Str, size_t _Len) 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return wstring(_Str, _Len); 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline u16string operator ""s(const char16_t *_Str, size_t _Len) 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return u16string(_Str, _Len); 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline u32string operator ""s(const char32_t *_Str, size_t _Len) 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return u32string(_Str, _Len); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
}
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
}
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
}
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma warning(push,3)
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma pack ( push, 8 )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
namespace std { 
#pragma warning(disable: 4251)
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_stringbuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Myt;
 typedef _Alloc allocator_type;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_stringbuf ( ios_base :: openmode _Mode =
  ios_base :: in | ios_base :: out )
  {
  _Init ( 0, 0, _Getstate ( _Mode ) );
  }

 explicit basic_stringbuf ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  _Init ( _Str . c_str ( ), _Str . size ( ), _Getstate ( _Mode ) );
  }

 basic_stringbuf ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Tidy ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mysb :: swap ( _Right );
   :: std :: swap ( _Seekhigh, _Right . _Seekhigh );
   :: std :: swap ( _Mystate, _Right . _Mystate );
   _Swap_adl ( _Al, _Right . _Al );
   }
  }

 basic_stringbuf ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_stringbuf ( ) noexcept
  {
  _Tidy ( );
  }

 enum
  {
  _Allocated = 1,
  _Constant = 2,
  _Noread = 4,
  _Append = 8,
  _Atend = 16 };
 typedef int _Strstate;

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 _Mystr str ( ) const
  {
  if ( ! ( _Mystate & _Constant ) && _Mysb :: pptr ( ) != 0 )
   {
   _Mystr _Str ( _Mysb :: pbase ( ), ( _Seekhigh < _Mysb :: pptr ( )
    ? _Mysb :: pptr ( ) : _Seekhigh ) - _Mysb :: pbase ( ) );
   return ( _Str );
   }
  else if ( ! ( _Mystate & _Noread ) && _Mysb :: gptr ( ) != 0 )
   {
   _Mystr _Str ( _Mysb :: eback ( ), _Mysb :: egptr ( ) - _Mysb :: eback ( ) );
   return ( _Str );
   }
  else
   {
   _Mystr _Nul;
   return ( _Nul );
   }
  }

 void str ( const _Mystr & _Newstr )
  {
  _Tidy ( );
  _Init ( _Newstr . c_str ( ), _Newstr . size ( ), _Mystate );
  }

protected :
 virtual int_type overflow ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mystate & _Constant )
   return ( _Traits :: eof ( ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );

  if ( _Mystate & _Append
   && _Mysb :: pptr ( ) != 0 && _Mysb :: pptr ( ) < _Seekhigh )
   _Mysb :: setp ( _Mysb :: pbase ( ), _Seekhigh, _Mysb :: epptr ( ) );

  if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else
   {
   size_t _Oldsize = _Mysb :: pptr ( ) == 0
    ? 0 : _Mysb :: epptr ( ) - _Mysb :: eback ( );
   size_t _Newsize = _Oldsize;
   size_t _Inc = _Newsize / 2 < _MINSIZE
    ? _MINSIZE : _Newsize / 2;

   while ( 0 < _Inc && 2147483647 - _Inc < _Newsize )
    _Inc /= 2;
   if ( _Inc == 0 )
    return ( _Traits :: eof ( ) );

   _Newsize += _Inc;

   _Elem * _Newptr = _Al . allocate ( _Newsize );
   _Elem * _Oldptr = _Mysb :: eback ( );

   if ( 0 < _Oldsize )
    _Traits :: copy ( _Newptr, _Oldptr, _Oldsize );

   if ( _Oldsize == 0 )
    {
    _Seekhigh = _Newptr;
    _Mysb :: setp ( _Newptr, _Newptr + _Newsize );
    if ( _Mystate & _Noread )
     _Mysb :: setg ( _Newptr, 0, _Newptr );
    else
     _Mysb :: setg ( _Newptr, _Newptr, _Newptr + 1 );
    }
   else
    {
    _Seekhigh = _Newptr + ( _Seekhigh - _Oldptr );
    _Mysb :: setp ( _Newptr + ( _Mysb :: pbase ( ) - _Oldptr ),
     _Newptr + ( _Mysb :: pptr ( ) - _Oldptr ),
     _Newptr + _Newsize );
    if ( _Mystate & _Noread )
     _Mysb :: setg ( _Newptr, 0, _Newptr );
    else
     _Mysb :: setg ( _Newptr,
      _Newptr + ( _Mysb :: gptr ( ) - _Oldptr ),
      _Mysb :: pptr ( ) + 1 );
    }

   if ( _Mystate & _Allocated )
    _Al . deallocate ( _Oldptr, _Oldsize );
   _Mystate |= _Allocated;

   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type pbackfail ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) == 0
   || _Mysb :: gptr ( ) <= _Mysb :: eback ( )
   || ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   && ! _Traits :: eq ( _Traits :: to_char_type ( _Meta ), _Mysb :: gptr ( ) [ - 1 ] )
   && _Mystate & _Constant ) )
   return ( _Traits :: eof ( ) );
  else
   {
   _Mysb :: gbump ( - 1 );
   if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    * _Mysb :: gptr ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  }

 virtual int_type underflow ( )
  {
  if ( _Mysb :: gptr ( ) == 0 )
   return ( _Traits :: eof ( ) );
  else if ( _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Mystate & _Noread || _Mysb :: pptr ( ) == 0
   || ( _Mysb :: pptr ( ) <= _Mysb :: gptr ( ) && _Seekhigh <= _Mysb :: gptr ( ) ) )
   return ( _Traits :: eof ( ) );
  else
   {
   if ( _Seekhigh < _Mysb :: pptr ( ) )
    _Seekhigh = _Mysb :: pptr ( );
   _Mysb :: setg ( _Mysb :: eback ( ), _Mysb :: gptr ( ), _Seekhigh );
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Which = ios_base :: in | ios_base :: out )
  {
  if ( _Mysb :: pptr ( ) != 0 && _Seekhigh < _Mysb :: pptr ( ) )
   _Seekhigh = _Mysb :: pptr ( );

  if ( _Which & ios_base :: in && _Mysb :: gptr ( ) != 0 )
   {
   if ( _Way == ios_base :: end )
    _Off += ( off_type ) ( _Seekhigh - _Mysb :: eback ( ) );
   else if ( _Way == ios_base :: cur
    && ( _Which & ios_base :: out ) == 0 )
    _Off += ( off_type ) ( _Mysb :: gptr ( ) - _Mysb :: eback ( ) );
   else if ( _Way != ios_base :: beg )
    _Off = _BADOFF;

   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    {
    _Mysb :: gbump ( ( int ) ( _Mysb :: eback ( ) - _Mysb :: gptr ( ) + _Off ) );
    if ( _Which & ios_base :: out && _Mysb :: pptr ( ) != 0 )
     _Mysb :: setp ( _Mysb :: pbase ( ), _Mysb :: gptr ( ),
      _Mysb :: epptr ( ) );
    }
   else
    _Off = _BADOFF;
   }
  else if ( _Which & ios_base :: out && _Mysb :: pptr ( ) != 0 )
   {
   if ( _Way == ios_base :: end )
    _Off += ( off_type ) ( _Seekhigh - _Mysb :: eback ( ) );
   else if ( _Way == ios_base :: cur )
    _Off += ( off_type ) ( _Mysb :: pptr ( ) - _Mysb :: eback ( ) );
   else if ( _Way != ios_base :: beg )
    _Off = _BADOFF;

   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    _Mysb :: pbump ( ( int ) ( _Mysb :: eback ( )
     - _Mysb :: pptr ( ) + _Off ) );
   else
    _Off = _BADOFF;
   }

  else if ( _Off != 0 )


   _Off = _BADOFF;
  return ( pos_type ( _Off ) );
  }

 virtual pos_type seekpos ( pos_type _Ptr,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  streamoff _Off = ( streamoff ) _Ptr;
  if ( _Mysb :: pptr ( ) != 0 && _Seekhigh < _Mysb :: pptr ( ) )
   _Seekhigh = _Mysb :: pptr ( );

  if ( _Off == _BADOFF )
   ;
  else if ( _Mode & ios_base :: in && _Mysb :: gptr ( ) != 0 )
   {
   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    {
    _Mysb :: gbump ( ( int ) ( _Mysb :: eback ( ) - _Mysb :: gptr ( ) + _Off ) );
    if ( _Mode & ios_base :: out && _Mysb :: pptr ( ) != 0 )
     _Mysb :: setp ( _Mysb :: pbase ( ), _Mysb :: gptr ( ),
      _Mysb :: epptr ( ) );
    }
   else
    _Off = _BADOFF;
   }
  else if ( _Mode & ios_base :: out && _Mysb :: pptr ( ) != 0 )
   {
   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    _Mysb :: pbump ( ( int ) ( _Mysb :: eback ( )
     - _Mysb :: pptr ( ) + _Off ) );
   else
    _Off = _BADOFF;
   }
  else
   _Off = _BADOFF;
  return ( streampos ( _Off ) );
  }

 void _Init ( const _Elem * _Ptr,
  size_t _Count, _Strstate _State )
  {
  _Seekhigh = 0;
  _Mystate = _State;

  if ( _Count != 0
   && ( _Mystate & ( _Noread | _Constant ) ) != ( _Noread | _Constant ) )
   {
   _Elem * _Pnew = _Al . allocate ( _Count );
   _Traits :: copy ( _Pnew, _Ptr, _Count );
   _Seekhigh = _Pnew + _Count;

   if ( ! ( _Mystate & _Noread ) )
    _Mysb :: setg ( _Pnew, _Pnew,
     _Pnew + _Count );
   if ( ! ( _Mystate & _Constant ) )
    {
    _Mysb :: setp ( _Pnew,
     ( _Mystate & ( _Atend | _Append ) ) ? _Pnew + _Count : _Pnew,
     _Pnew + _Count );
    if ( _Mysb :: gptr ( ) == 0 )
     _Mysb :: setg ( _Pnew, 0, _Pnew );
    }
   _Mystate |= _Allocated;
   }
  }

 void _Tidy ( )
  {
  if ( _Mystate & _Allocated )
   _Al . deallocate ( _Mysb :: eback ( ),
    ( _Mysb :: pptr ( ) != 0 ? _Mysb :: epptr ( )
     : _Mysb :: egptr ( ) ) - _Mysb :: eback ( ) );
  _Mysb :: setg ( 0, 0, 0 );
  _Mysb :: setp ( 0, 0 );
  _Seekhigh = 0;
  _Mystate &= ~ _Allocated;
  }

private :
 enum
  {
  _MINSIZE = 32 };

 _Strstate _Getstate ( ios_base :: openmode _Mode )
  {
  _Strstate _State = ( _Strstate ) 0;
  if ( ! ( _Mode & ios_base :: in ) )
   _State |= _Noread;
  if ( ! ( _Mode & ios_base :: out ) )
   _State |= _Constant;
  if ( _Mode & ios_base :: app )
   _State |= _Append;
  if ( _Mode & ios_base :: ate )
   _State |= _Atend;
  return ( _State );
  }

 _Elem * _Seekhigh;
 _Strstate _Mystate;
 allocator_type _Al;
 };
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_stringbuf < _Elem, _Traits, _Alloc > & _Left,
  basic_stringbuf < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_istringstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_istringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_istream < _Elem, _Traits > _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_istringstream ( ios_base :: openmode _Mode = ios_base :: in )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode | ios_base :: in )
  {
  }

 explicit basic_istringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode | ios_base :: in )
  {
  }

 basic_istringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_istringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_istringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_istringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_istringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_ostringstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ostringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_ostringstream ( ios_base :: openmode _Mode = ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode | ios_base :: out )
  {
  }

 explicit basic_ostringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode | ios_base :: out )
  {
  }

 basic_ostringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_ostringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_ostringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_ostringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_ostringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_stringstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_stringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_iostream < _Elem, _Traits > _Mybase;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_stringstream ( ios_base :: openmode _Mode =
  ios_base :: in | ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode )
  {
  }

 explicit basic_stringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode )
  {
  }

 basic_stringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_stringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_stringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_stringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_stringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
}
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma warning(push,3)
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
namespace std { 
#pragma warning(disable: 4127)
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const char *, ios_base::openmode, int); 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const __wchar_t *, ios_base::openmode, int); 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const unsigned short *, ios_base::openmode, int); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Fgetc ( _Elem & _Ch, FILE * _File )
 {
 return ( fread ( & _Ch, sizeof ( _Elem ), 1, _File ) == 1 );
 }
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fgetc(char &_Byte, FILE *_File) 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
int _Meta; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
if ((_Meta = fgetc(_File)) == (-1)) { 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return false; } else 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
_Byte = ((char)_Meta); 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return true; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}  
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fgetc(__wchar_t &_Wchar, FILE *_File) 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
wint_t _Meta; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return false; } else 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
_Wchar = ((__wchar_t)_Meta); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return true; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}  
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fgetc(unsigned short &_Wchar, FILE *_File) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
wint_t _Meta; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return false; } else 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
_Wchar = ((unsigned short)_Meta); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return true; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}  
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Fputc ( _Elem _Ch, FILE * _File )
 {
 return ( fwrite ( & _Ch, 1, sizeof ( _Elem ), _File ) == sizeof ( _Elem ) );
 }
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fputc(char _Byte, FILE *_File) 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return fputc(_Byte, _File) != (-1); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fputc(__wchar_t _Wchar, FILE *_File) 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File) 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Ungetc ( const _Elem & _Ch, FILE * _File )
 {
 return ( false );
 }
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const char &_Byte, FILE *_File) 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return ungetc((unsigned char)_Byte, _File) != (-1); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const signed char &_Byte, FILE *_File) 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return ungetc((unsigned char)_Byte, _File) != (-1); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const unsigned char &_Byte, FILE *_File) 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return ungetc(_Byte, _File) != (-1); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const __wchar_t &_Wchar, FILE *_File) 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const unsigned short &_Wchar, FILE *_File) 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_filebuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_filebuf < _Elem, _Traits > _Myt;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef typename _Traits :: state_type _Myst;
 typedef codecvt < _Elem, char, typename _Traits :: state_type > _Cvt;

 basic_filebuf ( FILE * _File = 0 )
  : _Mysb ( )
  {
  _Init ( _File, _Newfl );
  }

 virtual ~ basic_filebuf ( ) noexcept
  {
  if ( _Myfile != 0 )
   _Reset_back ( );
  if ( _Closef )
   close ( );
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 basic_filebuf ( _Uninitialized )
  : _Mysb ( _Noinit )
  {
  }

 basic_filebuf ( _Myt && _Right )
  {
  _Init ( _Right . _Myfile, _Newfl );
  _Init ( ( FILE * ) 0, _Closefl );
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {

   FILE * _Myfile_sav = _Myfile;
   const _Cvt * _Pcvt_sav = _Pcvt;
   typename _Traits :: state_type _State_sav = _State;
   bool _Wrotesome_sav = _Wrotesome;
   bool _Closef_sav = _Closef;
   bool _Set_eback_sav = _Mysb :: eback ( ) == & _Mychar;
   bool _Set_eback_live = _Mysb :: gptr ( ) == & _Mychar;

   _Elem * _Pfirst0 = _Mysb :: pbase ( );
   _Elem * _Pnext0 = _Mysb :: pptr ( );
   _Elem * _Pend = _Mysb :: epptr ( );
   _Elem * _Gfirst0 = _Mysb :: eback ( );
   _Elem * _Gnext0 = _Mysb :: gptr ( );
   _Elem * _Gend = _Mysb :: egptr ( );


   _Init ( _Right . _Myfile, _Right . _Myfile != 0 ? _Openfl : _Newfl );
   _Mysb :: setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   if ( _Right . eback ( ) != & _Right . _Mychar )
    _Mysb :: setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   else if ( _Right . gptr ( ) != & _Right . _Mychar )
    _Mysb :: setg ( & _Mychar, & _Mychar + 1, & _Mychar + 1 );
   else
    _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );

   _Pcvt = _Right . _Pcvt;
   _State = _Right . _State;
   _Wrotesome = _Right . _Wrotesome;
   _Closef = _Right . _Closef;


   _Right . _Init ( _Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );
   if ( ! _Set_eback_sav )
    _Right . setg ( _Gfirst0, _Gnext0, _Gend );
   else if ( ! _Set_eback_live )
    _Right . setg ( & _Right . _Mychar, & _Right . _Mychar + 1,
     & _Right . _Mychar + 1 );
   else
    _Right . setg ( & _Right . _Mychar, & _Right . _Mychar,
     & _Right . _Mychar + 1 );

   _Right . _Pcvt = _Pcvt_sav;
   _Right . _State = _State_sav;
   _Right . _Wrotesome = _Wrotesome_sav;
   _Right . _Closef = _Closef_sav;


   :: std :: swap ( _Set_eback, _Right . _Set_eback );
   :: std :: swap ( _Set_egptr, _Right . _Set_egptr );

   :: std :: swap ( _Mychar, _Right . _Mychar );
   :: std :: swap ( _Mysb :: _Plocale, _Right . _Plocale );
   }
  }

 basic_filebuf ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl };

 bool is_open ( ) const
  {
  return ( _Myfile != 0 );
  }

 _Myt * open ( const char * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const string & _Str,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  return ( open ( _Str . c_str ( ), _Mode, _Prot ) );
  }


 _Myt * open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const wstring & _Str,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  return ( open ( _Str . c_str ( ), _Mode, _Prot ) );
  }


 _Myt * open ( const wchar_t * _Filename,
  ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }



 _Myt * open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }


 _Myt * open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }



 _Myt * close ( )
  {
  _Myt * _Ans = this;
  if ( _Myfile == 0 )
   _Ans = 0;
  else
   {
   if ( ! _Endwrite ( ) )
    _Ans = 0;
   if ( fclose ( _Myfile ) != 0 )
    _Ans = 0;
   }
  _Init ( 0, _Closefl );
  return ( _Ans );
  }

 virtual void _Lock ( )
  {
  if ( _Myfile )
   :: _lock_file ( _Myfile );
  }

 virtual void _Unlock ( )
  {
  if ( _Myfile )
   :: _unlock_file ( _Myfile );
  }

protected :
 virtual int_type overflow ( int_type _Meta =
  _Traits :: eof ( ) )
  {
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );
  else if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  _Reset_back ( );
  if ( _Pcvt == 0 )
   return ( _Fputc ( _Traits :: to_char_type ( _Meta ), _Myfile )
    ? _Meta : _Traits :: eof ( ) );
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits :: to_char_type ( _Meta );
   const _Elem * _Src;
   char * _Dest;

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> out ( _State,
     & _Ch, & _Ch + 1, _Src,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( _Traits :: eof ( ) );

     _Wrotesome = true;
     if ( _Src != & _Ch )
      return ( _Meta );

     if ( 0 < _Count )
      ;
     else if ( _Str . size ( ) < 4 * _STRING_INC )
      _Str . append ( _STRING_INC, '\000' );
     else
      return ( _Traits :: eof ( ) );
     break;
     }

    case codecvt_base :: noconv :
     return ( _Fputc ( _Ch, _Myfile ) ? _Meta
      : _Traits :: eof ( ) );

    default :
     return ( _Traits :: eof ( ) );
    }
   }
 }

 virtual int_type pbackfail ( int_type _Meta =
  _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: eback ( ) < _Mysb :: gptr ( )
   && ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   || _Traits :: eq_int_type ( _Traits :: to_int_type ( _Mysb :: gptr ( ) [ - 1 ] ),
    _Meta ) ) )
   {
   _Mysb :: _Gndec ( );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  else if ( _Myfile == 0 || _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: eof ( ) );
  else if ( _Pcvt == 0 && _Ungetc ( _Traits :: to_char_type ( _Meta ), _Myfile ) )
   return ( _Meta );
  else if ( _Mysb :: gptr ( ) != & _Mychar )
   {
   _Mychar = _Traits :: to_char_type ( _Meta );
   _Set_back ( );
   return ( _Meta );
   }
  else
   return ( _Traits :: eof ( ) );
 }

 virtual int_type underflow ( )
  {
  int_type _Meta;
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
   return ( _Meta );
  else
   {
   pbackfail ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type uflow ( )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type (
    * _Mysb :: _Gninc ( ) ) );
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  _Reset_back ( );
  if ( _Pcvt == 0 )
   {
   _Elem _Ch = 0;
   return ( _Fgetc ( _Ch, _Myfile ) ? _Traits :: to_int_type ( _Ch )
    : _Traits :: eof ( ) );
   }
  else
   {
   string _Str;

   for (;; )
    {
    _Elem _Ch, * _Dest;
    const char * _Src;
    int _Nleft;
    int _Meta = fgetc ( _Myfile );

    if ( _Meta == ( - 1 ) )
     return ( _Traits :: eof ( ) );

    _Str . append ( 1, ( char ) _Meta );
    switch ( _Pcvt -> in ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Src,
     & _Ch, & _Ch + 1, _Dest ) )
     {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     if ( _Dest != & _Ch )
      {
      _Nleft = ( int ) ( & * _Str . begin ( ) + _Str . size ( ) - _Src );
      for (; 0 < _Nleft; )
       ungetc ( _Src [ -- _Nleft ], _Myfile );
      return ( _Traits :: to_int_type ( _Ch ) );
      }
     else
      _Str . erase ( ( size_t ) 0,
       ( size_t ) ( _Src - & * _Str . begin ( ) ) );
     break;

    case codecvt_base :: noconv :
     if ( _Str . size ( ) < sizeof ( _Elem ) )
      break;

     :: memcpy_s ( ( & _Ch ), ( sizeof ( _Elem ) ), ( & * _Str . begin ( ) ), ( sizeof ( _Elem ) ) );


     return ( _Traits :: to_int_type ( _Ch ) );

    default :
     return ( _Traits :: eof ( ) );
     }
    }
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition;

  if ( _Mysb :: gptr ( ) == & _Mychar
   && _Way == ios_base :: cur
   && _Pcvt == 0 )
   _Off -= ( off_type ) sizeof ( _Elem );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || ( ( _Off != 0 || _Way != ios_base :: cur )
    && _fseeki64 ( _Myfile, _Off, _Way ) != 0 )
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _Reset_back ( );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual pos_type seekpos ( pos_type _Pos,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition = _Pos . seekpos ( );
  off_type _Off = ( off_type ) _Pos - ( off_type ) ( ( long long ) ( _Fileposition ) );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || fsetpos ( _Myfile, & _Fileposition ) != 0
   || ( _Off != 0 && _fseeki64 ( _Myfile, _Off, 1 ) != 0 )
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _State = _Pos . state ( );

  _Reset_back ( );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual _Mysb * setbuf ( _Elem * _Buffer, streamsize _Count )
  {
  if ( _Myfile == 0 || setvbuf ( _Myfile, ( char * ) _Buffer,
   _Buffer == 0 && _Count == 0 ? 4 : 0,
   ( size_t ) _Count * sizeof ( _Elem ) ) != 0 )
   return ( 0 );
  else
   {
   _Init ( _Myfile, _Openfl );
   return ( this );
   }
  }

 virtual int sync ( )
  {
  return ( _Myfile == 0
   || _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) )
   || 0 <= fflush ( _Myfile ) ? 0 : - 1 );
  }

 virtual void imbue ( const locale & _Loc )
  {
  _Initcvt ( & use_facet < _Cvt > ( _Loc ) );
  }

 void _Init ( FILE * _File, _Initfl _Which )
  {
   static _Myst _Stinit;

  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb :: _Init ( );






  #pragma warning(push)
  #pragma warning(disable: 6240)
  if ( _File != 0 && sizeof ( _Elem ) == 1 )
  #pragma warning(pop)

   {
   _Elem * * _Pb = 0;
   _Elem * * _Pn = 0;
   int * _Nr = 0;

   :: _get_stream_buffer_pointers (
    _File,
    reinterpret_cast < char * * * > ( & _Pb ),
    reinterpret_cast < char * * * > ( & _Pn ),
    & _Nr );
   int * _Nw = _Nr;

   _Mysb :: _Init ( _Pb, _Pn, _Nr, _Pb, _Pn, _Nw );
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite ( )
  {
  if ( _Pcvt == 0 || ! _Wrotesome )
   return ( true );
  else
   {
   const int _STRING_INC = 8;
   char * _Dest;
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) ) )
    return ( false );

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> unshift ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: ok :
     _Wrotesome = false;

    case codecvt_base :: partial :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( false );
     if ( ! _Wrotesome )
      return ( true );
     if ( _Count == 0 )
      _Str . append ( _STRING_INC, '\000' );
     break;
     }

    case codecvt_base :: noconv :
     return ( true );

    default :
     return ( false );
    }
   }
  }

 void _Initcvt ( const _Cvt * _Newpcvt )
  {
  if ( _Newpcvt -> always_noconv ( ) )
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb :: _Init ( );
   }
  }

private :
 const _Cvt * _Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits :: state_type _State;
 bool _Closef;
 FILE * _Myfile;

 void _Reset_back ( )
  {
  if ( _Mysb :: eback ( ) == & _Mychar )
   _Mysb :: setg ( _Set_eback, _Set_eback, _Set_egptr );
  }

 void _Set_back ( )
  {
  if ( _Mysb :: eback ( ) != & _Mychar )
   {
   _Set_eback = _Mysb :: eback ( );
   _Set_egptr = _Mysb :: egptr ( );
   }
  _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );
  }

 _Elem * _Set_eback;
 _Elem * _Set_egptr;
 };
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_filebuf < _Elem, _Traits > & _Left,
  basic_filebuf < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_ifstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_ifstream < _Elem, _Traits > _Myt;
 typedef basic_istream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

 basic_ifstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_ifstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_ifstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_ifstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_ifstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_ifstream < _Elem, _Traits > & _Left,
  basic_ifstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_ofstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ofstream < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

 basic_ofstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_ofstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_ofstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_ofstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_ofstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_ofstream < _Elem, _Traits > & _Left,
  basic_ofstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_fstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_fstream < _Elem, _Traits > _Myt;
 typedef basic_iostream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 basic_fstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_fstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_fstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_fstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_fstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
 }

private :
 _Myfb _Filebuffer;
 };
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_fstream < _Elem, _Traits > & _Left,
  basic_fstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}
#line 1350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma warning(pop)
#pragma pack ( pop )
#line 108 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
typedef 
#line 66 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
struct { 
#line 67 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
double *e; 
#line 68 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
double *f; 
#line 69 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short N; 
#line 71 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *Ks; 
#line 72 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float *Cms; 
#line 73 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short NModels; 
#line 74 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short NComps; 
#line 75 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *boolModel; 
#line 77 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short Depth; 
#line 78 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short LognDepth; 
#line 79 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short nFathers; 
#line 80 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short nCallForFather; 
#line 81 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *Fathers; 
#line 83 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *SonNoVec; 
#line 85 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *RelStarts; 
#line 86 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *RelEnds; 
#line 87 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *RelVec; 
#line 88 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *SegStartI; 
#line 89 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *SegEndI; 
#line 90 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *SegToComp; 
#line 91 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *MidComps; 
#line 93 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *FIdxs; 
#line 96 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *CompByLevel32; 
#line 97 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *CompByFLevel32; 
#line 98 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short nLRel; 
#line 99 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *LRelStarts; 
#line 100 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *LRelEnds; 
#line 101 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short nFLRel; 
#line 102 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *FLRelStarts; 
#line 103 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *FLRelEnds; 
#line 108 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
} HMat; 
#line 122 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
typedef 
#line 111 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
struct { 
#line 112 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short NStimuli; 
#line 113 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short loc; 
#line 114 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short comp; 
#line 115 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short numofdts; 
#line 116 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float area; 
#line 117 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *dtInds; 
#line 118 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float *amps; 
#line 119 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float *durs; 
#line 120 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float *dels; 
#line 121 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float Nt; 
#line 122 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
} Stim; 
#line 133 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
typedef 
#line 126 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
struct { 
#line 127 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float *Vs; 
#line 128 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float dt; 
#line 129 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float TFinal; 
#line 130 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float Celsius; 
#line 131 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short NRecSites; 
#line 132 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
unsigned short *RecSites; 
#line 133 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
} Sim; 
#line 136 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void RunByModelSerial(); 
#line 137 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void RunByModelP(); 
#line 139 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void solveByNeuron(const HMat & InMat, double * B, double * D); 
#line 140 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float maxf(float a, float b); 
#line 141 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float MaxAbsDiffVec(float * A, float * B, int n); 
#line 143 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void CopyVec(float * A, float * B, int n); 
#line 144 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void CopyVecTwoTypes(double * B, float * A, int n); 
#line 145 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void FlipVec(float * A, float * B, int n); 
#line 146 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void CompareArrays(const float * App, const float * Real, int n, char * Prefix); 
#line 147 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
double diffclock(clock_t clock1, clock_t clock2); 
#line 152 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadSerialNeuronData(const char * FN, HMat & TheMat); 
#line 153 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadParallelNeuronData(const char * FN, HMat & TheMat, unsigned short * CompDepth, unsigned short * CompFDepth); 
#line 154 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void FreeSerialNeuronData(HMat & InMat); 
#line 155 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadStimData(const char * FN, Stim & stim, unsigned short Nx); 
#line 156 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void CreateStimData(Stim & stim); 
#line 157 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadSimData(const char * FN, unsigned short N, Sim & sim); 
#line 158 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadStimFromFile(const char * FN, Stim & stim); 
#line 159 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void FreeStimData(Stim & stim); 
#line 160 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void FreeSimData(Sim & sim); 
#line 162 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void SaveArrayToFile(const char * FN, const int N, const float * Arr); 
#line 163 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void SaveVHots(const char * FN, float ** VHotsHost, unsigned short Nt, unsigned short NStimuli); 
#line 164 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadDebugData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 165 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadRHSData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 166 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadDData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 167 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void SetStatesFromDebug(float ** StatesM, float ** DebugData, unsigned short i, unsigned short N); 
#line 168 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void SetRHSFromNeuron(float * rhs, float ** DebugData, unsigned short i, unsigned short N); 
#line 169 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void SetDFromNeuron(float * D, float ** DebugData, unsigned short i, unsigned short N); 
#line 170 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadVData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 171 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void SetVFromNeuron(float * vs, float ** DebugData, unsigned short i, unsigned short N); 
#line 172 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void debugPrintMYFTYPE(float * A, unsigned short N, FILE * fdebug); 
#line 173 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void debugPrintMYSECONDFTYPE(double * A, unsigned short N, FILE * fdebug); 
#line 174 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadShortFromCSV(char * line, unsigned short * ans, int n); 
#line 175 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadDoubleFromCSV(char * line, double * ans, int n); 
#line 176 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
void ReadFloatFromCSV(char * line, float * ans, int n); 
#line 177 "c:\\pyneurogpu_win2\\neurogpu6\\Util.h"
float *ReadAllParams(const char * FN, unsigned short NParams, unsigned short Nx, unsigned short & ntemp); 
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
extern "C" {
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
typedef float2 cuFloatComplex; 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline float cuCrealf(cuFloatComplex x) 
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return x.x; 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline float cuCimagf(cuFloatComplex x) 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return x.y; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex make_cuFloatComplex(float 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
r, float i) 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
cuFloatComplex res; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
(res.x) = r; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
(res.y) = i; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return res; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex cuConjf(cuFloatComplex x) 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuFloatComplex(cuCrealf(x), -cuCimagf(x)); 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex cuCaddf(cuFloatComplex x, cuFloatComplex 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuFloatComplex(cuCrealf(x) + cuCrealf(y), cuCimagf(x) + cuCimagf(y)); 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex cuCsubf(cuFloatComplex x, cuFloatComplex 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuFloatComplex(cuCrealf(x) - cuCrealf(y), cuCimagf(x) - cuCimagf(y)); 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex cuCmulf(cuFloatComplex x, cuFloatComplex 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
cuFloatComplex prod; 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
prod = make_cuFloatComplex((cuCrealf(x) * cuCrealf(y)) - (cuCimagf(x) * cuCimagf(y)), (cuCrealf(x) * cuCimagf(y)) + (cuCimagf(x) * cuCrealf(y))); 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return prod; 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex cuCdivf(cuFloatComplex x, cuFloatComplex 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
cuFloatComplex quot; 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float s = fabsf(cuCrealf(y)) + fabsf(cuCimagf(y)); 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float oos = (1.0F) / s; 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float ars = cuCrealf(x) * oos; 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float ais = cuCimagf(x) * oos; 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float brs = cuCrealf(y) * oos; 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float bis = cuCimagf(y) * oos; 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
s = ((brs * brs) + (bis * bis)); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
oos = ((1.0F) / s); 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
quot = make_cuFloatComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos); 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return quot; 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline float cuCabsf(cuFloatComplex x) 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float a = cuCrealf(x); 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float b = cuCimagf(x); 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float v, w, t; 
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
a = fabsf(a); 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
b = fabsf(b); 
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
if (a > b) { 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
v = a; 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
w = b; 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} else { 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
v = b; 
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
w = a; 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
}  
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = (w / v); 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = ((1.0F) + (t * t)); 
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = (v * sqrtf(t)); 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
if (((v == (0.0F)) || (v > (3.402823466e+038F))) || (w > (3.402823466e+038F))) { 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = (v + w); 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
}  
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return t; 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
typedef double2 cuDoubleComplex; 
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline double cuCreal(cuDoubleComplex x) 
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return x.x; 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline double cuCimag(cuDoubleComplex x) 
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return x.y; 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex make_cuDoubleComplex(double 
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
r, double i) 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
cuDoubleComplex res; 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
(res.x) = r; 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
(res.y) = i; 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return res; 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuConj(cuDoubleComplex x) 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuDoubleComplex(cuCreal(x), -cuCimag(x)); 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuCadd(cuDoubleComplex x, cuDoubleComplex 
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuDoubleComplex(cuCreal(x) + cuCreal(y), cuCimag(x) + cuCimag(y)); 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuCsub(cuDoubleComplex x, cuDoubleComplex 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuDoubleComplex(cuCreal(x) - cuCreal(y), cuCimag(x) - cuCimag(y)); 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuCmul(cuDoubleComplex x, cuDoubleComplex 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
cuDoubleComplex prod; 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
prod = make_cuDoubleComplex((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)), (cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y))); 
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return prod; 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuCdiv(cuDoubleComplex x, cuDoubleComplex 
#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
cuDoubleComplex quot; 
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double s = fabs(cuCreal(y)) + fabs(cuCimag(y)); 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double oos = (1.0) / s; 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double ars = cuCreal(x) * oos; 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double ais = cuCimag(x) * oos; 
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double brs = cuCreal(y) * oos; 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double bis = cuCimag(y) * oos; 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
s = ((brs * brs) + (bis * bis)); 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
oos = ((1.0) / s); 
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
quot = make_cuDoubleComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos); 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return quot; 
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline double cuCabs(cuDoubleComplex x) 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double a = cuCreal(x); 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double b = cuCimag(x); 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double v, w, t; 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
a = fabs(a); 
#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
b = fabs(b); 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
if (a > b) { 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
v = a; 
#line 269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
w = b; 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} else { 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
v = b; 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
w = a; 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
}  
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = (w / v); 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = ((1.0) + (t * t)); 
#line 276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = (v * sqrt(t)); 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
if (((v == (0.0)) || (v > (1.7976931348623157e+308))) || (w > (1.7976931348623157e+308))) 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
t = (v + w); 
#line 280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
}  
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return t; 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
}
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
typedef cuFloatComplex cuComplex; 
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuComplex make_cuComplex(float x, float 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
y) 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuFloatComplex(x, y); 
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuComplexFloatToDouble(cuFloatComplex 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
c) 
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuDoubleComplex((double)cuCrealf(c), (double)cuCimagf(c)); 
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuFloatComplex cuComplexDoubleToFloat(cuDoubleComplex 
#line 304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
c) 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuFloatComplex((float)cuCreal(c), (float)cuCimag(c)); 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuComplex cuCfmaf(cuComplex x, cuComplex y, cuComplex d) 
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float real_res; 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
float imag_res; 
#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
real_res = ((cuCrealf(x) * cuCrealf(y)) + cuCrealf(d)); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
imag_res = ((cuCrealf(x) * cuCimagf(y)) + cuCimagf(d)); 
#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
real_res = ((-(cuCimagf(x) * cuCimagf(y))) + real_res); 
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
imag_res = ((cuCimagf(x) * cuCrealf(y)) + imag_res); 
#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuComplex(real_res, imag_res); 
#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
static __inline cuDoubleComplex cuCfma(cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d) 
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
{ 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double real_res; 
#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
double imag_res; 
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
real_res = ((cuCreal(x) * cuCreal(y)) + cuCreal(d)); 
#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
imag_res = ((cuCreal(x) * cuCimag(y)) + cuCimag(d)); 
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
real_res = ((-(cuCimag(x) * cuCimag(y))) + real_res); 
#line 333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
imag_res = ((cuCimag(x) * cuCreal(y)) + imag_res); 
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
return make_cuDoubleComplex(real_res, imag_res); 
#line 336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
} 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
typedef 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
struct __declspec(align(2)) { 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
unsigned short x; 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
} __half; 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
typedef 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
struct __declspec(align(4)) { 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
unsigned x; 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
} __half2; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
typedef __half half; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
typedef __half2 half2; 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half(const float a); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half_rz(const float a); 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half_rd(const float a); 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half_ru(const float a); 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float __half2float(const __half a); 
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_rn(__half h); 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_rz(__half h); 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_rd(__half h); 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_ru(__half h); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_rn(int i); 
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_rz(int i); 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_rd(int i); 
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_ru(int i); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_rn(__half h); 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_rz(__half h); 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_rd(__half h); 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_ru(__half h); 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_rn(short i); 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_rz(short i); 
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_rd(short i); 
#line 333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_ru(short i); 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_rn(__half h); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_rz(__half h); 
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_rd(__half h); 
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_ru(__half h); 
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_rn(unsigned i); 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_rz(unsigned i); 
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_rd(unsigned i); 
#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_ru(unsigned i); 
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_rn(__half h); 
#line 438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_rz(__half h); 
#line 448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_rd(__half h); 
#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_ru(__half h); 
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_rn(unsigned short i); 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_rz(unsigned short i); 
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_rd(unsigned short i); 
#line 501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_ru(unsigned short i); 
#line 513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_rn(__half h); 
#line 524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_rz(__half h); 
#line 534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_rd(__half h); 
#line 544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_ru(__half h); 
#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_rn(unsigned __int64 i); 
#line 567 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_rz(unsigned __int64 i); 
#line 577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_rd(unsigned __int64 i); 
#line 587 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_ru(unsigned __int64 i); 
#line 599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_rn(__half h); 
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_rz(__half h); 
#line 619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_rd(__half h); 
#line 629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_ru(__half h); 
#line 641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_rn(__int64 i); 
#line 651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_rz(__int64 i); 
#line 661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_rd(__int64 i); 
#line 671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_ru(__int64 i); 
#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half htrunc(const __half h); 
#line 691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hceil(const __half h); 
#line 700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hfloor(const __half h); 
#line 712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hrint(const __half h); 
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2trunc(const __half2 h); 
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2ceil(const __half2 h); 
#line 745 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2floor(const __half2 h); 
#line 758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2rint(const __half2 h); 
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __float2half2_rn(const float a); 
#line 785 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __floats2half2_rn(const float a, const float b); 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __float22half2_rn(const float2 a); 
#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float2 __half22float2(const __half2 a); 
#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float __low2float(const __half2 a); 
#line 829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __half2half2(const __half a); 
#line 839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float __high2float(const __half2 a); 
#line 849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __lowhigh2highlow(const __half2 a); 
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __lows2half2(const __half2 a, const __half2 b); 
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __highs2half2(const __half2 a, const __half2 b); 
#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __high2half(const __half2 a); 
#line 893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __low2half(const __half2 a); 
#line 903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __hisinf(const __half a); 
#line 915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __halves2half2(const __half a, const __half b); 
#line 926 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __low2half2(const __half2 a); 
#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __high2half2(const __half2 a); 
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half_as_short(const __half h); 
#line 958 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half_as_ushort(const __half h); 
#line 968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short_as_half(const short i); 
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort_as_half(const unsigned short i); 
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl(__half2 var, int delta, int width = 32); 
#line 986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl_up(__half2 var, unsigned delta, int width = 32); 
#line 987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl_down(__half2 var, unsigned delta, int width = 32); 
#line 988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl_xor(__half2 var, int delta, int width = 32); 
#line 989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl(__half var, int delta, int width = 32); 
#line 990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl_up(__half var, unsigned delta, int width = 32); 
#line 991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl_down(__half var, unsigned delta, int width = 32); 
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl_xor(__half var, int delta, int width = 32); 
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldg(const __half2 * ptr); 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldg(const __half * ptr); 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldcg(const __half2 * ptr); 
#line 1003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldcg(const __half * ptr); 
#line 1004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldca(const __half2 * ptr); 
#line 1005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldca(const __half * ptr); 
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldcs(const __half2 * ptr); 
#line 1007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldcs(const __half * ptr); 
#line 1022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __heq2(const __half2 a, const __half2 b); 
#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hne2(const __half2 a, const __half2 b); 
#line 1046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hle2(const __half2 a, const __half2 b); 
#line 1058 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hge2(const __half2 a, const __half2 b); 
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hlt2(const __half2 a, const __half2 b); 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hgt2(const __half2 a, const __half2 b); 
#line 1094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hequ2(const __half2 a, const __half2 b); 
#line 1106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hneu2(const __half2 a, const __half2 b); 
#line 1118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hleu2(const __half2 a, const __half2 b); 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hgeu2(const __half2 a, const __half2 b); 
#line 1142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hltu2(const __half2 a, const __half2 b); 
#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hgtu2(const __half2 a, const __half2 b); 
#line 1164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hisnan2(const __half2 a); 
#line 1174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hadd2(const __half2 a, const __half2 b); 
#line 1185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hsub2(const __half2 a, const __half2 b); 
#line 1196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hmul2(const __half2 a, const __half2 b); 
#line 1206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2div(const __half2 a, const __half2 b); 
#line 1219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hadd2_sat(const __half2 a, const __half2 b); 
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hsub2_sat(const __half2 a, const __half2 b); 
#line 1245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hmul2_sat(const __half2 a, const __half2 b); 
#line 1258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c); 
#line 1272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c); 
#line 1282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hneg2(const __half2 a); 
#line 1292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hadd(const __half a, const __half b); 
#line 1302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hsub(const __half a, const __half b); 
#line 1312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hmul(const __half a, const __half b); 
#line 1322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hdiv(const __half a, const __half b); 
#line 1333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hadd_sat(const __half a, const __half b); 
#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hsub_sat(const __half a, const __half b); 
#line 1359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hmul_sat(const __half a, const __half b); 
#line 1371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hfma(const __half a, const __half b, const __half c); 
#line 1385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hfma_sat(const __half a, const __half b, const __half c); 
#line 1394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hneg(const __half a); 
#line 1408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbeq2(const __half2 a, const __half2 b); 
#line 1422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbne2(const __half2 a, const __half2 b); 
#line 1436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hble2(const __half2 a, const __half2 b); 
#line 1450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbge2(const __half2 a, const __half2 b); 
#line 1464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hblt2(const __half2 a, const __half2 b); 
#line 1478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbgt2(const __half2 a, const __half2 b); 
#line 1492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbequ2(const __half2 a, const __half2 b); 
#line 1506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbneu2(const __half2 a, const __half2 b); 
#line 1520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbleu2(const __half2 a, const __half2 b); 
#line 1536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbgeu2(const __half2 a, const __half2 b); 
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbltu2(const __half2 a, const __half2 b); 
#line 1566 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbgtu2(const __half2 a, const __half2 b); 
#line 1576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __heq(const __half a, const __half b); 
#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hne(const __half a, const __half b); 
#line 1596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hle(const __half a, const __half b); 
#line 1606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hge(const __half a, const __half b); 
#line 1616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hlt(const __half a, const __half b); 
#line 1626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hgt(const __half a, const __half b); 
#line 1637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hequ(const __half a, const __half b); 
#line 1648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hneu(const __half a, const __half b); 
#line 1659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hleu(const __half a, const __half b); 
#line 1670 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hgeu(const __half a, const __half b); 
#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hltu(const __half a, const __half b); 
#line 1692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hgtu(const __half a, const __half b); 
#line 1701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hisnan(const __half a); 
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hsqrt(const __half a); 
#line 1721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hrsqrt(const __half a); 
#line 1730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hrcp(const __half a); 
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hlog(const __half a); 
#line 1750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hlog2(const __half a); 
#line 1760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hlog10(const __half a); 
#line 1771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hexp(const __half a); 
#line 1782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hexp2(const __half a); 
#line 1793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hexp10(const __half a); 
#line 1802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hcos(const __half a); 
#line 1811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hsin(const __half a); 
#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2sqrt(const __half2 a); 
#line 1832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2rsqrt(const __half2 a); 
#line 1842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2rcp(const __half2 a); 
#line 1853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2log(const __half2 a); 
#line 1864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2log2(const __half2 a); 
#line 1875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2log10(const __half2 a); 
#line 1886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2exp(const __half2 a); 
#line 1897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2exp2(const __half2 a); 
#line 1908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2exp10(const __half2 a); 
#line 1918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2cos(const __half2 a); 
#line 1927 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2sin(const __half2 a); 
#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_rn(__half h) 
#line 1932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_rz(__half h) 
#line 1938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_rd(__half h) 
#line 1944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __half2int_ru(__half h) 
#line 1950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_rn(int i) 
#line 1956 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_rz(int i) 
#line 1962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 1966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_rd(int i) 
#line 1968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 1972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1973 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __int2half_ru(int i) 
#line 1974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 1978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_rn(__half h) 
#line 1981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 1997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_rz(__half h) 
#line 1987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_rd(__half h) 
#line 1993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 1997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 1998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half2short_ru(__half h) 
#line 1999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_rn(short i) 
#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2010 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_rz(short i) 
#line 2011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2027 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_rd(short i) 
#line 2017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short2half_ru(short i) 
#line 2023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2027 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_rn(__half h) 
#line 2030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_rz(__half h) 
#line 2036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2041 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_rd(__half h) 
#line 2042 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2058 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __half2uint_ru(__half h) 
#line 2048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_rn(unsigned i) 
#line 2054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2058 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_rz(unsigned i) 
#line 2060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_rd(unsigned i) 
#line 2066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __uint2half_ru(unsigned i) 
#line 2072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_rn(__half h) 
#line 2079 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2083 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2084 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_rz(__half h) 
#line 2085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_rd(__half h) 
#line 2091 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half2ushort_ru(__half h) 
#line 2097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_rn(unsigned short i) 
#line 2103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_rz(unsigned short i) 
#line 2109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_rd(unsigned short i) 
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort2half_ru(unsigned short i) 
#line 2121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_rn(__half h) 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_rz(__half h) 
#line 2134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_rd(__half h) 
#line 2140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned __int64 __half2ull_ru(__half h) 
#line 2146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_rn(unsigned __int64 i) 
#line 2152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_rz(unsigned __int64 i) 
#line 2158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_rd(unsigned __int64 i) 
#line 2164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ull2half_ru(unsigned __int64 i) 
#line 2170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_rn(__half h) 
#line 2177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_rz(__half h) 
#line 2183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_rd(__half h) 
#line 2189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __int64 __half2ll_ru(__half h) 
#line 2195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_rn(__int64 i) 
#line 2201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_rz(__int64 i) 
#line 2207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_rd(__int64 i) 
#line 2213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ll2half_ru(__int64 i) 
#line 2219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half htrunc(const __half h) 
#line 2226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hceil(const __half h) 
#line 2232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hfloor(const __half h) 
#line 2238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hrint(const __half h) 
#line 2244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2trunc(const __half2 h) 
#line 2251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 2277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2ceil(const __half2 h) 
#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 2287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2floor(const __half2 h) 
#line 2271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 2297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2rint(const __half2 h) 
#line 2281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 2307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float2 __half22float2(const __half2 l) 
#line 2292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;
#line 2304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}



















#line 2325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half(const float f) 
#line 2306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f;
#line 2310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half_rz(const float f) 
#line 2312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f;
#line 2316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half_rd(const float f) 
#line 2318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f;
#line 2322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __float2half_ru(const float f) 
#line 2324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f;
#line 2328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float __half2float(const __half h) 
#line 2330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __float2half2_rn(const float f) 
#line 2336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f;
#line 2342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}














#line 2358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __floats2half2_rn(const float f1, const float f2) 
#line 2344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f1;(void)f2;
#line 2351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 2368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __float22half2_rn(const float2 f) 
#line 2353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)f;
#line 2356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}









#line 2367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float __low2float(const __half2 l) 
#line 2358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;
#line 2364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}














#line 2380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline float __high2float(const __half2 l) 
#line 2366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;
#line 2372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}














#line 2388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __lows2half2(const __half2 l, const __half2 h) 
#line 2374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;(void)h;
#line 2381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 2398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __highs2half2(const __half2 l, const __half2 h) 
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;(void)h;
#line 2390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 2407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __low2half(const __half2 h) 
#line 2392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline int __hisinf(const __half a) 
#line 2400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 2406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 2423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __low2half2(const __half2 l) 
#line 2408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;
#line 2414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}














#line 2430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __high2half2(const __half2 l) 
#line 2416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;
#line 2422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}














#line 2438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __high2half(const __half2 h) 
#line 2424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












#line 2444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __halves2half2(const __half l, const __half h) 
#line 2432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)l;(void)h;
#line 2437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __half2half2(const __half lh) 
#line 2439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)lh;
#line 2444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __lowhigh2highlow(const __half2 lh) 
#line 2446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)lh;
#line 2452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}














#line 2468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline short __half_as_short(const __half h) 
#line 2454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}







#line 2465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline unsigned short __half_as_ushort(const __half h) 
#line 2458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)h;
#line 2460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}







#line 2469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __short_as_half(const short i) 
#line 2462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ushort_as_half(const unsigned short i) 
#line 2468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)i;
#line 2472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl(__half2 var, int delta, int width) 
#line 2485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}

















#line 2509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl_up(__half2 var, unsigned delta, int width) 
#line 2492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}

















#line 2516 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl_down(__half2 var, unsigned delta, int width) 
#line 2499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}

















#line 2523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __shfl_xor(__half2 var, int delta, int width) 
#line 2506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}

















#line 2530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl(__half var, int delta, int width) 
#line 2514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl_up(__half var, unsigned delta, int width) 
#line 2520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2537 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl_down(__half var, unsigned delta, int width) 
#line 2526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2543 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __shfl_xor(__half var, int delta, int width) 
#line 2532 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 2536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldg(const __half2 *ptr) 
#line 2549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2553 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2565 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldg(const __half *ptr) 
#line 2555 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2559 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldcg(const __half2 *ptr) 
#line 2561 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2565 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2566 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldcg(const __half *ptr) 
#line 2567 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2572 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldca(const __half2 *ptr) 
#line 2573 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2578 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldca(const __half *ptr) 
#line 2579 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __ldcs(const __half2 *ptr) 
#line 2585 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __ldcs(const __half *ptr) 
#line 2591 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)ptr;
#line 2595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __heq2(const __half2 a, const __half2 b) 
#line 2609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hne2(const __half2 a, const __half2 b) 
#line 2613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hle2(const __half2 a, const __half2 b) 
#line 2617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hge2(const __half2 a, const __half2 b) 
#line 2621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2635 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hlt2(const __half2 a, const __half2 b) 
#line 2625 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hgt2(const __half2 a, const __half2 b) 
#line 2629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hequ2(const __half2 a, const __half2 b) 
#line 2633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2635 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hneu2(const __half2 a, const __half2 b) 
#line 2637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hleu2(const __half2 a, const __half2 b) 
#line 2641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2655 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hgeu2(const __half2 a, const __half2 b) 
#line 2645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hltu2(const __half2 a, const __half2 b) 
#line 2649 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2663 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hgtu2(const __half2 a, const __half2 b) 
#line 2653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2655 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbeq2(const __half2 a, const __half2 b) 
#line 2667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2670 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbne2(const __half2 a, const __half2 b) 
#line 2671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hble2(const __half2 a, const __half2 b) 
#line 2675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbge2(const __half2 a, const __half2 b) 
#line 2679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hblt2(const __half2 a, const __half2 b) 
#line 2683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbgt2(const __half2 a, const __half2 b) 
#line 2687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbequ2(const __half2 a, const __half2 b) 
#line 2691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbneu2(const __half2 a, const __half2 b) 
#line 2695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbleu2(const __half2 a, const __half2 b) 
#line 2699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbgeu2(const __half2 a, const __half2 b) 
#line 2703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbltu2(const __half2 a, const __half2 b) 
#line 2707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hbgtu2(const __half2 a, const __half2 b) 
#line 2711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __heq(const __half a, const __half b) 
#line 2727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hne(const __half a, const __half b) 
#line 2731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hle(const __half a, const __half b) 
#line 2735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hge(const __half a, const __half b) 
#line 2739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hlt(const __half a, const __half b) 
#line 2743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2745 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hgt(const __half a, const __half b) 
#line 2747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hequ(const __half a, const __half b) 
#line 2751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hneu(const __half a, const __half b) 
#line 2755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hleu(const __half a, const __half b) 
#line 2759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hgeu(const __half a, const __half b) 
#line 2763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hltu(const __half a, const __half b) 
#line 2767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hgtu(const __half a, const __half b) 
#line 2771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 2786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hadd2(const __half2 a, const __half2 b) 
#line 2785 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hsub2(const __half2 a, const __half2 b) 
#line 2789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hmul2(const __half2 a, const __half2 b) 
#line 2793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hadd2_sat(const __half2 a, const __half2 b) 
#line 2797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2800 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hsub2_sat(const __half2 a, const __half2 b) 
#line 2801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hmul2_sat(const __half2 a, const __half2 b) 
#line 2805 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c) 
#line 2816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;(void)c;
#line 2818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c) 
#line 2820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;(void)c;
#line 2822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2div(__half2 a, __half2 b) {int volatile ___ = 1;(void)a;(void)b;
#line 2838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}





















#line 2861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hadd(const __half a, const __half b) 
#line 2849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hsub(const __half a, const __half b) 
#line 2853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hmul(const __half a, const __half b) 
#line 2857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hadd_sat(const __half a, const __half b) 
#line 2861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hsub_sat(const __half a, const __half b) 
#line 2865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hmul_sat(const __half a, const __half b) 
#line 2869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;
#line 2871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hfma(const __half a, const __half b, const __half c) 
#line 2880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;(void)c;
#line 2882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2894 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hfma_sat(const __half a, const __half b, const __half c) 
#line 2884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)b;(void)c;
#line 2886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}










#line 2898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hdiv(__half a, __half b) {int volatile ___ = 1;(void)a;(void)b;
#line 2908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}



































#line 2945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __forceinline float __float_simpl_sinf(float); 
#line 2953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __forceinline float __float_simpl_cosf(float); 
#line 2954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hsin_internal(const __half a) {int volatile ___ = 1;(void)a;
#line 2960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 2977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hsin(const __half a) {int volatile ___ = 1;(void)a;
#line 2977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












































#line 3023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2sin(const __half2 a) {int volatile ___ = 1;(void)a;
#line 2995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















































#line 3044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 2996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hcos_internal(const __half a) {int volatile ___ = 1;(void)a;
#line 3002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 3019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hcos(const __half a) {int volatile ___ = 1;(void)a;
#line 3014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}





























#line 3045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2cos(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}

































#line 3063 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __forceinline float __internal_trig_reduction_kernel(float a, int *quadrant) 
#line 3030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;(void)quadrant;
#line 3039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}





















#line 3062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __forceinline float __internal_sin_cos_kernel(float x, int i) 
#line 3041 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)x;(void)i;
#line 3063 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}













































#line 3110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __forceinline float __float_simpl_sinf(float a) 
#line 3065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 3074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}





















#line 3097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3075 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __forceinline float __float_simpl_cosf(float a) 
#line 3076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 3086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}























#line 3111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hexp(const __half a) {int volatile ___ = 1;(void)a;
#line 3104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












































#line 3150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2exp(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}


















































#line 3180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hexp2(const __half a) {int volatile ___ = 1;(void)a;
#line 3142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}



















#line 3163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2exp2(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}























#line 3185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hexp10(const __half a) {int volatile ___ = 1;(void)a;
#line 3179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}


















































#line 3231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2exp10(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
























































#line 3262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hlog2(const __half a) {int volatile ___ = 1;(void)a;
#line 3218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}






























#line 3250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2log2(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}


































#line 3272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hlog(const __half a) {int volatile ___ = 1;(void)a;
#line 3254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












































#line 3300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2log(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}


















































#line 3330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hlog10(const __half a) {int volatile ___ = 1;(void)a;
#line 3296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}












































#line 3342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2log10(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}


















































#line 3372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2rcp(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}



















#line 3346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hrcp(const __half a) {int volatile ___ = 1;(void)a;
#line 3328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 3346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2rsqrt(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}



















#line 3352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hrsqrt(const __half a) {int volatile ___ = 1;(void)a;
#line 3334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 3352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 h2sqrt(const __half2 a) {int volatile ___ = 1;(void)a;
#line 3337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}



















#line 3358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half hsqrt(const __half a) {int volatile ___ = 1;(void)a;
#line 3340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}
















#line 3358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hisnan2(const __half2 a) 
#line 3344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 3349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 3362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline bool __hisnan(const __half a) 
#line 3351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 3358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}















#line 3375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half2 __hneg2(const __half2 a) 
#line 3360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 3363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}









#line 3374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __inline __half __hneg(const __half a) 
#line 3365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
{int volatile ___ = 1;(void)a;
#line 3369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
::exit(___);}











#line 3382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
extern "C" {
#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 72 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_SUCCESS, 
#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_NOT_INITIALIZED, 
#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_ALLOC_FAILED, 
#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_INVALID_VALUE, 
#line 77 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_ARCH_MISMATCH, 
#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_MAPPING_ERROR, 
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_EXECUTION_FAILED, 
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_INTERNAL_ERROR, 
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED, 
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_STATUS_ZERO_PIVOT
#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseStatus_t; 
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct cusparseContext; 
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef cusparseContext *cusparseHandle_t; 
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct cusparseMatDescr; 
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef cusparseMatDescr *cusparseMatDescr_t; 
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct cusparseSolveAnalysisInfo; 
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef cusparseSolveAnalysisInfo *cusparseSolveAnalysisInfo_t; 
#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct csrsv2Info; 
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef csrsv2Info *csrsv2Info_t; 
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct bsrsv2Info; 
#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef bsrsv2Info *bsrsv2Info_t; 
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct bsrsm2Info; 
#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef bsrsm2Info *bsrsm2Info_t; 
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct csric02Info; 
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef csric02Info *csric02Info_t; 
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct bsric02Info; 
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef bsric02Info *bsric02Info_t; 
#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct csrilu02Info; 
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef csrilu02Info *csrilu02Info_t; 
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct bsrilu02Info; 
#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef bsrilu02Info *bsrilu02Info_t; 
#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct cusparseHybMat; 
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef cusparseHybMat *cusparseHybMat_t; 
#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct csrgemm2Info; 
#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef csrgemm2Info *csrgemm2Info_t; 
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct csru2csrInfo; 
#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef csru2csrInfo *csru2csrInfo_t; 
#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
struct cusparseColorInfo; 
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef cusparseColorInfo *cusparseColorInfo_t; 
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_POINTER_MODE_HOST, 
#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_POINTER_MODE_DEVICE
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparsePointerMode_t; 
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_ACTION_SYMBOLIC, 
#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_ACTION_NUMERIC
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseAction_t; 
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_MATRIX_TYPE_GENERAL, 
#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_MATRIX_TYPE_SYMMETRIC, 
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_MATRIX_TYPE_HERMITIAN, 
#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_MATRIX_TYPE_TRIANGULAR
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseMatrixType_t; 
#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_FILL_MODE_LOWER, 
#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_FILL_MODE_UPPER
#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseFillMode_t; 
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_DIAG_TYPE_NON_UNIT, 
#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_DIAG_TYPE_UNIT
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseDiagType_t; 
#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_INDEX_BASE_ZERO, 
#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_INDEX_BASE_ONE
#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseIndexBase_t; 
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_OPERATION_NON_TRANSPOSE, 
#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_OPERATION_TRANSPOSE, 
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseOperation_t; 
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_DIRECTION_ROW, 
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_DIRECTION_COLUMN
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseDirection_t; 
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_HYB_PARTITION_AUTO, 
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_HYB_PARTITION_USER, 
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_HYB_PARTITION_MAX
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseHybPartition_t; 
#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_SOLVE_POLICY_NO_LEVEL, 
#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_SOLVE_POLICY_USE_LEVEL
#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseSolvePolicy_t; 
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_SIDE_LEFT, 
#line 195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_SIDE_RIGHT
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseSideMode_t; 
#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_COLOR_ALG0, 
#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_COLOR_ALG1
#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseColorAlg_t; 
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
typedef 
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
enum { 
#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_ALG0, 
#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
CUSPARSE_ALG1
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
} cusparseAlgMode_t; 
#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreate(cusparseHandle_t * handle); 
#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroy(cusparseHandle_t handle); 
#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseGetVersion(cusparseHandle_t handle, int * version); 
#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseGetProperty(libraryPropertyType type, int * value); 
#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetStream(cusparseHandle_t handle, cudaStream_t streamId); 
#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseGetStream(cusparseHandle_t handle, cudaStream_t * streamId); 
#line 218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseGetPointerMode(cusparseHandle_t handle, cusparsePointerMode_t * mode); 
#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetPointerMode(cusparseHandle_t handle, cusparsePointerMode_t mode); 
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateMatDescr(cusparseMatDescr_t * descrA); 
#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyMatDescr(cusparseMatDescr_t descrA); 
#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCopyMatDescr(cusparseMatDescr_t dest, const cusparseMatDescr_t src); 
#line 232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetMatType(cusparseMatDescr_t descrA, cusparseMatrixType_t type); 
#line 233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseMatrixType_t __stdcall cusparseGetMatType(const cusparseMatDescr_t descrA); 
#line 235 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetMatFillMode(cusparseMatDescr_t descrA, cusparseFillMode_t fillMode); 
#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseFillMode_t __stdcall cusparseGetMatFillMode(const cusparseMatDescr_t descrA); 
#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetMatDiagType(cusparseMatDescr_t descrA, cusparseDiagType_t diagType); 
#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseDiagType_t __stdcall cusparseGetMatDiagType(const cusparseMatDescr_t descrA); 
#line 241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetMatIndexBase(cusparseMatDescr_t descrA, cusparseIndexBase_t base); 
#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseIndexBase_t __stdcall cusparseGetMatIndexBase(const cusparseMatDescr_t descrA); 
#line 245 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateSolveAnalysisInfo(cusparseSolveAnalysisInfo_t * info); 
#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroySolveAnalysisInfo(cusparseSolveAnalysisInfo_t info); 
#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseGetLevelInfo(cusparseHandle_t handle, cusparseSolveAnalysisInfo_t info, int * nlevels, int ** levelPtr, int ** levelInd); 
#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateCsrsv2Info(csrsv2Info_t * info); 
#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyCsrsv2Info(csrsv2Info_t info); 
#line 258 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateCsric02Info(csric02Info_t * info); 
#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyCsric02Info(csric02Info_t info); 
#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateBsric02Info(bsric02Info_t * info); 
#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyBsric02Info(bsric02Info_t info); 
#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateCsrilu02Info(csrilu02Info_t * info); 
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyCsrilu02Info(csrilu02Info_t info); 
#line 268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateBsrilu02Info(bsrilu02Info_t * info); 
#line 269 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyBsrilu02Info(bsrilu02Info_t info); 
#line 272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateBsrsv2Info(bsrsv2Info_t * info); 
#line 273 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyBsrsv2Info(bsrsv2Info_t info); 
#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateBsrsm2Info(bsrsm2Info_t * info); 
#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyBsrsm2Info(bsrsm2Info_t info); 
#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateHybMat(cusparseHybMat_t * hybA); 
#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyHybMat(cusparseHybMat_t hybA); 
#line 283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateCsru2csrInfo(csru2csrInfo_t * info); 
#line 284 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyCsru2csrInfo(csru2csrInfo_t info); 
#line 287 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateColorInfo(cusparseColorInfo_t * info); 
#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyColorInfo(cusparseColorInfo_t info); 
#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSetColorAlgs(cusparseColorInfo_t info, cusparseColorAlg_t alg); 
#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseGetColorAlgs(cusparseColorInfo_t info, cusparseColorAlg_t * alg); 
#line 297 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSaxpyi(cusparseHandle_t handle, int nnz, const float * alpha, const float * xVal, const int * xInd, float * y, cusparseIndexBase_t idxBase); 
#line 305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDaxpyi(cusparseHandle_t handle, int nnz, const double * alpha, const double * xVal, const int * xInd, double * y, cusparseIndexBase_t idxBase); 
#line 313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCaxpyi(cusparseHandle_t handle, int nnz, const cuComplex * alpha, const cuComplex * xVal, const int * xInd, cuComplex * y, cusparseIndexBase_t idxBase); 
#line 321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZaxpyi(cusparseHandle_t handle, int nnz, const cuDoubleComplex * alpha, const cuDoubleComplex * xVal, const int * xInd, cuDoubleComplex * y, cusparseIndexBase_t idxBase); 
#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSdoti(cusparseHandle_t handle, int nnz, const float * xVal, const int * xInd, const float * y, float * resultDevHostPtr, cusparseIndexBase_t idxBase); 
#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDdoti(cusparseHandle_t handle, int nnz, const double * xVal, const int * xInd, const double * y, double * resultDevHostPtr, cusparseIndexBase_t idxBase); 
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCdoti(cusparseHandle_t handle, int nnz, const cuComplex * xVal, const int * xInd, const cuComplex * y, cuComplex * resultDevHostPtr, cusparseIndexBase_t idxBase); 
#line 354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZdoti(cusparseHandle_t handle, int nnz, const cuDoubleComplex * xVal, const int * xInd, const cuDoubleComplex * y, cuDoubleComplex * resultDevHostPtr, cusparseIndexBase_t idxBase); 
#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCdotci(cusparseHandle_t handle, int nnz, const cuComplex * xVal, const int * xInd, const cuComplex * y, cuComplex * resultDevHostPtr, cusparseIndexBase_t idxBase); 
#line 372 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZdotci(cusparseHandle_t handle, int nnz, const cuDoubleComplex * xVal, const int * xInd, const cuDoubleComplex * y, cuDoubleComplex * resultDevHostPtr, cusparseIndexBase_t idxBase); 
#line 383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgthr(cusparseHandle_t handle, int nnz, const float * y, float * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgthr(cusparseHandle_t handle, int nnz, const double * y, double * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgthr(cusparseHandle_t handle, int nnz, const cuComplex * y, cuComplex * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgthr(cusparseHandle_t handle, int nnz, const cuDoubleComplex * y, cuDoubleComplex * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgthrz(cusparseHandle_t handle, int nnz, float * y, float * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgthrz(cusparseHandle_t handle, int nnz, double * y, double * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgthrz(cusparseHandle_t handle, int nnz, cuComplex * y, cuComplex * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgthrz(cusparseHandle_t handle, int nnz, cuDoubleComplex * y, cuDoubleComplex * xVal, const int * xInd, cusparseIndexBase_t idxBase); 
#line 443 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSsctr(cusparseHandle_t handle, int nnz, const float * xVal, const int * xInd, float * y, cusparseIndexBase_t idxBase); 
#line 450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDsctr(cusparseHandle_t handle, int nnz, const double * xVal, const int * xInd, double * y, cusparseIndexBase_t idxBase); 
#line 457 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsctr(cusparseHandle_t handle, int nnz, const cuComplex * xVal, const int * xInd, cuComplex * y, cusparseIndexBase_t idxBase); 
#line 464 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZsctr(cusparseHandle_t handle, int nnz, const cuDoubleComplex * xVal, const int * xInd, cuDoubleComplex * y, cusparseIndexBase_t idxBase); 
#line 473 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSroti(cusparseHandle_t handle, int nnz, float * xVal, const int * xInd, float * y, const float * c, const float * s, cusparseIndexBase_t idxBase); 
#line 482 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDroti(cusparseHandle_t handle, int nnz, double * xVal, const int * xInd, double * y, const double * c, const double * s, cusparseIndexBase_t idxBase); 
#line 494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgemvi(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const float * alpha, const float * A, int lda, int nnz, const float * xVal, const int * xInd, const float * beta, float * y, cusparseIndexBase_t idxBase, void * pBuffer); 
#line 509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgemvi_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, int * pBufferSize); 
#line 516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgemvi(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const double * alpha, const double * A, int lda, int nnz, const double * xVal, const int * xInd, const double * beta, double * y, cusparseIndexBase_t idxBase, void * pBuffer); 
#line 531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgemvi_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, int * pBufferSize); 
#line 538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgemvi(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, int nnz, const cuComplex * xVal, const int * xInd, const cuComplex * beta, cuComplex * y, cusparseIndexBase_t idxBase, void * pBuffer); 
#line 553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgemvi_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, int * pBufferSize); 
#line 560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgemvi(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, int nnz, const cuDoubleComplex * xVal, const int * xInd, const cuDoubleComplex * beta, cuDoubleComplex * y, cusparseIndexBase_t idxBase, void * pBuffer); 
#line 575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgemvi_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, int * pBufferSize); 
#line 585 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrmv(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * x, const float * beta, float * y); 
#line 599 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrmv(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * x, const double * beta, double * y); 
#line 613 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrmv(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuComplex * x, const cuComplex * beta, cuComplex * y); 
#line 627 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrmv(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuDoubleComplex * x, const cuDoubleComplex * beta, cuDoubleComplex * y); 
#line 642 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsrmvEx_bufferSize(cusparseHandle_t handle, cusparseAlgMode_t alg, cusparseOperation_t transA, int m, int n, int nnz, const void * alpha, cudaDataType alphatype, const cusparseMatDescr_t descrA, const void * csrValA, cudaDataType csrValAtype, const int * csrRowPtrA, const int * csrColIndA, const void * x, cudaDataType xtype, const void * beta, cudaDataType betatype, void * y, cudaDataType ytype, cudaDataType executiontype, size_t * bufferSizeInBytes); 
#line 664 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsrmvEx(cusparseHandle_t handle, cusparseAlgMode_t alg, cusparseOperation_t transA, int m, int n, int nnz, const void * alpha, cudaDataType alphatype, const cusparseMatDescr_t descrA, const void * csrValA, cudaDataType csrValAtype, const int * csrRowPtrA, const int * csrColIndA, const void * x, cudaDataType xtype, const void * beta, cudaDataType betatype, void * y, cudaDataType ytype, cudaDataType executiontype, void * buffer); 
#line 689 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrmv_mp(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * x, const float * beta, float * y); 
#line 703 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrmv_mp(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * x, const double * beta, double * y); 
#line 717 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrmv_mp(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuComplex * x, const cuComplex * beta, cuComplex * y); 
#line 731 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrmv_mp(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int nnz, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuDoubleComplex * x, const cuDoubleComplex * beta, cuDoubleComplex * y); 
#line 748 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseShybmv(cusparseHandle_t handle, cusparseOperation_t transA, const float * alpha, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, const float * x, const float * beta, float * y); 
#line 757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDhybmv(cusparseHandle_t handle, cusparseOperation_t transA, const double * alpha, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, const double * x, const double * beta, double * y); 
#line 766 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseChybmv(cusparseHandle_t handle, cusparseOperation_t transA, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, const cuComplex * x, const cuComplex * beta, cuComplex * y); 
#line 775 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZhybmv(cusparseHandle_t handle, cusparseOperation_t transA, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, const cuDoubleComplex * x, const cuDoubleComplex * beta, cuDoubleComplex * y); 
#line 786 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nb, int nnzb, const float * alpha, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const float * x, const float * beta, float * y); 
#line 802 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nb, int nnzb, const double * alpha, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const double * x, const double * beta, double * y); 
#line 818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nb, int nnzb, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const cuComplex * x, const cuComplex * beta, cuComplex * y); 
#line 834 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nb, int nnzb, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const cuDoubleComplex * x, const cuDoubleComplex * beta, cuDoubleComplex * y); 
#line 853 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrxmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int sizeOfMask, int mb, int nb, int nnzb, const float * alpha, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedMaskPtrA, const int * bsrSortedRowPtrA, const int * bsrSortedEndPtrA, const int * bsrSortedColIndA, int blockDim, const float * x, const float * beta, float * y); 
#line 873 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrxmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int sizeOfMask, int mb, int nb, int nnzb, const double * alpha, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedMaskPtrA, const int * bsrSortedRowPtrA, const int * bsrSortedEndPtrA, const int * bsrSortedColIndA, int blockDim, const double * x, const double * beta, double * y); 
#line 892 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrxmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int sizeOfMask, int mb, int nb, int nnzb, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedMaskPtrA, const int * bsrSortedRowPtrA, const int * bsrSortedEndPtrA, const int * bsrSortedColIndA, int blockDim, const cuComplex * x, const cuComplex * beta, cuComplex * y); 
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrxmv(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int sizeOfMask, int mb, int nb, int nnzb, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedMaskPtrA, const int * bsrSortedRowPtrA, const int * bsrSortedEndPtrA, const int * bsrSortedColIndA, int blockDim, const cuDoubleComplex * x, const cuDoubleComplex * beta, cuDoubleComplex * y); 
#line 934 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsrsv_analysisEx(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const void * csrSortedValA, cudaDataType csrSortedValAtype, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, cudaDataType executiontype); 
#line 946 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 956 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 976 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 986 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsrsv_solveEx(cusparseHandle_t handle, cusparseOperation_t transA, int m, const void * alpha, cudaDataType alphatype, const cusparseMatDescr_t descrA, const void * csrSortedValA, cudaDataType csrSortedValAtype, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const void * f, cudaDataType ftype, void * x, cudaDataType xtype, cudaDataType executiontype); 
#line 1003 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsv_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const float * f, float * x); 
#line 1015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsv_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const double * f, double * x); 
#line 1027 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsv_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const cuComplex * f, cuComplex * x); 
#line 1039 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsv_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const cuDoubleComplex * f, cuDoubleComplex * x); 
#line 1055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrsv2_zeroPivot(cusparseHandle_t handle, csrsv2Info_t info, int * position); 
#line 1059 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsv2_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1070 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsv2_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1081 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsv2_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1092 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsv2_bufferSize(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, size_t * pBufferSize); 
#line 1114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, size_t * pBufferSize); 
#line 1125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, size_t * pBufferSize); 
#line 1136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, size_t * pBufferSize); 
#line 1148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsv2_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsv2_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsv2_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsv2_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsv2_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, const float * f, float * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsv2_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, const double * f, double * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsv2_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, const cuComplex * f, cuComplex * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsv2_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrsv2Info_t info, const cuDoubleComplex * f, cuDoubleComplex * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1260 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXbsrsv2_zeroPivot(cusparseHandle_t handle, bsrsv2Info_t info, int * position); 
#line 1265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsv2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1278 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsv2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsv2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsv2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, int * pBufferSizeInBytes); 
#line 1317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockSize, bsrsv2Info_t info, size_t * pBufferSize); 
#line 1330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockSize, bsrsv2Info_t info, size_t * pBufferSize); 
#line 1343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockSize, bsrsv2Info_t info, size_t * pBufferSize); 
#line 1356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsv2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockSize, bsrsv2Info_t info, size_t * pBufferSize); 
#line 1370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsv2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsv2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsv2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsv2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsv2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const float * alpha, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, const float * f, float * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsv2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const double * alpha, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, const double * f, double * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1463 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsv2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, const cuComplex * f, cuComplex * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsv2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, int mb, int nnzb, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, bsrsv2Info_t info, const cuDoubleComplex * f, cuDoubleComplex * x, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 1501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseShybsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, const cusparseMatDescr_t descrA, cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info); 
#line 1507 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDhybsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, const cusparseMatDescr_t descrA, cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info); 
#line 1513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseChybsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, const cusparseMatDescr_t descrA, cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info); 
#line 1519 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZhybsv_analysis(cusparseHandle_t handle, cusparseOperation_t transA, const cusparseMatDescr_t descrA, cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info); 
#line 1525 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseShybsv_solve(cusparseHandle_t handle, cusparseOperation_t trans, const float * alpha, const cusparseMatDescr_t descra, const cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info, const float * f, float * x); 
#line 1534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseChybsv_solve(cusparseHandle_t handle, cusparseOperation_t trans, const cuComplex * alpha, const cusparseMatDescr_t descra, const cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info, const cuComplex * f, cuComplex * x); 
#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDhybsv_solve(cusparseHandle_t handle, cusparseOperation_t trans, const double * alpha, const cusparseMatDescr_t descra, const cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info, const double * f, double * x); 
#line 1552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZhybsv_solve(cusparseHandle_t handle, cusparseOperation_t trans, const cuDoubleComplex * alpha, const cusparseMatDescr_t descra, const cusparseHybMat_t hybA, cusparseSolveAnalysisInfo_t info, const cuDoubleComplex * f, cuDoubleComplex * x); 
#line 1566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrmm(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int k, int nnz, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * B, int ldb, const float * beta, float * C, int ldc); 
#line 1583 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrmm(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int k, int nnz, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * B, int ldb, const double * beta, double * C, int ldc); 
#line 1600 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrmm(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int k, int nnz, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
#line 1617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrmm(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, int k, int nnz, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
#line 1637 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrmm2(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, int nnz, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * B, int ldb, const float * beta, float * C, int ldc); 
#line 1655 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrmm2(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, int nnz, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * B, int ldb, const double * beta, double * C, int ldc); 
#line 1673 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrmm2(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, int nnz, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
#line 1691 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrmm2(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, int nnz, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
#line 1712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrmm(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int kb, int nnzb, const float * alpha, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, const int blockSize, const float * B, const int ldb, const float * beta, float * C, int ldc); 
#line 1732 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrmm(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int kb, int nnzb, const double * alpha, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, const int blockSize, const double * B, const int ldb, const double * beta, double * C, int ldc); 
#line 1752 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrmm(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int kb, int nnzb, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, const int blockSize, const cuComplex * B, const int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
#line 1772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrmm(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int kb, int nnzb, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, const int blockSize, const cuDoubleComplex * B, const int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
#line 1796 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgemmi(cusparseHandle_t handle, int m, int n, int k, int nnz, const float * alpha, const float * A, int lda, const float * cscValB, const int * cscColPtrB, const int * cscRowIndB, const float * beta, float * C, int ldc); 
#line 1811 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgemmi(cusparseHandle_t handle, int m, int n, int k, int nnz, const double * alpha, const double * A, int lda, const double * cscValB, const int * cscColPtrB, const int * cscRowIndB, const double * beta, double * C, int ldc); 
#line 1826 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgemmi(cusparseHandle_t handle, int m, int n, int k, int nnz, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * cscValB, const int * cscColPtrB, const int * cscRowIndB, const cuComplex * beta, cuComplex * C, int ldc); 
#line 1841 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgemmi(cusparseHandle_t handle, int m, int n, int k, int nnz, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * cscValB, const int * cscColPtrB, const int * cscRowIndB, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
#line 1861 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsm_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 1871 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsm_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 1881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsm_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 1891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsm_analysis(cusparseHandle_t handle, cusparseOperation_t transA, int m, int nnz, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 1902 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrsm_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const float * alpha, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const float * F, int ldf, float * X, int ldx); 
#line 1917 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrsm_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const double * alpha, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const double * F, int ldf, double * X, int ldx); 
#line 1932 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrsm_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const cuComplex * F, int ldf, cuComplex * X, int ldx); 
#line 1947 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrsm_solve(cusparseHandle_t handle, cusparseOperation_t transA, int m, int n, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, const cuDoubleComplex * F, int ldf, cuDoubleComplex * X, int ldx); 
#line 1966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXbsrsm2_zeroPivot(cusparseHandle_t handle, bsrsm2Info_t info, int * position); 
#line 1970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsm2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, int * pBufferSizeInBytes); 
#line 1985 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsm2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, int * pBufferSizeInBytes); 
#line 2000 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsm2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, int * pBufferSizeInBytes); 
#line 2015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsm2_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, int * pBufferSizeInBytes); 
#line 2031 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsm2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, size_t * pBufferSize); 
#line 2046 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsm2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, size_t * pBufferSize); 
#line 2061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsm2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, size_t * pBufferSize); 
#line 2076 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsm2_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transB, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, size_t * pBufferSize); 
#line 2092 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsm2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, const float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsm2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, const double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsm2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsm2_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrsm2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const float * alpha, const cusparseMatDescr_t descrA, const float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, const float * F, int ldf, float * X, int ldx, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrsm2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const double * alpha, const cusparseMatDescr_t descrA, const double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, const double * F, int ldf, double * X, int ldx, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrsm2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cuComplex * alpha, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, const cuComplex * F, int ldf, cuComplex * X, int ldx, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrsm2_solve(cusparseHandle_t handle, cusparseDirection_t dirA, cusparseOperation_t transA, cusparseOperation_t transXY, int mb, int n, int nnzb, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrsm2Info_t info, const cuDoubleComplex * F, int ldf, cuDoubleComplex * X, int ldx, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsrilu0Ex(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, void * csrSortedValA_ValM, cudaDataType csrSortedValA_ValMtype, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info, cudaDataType executiontype); 
#line 2261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrilu0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, float * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrilu0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, double * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrilu0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrilu0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrilu02_numericBoost(cusparseHandle_t handle, csrilu02Info_t info, int enable_boost, double * tol, float * boost_val); 
#line 2315 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrilu02_numericBoost(cusparseHandle_t handle, csrilu02Info_t info, int enable_boost, double * tol, double * boost_val); 
#line 2321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrilu02_numericBoost(cusparseHandle_t handle, csrilu02Info_t info, int enable_boost, double * tol, cuComplex * boost_val); 
#line 2327 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrilu02_numericBoost(cusparseHandle_t handle, csrilu02Info_t info, int enable_boost, double * tol, cuDoubleComplex * boost_val); 
#line 2333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrilu02_zeroPivot(cusparseHandle_t handle, csrilu02Info_t info, int * position); 
#line 2337 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrilu02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrilu02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2357 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrilu02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrilu02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2377 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrilu02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csrilu02Info_t info, size_t * pBufferSize); 
#line 2387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrilu02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csrilu02Info_t info, size_t * pBufferSize); 
#line 2397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrilu02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csrilu02Info_t info, size_t * pBufferSize); 
#line 2407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrilu02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csrilu02Info_t info, size_t * pBufferSize); 
#line 2417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrilu02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrilu02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrilu02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrilu02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2461 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrilu02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrilu02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2487 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrilu02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2500 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrilu02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2517 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrilu02_numericBoost(cusparseHandle_t handle, bsrilu02Info_t info, int enable_boost, double * tol, float * boost_val); 
#line 2523 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrilu02_numericBoost(cusparseHandle_t handle, bsrilu02Info_t info, int enable_boost, double * tol, double * boost_val); 
#line 2529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrilu02_numericBoost(cusparseHandle_t handle, bsrilu02Info_t info, int enable_boost, double * tol, cuComplex * boost_val); 
#line 2535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrilu02_numericBoost(cusparseHandle_t handle, bsrilu02Info_t info, int enable_boost, double * tol, cuDoubleComplex * boost_val); 
#line 2541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXbsrilu02_zeroPivot(cusparseHandle_t handle, bsrilu02Info_t info, int * position); 
#line 2545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrilu02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2557 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrilu02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2569 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrilu02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrilu02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, int * pBufferSizeInBytes); 
#line 2593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrilu02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrilu02Info_t info, size_t * pBufferSize); 
#line 2605 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrilu02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrilu02Info_t info, size_t * pBufferSize); 
#line 2617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrilu02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrilu02Info_t info, size_t * pBufferSize); 
#line 2629 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrilu02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsrilu02Info_t info, size_t * pBufferSize); 
#line 2642 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrilu02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2655 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrilu02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrilu02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2681 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrilu02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2695 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsrilu02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descra, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsrilu02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descra, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2721 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsrilu02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descra, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2734 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsrilu02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descra, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsrilu02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2751 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsric0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, float * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2762 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsric0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, double * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2773 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsric0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2784 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsric0(cusparseHandle_t handle, cusparseOperation_t trans, int m, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA_ValM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseSolveAnalysisInfo_t info); 
#line 2799 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsric02_zeroPivot(cusparseHandle_t handle, csric02Info_t info, int * position); 
#line 2803 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsric02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, int * pBufferSizeInBytes); 
#line 2813 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsric02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, int * pBufferSizeInBytes); 
#line 2823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsric02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, int * pBufferSizeInBytes); 
#line 2833 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsric02_bufferSize(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, int * pBufferSizeInBytes); 
#line 2843 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsric02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csric02Info_t info, size_t * pBufferSize); 
#line 2853 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsric02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csric02Info_t info, size_t * pBufferSize); 
#line 2863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsric02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csric02Info_t info, size_t * pBufferSize); 
#line 2873 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsric02_bufferSizeExt(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, csric02Info_t info, size_t * pBufferSize); 
#line 2884 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsric02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2896 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsric02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsric02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2918 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsric02_analysis(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2929 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsric02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, float * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2942 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsric02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, double * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2955 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsric02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2968 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsric02(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrSortedValA_valM, const int * csrSortedRowPtrA, const int * csrSortedColIndA, csric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 2985 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXbsric02_zeroPivot(cusparseHandle_t handle, bsric02Info_t info, int * position); 
#line 2989 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsric02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, int * pBufferSizeInBytes); 
#line 3001 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsric02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, int * pBufferSizeInBytes); 
#line 3013 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsric02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, int * pBufferSizeInBytes); 
#line 3025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsric02_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, int * pBufferSizeInBytes); 
#line 3037 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsric02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsric02Info_t info, size_t * pBufferSize); 
#line 3049 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsric02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsric02Info_t info, size_t * pBufferSize); 
#line 3061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsric02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsric02Info_t info, size_t * pBufferSize); 
#line 3073 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsric02_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockSize, bsric02Info_t info, size_t * pBufferSize); 
#line 3087 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsric02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, const float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pInputBuffer); 
#line 3100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsric02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, const double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pInputBuffer); 
#line 3113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsric02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pInputBuffer); 
#line 3126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsric02_analysis(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pInputBuffer); 
#line 3139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsric02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 3152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsric02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 3165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsric02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 3178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsric02(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nnzb, const cusparseMatDescr_t descrA, cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int blockDim, bsric02Info_t info, cusparseSolvePolicy_t policy, void * pBuffer); 
#line 3197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgtsv(cusparseHandle_t handle, int m, int n, const float * dl, const float * d, const float * du, float * B, int ldb); 
#line 3206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgtsv(cusparseHandle_t handle, int m, int n, const double * dl, const double * d, const double * du, double * B, int ldb); 
#line 3215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgtsv(cusparseHandle_t handle, int m, int n, const cuComplex * dl, const cuComplex * d, const cuComplex * du, cuComplex * B, int ldb); 
#line 3224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgtsv(cusparseHandle_t handle, int m, int n, const cuDoubleComplex * dl, const cuDoubleComplex * d, const cuDoubleComplex * du, cuDoubleComplex * B, int ldb); 
#line 3238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgtsv_nopivot(cusparseHandle_t handle, int m, int n, const float * dl, const float * d, const float * du, float * B, int ldb); 
#line 3247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgtsv_nopivot(cusparseHandle_t handle, int m, int n, const double * dl, const double * d, const double * du, double * B, int ldb); 
#line 3256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgtsv_nopivot(cusparseHandle_t handle, int m, int n, const cuComplex * dl, const cuComplex * d, const cuComplex * du, cuComplex * B, int ldb); 
#line 3265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgtsv_nopivot(cusparseHandle_t handle, int m, int n, const cuDoubleComplex * dl, const cuDoubleComplex * d, const cuDoubleComplex * du, cuDoubleComplex * B, int ldb); 
#line 3279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgtsvStridedBatch(cusparseHandle_t handle, int m, const float * dl, const float * d, const float * du, float * x, int batchCount, int batchStride); 
#line 3289 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgtsvStridedBatch(cusparseHandle_t handle, int m, const double * dl, const double * d, const double * du, double * x, int batchCount, int batchStride); 
#line 3298 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgtsvStridedBatch(cusparseHandle_t handle, int m, const cuComplex * dl, const cuComplex * d, const cuComplex * du, cuComplex * x, int batchCount, int batchStride); 
#line 3307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgtsvStridedBatch(cusparseHandle_t handle, int m, const cuDoubleComplex * dl, const cuDoubleComplex * d, const cuDoubleComplex * du, cuDoubleComplex * x, int batchCount, int batchStride); 
#line 3320 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrgemmNnz(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, const cusparseMatDescr_t descrA, const int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, const int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, int * csrSortedRowPtrC, int * nnzTotalDevHostPtr); 
#line 3338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrgemm(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, const cusparseMatDescr_t descrA, const int nnzA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, const int nnzB, const float * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, float * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3359 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrgemm(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, const cusparseMatDescr_t descrA, int nnzA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const double * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, double * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrgemm(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, const cusparseMatDescr_t descrA, int nnzA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const cuComplex * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, cuComplex * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrgemm(cusparseHandle_t handle, cusparseOperation_t transA, cusparseOperation_t transB, int m, int n, int k, const cusparseMatDescr_t descrA, int nnzA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const cuDoubleComplex * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, cuDoubleComplex * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateCsrgemm2Info(csrgemm2Info_t * info); 
#line 3427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDestroyCsrgemm2Info(csrgemm2Info_t info); 
#line 3429 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrgemm2_bufferSizeExt(cusparseHandle_t handle, int m, int n, int k, const float * alpha, const cusparseMatDescr_t descrA, int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const float * beta, const cusparseMatDescr_t descrD, int nnzD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, csrgemm2Info_t info, size_t * pBufferSizeInBytes); 
#line 3450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrgemm2_bufferSizeExt(cusparseHandle_t handle, int m, int n, int k, const double * alpha, const cusparseMatDescr_t descrA, int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const double * beta, const cusparseMatDescr_t descrD, int nnzD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, csrgemm2Info_t info, size_t * pBufferSizeInBytes); 
#line 3471 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrgemm2_bufferSizeExt(cusparseHandle_t handle, int m, int n, int k, const cuComplex * alpha, const cusparseMatDescr_t descrA, int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cuComplex * beta, const cusparseMatDescr_t descrD, int nnzD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, csrgemm2Info_t info, size_t * pBufferSizeInBytes); 
#line 3492 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrgemm2_bufferSizeExt(cusparseHandle_t handle, int m, int n, int k, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cuDoubleComplex * beta, const cusparseMatDescr_t descrD, int nnzD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, csrgemm2Info_t info, size_t * pBufferSizeInBytes); 
#line 3514 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrgemm2Nnz(cusparseHandle_t handle, int m, int n, int k, const cusparseMatDescr_t descrA, int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrD, int nnzD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, const cusparseMatDescr_t descrC, int * csrSortedRowPtrC, int * nnzTotalDevHostPtr, const csrgemm2Info_t info, void * pBuffer); 
#line 3537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrgemm2(cusparseHandle_t handle, int m, int n, int k, const float * alpha, const cusparseMatDescr_t descrA, int nnzA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const float * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const float * beta, const cusparseMatDescr_t descrD, int nnzD, const float * csrSortedValD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, const cusparseMatDescr_t descrC, float * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC, const csrgemm2Info_t info, void * pBuffer); 
#line 3565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrgemm2(cusparseHandle_t handle, int m, int n, int k, const double * alpha, const cusparseMatDescr_t descrA, int nnzA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const double * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const double * beta, const cusparseMatDescr_t descrD, int nnzD, const double * csrSortedValD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, const cusparseMatDescr_t descrC, double * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC, const csrgemm2Info_t info, void * pBuffer); 
#line 3594 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrgemm2(cusparseHandle_t handle, int m, int n, int k, const cuComplex * alpha, const cusparseMatDescr_t descrA, int nnzA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const cuComplex * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cuComplex * beta, const cusparseMatDescr_t descrD, int nnzD, const cuComplex * csrSortedValD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, const cusparseMatDescr_t descrC, cuComplex * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC, const csrgemm2Info_t info, void * pBuffer); 
#line 3623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrgemm2(cusparseHandle_t handle, int m, int n, int k, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, int nnzA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const cuDoubleComplex * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cuDoubleComplex * beta, const cusparseMatDescr_t descrD, int nnzD, const cuDoubleComplex * csrSortedValD, const int * csrSortedRowPtrD, const int * csrSortedColIndD, const cusparseMatDescr_t descrC, cuDoubleComplex * csrSortedValC, const int * csrSortedRowPtrC, int * csrSortedColIndC, const csrgemm2Info_t info, void * pBuffer); 
#line 3654 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrgeamNnz(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, int nnzA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, int * csrSortedRowPtrC, int * nnzTotalDevHostPtr); 
#line 3669 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrgeam(cusparseHandle_t handle, int m, int n, const float * alpha, const cusparseMatDescr_t descrA, int nnzA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * beta, const cusparseMatDescr_t descrB, int nnzB, const float * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, float * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3689 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrgeam(cusparseHandle_t handle, int m, int n, const double * alpha, const cusparseMatDescr_t descrA, int nnzA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * beta, const cusparseMatDescr_t descrB, int nnzB, const double * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, double * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3709 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrgeam(cusparseHandle_t handle, int m, int n, const cuComplex * alpha, const cusparseMatDescr_t descrA, int nnzA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuComplex * beta, const cusparseMatDescr_t descrB, int nnzB, const cuComplex * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, cuComplex * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3729 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrgeam(cusparseHandle_t handle, int m, int n, const cuDoubleComplex * alpha, const cusparseMatDescr_t descrA, int nnzA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cuDoubleComplex * beta, const cusparseMatDescr_t descrB, int nnzB, const cuDoubleComplex * csrSortedValB, const int * csrSortedRowPtrB, const int * csrSortedColIndB, const cusparseMatDescr_t descrC, cuDoubleComplex * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 3753 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsrcolor(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * fractionToColor, int * ncolors, int * coloring, int * reordering, const cusparseColorInfo_t info); 
#line 3766 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsrcolor(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * fractionToColor, int * ncolors, int * coloring, int * reordering, const cusparseColorInfo_t info); 
#line 3779 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsrcolor(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const float * fractionToColor, int * ncolors, int * coloring, int * reordering, const cusparseColorInfo_t info); 
#line 3792 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsrcolor(cusparseHandle_t handle, int m, int nnz, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const double * fractionToColor, int * ncolors, int * coloring, int * reordering, const cusparseColorInfo_t info); 
#line 3809 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSnnz(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const float * A, int lda, int * nnzPerRowCol, int * nnzTotalDevHostPtr); 
#line 3819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDnnz(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const double * A, int lda, int * nnzPerRowCol, int * nnzTotalDevHostPtr); 
#line 3829 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCnnz(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * A, int lda, int * nnzPerRowCol, int * nnzTotalDevHostPtr); 
#line 3839 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZnnz(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * A, int lda, int * nnzPerRowCol, int * nnzTotalDevHostPtr); 
#line 3853 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSnnz_compress(cusparseHandle_t handle, int m, const cusparseMatDescr_t descr, const float * values, const int * rowPtr, int * nnzPerRow, int * nnzTotal, float tol); 
#line 3862 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDnnz_compress(cusparseHandle_t handle, int m, const cusparseMatDescr_t descr, const double * values, const int * rowPtr, int * nnzPerRow, int * nnzTotal, double tol); 
#line 3871 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCnnz_compress(cusparseHandle_t handle, int m, const cusparseMatDescr_t descr, const cuComplex * values, const int * rowPtr, int * nnzPerRow, int * nnzTotal, cuComplex tol); 
#line 3880 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZnnz_compress(cusparseHandle_t handle, int m, const cusparseMatDescr_t descr, const cuDoubleComplex * values, const int * rowPtr, int * nnzPerRow, int * nnzTotal, cuDoubleComplex tol); 
#line 3891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2csr_compress(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descra, const float * inVal, const int * inColInd, const int * inRowPtr, int inNnz, int * nnzPerRow, float * outVal, int * outColInd, int * outRowPtr, float tol); 
#line 3905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2csr_compress(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descra, const double * inVal, const int * inColInd, const int * inRowPtr, int inNnz, int * nnzPerRow, double * outVal, int * outColInd, int * outRowPtr, double tol); 
#line 3919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2csr_compress(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descra, const cuComplex * inVal, const int * inColInd, const int * inRowPtr, int inNnz, int * nnzPerRow, cuComplex * outVal, int * outColInd, int * outRowPtr, cuComplex tol); 
#line 3933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2csr_compress(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descra, const cuDoubleComplex * inVal, const int * inColInd, const int * inRowPtr, int inNnz, int * nnzPerRow, cuDoubleComplex * outVal, int * outColInd, int * outRowPtr, cuDoubleComplex tol); 
#line 3950 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSdense2csr(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * A, int lda, const int * nnzPerRow, float * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 3961 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDdense2csr(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * A, int lda, const int * nnzPerRow, double * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 3972 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCdense2csr(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * A, int lda, const int * nnzPerRow, cuComplex * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 3983 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZdense2csr(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * A, int lda, const int * nnzPerRow, cuDoubleComplex * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 3996 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, float * A, int lda); 
#line 4006 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, double * A, int lda); 
#line 4016 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cuComplex * A, int lda); 
#line 4026 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cuDoubleComplex * A, int lda); 
#line 4039 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSdense2csc(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * A, int lda, const int * nnzPerCol, float * cscSortedValA, int * cscSortedRowIndA, int * cscSortedColPtrA); 
#line 4050 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDdense2csc(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * A, int lda, const int * nnzPerCol, double * cscSortedValA, int * cscSortedRowIndA, int * cscSortedColPtrA); 
#line 4061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCdense2csc(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * A, int lda, const int * nnzPerCol, cuComplex * cscSortedValA, int * cscSortedRowIndA, int * cscSortedColPtrA); 
#line 4072 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZdense2csc(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * A, int lda, const int * nnzPerCol, cuDoubleComplex * cscSortedValA, int * cscSortedRowIndA, int * cscSortedColPtrA); 
#line 4085 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsc2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, float * A, int lda); 
#line 4095 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsc2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, double * A, int lda); 
#line 4105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsc2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, cuComplex * A, int lda); 
#line 4115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsc2dense(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, cuDoubleComplex * A, int lda); 
#line 4128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcoo2csr(cusparseHandle_t handle, const int * cooRowInd, int nnz, int m, int * csrSortedRowPtr, cusparseIndexBase_t idxBase); 
#line 4138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsr2coo(cusparseHandle_t handle, const int * csrSortedRowPtr, int nnz, int m, int * cooRowInd, cusparseIndexBase_t idxBase); 
#line 4148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCsr2cscEx(cusparseHandle_t handle, int m, int n, int nnz, const void * csrSortedVal, cudaDataType csrSortedValtype, const int * csrSortedRowPtr, const int * csrSortedColInd, void * cscSortedVal, cudaDataType cscSortedValtype, int * cscSortedRowInd, int * cscSortedColPtr, cusparseAction_t copyValues, cusparseIndexBase_t idxBase, cudaDataType executiontype); 
#line 4164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2csc(cusparseHandle_t handle, int m, int n, int nnz, const float * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, float * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr, cusparseAction_t copyValues, cusparseIndexBase_t idxBase); 
#line 4177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2csc(cusparseHandle_t handle, int m, int n, int nnz, const double * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, double * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr, cusparseAction_t copyValues, cusparseIndexBase_t idxBase); 
#line 4190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2csc(cusparseHandle_t handle, int m, int n, int nnz, const cuComplex * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, cuComplex * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr, cusparseAction_t copyValues, cusparseIndexBase_t idxBase); 
#line 4203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2csc(cusparseHandle_t handle, int m, int n, int nnz, const cuDoubleComplex * csrSortedVal, const int * csrSortedRowPtr, const int * csrSortedColInd, cuDoubleComplex * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr, cusparseAction_t copyValues, cusparseIndexBase_t idxBase); 
#line 4218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSdense2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * A, int lda, const int * nnzPerRow, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4229 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDdense2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * A, int lda, const int * nnzPerRow, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCdense2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * A, int lda, const int * nnzPerRow, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZdense2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * A, int lda, const int * nnzPerRow, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseShyb2dense(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, float * A, int lda); 
#line 4270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDhyb2dense(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, double * A, int lda); 
#line 4276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseChyb2dense(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, cuComplex * A, int lda); 
#line 4282 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZhyb2dense(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, cuDoubleComplex * A, int lda); 
#line 4290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseShyb2csr(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, float * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 4343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDhyb2csr(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, double * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 4350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseChyb2csr(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, cuComplex * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 4357 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZhyb2csr(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, cuDoubleComplex * csrSortedValA, int * csrSortedRowPtrA, int * csrSortedColIndA); 
#line 4366 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsc2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const float * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4377 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsc2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const double * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsc2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsc2hyb(cusparseHandle_t handle, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * cscSortedValA, const int * cscSortedRowIndA, const int * cscSortedColPtrA, cusparseHybMat_t hybA, int userEllWidth, cusparseHybPartition_t partitionType); 
#line 4412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseShyb2csc(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, float * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr); 
#line 4419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDhyb2csc(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, double * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr); 
#line 4426 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseChyb2csc(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, cuComplex * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr); 
#line 4433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZhyb2csc(cusparseHandle_t handle, const cusparseMatDescr_t descrA, const cusparseHybMat_t hybA, cuDoubleComplex * cscSortedVal, int * cscSortedRowInd, int * cscSortedColPtr); 
#line 4442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsr2bsrNnz(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, int * bsrSortedRowPtrC, int * nnzTotalDevHostPtr); 
#line 4454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2bsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, float * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC); 
#line 4468 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2bsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, double * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC); 
#line 4482 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2bsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, cuComplex * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC); 
#line 4496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2bsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, cuDoubleComplex * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC); 
#line 4512 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSbsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, float * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDbsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, double * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCbsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, cuComplex * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZbsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int blockDim, const cusparseMatDescr_t descrC, cuDoubleComplex * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4570 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2gebsc_bufferSize(cusparseHandle_t handle, int mb, int nb, int nnzb, const float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2gebsc_bufferSize(cusparseHandle_t handle, int mb, int nb, int nnzb, const double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4592 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2gebsc_bufferSize(cusparseHandle_t handle, int mb, int nb, int nnzb, const cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4603 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2gebsc_bufferSize(cusparseHandle_t handle, int mb, int nb, int nnzb, const cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle, int mb, int nb, int nnzb, const float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle, int mb, int nb, int nnzb, const double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4636 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle, int mb, int nb, int nnzb, const cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4647 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle, int mb, int nb, int nnzb, const cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4659 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2gebsc(cusparseHandle_t handle, int mb, int nb, int nnzb, const float * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, float * bscVal, int * bscRowInd, int * bscColPtr, cusparseAction_t copyValues, cusparseIndexBase_t baseIdx, void * pBuffer); 
#line 4675 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2gebsc(cusparseHandle_t handle, int mb, int nb, int nnzb, const double * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, double * bscVal, int * bscRowInd, int * bscColPtr, cusparseAction_t copyValues, cusparseIndexBase_t baseIdx, void * pBuffer); 
#line 4691 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2gebsc(cusparseHandle_t handle, int mb, int nb, int nnzb, const cuComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, cuComplex * bscVal, int * bscRowInd, int * bscColPtr, cusparseAction_t copyValues, cusparseIndexBase_t baseIdx, void * pBuffer); 
#line 4707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2gebsc(cusparseHandle_t handle, int mb, int nb, int nnzb, const cuDoubleComplex * bsrSortedVal, const int * bsrSortedRowPtr, const int * bsrSortedColInd, int rowBlockDim, int colBlockDim, cuDoubleComplex * bscVal, int * bscRowInd, int * bscColPtr, cusparseAction_t copyValues, cusparseIndexBase_t baseIdx, void * pBuffer); 
#line 4725 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXgebsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDim, int colBlockDim, const cusparseMatDescr_t descrC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4738 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDim, int colBlockDim, const cusparseMatDescr_t descrC, float * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4754 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDim, int colBlockDim, const cusparseMatDescr_t descrC, double * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDim, int colBlockDim, const cusparseMatDescr_t descrC, cuComplex * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4786 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2csr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDim, int colBlockDim, const cusparseMatDescr_t descrC, cuDoubleComplex * csrSortedValC, int * csrSortedRowPtrC, int * csrSortedColIndC); 
#line 4803 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4815 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4827 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4839 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, int * pBufferSizeInBytes); 
#line 4851 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4875 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4887 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, int rowBlockDim, int colBlockDim, size_t * pBufferSize); 
#line 4901 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsr2gebsrNnz(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrC, int * bsrSortedRowPtrC, int rowBlockDim, int colBlockDim, int * nnzTotalDevHostPtr, void * pBuffer); 
#line 4915 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const float * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrC, float * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDim, int colBlockDim, void * pBuffer); 
#line 4931 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const double * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrC, double * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDim, int colBlockDim, void * pBuffer); 
#line 4947 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrC, cuComplex * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDim, int colBlockDim, void * pBuffer); 
#line 4963 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int m, int n, const cusparseMatDescr_t descrA, const cuDoubleComplex * csrSortedValA, const int * csrSortedRowPtrA, const int * csrSortedColIndA, const cusparseMatDescr_t descrC, cuDoubleComplex * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDim, int colBlockDim, void * pBuffer); 
#line 4981 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, int * pBufferSizeInBytes); 
#line 4996 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, int * pBufferSizeInBytes); 
#line 5011 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, int * pBufferSizeInBytes); 
#line 5026 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2gebsr_bufferSize(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, int * pBufferSizeInBytes); 
#line 5042 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, size_t * pBufferSize); 
#line 5057 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, size_t * pBufferSize); 
#line 5072 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, size_t * pBufferSize); 
#line 5087 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, int rowBlockDimC, int colBlockDimC, size_t * pBufferSize); 
#line 5104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXgebsr2gebsrNnz(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, const cusparseMatDescr_t descrC, int * bsrSortedRowPtrC, int rowBlockDimC, int colBlockDimC, int * nnzTotalDevHostPtr, void * pBuffer); 
#line 5121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseSgebsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const float * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, const cusparseMatDescr_t descrC, float * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDimC, int colBlockDimC, void * pBuffer); 
#line 5140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDgebsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const double * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, const cusparseMatDescr_t descrC, double * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDimC, int colBlockDimC, void * pBuffer); 
#line 5159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCgebsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const cuComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, const cusparseMatDescr_t descrC, cuComplex * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDimC, int colBlockDimC, void * pBuffer); 
#line 5178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZgebsr2gebsr(cusparseHandle_t handle, cusparseDirection_t dirA, int mb, int nb, int nnzb, const cusparseMatDescr_t descrA, const cuDoubleComplex * bsrSortedValA, const int * bsrSortedRowPtrA, const int * bsrSortedColIndA, int rowBlockDimA, int colBlockDimA, const cusparseMatDescr_t descrC, cuDoubleComplex * bsrSortedValC, int * bsrSortedRowPtrC, int * bsrSortedColIndC, int rowBlockDimC, int colBlockDimC, void * pBuffer); 
#line 5200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCreateIdentityPermutation(cusparseHandle_t handle, int n, int * p); 
#line 5205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcoosort_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, const int * cooRowsA, const int * cooColsA, size_t * pBufferSizeInBytes); 
#line 5213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcoosortByRow(cusparseHandle_t handle, int m, int n, int nnz, int * cooRowsA, int * cooColsA, int * P, void * pBuffer); 
#line 5222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcoosortByColumn(cusparseHandle_t handle, int m, int n, int nnz, int * cooRowsA, int * cooColsA, int * P, void * pBuffer); 
#line 5232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrsort_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, const int * csrRowPtrA, const int * csrColIndA, size_t * pBufferSizeInBytes); 
#line 5240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcsrsort(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, const int * csrRowPtrA, int * csrColIndA, int * P, void * pBuffer); 
#line 5251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcscsort_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, const int * cscColPtrA, const int * cscRowIndA, size_t * pBufferSizeInBytes); 
#line 5259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseXcscsort(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, const int * cscColPtrA, int * cscRowIndA, int * P, void * pBuffer); 
#line 5271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsru2csr_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, float * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, size_t * pBufferSizeInBytes); 
#line 5281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsru2csr_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, double * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, size_t * pBufferSizeInBytes); 
#line 5291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsru2csr_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, cuComplex * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, size_t * pBufferSizeInBytes); 
#line 5301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsru2csr_bufferSizeExt(cusparseHandle_t handle, int m, int n, int nnz, cuDoubleComplex * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, size_t * pBufferSizeInBytes); 
#line 5311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsru2csr(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, float * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5322 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsru2csr(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, double * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsru2csr(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5344 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsru2csr(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5357 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseScsr2csru(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, float * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5368 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseDcsr2csru(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, double * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseCcsr2csru(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, cuComplex * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
cusparseStatus_t __stdcall cusparseZcsr2csru(cusparseHandle_t handle, int m, int n, int nnz, const cusparseMatDescr_t descrA, cuDoubleComplex * csrVal, const int * csrRowPtr, int * csrColInd, csru2csrInfo_t info, void * pBuffer); 
#line 5402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
}
#line 9 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
extern char smem[]; 
#line 11 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
cudaError_t stEfork2Main(Stim stim, Sim sim, float * ParamsM, HMat & InMat, float * V, unsigned short CompDepth, unsigned short CompFDepth, unsigned short NSets); 
#line 12 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
cudaError_t stEfork2TimeLoopGPU(Stim stim, Sim sim, float * ParamsM, HMat & InMat, float * V, unsigned short CompDepth, unsigned short CompFDepth, unsigned short NSets); 
#line 13 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
void ReadParamsMatX(const char * FN, float * ParamsM, unsigned short NParams, unsigned short Nx); 
#line 14 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
void ReadParamsMat(const char * FN, float ** ParamsM, unsigned short NParams, unsigned short Nx); 
#line 15 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
float *ReadAllParams(const char * FN, unsigned short NParams, unsigned short Nx, unsigned short & NSets); 
#line 16 "c:\\pyneurogpu_win2\\neurogpu6\\CudaStuff.cuh"
void FreeParallelNeuronData(HMat & InMat); 
#line 25 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
float Cunernst(float ci, float co, float z) { 
#line 26 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
if (z == (0)) { 
#line 27 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
return (0.0); 
#line 28 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
}  
#line 29 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
if (ci <= (0.0)) { 
#line 30 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
return (1000000.0); 
#line 31 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
} else { if (co <= (0.0)) { 
#line 32 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
return -(1000000.0); 
#line 33 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
} else { 
#line 34 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
return (((((1000.0) * (8.3133999999999997)) * ((6.2999999999999998) + (273.14999999999998))) / ((96485.3125F))) / z) * (log(co / ci)); 
#line 35 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
}  }  
#line 36 "c:\\pyneurogpu_win2\\neurogpu6\\AllModels.cu"
} 
#line 5 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float cCm[64]; 
#line 6 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
double cE[64]; 
#line 7 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
double cF[64]; 
#line 8 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cFIdxs[64 * 5]; 
#line 9 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cKs[64]; 
#line 10 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cSegToComp[64]; 
#line 11 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cBoolModel[64 * 1]; 
#line 12 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cRelStarts[6]; 
#line 13 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cRelEnds[6]; 
#line 14 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cFathers[6]; 
#line 15 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cRelVec[9]; 
#line 16 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cSegStartI[9 + 1]; 
#line 17 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cSegEndI[9 + 1]; 
#line 19 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cCompByLevel32[6 * 32]; 
#line 20 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cCompByFLevel32[6 * 32]; 
#line 21 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cLRelStarts[6]; 
#line 22 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cLRelEnds[6]; 
#line 23 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cFLRelStarts[5]; 
#line 24 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cFLRelEnds[5]; 
#line 25 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short cSonNoVec[64]; 
#line 179 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
void BeforeLU(HMat InMat, double *uHP, double *bHP, unsigned short Depth) 
#line 180 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
{int volatile ___ = 1;(void)InMat;(void)uHP;(void)bHP;(void)Depth;
#line 217 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
::exit(___);}







































































#line 290 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
#line 220 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
void BkSub(HMat InMat, double *PX, double *PF, double *uHP, double *bHP, unsigned short LognDepth) 
#line 221 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
{int volatile ___ = 1;(void)InMat;(void)PX;(void)PF;(void)uHP;(void)bHP;(void)LognDepth;
#line 246 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
::exit(___);}



























#line 275 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
#line 285 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
void runSimulation(HMat InMat, float *ParamsM, float *V, Stim stim, Sim sim, float *VHotGlobal, float *SMemVHot, float *amps, unsigned short offset) 
#line 286 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
{int volatile ___ = 1;(void)InMat;(void)ParamsM;(void)V;(void)stim;(void)sim;(void)VHotGlobal;(void)SMemVHot;(void)amps;(void)offset;
#line 475 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
::exit(___);}











































































































































































#line 648 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
#line 476 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
 __declspec(noinline) void NeuroGPUKernel(Stim stim, float *ParamsM, Sim sim, HMat InMat, float *V, float *VHotGlobal, unsigned short CompDepth, unsigned short CompFDepth) ;











#line 489 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
#line 487 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
void ReadParamsMatX(const char *FN, float *ParamsM, unsigned short NParams, unsigned short Nx) { 
#line 488 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
char FileName[300]; 
#line 490 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
sprintf(FileName, "%sForC.mat", FN); 
#line 491 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
FILE *fl = fopen(FileName, "rb"); 
#line 492 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (!fl) { 
#line 493 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("Failed to read TreeData.x\n"); 
#line 494 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return; 
#line 495 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 496 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fread(ParamsM, sizeof(float), Nx * NParams, fl); 
#line 497 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fclose(fl); 
#line 498 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
} 
#line 500 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
void ReadParamsMat(const char *FN, float **ParamsM, unsigned short NParams, unsigned short Nx) { 
#line 501 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
char FileName[300]; 
#line 503 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
sprintf(FileName, "%sForC.mat", FN); 
#line 504 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
FILE *fl = fopen(FileName, "rb"); 
#line 505 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (!fl) { 
#line 506 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("Failed to read TreeData.x\n"); 
#line 507 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return; 
#line 508 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 509 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
for (int i = 0; i < NParams; i++) { 
#line 510 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(ParamsM[i]) = ((float *)malloc(Nx * sizeof(float))); 
#line 511 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fread(ParamsM[i], sizeof(float), Nx, fl); 
#line 512 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 513 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fclose(fl); 
#line 514 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
} 
#line 517 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaError_t stEfork2TimeLoopGPU(Stim stim, Sim sim, float *ParamsM, HMat &InMat, float *V, unsigned short CompDepth, unsigned short CompFDepth, unsigned short NSets) { 
#line 519 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaError_t cudaStatus; 
#line 520 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaSetDevice(1); 
#line 521 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaDeviceReset(); 
#line 522 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float *VHotsGlobal, *VHotsHost; 
#line 523 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short Nt = stim.Nt; 
#line 524 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaMallocHost((void **)(&VHotsHost), ((((stim.NStimuli) * Nt) * (sim.NRecSites)) * NSets) * sizeof(float)); 
#line 526 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
int i, j, t; 
#line 528 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float *PXOut_d, *PFOut_d; 
#line 529 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float *uHPOut_d, *bHPOut_d; 
#line 530 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
HMat Mat_d; 
#line 531 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.N) = (InMat.N); 
#line 532 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.NComps) = (InMat.NComps); 
#line 533 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.Depth) = (InMat.Depth); 
#line 534 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.NModels) = (InMat.NModels); 
#line 535 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.LognDepth) = (InMat.LognDepth); 
#line 536 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.nFathers) = (InMat.nFathers); 
#line 537 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.nCallForFather) = (InMat.nCallForFather); 
#line 538 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.nLRel) = (InMat.nLRel); 
#line 539 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(Mat_d.nFLRel) = (InMat.nFLRel); 
#line 540 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
Stim stim_d; 
#line 541 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(stim_d.NStimuli) = (stim.NStimuli); 
#line 542 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(stim_d.comp) = (stim.comp); 
#line 543 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(stim_d.area) = (stim.area); 
#line 544 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(stim_d.loc) = (stim.loc); 
#line 545 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(stim_d.Nt) = (stim.Nt); 
#line 546 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
Sim sim_d; 
#line 547 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(sim_d.Celsius) = (sim.Celsius); 
#line 548 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(sim_d.dt) = (sim.dt); 
#line 549 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(sim_d.NRecSites) = (sim.NRecSites); 
#line 550 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(sim_d.TFinal) = (sim.TFinal); 
#line 558 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(stim_d.numofdts) = (stim.numofdts); 
#line 559 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&(stim_d.dtInds)), (stim_d.numofdts) * sizeof(unsigned short)); 
#line 560 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&(stim_d.durs)), (stim_d.numofdts) * sizeof(float)); 
#line 561 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&(stim_d.amps)), ((stim_d.Nt) * (stim.NStimuli)) * (sizeof(float))); 
#line 563 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&(sim_d.RecSites)), (sim_d.NRecSites) * sizeof(unsigned short)); 
#line 582 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&VHotsGlobal), ((NSets * Nt) * (stim.NStimuli)) * sizeof(float)); 
#line 583 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&VHotsGlobal), (((NSets * (sim_d.NRecSites)) * Nt) * (stim.NStimuli)) * sizeof(float)); 
#line 601 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 602 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaMalloc failed!"); 
#line 603 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 604 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 614 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpy(stim_d.dtInds, stim.dtInds, (stim.numofdts) * sizeof(unsigned short), cudaMemcpyHostToDevice); 
#line 615 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpy(stim_d.durs, stim.durs, (stim.numofdts) * sizeof(float), cudaMemcpyHostToDevice); 
#line 616 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpy(stim_d.amps, stim.amps, ((stim_d.Nt) * (stim.NStimuli)) * (sizeof(float)), cudaMemcpyHostToDevice); 
#line 618 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpy(sim_d.RecSites, sim.RecSites, (sim_d.NRecSites) * sizeof(unsigned short), cudaMemcpyHostToDevice); 
#line 621 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cE, InMat.e, (InMat.N) * sizeof(double)); 
#line 623 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cF, InMat.f, (InMat.N) * sizeof(double)); 
#line 624 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cKs, InMat.Ks, (InMat.N) * sizeof(unsigned short)); 
#line 627 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cSegToComp, InMat.SegToComp, (InMat.N) * sizeof(unsigned short)); 
#line 629 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cBoolModel, InMat.boolModel, ((InMat.N) * (InMat.NModels)) * sizeof(unsigned short)); 
#line 631 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cCm, InMat.Cms, (InMat.N) * sizeof(float)); 
#line 633 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cSonNoVec, InMat.SonNoVec, (InMat.N) * sizeof(unsigned short)); 
#line 637 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cRelStarts, InMat.RelStarts, (InMat.nFathers) * sizeof(unsigned short)); 
#line 639 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cRelEnds, InMat.RelEnds, (InMat.nFathers) * sizeof(unsigned short)); 
#line 641 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cRelVec, InMat.RelVec, (InMat.nCallForFather) * sizeof(unsigned short)); 
#line 643 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cSegStartI, InMat.SegStartI, ((InMat.nCallForFather) + 1) * sizeof(unsigned short)); 
#line 645 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cSegEndI, InMat.SegEndI, ((InMat.nCallForFather) + 1) * sizeof(unsigned short)); 
#line 647 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cFathers, InMat.Fathers, (InMat.nFathers) * sizeof(unsigned short)); 
#line 653 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cFIdxs, InMat.FIdxs, ((InMat.LognDepth) * (InMat.N)) * sizeof(unsigned short)); 
#line 660 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cCompByLevel32, InMat.CompByLevel32, (CompDepth * 32) * sizeof(unsigned short)); 
#line 662 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cCompByFLevel32, InMat.CompByFLevel32, (CompFDepth * 32) * sizeof(unsigned short)); 
#line 666 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cLRelStarts, InMat.LRelStarts, (InMat.nLRel) * sizeof(unsigned short)); 
#line 668 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cLRelEnds, InMat.LRelEnds, (InMat.nLRel) * sizeof(unsigned short)); 
#line 670 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cFLRelStarts, InMat.FLRelStarts, (InMat.nFLRel) * sizeof(unsigned short)); 
#line 672 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyToSymbol(cFLRelEnds, InMat.FLRelEnds, (InMat.nFLRel) * sizeof(unsigned short)); 
#line 676 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 677 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaMemcpyToDevice failed!"); 
#line 678 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 679 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 681 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&PXOut_d), ((InMat.N) + 1) * sizeof(double)); 
#line 682 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&PFOut_d), ((InMat.N) + 1) * sizeof(double)); 
#line 683 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaThreadSynchronize(); 
#line 684 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 685 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaDeviceSynchronize returned error code %d after launching stEfork2TimeLoopGPU!\n", cudaStatus); 
#line 686 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 687 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 700 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float *V_d; 
#line 701 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&V_d), (InMat.N) * sizeof(float)); 
#line 705 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float *d_modelParams; 
#line 706 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMalloc((void **)(&d_modelParams), ((0 * (InMat.NComps)) * NSets) * sizeof(float)); 
#line 707 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 708 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaMalloc failed!"); 
#line 709 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 710 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 713 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpy(d_modelParams, ParamsM, ((0 * (InMat.NComps)) * NSets) * sizeof(float), cudaMemcpyHostToDevice); 
#line 715 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpy(V_d, V, (InMat.N) * sizeof(float), cudaMemcpyHostToDevice); 
#line 716 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 717 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaMemcpyToDevice failed!"); 
#line 718 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 719 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 721 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
dim3 blockDim(32, stim.NStimuli); 
#line 722 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
dim3 gridDim(NSets); 
#line 724 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short offset = (0); 
#line 756 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short FrameworkMemSize = offset; 
#line 758 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("offset is%d\n", offset); 
#line 760 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
offset += (((InMat.N) + 2) * sizeof(double)); 
#line 761 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
offset += (((InMat.N) + 2) * sizeof(double)); 
#line 762 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
offset = (ceilf(((double)offset) / (sizeof(double))) * (sizeof(double))); 
#line 765 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
offset += ((32 * (sim.NRecSites)) * sizeof(float)); 
#line 767 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
offset += ((32) * sizeof(float)); 
#line 769 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short PerStimulus = offset - FrameworkMemSize; 
#line 771 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short TotalSMem = FrameworkMemSize + (PerStimulus * (stim.NStimuli)); 
#line 772 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("Asking %d bytes, %d+%d*%d\n", TotalSMem, FrameworkMemSize, PerStimulus, stim.NStimuli); 
#line 773 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEvent_t start, stop; 
#line 774 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventCreate(&start); 
#line 775 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventCreate(&stop); 
#line 776 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short currKernelRun = (30); 
#line 777 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short prevRuns = (0); 
#line 778 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
int memSizeForVHotGlobal = (Nt * (stim.NStimuli)) * (sim.NRecSites); 
#line 779 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short memSizeForModelParams = 0 * (InMat.NComps); 
#line 780 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short streamID = (0); 
#line 781 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStream_t stream0, stream1, stream2, stream3; 
#line 782 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStreamCreate(&stream0); 
#line 783 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStreamCreate(&stream1); 
#line 784 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStreamCreate(&stream2); 
#line 785 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStreamCreate(&stream3); 
#line 786 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventRecord(start, 0); 
#line 787 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
while (prevRuns < NSets) { 
#line 788 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (currKernelRun > (NSets - prevRuns)) { 
#line 789 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
currKernelRun = (NSets - prevRuns); 
#line 790 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 791 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (streamID == 0) { 
#line 792 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(cudaConfigureCall(currKernelRun, blockDim, TotalSMem, stream0)) ? (void)0 : (NeuroGPUKernel)(stim_d, &(d_modelParams[prevRuns * memSizeForModelParams]), sim_d, Mat_d, V_d, &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), CompDepth, CompFDepth); 
#line 794 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyAsync(&(VHotsHost[prevRuns * memSizeForVHotGlobal]), &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), (((currKernelRun * Nt) * (sim.NRecSites)) * (stim.NStimuli)) * sizeof(float), cudaMemcpyDeviceToHost, stream0); 
#line 796 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 797 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (streamID == 1) { 
#line 798 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(cudaConfigureCall(currKernelRun, blockDim, TotalSMem, stream1)) ? (void)0 : (NeuroGPUKernel)(stim_d, &(d_modelParams[prevRuns * memSizeForModelParams]), sim_d, Mat_d, V_d, &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), CompDepth, CompFDepth); 
#line 800 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyAsync(&(VHotsHost[prevRuns * memSizeForVHotGlobal]), &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), (((currKernelRun * Nt) * (sim.NRecSites)) * (stim.NStimuli)) * sizeof(float), cudaMemcpyDeviceToHost, stream1); 
#line 802 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 803 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (streamID == 2) { 
#line 804 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(cudaConfigureCall(currKernelRun, blockDim, TotalSMem, stream2)) ? (void)0 : (NeuroGPUKernel)(stim_d, &(d_modelParams[prevRuns * memSizeForModelParams]), sim_d, Mat_d, V_d, &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), CompDepth, CompFDepth); 
#line 806 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyAsync(&(VHotsHost[prevRuns * memSizeForVHotGlobal]), &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), (((currKernelRun * Nt) * (sim.NRecSites)) * (stim.NStimuli)) * sizeof(float), cudaMemcpyDeviceToHost, stream2); 
#line 808 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 809 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (streamID == 3) { 
#line 810 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
(cudaConfigureCall(currKernelRun, blockDim, TotalSMem, stream3)) ? (void)0 : (NeuroGPUKernel)(stim_d, &(d_modelParams[prevRuns * memSizeForModelParams]), sim_d, Mat_d, V_d, &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), CompDepth, CompFDepth); 
#line 812 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaMemcpyAsync(&(VHotsHost[prevRuns * memSizeForVHotGlobal]), &(VHotsGlobal[prevRuns * memSizeForVHotGlobal]), (((currKernelRun * Nt) * (sim.NRecSites)) * (stim.NStimuli)) * sizeof(float), cudaMemcpyDeviceToHost, stream3); 
#line 814 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 815 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
prevRuns += currKernelRun; 
#line 816 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (streamID == 3) { 
#line 817 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
streamID == 0; 
#line 818 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
} else { 
#line 819 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
streamID += 1; 
#line 820 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 821 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 823 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventRecord(stop, 0); 
#line 824 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventSynchronize(stop); 
#line 825 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
float elapsedTime; 
#line 826 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventElapsedTime(&elapsedTime, start, stop); 
#line 827 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("time required : %f", elapsedTime); 
#line 829 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventDestroy(start); 
#line 830 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaEventDestroy(stop); 
#line 832 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 833 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaDeviceSynchronize returned error code %d after launching stEfork2TimeLoopGPUKernel!\n", cudaStatus); 
#line 834 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 835 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 837 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("stEfork2TimeLoopGPU took %f milliseconds\n", elapsedTime); 
#line 838 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
FILE *file = fopen("..\\Data\\RunTimes.csv", "wb"); 
#line 839 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (file) { 
#line 840 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
unsigned short mul32 = (2); 
#line 841 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fwrite(&mul32, sizeof(unsigned short), 1, file); 
#line 842 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fwrite(&elapsedTime, sizeof(float), 1, file); 
#line 843 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
} else { 
#line 844 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
printf("ERR SaveArrayToFile %s\n", "..\\Data\\RunTimes.csv"); 
#line 845 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 846 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fclose(file); 
#line 847 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
if (cudaStatus != (cudaSuccess)) { 
#line 848 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
fprintf(__acrt_iob_func(2), "cudaMemcpyDeviceToHost failed!"); 
#line 849 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 850 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}  
#line 851 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
SaveArrayToFile("..\\Data\\VHotP.dat", ((NSets * Nt) * (stim.NStimuli)) * (sim.NRecSites), VHotsHost); 
#line 853 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 854 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
} 
#line 857 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaError_t stEfork2Main(Stim stim, Sim sim, float *ParamsM, HMat &InMat, float *V, unsigned short CompDepth, unsigned short CompFDepth, unsigned short NSets) { 
#line 858 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaError_t cudaStatus; 
#line 859 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaStatus = cudaSetDevice(1); 
#line 860 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
cudaDeviceSetSharedMemConfig(cudaSharedMemBankSizeEightByte); 
#line 861 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
stEfork2TimeLoopGPU(stim, sim, ParamsM, InMat, V, CompDepth, CompFDepth, NSets); 
#line 867 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
return cudaStatus; 
#line 868 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
} 
#line 1 "CudaStuff.cudafe1.stub.c"

#line 1 "CudaStuff.cudafe1.stub.c"
#line 1 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.cudafe1.stub.c"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"







































































#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

template <typename T>
static inline T *__cudaAddressOf(T &val) 
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}





        











          



          







#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"




#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref; __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary_17_CudaStuff_cpp1_ii_1abe6ff8 ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {

#pragma data_seg("__nv_module_id")
  static const __declspec(allocate("__nv_module_id")) unsigned char __module_id_str[] = "_17_CudaStuff_cpp1_ii_1abe6ff8";
#pragma data_seg()




#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"









}

extern "C" {
extern void** __stdcall __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __stdcall __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __stdcall __cudaRegisterVar(
        void **fatCubinHandle,
        char  *hostVar,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        int    size,
        int    constant,
        int    global
);

extern void __stdcall __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        int    size,
        int    constant,
        int    global
);

extern char __stdcall __cudaInitModule(
        void **fatCubinHandle
);

extern void __stdcall __cudaRegisterTexture(
        void                    **fatCubinHandle,
  const struct textureReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       norm,      
        int                        ext        
);

extern void __stdcall __cudaRegisterSurface(
        void                    **fatCubinHandle,
  const struct surfaceReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       ext        
);

extern void __stdcall __cudaRegisterFunction(
        void   **fatCubinHandle,
  const char    *hostFun,
        char    *deviceFun,
  const char    *deviceName,
        int      thread_limit,
        uint3   *tid,
        uint3   *bid,
        dim3    *bDim,
        dim3    *gDim,
        int     *wSize
);




#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
extern int __cdecl atexit(void(__cdecl *)(void));
#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

}

static void **__cudaFatCubinHandle;

static void __cdecl __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"












































































































































































































































#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"









#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































































































































































































#line 10048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"













































#line 47 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"





#line 53 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"









#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"







#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"

#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"

#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"
#line 10056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#pragma warning(disable : 4211)

#line 10062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

static inline double rsqrt(double a);

static inline double rcbrt(double a);

static inline double sinpi(double a);

static inline double cospi(double a);

static inline void sincospi(double a, double *sptr, double *cptr);

static inline double erfinv(double a);

static inline double erfcinv(double a);

static inline double normcdfinv(double a);

static inline double normcdf(double a);

static inline double erfcx(double a);

static inline float rsqrtf(float a);

static inline float rcbrtf(float a);

static inline float sinpif(float a);

static inline float cospif(float a);

static inline void sincospif(float a, float *sptr, float *cptr);

static inline float erfinvf(float a);

static inline float erfcinvf(float a);

static inline float normcdfinvf(float a);

static inline float normcdff(float a);

static inline float erfcxf(float a);

static inline int min(int a, int b);

static inline unsigned int umin(unsigned int a, unsigned int b);

static inline long long int llmin(long long int a, long long int b);

static inline unsigned long long int ullmin(unsigned long long int a, unsigned long long int b);

static inline int max(int a, int b);

static inline unsigned int umax(unsigned int a, unsigned int b);

static inline long long int llmax(long long int a, long long int b);

static inline unsigned long long int ullmax(unsigned long long int a, unsigned long long int b);



static inline int __isnan(double a);

#line 10124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline void sincos(double a, double *sptr, double *cptr);

#line 10130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline double exp10(double a);

static inline float exp10f(float a);

static inline void sincosf(float a, float *sptr, float *cptr);

static inline int __isinf(double a);

#line 10142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 10148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline int __signbit(double a);

static inline int __finite(double a);

static inline int __signbitl(long double a);

static inline int __signbitf(float a);

static inline int __finitel(long double a);

static inline int __finitef(float a);

static inline int __isinfl(long double a);

static inline int __isinff(float a);

static inline int __isnanl(long double a);

static inline int __isnanf(float a);

#line 10172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













































































































































#line 10314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#pragma warning(default: 4211)

#line 10320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_constants.h"























































































































































#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_constants.h"
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


























































































































































































































































































































































































































































































































































































#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"









































































#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"
#line 1675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



#pragma warning(disable : 4211)

#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



static inline int __isnan(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 > 0xffe0000000000000ull;
}

#line 1697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









static inline double exp10(double a)
{
  return pow(10.0, a);
}

static inline float exp10f(float a)
{
    return (float)exp10((double)a);
}

static inline void sincos(double a, double *sptr, double *cptr)
{
  *sptr = sin(a);
  *cptr = cos(a);
}

static inline void sincosf(float a, float *sptr, float *cptr)
{
  double s, c;

  sincos((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline int __isinf(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 == 0xffe0000000000000ull;
}

#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"








#line 1753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 1755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









static inline int __signbit(double a)
{
  volatile union {
    double               d;
    signed long long int l;
  } cvt;

  cvt.d = a;
  return cvt.l < 0ll;
}














#line 1789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

static inline int __finite(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;
  return cvt.l << 1 < 0xffe0000000000000ull;
}








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"








static inline int __signbitl(long double a)
{
  return __signbit((double)a);
}

static inline int __signbitf(float a)
{
  return __signbit((double)a);
}

static inline int __finitel(long double a)
{
  return __finite((double)a);
}

static inline int __finitef(float a)
{
  return __finite((double)a);
}

static inline int __isinfl(long double a)
{
  return __isinf((double)a);
}

static inline int __isinff(float a)
{
  return __isinf((double)a);
}

static inline int __isnanl(long double a)
{
  return __isnan((double)a);
}

static inline int __isnanf(float a)
{
  return __isnan((double)a);
}























































































































































#line 3352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


























































#line 3411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"







static inline double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

static inline double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  } 
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));                
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;


#line 3441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (__signbit(a))
#line 3443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  {
    t = -t;
  }
  return t;
}

static inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  } 
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

static inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  } 
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

static inline void sincospi(double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

static inline double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;                    
    if (fa == 1.0) {
      t = a * exp(1000.0);        
    }
  } else if (fa >= 0.9375) {
    



    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {
    



    t = a * a - .87890625;
    p =         .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q =     t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {
    



    t = a * a - .5625;
    p =       - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q =     t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

static inline double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;                        
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);  
    }
  } 
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q =     t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

static inline double normcdfinv(double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

static inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 =  2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

static inline double erfcx(double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a); 
  if (x < 32.0) {
    








  
     
     
    t1 = x - 4.0; 
    t2 = x + 4.0; 
    t2 = t1 / t2;
       
    t1 =         - 3.5602694826817400E-010; 
    t1 = t1 * t2 - 9.7239122591447274E-009; 
    t1 = t1 * t2 - 8.9350224851649119E-009; 
    t1 = t1 * t2 + 1.0404430921625484E-007; 
    t1 = t1 * t2 + 5.8806698585341259E-008; 
    t1 = t1 * t2 - 8.2147414929116908E-007; 
    t1 = t1 * t2 + 3.0956409853306241E-007; 
    t1 = t1 * t2 + 5.7087871844325649E-006; 
    t1 = t1 * t2 - 1.1231787437600085E-005; 
    t1 = t1 * t2 - 2.4399558857200190E-005; 
    t1 = t1 * t2 + 1.5062557169571788E-004; 
    t1 = t1 * t2 - 1.9925637684786154E-004; 
    t1 = t1 * t2 - 7.5777429182785833E-004; 
    t1 = t1 * t2 + 5.0319698792599572E-003; 
    t1 = t1 * t2 - 1.6197733895953217E-002; 
    t1 = t1 * t2 + 3.7167515553018733E-002; 
    t1 = t1 * t2 - 6.6330365827532434E-002; 
    t1 = t1 * t2 + 9.3732834997115544E-002; 
    t1 = t1 * t2 - 1.0103906603555676E-001; 
    t1 = t1 * t2 + 6.8097054254735140E-002; 
    t1 = t1 * t2 + 1.5379652102605428E-002; 
    t1 = t1 * t2 - 1.3962111684056291E-001; 
    t1 = t1 * t2 + 1.2329951186255526E+000; 
      
    t2 = 2.0 * x + 1.0; 
    t1 = t1 / t2;
  } else {
    
    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 =         -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {
    
    t2 = ((int)(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

static inline float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

static inline float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

static inline float sinpif(float a)
{
  return (float)sinpi((double)a);
}

static inline float cospif(float a)
{
  return (float)cospi((double)a);
}

static inline void sincospif(float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

static inline float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}

static inline float normcdfinvf(float a)
{
  return (float)normcdfinv((double)a);
}

static inline float normcdff(float a)
{
  return (float)normcdf((double)a);
}

static inline float erfcxf(float a)
{
  return (float)erfcx((double)a);
}



#pragma warning(default: 4211)

#line 3851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 10328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"













































































































































































































#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"











































































































































































































































































































































































































































































































#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"



#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 10332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"





#line 253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#pragma pack()



#pragma warning(disable: 4099)





#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 269 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 4 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.cudafe1.stub.c"
#line 1 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.fatbin.c"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"
































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"
















































typedef struct fatBinaryHeader *computeFatBinaryFormat_t;




#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"



















struct __declspec(align(8)) fatBinaryHeader
{
  unsigned int           magic;
  unsigned short         version;
  unsigned short         headerSize;
  unsigned long long int fatSize;
};


typedef enum {
  FATBIN_KIND_PTX      = 0x0001,
  FATBIN_KIND_ELF      = 0x0002,
  FATBIN_KIND_OLDCUBIN = 0x0004,
} fatBinaryCodeKind;

#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"
#line 34 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"


extern "C" {
#line 38 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"






typedef enum {
  FBCTL_ERROR_NONE = 0,
  FBCTL_ERROR_NULL,           
  FBCTL_ERROR_UNRECOGNIZED,   
  FBCTL_ERROR_NO_CANDIDATE,   
  FBCTL_ERROR_COMPILE_FAILED, 
  FBCTL_ERROR_INTERNAL        
} fatBinaryCtlError_t;
extern char* fatBinaryCtl_Errmsg (fatBinaryCtlError_t e);

extern fatBinaryCtlError_t fatBinaryCtl_Create (void* *data);

extern void fatBinaryCtl_Delete (void* data);


extern fatBinaryCtlError_t fatBinaryCtl (void* data, int request, ...);















typedef enum {
  fatBinary_PreferBestCode,  
  fatBinary_AvoidPTX,        
  fatBinary_ForcePTX,        
  fatBinary_JITIfNotMatch    
} fatBinary_CompilationPolicy;





extern fatBinaryCtlError_t fatBinaryCtl_PickCandidate (void* data);







extern fatBinaryCtlError_t fatBinaryCtl_Compile (void* data, 
                                                 void* *elf, size_t *esize);








typedef struct {
  int magic;
  int version;
  const unsigned long long* data;
  void *filename_or_fatbins;  

} __fatBinC_Wrapper_t;

















#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"




}
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"

#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"
#line 2 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.fatbin.c"



extern "C" {
#line 7 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.fatbin.c"

#pragma data_seg("__nv_relfatbin")
static const __declspec(allocate("__nv_relfatbin")) unsigned long long fatbinData[]= {
0x00100001ba55ed50,0x000000000001d9c0,0x0000007001010002,0x0000000000016320,
0x000000000001631e,0x0000002300010007,0x0000002900000040,0x0000000000002047,
0x0000000000000000,0x000000000004c640,0x75654e79702f3a43,0x69775f5550476f72,
0x6f7275654e2f326e,0x6475432f36555047,0x632e666675745361,0x0000000000000075,
0x010102464c457fa2,0x00016e0001000733,0xc0310001005000be,0x05230df5000804b8,
0x0000003800400023,0x2e00000100360040,0x6261747274736873,0x086d792700082e00,
0x646e68735f3df500,0x6e692e766e2e0078,0x747865742e006f66,0x63634f616475632e,
0x614d79636e617075,0x4265766974634178,0x726550736b636f6c,0x6f727069746c754d,
0x6957726f73736563,0x467367616c466874,0x645f702800400f00,0xb200465f67756265,
0x7361735f6765725f,0x7266aa00152e0073,0x6c65722e00656d61,0x5f1bf600b3010011,
0x6f7275654e34315a,0x656e72654b555047,0x66506d697453346c,0x614d48346d695333,
0x745f30535f305374,0x6f1c00340f00a774,0x0036646572616873,0x21009f0f00ac001a,
0x6e6174736e6f639f,0x01bc051a00393074,0x6547636e754601fb,0x7562697274744174,
0x00001f0f019b6574,0x447465479a003b05,0x0700336563697665,0x42356100d0030017,
0x502200826275536b,0x5e08008700008464,0x0117070600230f01,0x140106040900470f,
0xf7008b5f10007533,0x645f30326d735f0a,0x735f3436665f7669,0x5f68746170776f6c,
0x0d00290f007b3276,0x6665423896007d03,0x090080554c65726f,0xbe070300200f00c1,
0x001d030300410f00,0x4e495f39334e2af8,0x315f4c414e524554,0x7453616475435f37,
0x317070635f666675,0x656261315f69695f,0x7973313138666636,0x646165726874636e,
0x00450f0083764573,0x0801ba0201d40528,0x00200f01dd0a01f2,0x03ff0f1f04080f01,
0x757233e203c00624,0x74616c756d69536e,0x53664101526e6f69,0x0f02ef0002f15f30,
0x081e00380f000266,0x11051a00710f0392,0x636f6c6c614d6a01,0x04c10300140600ee,
0x0004bd656e696c43,0x11060100180f0072,0x0200100204d40800,0x657262626186000c,
0x002a0105142e0076,0x2400370300116119,0x6e617269000b636f,0x636f280054736567,
0x008102002104000f,0x316d616e62757063,0x00ba050015611d00,0x78745f78747002f2,
0x3532373131312e74,0x6c618103a3383338,0x000e68706172676c,0x79746f746f72709f,
0x06340f20067a6570,0x6d734f6b06b10f23,0x05d80f2406b66d65,0x037e0f8906e10f17,
0x705f7f5d07100f1a,0x0206f2006d617261,0x0f07100e29072d0f,0x0f0606ee0f14073b,
0x0f0c06f40f310755,0x630046639f200775,0x3d077f7378644946,0x2b07960f0307380f,
0x74536c65524c63bf,0x010f07a273747261,0x73646e4509f1002d,0x7942706d6f436300,
0x0032336c6576654c,0x4911004567655363,0x0049646e45a7000b,0x2c005e4663004563,
0x003f4615003e4663,0x7372656874614697,0x7f002d05002f6300,0xd4006365566c6552,
0x350f75085b0f2807,0x350f2b08720f0308,0x6000ff08a00f1a08,0x02606f4e6e6f5363,
0x006d2802994b6320,0xf1001108bd0f0898,0x0ff502d26f542002,0x6f4d6c6f6f426300,
0x32627623006c6564,0x623635626c6c3830,0x0013696c6c6c3233,0x6923006975000c08,
0x2300220008696c6c,0x005f001169120004,0x0ff9091f6c6c6c23,0x00000032750b0001,
0x02402200102a0022,0x03000000697d0008,0x0018eb1100302a00,0x180103200018041d,
0x184c110018051d00,0x024b2000182b1d00,0x84a20018281d0018,0x400028810d000002,
0x2000084413001001,0x00282c1500a8028b,0x0048a11100188013,0x0030dc1100482c1d,
0x1100300300d82d16,0x2000302d1d0030ea,0x00182e1d0018032f,0x112f160048037220,
0x0030b61111210300,0x0018ce110030291d,0x1804342000182f1d,0x051b760018301d00,
0x0300d83100020000,0x1d00300557200008,0x009005de20003031,0x0030f5110108321d,
0x0030061001e0321e,0x2001e00300113316,0x0030331d00300660,0x0018341d0018cb11,
0x78351d0048078320,0x351d0030078e2000,0x1d00180815200030,0x1d00184111001806,
0x1d00185d11001807,0x1d00186b11001808,0x1d00188811001809,0x1d0018931100180a,
0x1d0018c21100180b,0x1d0018e71100180c,0x001809032000180d,0x0018111100181b1d,
0x0000e66d00181c1d,0x2100760017401d00,0x2303001012000001,0x0700180000781640,
0x1001388780230168,0x8013028806001803,0x1d000003c47d0323,0x0018c71301c82980,
0x00188013010b8a13,0x0270060048041d20,0x047122000827c022,0x120403ab14130030,
0x182c1b00189e1301,0x090a2a0018a81300,0x76130018b71301f8,0x1803016814140030,
0x18cb130018621b00,0xce1400c002002a00,0x01d2040030030018,0x1300180b0078db14,
0x0090078a2a0018e6,0x00c0381b0018f613,0x0018201b0018ff13,0x18441b0018050a22,
0x1850130018131300,0x0771230018121300,0x7b1403a8071a0090,0x7f130018061a0018,
0x00a803052b050018,0x30058a2a0018b313,0x00480b0018be1400,0x6302b904240e2f0f,
0x015e040034647225,0x1300150100876013,0x33002a5816001505,0x1550180015060032,
0x1548160015071300,0x1600150800313300,0x150a003333001540,0x150b130015381800,
0x150913003f301800,0x8332100015281500,0x3ee81c0010051001,0x0068e01c003a0000,
0x0015018824006400,0x8d05000003003160,0xb70000bb01602b00,0x00e10000e5c81c00,
0x010b00009101382b,0x2b01350000e5b81c,0x1c019e00014e0110,0x04032f8810014ea0,
0x000029505321003f,0x2100290190230025,0x1400240000285053,0xb813007c04001498,
0xc81300bb01180067,0xe019010e011800a6,0x33051005f20100f9,0x05d6010014b01501,
0x14c0000001b80565,0x00100510046a0100,0x0000a3000014d017,0x10270002383f0010,
0x003833025e8e1719,0x3301117817013b04,0x12881b013c050038,0x1208202a00260001,
0x2808282600240001,0x00009066020a0000,0x000d50002812d800,0x7c12140209980500,
0xb00575071e731100,0x33001506f8000000,0x15d0160125030032,0x600510027e331000,
0x5f34100015a01601,0x1570140160051007,0x051002bc31662000,0x1002710648270244,
0x180000015700a522,0x0500152317018d06,0x015701e10e10021e,0x0f17021e05e80000,
0x003533002a030015,0x37002ab816017c0a,0x002a0300150b0035,0x0001f05602873611,
0x09003637002a9000,0x0032b600bc020015,0x0000021805000039,0x7503e13710003e60,
0x3e14280000022805,0x2400155900373300,0x3a003330003e1430,0x07e0000002540318,
0x00003b0034b50014,0x0014b00000027005,0x0298057503f33510,0x3930014b07880000,
0x0000024502af4100,0x03de396420001558,0x7b0715007be80520,0x0400152900393700,
0xf85603953011036a,0x314300a650000002,0x1458260016070030,0x01cc20003130002c,
0x002c158800000356,0x2104001621003137,0x5600e94200303002,0x30001609a8000003,
0x0003450418430031,0xed3864200016d800,0x100000035805750a,0x152b003837005708,
0x050a381000400300,0x0460000003900575,0x0102490037300015,0x3000159800000346,
0x00034600c14a0036,0x4b0035300015d000,0x05080000045704d4,0x0457017e3210046c,
0x3310041a09680000,0x00a802001503007e,0x1408180538096a01,0x2029035a32642100,
0x18035b3211003e08,0x7603327011002a28,0x7c08380000083002,0x0870560262321100,
0x32312100fb900000,0x04096c0878220263,0x9857002c3311002c,0x3311002ca8000008,
0xb0000008a057002c,0x2800002c3411002c,0x2c3411002cd01700,0x002cc81700280000,
0x4800000847031003,0x0016030311030101,0xe857031202002c04,0x1303002c08000008,
0x0058f80000084703,0x00091057002c3711,0x002c3711002c2000,0x0058280000091857,
0x8409202a002c3811,0x002800002c381100,0x000958550186481b,0x38058a01015c6000,
0x317322019a096002,0xe8000009e05705a0,0x00c29a0033300016,0x3000801216008000,
0x000a4700965a0039,0x5b00393703062000,0xce301001f2040016,0x1800000a48056607,
0x166100303247002c,0x05133411006e0400,0x00421000000a7057,0x0a4701b462003130,
0x0031370042080000,0x3211002c04001663,0xf800000ad06602f3,0x1649003237002c13,
0x05f33510006e0400,0x13f000000af80576,0x2857030b33110042,0x33370042e800000b,
0x10002c0400164b00,0x000b580567088034,0x51003437002ce000,0x003530002c040016,
0xd800000b47058752,0x001653003537002c,0x5706063611002c04,0x37002cd000000bb0,
0x002c040016310036,0x000be05703913711,0x33003737002cc800,0x070302002c040016,
0x002cb800000c1057,0x2c04001604070302,0x0c38570661391100,0x003937002cb00000,
0x3011067704001639,0xa800000c68560593,0x163b00303347002c,0x05973112002c0400,
0x37002ca000000c47,0x002c040016410031,0x000cc85705163211,0x43003237002c9800,
0x003330002c040016,0x9000000c47035668,0x001669003337002c,0x406a003430002c04,
0x002c8800000d4703,0x260400166b003437,0x4704f18900363002,0x373000167800000d,
0x00000d4704748a00,0x488b003830001670,0x00166800000d4704,0xd8050000900039b7,
0x35b700846000000d,0x000e080500007000,0x7100353700845800,0x003030082a040016,
0x5000000e47058a91,0x0803920031300016,0x3000584800000e47,0x000e4705f5720036,
0x7300363700583800,0x0b3710002c040016,0x3000000eb8056709,0x001679003737002c,
0x0a93003230006e04,0x00422800000e4704,0x0f4703f47a003830,0x0038370042200000,
0x3910002c0400167b,0x00000f4805670c2c,0x1681003937002c18,0x048c361107bb0200,
0x03dcc800000f7056,0x0fa05606f9303421,0x3034470408b80000,0x11002c0400162b00,
0x00000fd05707d331,0x1629003137002cb0,0x09363211002c0400,0x002ca800000ff857,
0x2c04001623003237,0x001028570bd30200,0x040af002002ca000,0x00373008a7020016,
0x9800001046040698,0xf0990033324004e2,0x0016900000104703,0x104703da9b003430,
0xba35100016880000,0x78000010e005670b,0x03aea10036300016,0x0200987000001147,
0x60000011385609d0,0x160009d13412086c,0x373240086c681600,0x000011440398a200,
0xa300386640001658,0x1450000011450380,0xc805650c25391000,0x3140001448000011,
0x0011560351a90030,0x913512007f153800,0x007f180000124706,0x2026001609003533,
0x4d000651000bcb15,0x0038300093a01706,0x080000124702cbaa,0x0095ab0039300016,
0x400101f000001246,0x124701c582003033,0x8c31110016e00000,0x14d0000013087f0b,
0x0d331318041ae000,0x0e6c31150e18041e,0x6c301f010e6c381f,0x28180015281c010e,
0x873013003f040d5d,0x1c0065000069090d,0x9027008f00009398,0x80270ddb040bd200,
0x681b0158000bd200,0xd8260def0a130cb4,0x1c0cb40b130c8c00,0xd02b0063000e2de0,
0x09001598130ddb00,0x00f82b00b70009ad,0xd4040015a81309ad,0x1b00220003af000e,
0x18170010000def08,0x0010000051000014,0x0c1f1c330001783b,0x01019c301f01019c,
0x010928180015281c,0xb02f003b00003f04,0xbc00702b000f4d00,0x000148040e12040e,
0x4804018670130029,0x3398180e10071301,0x0109b01b0e110401,0x010900c02a0f2200,
0x13010902015bc019,0x26071c7c0f0f35d0,0x0030314700d60346,0x1c00170116110a08,
0x0b04020d03110c09,0x1102dd0b020d0811,0x33103a381a00da36,0x033827108e060036,
0xf607014105130e07,0xaa601e0f53351510,0x00aa0b10a5981300,0x1300aa0310e6a018,
0x240000aa08110fb8,0x1013002801682600,0x1000282768260132,0xa804001408075811,
0x8503682700a40000,0x0348270f5607130e,0x0128670199000cf4,0x0210001501300000,
0x330900540112023d,0x02a8000001486b03,0xd803001550130333,0x0015581910d10201,
0x3f601a00e4326421,0x2a681800e5321100,0x032070130cf50300,0xb01304d9000f1805,
0x390d130f18051110,0x2a000e1901c82711,0x1901170fbfd81000,0x0001e067002a000e,
0x002a000ef101f000,0x0ef101f827002600,0x2a0208270faa0d13,0x2700260006580000,
0x00065700002a0210,0x000f1b0210280026,0x0288280012000055,0x230500160d170f1b,
0x48280fd80e002302,0x30220058000f1b02,0x0e130df50611e702,0x000df50260280ff0,
0x680000025868002c,0x601b002c000df502,0x6819002c33110084,0x101f0001ab030084,
0x02a0280d1a02a02a,0x6fd81012900201bf,0x56181011d1021710,0x0d6b020227021801,
0x0202650815100500,0x0310270010000264,0x682b1002191311f9,0xc82b03710005e927,
0xd02702b40005e903,0x1901101210002a03,0x001300333302f703,0x03c9341100540710,
0x11e5043027039b00,0x3827031d00030c00,0x0a04f61410002a04,0x04f7150034300054,
0x00138c311200540a,0x000f2c03a8281055,0xa000000398680377,0xb01a002c000f2c03,
0xb81a03a3311200d5,0x98040036314300d6,0x2c000f2c03d82810,0x5803e02c00280000,
0x5803e82c0028000f,0x08b0020016e0130f,0x7014001100060e03,0x150005bc66130104,
0x05000f8204782c00,0x086d0f8204182c11,0x190f820410000004,0x04190f8204015b04,
0x480600393143015c,0x7b010f2e04482811,0x002c500000044905,0x5800000449046b01,
0x582511750913002c,0x750006d30200da04,0x06d30300da881611,0x02002a9000000446,
0x2aa016010000025c,0x16010000025c0200,0x500001dd02002aa8,0xdc02002a05182500,
0x2a05202500500001,0x0122d35f31613f00,0x1600680000967612,0x0007002d0f006cb0,
0x84b81800800000ae,0x0304b02200ae0000,0x00167c0100840515,0x10b20115030700ae,
0x145b04e800000456,0xf80000045a166601,0x150104f827055704,0xf02b12d900006604,
0x0400151013006605,0x010500bd321f00ea,0x42280000054608ce,0x01440007002d0f00,
0x11005a3016014000,0x4816003e00012c35,0x26000114351100ea,0x3300002a06502b00,
0x4813002a05c82b1a,0x6e301102f0040015,0x002bd0161a160006,0x165813066f303121,
0x00037302002c0300,0x7202002b70161584,0x2a78000005685c03,0x002a901c00260000,
0x17d205982a002600,0x003eb0000005a856,0xe016001100107702,0x15b813107602003e,
0x1a069902002a0300,0xc81a0699020196c8,0x4713883131220196,0x313700e8d8000005,
0x02002c0400160b00,0x31120081d81a0782,0x31210082d81a0783,0xf81700120000ad33,
0x001605003337002c,0x1b00583411002c04,0x1b00583411002ce8,0x1b00db3511002ce8,
0x0b07753512002cf0,0x001200016f02002c,0x00050c0302192016,0x00002c06282c0016,
0x2813002c981d0028,0x1a8f011739040016,0x00025a0318470618,0x50270284c81c0280,
0x19139c6612189b06,0x681906f302003e60,0x0006560fbc030014,0x0014000f0c067800,
0x076c06902a001000,0x6c00ce0400a29019,0x00ce073000000708,0x17df380000071055,
0x000903983176643f,0x762f00434816003f,0x2700560009039831,0x0000420001140750,
0x01011407d027003e,0x14de060015030b01,0x90000007580c2f01,0x07180c310114de07,
0x002c0014b200187b,0xc807a80000079868,0xbb07a027002c0014,0x18002c0014c80118,
0x30000016010083a8,0x02b2030084b01b05,0x14b2086800000758,0x600000075806e401,
0x240000580014b208,0x071314b208302818,0x0114b208482817ac,0x14b20617580306b8,
0x2c06178403047601,0x16d400011e161000,0x04761710002c1018,0x14de001127170000,
0x4e0300580b044d01,0x0691371200580b04,0x14de089800000858,0xa000000849069201,
0x324317f2061e002c,0x08a82b17f2070037,0xd0091807a81304d0,0x02002a0300150404,
0x0958251805000055,0x001500005402002a,0x182c00155e09602c,0x181a00155e08e02c,
0x1a0413155e08d828,0x0513155e08f82818,0x01155e090828181a,0x091000000858040e,
0x002800002c00155e,0x0018460f002c1819,0x09202b1846303325,0x09382b0011000596,
0x059605185a040596,0xd027002600002a00,0x4827002a00059609,0x270d08160f1a9c09,
0x0d08160f19f80958,0x07b009702b015a00,0x07b00b582b003e00,0x08160b602a002600,
0x1609a0000009986a,0x1a62b01b00100008,0x00660ad02b001000,0x660aa8000009b86b,
0x08160f0015c81300,0x1609e02f01280012,0x92041974d8181408,0x920af82b003e0005,
0x2a0b082b00260005,0x2a78000009f05c00,0x08160a0015f81300,0x160a8800000a086c,
0x031c090016101308,0x031c0a282b19c700,0x002a3000000a205c,0x00002a481c002600,
0x6b08160a502a0026,0x02800a6800000a60,0x02800a982b001100,0x2908160900157013,
0x0408160201960a78,0x00ce0008160a0015,0x00160408160a902c,0x030081901a08160a,
0x08160a0016040816,0x08160ab02c001200,0xa01b08160a001604,0x001604081602002c,
0x02002ca81b08160a,0x071c0a0016040816,0x071c0ad82c001200,0x00002ce01d001600,
0x13002c0b502c0028,0xf0100816080016e0,0x028000025a0c01ef,0x028000025a0b782b,
0x0b182808160b882a,0x142019081602003e,0x00000b5a116d0300,0x2a00100008160b30,
0xa20b482808160b48,0x1b7eb81000ce0400,0x00000bc86f00ce0d,0x003f001408160bf0,
0x56001408160bf82f,0x880103440c082800,0x440c7000000b5805,0x00160c1205880103,
0x18680141001ae606,0x001ae60c3000000c,0x2800000c20680142,0x281b5406131ae60c,
0x580768011ae60c50,0x011ae60c5800000c,0x1ae606006e0314c8,0xcd0300840b0df601,
0x1ae60c181b54000d,0x0c181b3e00073c01,0x1c04000711011a8e,0x58025c011a8e0c18,
0x011a620cc800000c,0x0ce000000c58018e,0xe0281b9605131a62,0x0c5804cd0103900c,
0x071303900d680000,0x131a8e0d70280016,0x1a8e0d10281bac04,0x0800000c580af601,
0x0d5804a5011a780d,0x05131a780d280000,0x011a780d30281bc2,0x0d3800000d5804a7,
0x000d4904a8011a78,0x49118701002c4800,0x8801002c5000000d,0x1404400600160311,
0x1304400d181c1a04,0x04400d8828001605,0x9828010400010800,0x040001080004400d,
0x041304400da02801,0x0104400e10281c5c,0x0e1800000d5f1670,0xa82f006b00140770,
0x2b0082001407700d,0x2b003e00070a0db0,0x2a002600070a0f98,0x2a1cde0007700fa0,
0x2a00100007700de0,0x2b00100007700df0,0x000df86b00660f10,0x0e082200660ee800,
0x29001207700f0015,0x001407700e202f01,0x0004ec0e282b0140,0x0004ec0f382b003e,
0x00002a0f482b0026,0x13002a0eb82b1d87,0x486c07700a001538,0x1307700ec800000e,
0x586b074609001650,0x0007460e6800000e,0x2600002a701c1ddc,0x002600002a881c00,
0x0ea06b07700e902a,0x110007700ea80000,0xb01307700ed82b00,0x0eb8290770090015,
0x0015040770020196,0xd02c00ce0007700a,0x700a00160407700e,0x0770030081d01a07,
0x120007700a001604,0x160407700ef02c00,0x002ce01b07700a00,0x700a001604077002,
0x077002002ce81b07,0x120006760a001604,0x160006760f182c00,0x2800002c0f202c00,
0x162013002c901d00,0x000f305c07700800,0x1c028000025a6800,0xc82a0280000284b8,
0x02003e581907700f,0x7002001460190770,0x700f702a00100007,0x700f882a00100007,
0x10800500a2881907,0x00ce102800000f5c,0x701030000010086f,0x10382f003f001407,
0x4828005600140770,0x10580c770101ac10,0x780101ac10b00000,0x13201c060016030c,
0x201c1070281f6e06,0x68000010580c4a01,0x7810002c00201c10,0x0713201c10181f84,
0x00201c1098281f9a,0x160100849018002c,0x0084981b05320000,0x000010c86802b402,
0x580e0001201c10e0,0x011fb010d8000010,0x34120f301019088f,0x120f3010f02905e4,
0x1028002800010834,0x1149018e011f5d11,0x1e0613002c180000,0x0fe001002c201920,
0x115d123a0b001603,0x160302b411280000,0x000f0702002c0400,0x0802002ce0170012,
0x0084e8170016000f,0x5817207600005802,0x6248100058020084,0x1007f402002c0720,
0xf402002c0720ce60,0xc111782c20a20007,0xc111882c0028002b,0x002c90190028002b,
0x9819002800065900,0x169013065a00002c,0x0000580200dc0400,0x580200dcc81720fc,
0x002cd01700160000,0x5826211400084c02,0x2800084c02002c12,0x0014079c12602f00,
0x14079c11f02f0147,0x073611f82b015e00,0x073604267711f027,0x079c0326a211f827,
0x079c0327be122027,0x079c12382a001000,0x0066042476123827,0x006604241d124827,
0x12079c0f00155013,0x079c12682f012900,0x1812702b01400014,0x180425a912682705,
0x2a0425d412702705,0x002a0c2242781000,0x6c079c0a00158813,0x079c131000001290,
0x6c07720900169813,0x122812b0000012a0,0x002a12b80000125b,0x22002ad01c002600,
0x10079c082e2112b8,0x27079c121b22d5e8,0x13079c04254712f0,0x0829079c090015f8,
0x1504079c02019613,0x70131027079c0a00,0x0a001604079c0525,0x030081131829079c,
0x079c0a001604079c,0x079c052662132027,0x281b079c0a001604,0x001604079c02002c,
0x02002c301b079c0a,0x04bc0a001604079c,0x04bc0a2754133822,0x00002c681d001600,
0x6827002cd81d0028,0xe800079c03297a13,0x138827025ab01c27,0x139027025a042a7f,
0x3ea019079c032aaa,0x0014a819079c0200,0x297013b02726de02,0x29dc13b827079c03,
0x0400a2d019079c03,0x0a260014482200ce,0x0f262c14502700ce,0x266f1470220d079c,
0xb214782712079c0f,0x000f0c3264663226,0x32120043f816003f,0x8c04001690130f0c,
0xb814a02a1d000205,0x8c14a8291d000227,0x27f60007c8351227,0x07c83512002cd816,
0x35642225f314d028,0x16010084d81807c8,0x120084090e5c0100,0x0000152856015f73,
0x220108351226b630,0x0016011527091538,0x32270b151706a901,0x275d0002f5356472,
0x0002f502002c7017,0xdd02002c7817275d,0x002ca81700280007,0x040016781307dd02,
0x002c0b025e03002c,0x7322002c09025f03,0xe0000015470d6a38,0x15e8660210020041,
0xa603004116080000,0x002cf8000015470a,0x0000161057076e02,0x1866076e02002c20,
0x03002c1628000016,0x2c5800001647161f,0x0016281304940200,0x2c0b1ee203002c04,
0x22002c091ee20300,0x000016580aad3973,0x180aaf012b651668,0x452e0d3712206b16,
0x9502002a88000016,0x3370220014781800,0x1490000016450ac3,0x0016451a5d341200,
0x6807bb02003c9800,0x317916e8000016a8,0x000016d855006600,0xe0190015030016e0,
0x110035ba3112002b,0x0243020015f81600,0x002a33110015f01a,0x0125171025001100,
0x0017186603333612,0x033302249a172800,0x002c300000172057,0xa81700280020b602,
0x00280020b702002c,0x47175c03002cb017,0x4503002c78000017,0x002c900000174717,
0xa826002800108702,0x2800108702002c1c,0x981b002c1cb02c00,0x84a01b002c020084,
0x1700280002f20200,0xb01302f202002cd0,0x011e0032d5060016,0x030016d815001200,
0x15e0160011002ffa,0x0017580187351200,0x01880130a917e800,0x0300822216014800,
0x1818000017560b25,0x0018560b25030082,0x0af903002c181000,0x03002c3000001847,
0x2c38000018471d33,0x1700280003330200,0x2800033302002c48,0x093201002c501900,
0x01002c5800001849,0x0541040016030933,0x682600120001e202,0x160001e202054118,
0x030109b118702600,0x0014a8000018432a,0x5f7476637105a803,0x72613205a7323366,
0x7813004e00026067,0x31010500280f0052,0xad18880000185710,0x00001857035a020a,
0x5b1275020a961890,0x0023531898000018,0x13235318d82b0027,0x09010a7f04001598,
0x6318e80000185617,0x0014a81807fb0007,0x0018b066274b7212,0x198a01292318d000,
0x22c918c80000185b,0x22c918e02b001100,0x01231d050015d013,0x196f03002a0a1040,
0xe0190afb03002a08,0x184f2435761300a4,0x6432070173f00000,0x0000184b03fd7473,
0x182600100000f4f8,0x1956317903021a1a,0x4d02021a19280000,0x1920000019186605,
0x19305704a802002c,0x0c6302002c480000,0x002c500000193856,0x1600280001f43712,
0x0001e23712002c58,0x3d00002c60190028,0x002c681900280001,0x0400166013013e00,
0x001200013f02013e,0x014002013f197826,0x029e19882a001600,0x9e19b8000019706f,
0x19902f004e000f02,0x982c0060000f029e,0xa02c003a00029e19,0xa82b002800029e19,
0xe82b002700029e19,0x040015a813029e19,0x19b066028a0001aa,0xfa01029e19f80000,
0x6a029e0300140812,0x029e19e0000019c8,0x9e19d8000019d06b,0x9e19f02b00110002,
0x029e090015e01302,0x04029e02002ae81a,0x00a4091535090015,0x082f001100029e03,
0x260023000e029e1a,0x4f0bfd0101ae1a10,0x2100003ba000001a,0x0001ae05003f3436,
0x8503003c201502c2,0x451a282600110001,0x00001a4706a90101,0x1a5602c101006530,
0x6b0101591a380000,0x301a4800001a5609,0x00001a5b02bd010b,0x2b00110001bf1a50,
0x2b00150001bf1a58,0x2b00260001451a60,0x2700260001451a68,0x5702cf020b081a70,
0x020af11a7800001a,0x0d8800001a4f0509,0x0039000148040701,0x0400270f003d9013,
0x9800001a4702b901,0x00390002140200a4,0x02150200a51ba026,0x0d01870f00169813,
0x000187a81c01ab00,0x10000187b01b0011,0x0010000187b81b00,0x1b0010000187c81b,
0xd81c0010000187d0,0x87e01c0011000187,0x0187e81c00150001,0x000187f01c002600,
0x27000187f81d0026,0x280001871b082c00,0x000e01871b102f00,0x0e01871b182f0039,
0x00a41b2026004a00,0x98170039000e8702,0x1620130e87020187,0x5630400305280400,
0x0305281b5000001b,0x2c4800001b4731b3,0x00001b4702840300,0x1b47028503002c68,
0x017c02002c700000,0x02002c7817002800,0x2c88190028000c42,0x00001b491ef20100,
0x88130f0b00002c90,0x08fa0200dc040016,0x1808fa0200dc901b,0x2a237b661400dc90,
0x0408fa02028f1b98,0x08ce02002c040016,0x002c1c1026001200,0xb00400160408ce02,
0x001bb05702440200,0x570a000200b0d000,0x0200dcc800001bb8,0xe800001bd85700b0,
0x1be05700b002002c,0x0cdd03002cf00000,0xdd01001601008408,0x680f02030084090c,
0x3ac01c5800001c18,0x5000001c46046401,0x2b501909d402002b,0x1600110014060300,
0x6019077602001568,0x0011000efc030015,0x170011000015701c,0x1c4724bf03011878,
0x24bf0300c0980000,0x03002ca000001c47,0x37120b9c1c191487,0x130b9c1ca0290824,
0xd000001c470ccc37,0x16b01300ae02002c,0x4603e0013b550600,0xe00300afd800001c,
0x0015e000001c4603,0xe800001c5803cb03,0x43001933013b271c,0x0d38130082251501,
0x6d1d1800001c561f,0x00001d561f0d0330,0x47063903002c1d10,0xbd03002c3000001d,
0x002c3800001d4733,0x4800001d47063d03,0x001d4927a703002c,0x4928bc01002c5000,
0xbd01002c5800001d,0x0302ce0400160328,0x1d6800001d5601df,0x001600015e0202ce,
0x09120105381d7026,0x0b701da800001d5f,0x701d7800001d5f10,0x1d8800001d5d100b,
0x1d9000001d5d0b70,0x1d9800001d570b70,0x001d57188401058c,0x188301058c1dd800,
0xb201060604001503,0xf21de800001d5603,0x0014a81800ce0005,0x001db06a00667212,
0x1db86734931dd000,0x2f0108d21dc80000,0xd21de000001d5706,0x0900150316ed0108,
0x8d02002ad81a2e8d,0x090b70090015042e,0x001d5f0b700400a4,0x1d470f0b701df000,
0x1e420100e0f80000,0x021a1f1800001d56,0x00001e106600b902,0x6600ba02021a1e28,
0x002c1e2000001e18,0x00001e3057032002,0x385704bc02002c48,0x1a03002c5000001e,
0x002c5800001e472a,0x6000001e492a1b03,0x001e490f9801002c,0x030f9801002c6800,
0x03d002013e040016,0x013f1e7826001200,0x882600160003d002,0x706f06ca00029e1e,
0x100b701eb800001e,0x0b701e9000001e5f,0x701e9800001e5d10,0x701ea000001e5d0b,
0x9e1ea800001e5b0b,0x9e1ee82b00270002,0x029e040015a81302,0xf800001e5a0de601,
0x030014b81815711e,0xe000001ec86b029e,0xd800001e5b37311e,0xf02b001100029e1e,
0x090015e013029e1e,0x9e02002ae81a029e,0x090b700900150402,0x001e5f0b700400a4,
0x1f5a0f0b701f0800,0x1000095c1f100000,0x010b09e91fa02f00,0x1f2000001f57029a,
0x001f56121b0109e9,0x05350101451f2800,0x02131f3000001f56,0x3800001f56121701,
0x1f4702bf0101591f,0x14d901008d480000,0x01bf1f5000001f5b,0x01bf1f582b001100,
0x32701f602c001500,0x01451f6800001f5b,0x09e91f7028002600,0x7800001f5819b701,
0x1f5f19b80109e91f,0x010a09e91f880000,0x1f9000001f5f12a4,0x1f4619dc010a09e9,
0x403312007a980000,0x1420a02600390016,0x0016981316400202,0x00001f5c0e0b700f,
0x00001f5b0b701fa8,0x00001f5b0b701fb0,0x00001f5b0b701fb8,0x00001f4b0b701fc8,
0xd82c0010000214d0,0xe000001f5c0b701f,0xe800001f5c0b701f,0xf000001f5c0b701f,
0xf800001f5d0b701f,0x0800001f5d0b701f,0x201f02a8000b7020,0x180000205f0f0b70,
0x000020560f0b7020,0x00068a0201872020,0x0202018798170039,0x0528040016201304,
0x000020306609e402,0x4719cb0305282050,0x5002002c48000020,0x2c68000020585709,
0x0020605709500200,0x472a6003002c7000,0x6103002c78000020,0x002c88000020492a,
0x900000204919f901,0x0016032a3701002c,0x901b01810200dc04,0xdc901801820200dc,
0x1a2a373364663300,0x16032a3703028f20,0x00021802002c0400,0x02002c2110260012,
0x00b00400160403b5,0x000020b057177102,0xb85617710200b0d0,0x391200dcc8000020,
0xe8000020d8560313,0xe05703133912002c,0xb902002cf0000020,0x0016010084e81803,
0x130084f01a03b900,0x380000214747cc39,0x00214747cd03002c,0x470b8703002c3000,
0x0802002c58000021,0x2c60000021505701,0x1700280001080200,0x2800010802002c68,
0x046901002c701900,0x01002c7800002149,0x0160040016030469,0x901700120007bc02,
0x00160007bc020160,0x21886f0a0221982a,0x000f076421d00000,0x0f076421a02f004e,
0x076421a82c006000,0x076421b02c003a00,0x05a521b82b002800,0x05a521f82b002700,
0x6a0a02080015b813,0x0a022210000021c8,0x6a0764030014d018,0x076421f0000021d8,
0x6421e8000021e06b,0x6422082b00110007,0x061f090015f01307,0x04061f02002af81a,
0x2208280764080015,0x00110007640300a4,0x23000e076422182f,0x8b011d6322202600,
0x1a23380000225639,0x0022306601ee0202,0x01ee02021a225000,0x183c480000223856,
0x0000224727823913,0x2247278303002c68,0x048202002c700000,0x02002c7817002800,
0x2c88190028000482,0x0000224906ca0100,0x160306b901002c90,0x0000840201680400,
0x84020169a0170012,0x9e22a82600160000,0x0022986f19000002,0x4e000f029e22e000,
0x000f029e22b02f00,0x00029e22b82c0060,0x00029e22c82c003a,0x00029e22d02b0028,
0x13029e23102b0027,0xd8100a02080015d0,0xe0180a02231a01be,0x22e866029e030014,
0xf600029e23080000,0x22f8000022f06b00,0x23182b001100029e,0x090015230822029e,
0x02002a231029029e,0x029e08001504029e,0xb3761200a4231828,0x9e23282f0011001a,
0x0023000027000a02,0x0014001fed233026,0xda6612029e233027,0x8f23482f0010001c,
0x0024000028000b08,0x001500088f235027,0x0101595817001100,0x23600000235a2816,
0x6d68170010000227,0x2a00100000140001,0x2b00100020b62370,0x2b001100088f2378,
0x2b001500088f2388,0x2b002600088f2390,0x2c002600088f2398,0x2c002700088f23a0,
0x2f002800088f23a8,0x0039000e088f23b0,0x4a000e088f23b82f,0x2e5a03007ac81600,
0x0228243026003900,0x040016c81303b502,0x2356072f381203b5,0x381203b523f00000,
0x65e800002347072f,0x0023f86607870204,0x078702002c241000,0x1f24180000240867,
0x8524102707880241,0x19279c0100170200,0x012d303122008624,0x002e600000244858,
0x5800002448170a03,0x00244819b003002e,0x58018802002e7800,0x02002e8800002470,
0x2e9018002a000337,0x1a002a0003390200,0x244a0b5301002e98,0x0b5401002ea00000,
0x7502016a04001703,0x016ab01700120009,0xb80000245a12c503,0x000024a86f02a024,
0x004e000f04c724f0,0x60000f04c724c82f,0x3a0004c724d02c00,0x280004c724d82c00,
0x270004c724e02b00,0xe01304c725202b00,0xb2e8100765080015,0x14f0180765251a01,
0x0208f81004c70300,0x0025086b04c7251a,0x00110004c7251000,0x15181304c725282b,
0x002a201a04c70900,0xc70800150404c702,0xc70300a425282804,0xc725382f00110004,
0x2548260023000e04,0x002557048b014a20,0x09ac03021c266000,0x021c257000002557,
0x680000255709ad03,0x2548098203002e25,0x079502002e900000,0x002e980000258858,
0xb000002548071203,0x00170316ad03002e,0x25470b1103014204,0x038a020143c80000,
0x0da725d02b001600,0x027826080000255f,0x0000255f06d6010b,0x06e9010b027825d8,
0x027825e000002558,0xe800002558024d01,0x255b024e01027825,0x2700027825f00000,
0xf013027826302b00,0x98f8100278080015,0x2608270278261a01,0x26106b0278030014,
0x265b497b26280000,0x1100027826200000,0x2813027826382b00,0x2a301a0278090015,
0x0900150402780200,0x09dd040090082a4a,0x09dd26502f001100,0x842658260023000e,
0x027826170261014c,0x2f001100239f6613,0x0024000f07402668,0x001100074026702b,
0x001000074026782a,0x00100004a026882a,0x001000074026902a,0x001000074026982a,
0x00265b1e8526a02c,0x001500074026a800,0x002600074026b02b,0x002600074026b82b,
0x002700074026c82c,0x002800074026d02c,0x39000e074026d82f,0x000e074026e02f00,
0x3412007ae816004a,0x2758260039000584,0x16e8130572022c0b,0x670af60203b80500,
0x03b82718000026f8,0x00002708580af702,0x2058076f02002e10,0x7002002e30000027,
0x2e38000027285807,0x0089271726690300,0x1703266a01001702,0x02ea260466e10f00,
0x4b4d0c0b6f030049,0x65025c590b0b7003,0x0b0e64025c590b0e,0x15014b4f341f4b4f,
0xda034d0a064b4f34,0x004ded024b4f0b47,0x1b00ac00f02d4b4f,0xb01300ac034db2a8,
0x4fd01b5aba084df2,0x5a011b4b2705144b,0x3364214dc7e81948,0x11598300f0294b65,
0x150015f81a4b6633,0x1300e920184b5134,0x9900002a094ddf12,0x52d1060015201348,
0x7d303225004b7c0f,0x0d051f03002c064b,0x362f4b7d071d4b7d,0x4b7d041f034b7d31,
0x5c02134b7d051f01,0x0b50d7024b7d0b0e,0x4b7d0a4893034b7d,0x58024b7d0b5afd02,
0x0b1d57024b7d0b1d,0x4b7d0a00373e4b7d,0xef024b7d0b00373e,0x0b30ee024b7c0b30,
0x4b7a0a00393e4b7b,0x03004b790b00393f,0x464a034b790b464a,0x790c24f7024b790b,
0x2f4b790a2363024b,0x791a132b4b793136,0xac0013535628194b,0x393343002bf8165b,
0x1014282b4b911b00,0x4ba5044e1f031259,0x5503001408064f01,0x5503702a0010002a,
0x0a4b14000010002a,0x4a24004afa004b10,0x4a3603a02a4b100a,0x024ab8c81b1a1302,
0x03f8284ae4001a13,0x4a8e0b0817014ae4,0x20284aa4004eca02,0x0a4aa404134aba04,
0x2c041a0808014aba,0x064aa4033b3a0300,0x4aba09186c014aba,0x164aa40013549800,
0x1c00303443001648,0x222bad14282a4aa4,0x134ace06490d0460,0x4ace04e0284a7904,
0x4a0549b8080e4801,0x4a04c82c4a390045,0x4a04d82c4a220045,0x4a04f02c00280045,
0x64722449fcd81845,0x173103002c0b1ed5,0xf018454a02002c0b,0x16f813454a054aff,
0x49ff0013559e0600,0xe600132c9f052026,0x8a35702201060549,0xde36702249fa080b,
0x253264060005255c,0x1549b9002d1a3372,0x0005293412001558,0xaf020015681649b8,
0x33d8020015601a08,0x881317310549b809,0x49cb0017310a49a4,0x002800173105a02c,
0x002800173106082c,0x05c829168106102c,0xced0181681036040,0x0058e81a16810548,
0x120058f81a168103,0x48e406082208e439,0x160302ca01168106,0x4540540303e00400,
0x3412001630000006,0x153816001100040b,0x612d061802c80300,0x2c48fa1d00367343,
0x0006586c16d61428,0x48fd0916d6066800,0xd82c00280016d605,0xe02c00280016d606,
0xb82c48eb0016aa06,0x014969a01816aa06,0x58b81b04270014a6,0x0300580b04270300,
0xbc0a625b061241e9,0x3312627106e02914,0x0708250012003106,0x49720002c802011c,
0x00015b0200151016,0x3440613c18164971,0x32071802f31e0031,0x00075c41c6341301,
0xd64813152707f800,0x2c49440015270a48,0x2c494400117207b8,0x492e781311720798,
0xc82c00280011720a,0x7207492e04117207,0x23002d0a103b0111,0x03002e0c102a3031,
0x07e80000075d102b,0x4b040017d0131172,0x16495e000f100201,0xf0180015020136f0,
0x00064a317022010b,0x0200150808250011,0x1261af080828064b,0x6305611d00040134,
0x090b092a35722364,0xde08482211f10361,0x2d49870011f10b49,0x2d4a1e0011f10858,
0x0b49890411f10878,0x0fd50b498a040fd5,0x0617002e07498b04,0x121f01002e07498c,
0x8d042ef60549a308,0x056195092ef60a49,0x0b382c0028002c84,0x02443508b0272c84,
0x1700497c061e105b,0x104400497d071e00,0x1e001700497e061e,0x800a0cd105497f07,
0x2f49810a0cd10549,0x37302f0361c83031,0x13135c3212014983,0x07132a1f0661df20,
0x1413002c30190016,0x00002c0e182861df,0x22421709302753a5,0x620a381a09633572,
0x06490548180ed102,0x09902d4959000d81,0x8106494770180d81,0x8109f02d002a000d,
0x0909f82d002a000d,0x58090b4a24b81358,0x02002e054a50c813,0x3112005ce01b10e0,
0x3215005ce81c1836,0x15002e0a082748fd,0x002e0a102948ff32,0x002e181a49000813,
0x0600170049010913,0x0a1862c906142a2e,0x2c06491807172a2e,0x0e10284919161300,
0x1016491a1713002c,0x000a45069b030196,0x103f3512009b3800,0x0200b0b818001100,
0x170249b060180219,0x002e054934071700,0xf81848e0003bab02,0x489f003bad02002e,
0x8a1813002e0b0829,0x1913002e10a02948,0x03002e10a8274875,0x170116486003035a,
0x8ad8186353071300,0x03008a0c035a0300,0x673715008a0c035a,0x3715002e0b102748,
0x5a01002e181a4869,0x002e2000000b4a03,0x0600170048830913,0x1606488506172b16,
0x00488709035a012b,0x5828489d06132b00,0x28489f07132b160b,0x002ec9012b160b60,
0x5b012b160b186385,0x4d0d0b1f63c70023,0x0d0b6800000b5f15,0x0d0b1c487500154d,
0x4d0d0d1c00b1004d,0x5b4d0d0d1b00b000,0x304d0d0ba000000b,0x4d0d09644b00000b,
0x5b4d0d0c1c00d600,0x1300660ca800000b,0x00134d0d0f0015c8,0x03154d0d0b1f650a,
0x49b7004d0d0a49e5,0x48130b174d0d0c1c,0x7800000b4c4d0d05,0x0d0b0015f813002a,
0x010c8800000c5c4d,0x4d0d0a001610133e,0xdd034d0d0a49b203,0x00000c4c4d0d0a49,
0x0349db3013002a48,0x4913000bbe020be9,0x0a4996034d0d0c1c,0x4d0d0549ab084d0d,
0x034d0d0301960c19,0x64fd004d0d0b0015,0x0b0016034d0d0c1d,0x4d0d0400810a4d0d,
0x05004d0d0400820a,0x0016034d0d0c1d66,0x0d03002c0b4d0d0b,0x0b4d0d03002c0b4d,
0x002c0b4d0d03002c,0xd800000c5d4d0d03,0x24034a850b4d0d0c,0x4d0d0649d50c170b,
0xef004d0d09001603,0xe80cf829025a0c01,0x0349e7094d0d0349,0x4d0d094a95034d0d,
0xa7084d0d03001409,0x044a8f084d0d044a,0x4d0d034a770b4d0d,0xc81800ce0d493400,
0x0d5f0e4d0d0f4973,0x00143e010df80000,0x2d500a4993000056,0x2d500206f80df82a,
0x2ade0e102c49bb00,0x2ade0208ba0e102a,0x52ed034ad10e1029,0x0452ed0348e4181a,
0x08bc020612050016,0x0206120e1749a601,0x2e381849a80008bc,0x18497e0008bc0200,
0x800408bc02002e60,0x180eb6025e760549,0x0717001702008960,0x01e50207c5034984,
0x0200159816675e00,0x41004985981801e6,0x0249320821590300,0xc818495f05130017,
0x498b0838c803002e,0x0048dd051c001702,0x000e4823ae030017,0x48b33315002ef800,
0x02d801002e0f0829,0x01002e074b920e12,0x33134ba90f1902da,0x3313490d0f1923a1,
0x3325490d0f190f99,0x272210d82c490d32,0x012503471f0f2022,0x3000000f553f9903,
0x230011470200150f,0x09970200b0481849,0x0017011648e85013,0x002e601849130713,
0x011648ee0403b602,0x48f1080e57010017,0x2a00080302001700,0x080402002e981800,
0x01002ea01a002a00,0x002e0a681c0062e1,0x040fa828688b0913,0x1868750057cb0128,
0x280016071328040f,0x581cc70128040fb8,0x01280410d000000f,0x00860500160325ea,
0xe81868ce00091002,0x68d8100910020086,0x6716230200b40801,0x002e100800000ff0,
0x101849eb00162502,0x49ec004f0802005c,0x004f0902002e1818,0x5f01002e201a002a,
0x002e024a30101735,0x8806001703356001,0x1030284a1a081327,0x2c064a3009172788,
0x13a8284a19141300,0x59064a191513002c,0x4a18000f3e35126c,0x0f3e3612009b5015,
0x0300b06017001100,0xb088174a14005726,0x184a410057270300,0x101a673203002e78,
0x10982a2ace030b30,0xa01a0c6a33120b30,0x000c6a3331224a32,0x0a13002eb81a002a,
0x3a00002ec81a69fa,0x2624060017b81301,0x02021e084a610813,0x22f3060016040276,
0xf310f0284a770613,0x10f82c0016071322,0x11682c03ac0021b5,0x0f499b10e02221b5,
0xd40f4aba04120ad4,0x5f910a4ad104120a,0x005f910a47181112,0x30100ad4121a48ff,
0x38180ad4111a6a82,0x1150220ad4034a5d,0x4a9800006609487e,0x001560130066481c,
0x0f4a9c04120ad40f,0xab0a4ab304120ad4,0x48ab121c4a860048,0x002a12a00000115b,
0x13002a181c4ab000,0xa0100ad40a001598,0xa8130ad4121c4be3,0x4af00a48ab0a0016,
0x36154aef0a48ab03,0xd019002ae01c4aee,0x4a7d0048d5024bf5,0x2b00110048d5081c,
0x001510130ad41230,0x01961218290ad409,0xd40a0015040ad402,0x0a0ad40a4ad3040a,
0x81281a0ad4044ae9,0x0a0016040ad40300,0x12502c0012000ad4,0x0ad40a0016040ad4,
0x040ad402002c381b,0x2c481b0ad40a0016,0x0a0016040ad40200,0xdb0b4b03501309da,
0x002c780000124d47,0x13002ce81d002800,0xef000ad408001678,0x028000025ac81c4a,
0x4a71a0194b2f181c,0x02003eb0190ad402,0xd4020014b8190ad4,0x0ad4084b00c8130a,
0x190ad4121a6daa01,0x7d0000ce0400a2e0,0x13602949a3881d4c,0x88270b0ad40f4be9,
0x270d0ad40f722c13,0x56296614726f1390,0x0aa802066e13982a,0x211305066e13a027,
0x21130574d713a827,0x31642374d713a828,0x1373fc13b8290803,0x73d113c829080431,
0x184ddb0008053113,0xe828080602002ef0,0xf83331643374c513,0x010017020089080e,
0x1f8d0200170a0efa,0x1fb70978be144022,0x2a0b1ff609001504,0x0400150a20200200,
0x1d7d0300160b1c0f,0x150b1dbe0200160b,0x0200810b1ff70300,0x0324d914682800ab,
0x00ab0900150400ab,0x150a00ab02002a0b,0x0200160b00950400,0x00950300150b0095,
0x681808630200160a,0x157018482c044b65,0x78023702f9701100,0x48a738702271d014,
0x01617a0172241417,0x4a9d000014300dcd,0x2c4b060513619006,0x0014e86c61901530,
0x14f0286190151000,0x00280012d3047165,0x12ff016164153828,0x1b61640571d21517,
0x301b616402002c28,0x602c4b333815002c,0x060016481360e415,0x7e074b33001372aa,
0x4b33180032344372,0x4b0600495c26482b,0xdb981a612516502c,0x28723e006125034a,
0x5814a70160f91610,0x0160f915e8000015,0x5b9d034b070a08f0,0x9d0a4af500002800,
0x9d1620280028005b,0x002c161a06c5015b,0x002c16102a044002,0x38284b4900064402,
0x004b4905135b9d16,0x1d00137385060016,0x0ac4014a4e48184b,0xc739702201071617,
0xd83170214b460808,0x166027001102100a,0x78274b3100134a77,0x1e08657b01495916,
0x0015881a4959044b,0xa02c00110001af02,0xb82c4b36005c4516,0x000016b06c5c4516,
0xe216b8295c4516c8,0xe216c8295c45034a,0x4b2403162933134a,0x284b4f07135c4506,
0x0a02cd015c191720,0x4b3a0b0acc034b3a,0x17502c4b3a383325,0x7606001630135c19,
0x000017570c1e0174,0x4b4f0013401d1758,0x4e0013401d176027,0x100174a01768284b,
0x6f19080000175c04,0x5c6f0a4b7a78135c,0xb717980000178868,0x17f8284b7a041356,
0xba004b7a051356b7,0x4b23b81356b70a4a,0x000017c86c56b70a,0x0058e01b56b717f0,
0x150058f01b56b702,0xb70a4b12004b3a33,0x7c06001618082256,0x1828274b3a031375,
0x30274b3903134125,0x4e092c6c01411018,0x4b381913418f004b,0x4b2200570d26482c,
0x4b2204570d18602c,0x0a4a2c6013570d0a,0x73014a7e6818570d,0x18b0284aa9061356,
0x4a5a080b40015689,0x580b65e801567301,0x0058c81b02640200,0x0a4a1fd013568902,
0x98024a35d8175689,0x7372324a24031c76,0x58004a26001b8c33,0x004a260451290648,
0x4a26045129064a10,0x2bbc015129192828,0xbd01001602495007,0x00512905493e082b,
0x18512919702c4a10,0x061350fe0149ce58,0x023a0200580849d0,0x2800511405499609,
0x9813511419b02c00,0x049d0200f2040016,0x13429c024a28b017,0x3421077c0749701c,
0x130016c819219a33,0xb2004949086dee32,0x49350f4934031e42,0x350218055b701200,
0x2248e70972040549,0x47f020130af23272,0x05486e481851d40a,0xd4064859501351d4,
0xd41ab828486f0451,0x014790080b9c0151,0xa828480b061351a9,0xe4080b8a0151bf1a,
0x47fa061351a90147,0x580b688d03005808,0x1ae02c47fe381500,0x9c040016c81351bf,
0x47d8e01806240201,0x47d8e81324e07213,0xf018062402001503,0x00353373726347d8,
0xe10337560647c21e,0x252347d71b082606,0x2901479e09057272,0x06475c0361a10152,
0x382c47880513523f,0x602c479a0051461b,0x460a47880451461b,0x0451460a47880451,
0x880617002c064788,0x08142e01002c0647,0x4787042ddd04479e,0x054770881b2ddd09,
0x262ddd1da02b479b,0x4b72252344601b98,0x0095a81547570006,0x2c00110012be3312,
0x2c47520051f01bb8,0x28477e0051f01be0,0x4740081351c41bd8,0x091351c40646d900,
0x51c40646da004740,0xc41c382847410613,0x2347410907660151,0x00581c1a5eb03664,
0x0200581c1a6e3703,0x516e0647590402e2,0x16004745091cd801,0x2c7819475b081300,
0x646623475c091c00,0x1c8800001c5752cb,0x90180015071330bd,0x702747851413002a,
0x0647841513002a20,0x99091d2f33133e34,0x47820a1d30331347,0x4756b813038c3612,
0x820906300151ec06,0x475806134fe80047,0x07134ffe06465600,0x4ffe064644004758,
0x3612472c0a1ee501,0xd20a471618131578,0xd20300581d30294f,0x372200581d48294f,
0x013a601d176da130,0x600547001713002c,0x470206134b02013a,0xf007174b021d7028,
0x46de0817002c0646,0xf40a745d01002c06,0x46f3881a02610246,0x351546f20b026002,
0x0a12f81db82c46f2,0x012f005ba10346a2,0x1f485a005ba11e1c,0x470db8131414ba1e,
0x4776c8191214ba0f,0x420d1dd022145403,0x420e1dd828145409,0x082a46ac0014ba02,
0x980000100014ba1e,0x43e51e183a840946,0x101c46b900006603,0x0f44741e28280066,
0xba0f46e9090c14ba,0x722d054700090d14,0x12722d0a44181e12,0x5813002a0944181e,
0xda6018002a0945c5,0x4641681b14ba0545,0x2d4642701914ba02,0x0b01ee0546d53664,
0xa81c46c1361546c2,0x468600002600002a,0xd02b466e001f8e08,0x094607d01314ba1e,
0xba03461cd81914ba,0x14ba020196e01a14,0x850b14ba0a001504,0x0546860914ba0346,
0x14ba0a46880414ba,0x9f0014ba04469e0a,0x160414ba1f182c46,0x2c1f082a14ba0a00,
0x0a00160414ba0200,0xba02002c101b14ba,0x0364ff0b00160414,0x85181913c00a4683,
0x0a4550035dbb0546,0xba0245664819002c,0x025a09460a581314,0x19028402452a601a,
0x480414ba02452a68,0x0014881914ba0846,0xba024649090ef803,0x14ba034609981814,
0xbe0863450546080a,0x00002030757f0644,0x3f001214ba0f44ac,0x041414ba20602f00,
0x01041772a5054502,0x0808e80172a50545,0x7018322966134516,0x150432296613440d,
0x44bc881850dc0a00,0xdc0544e80950dc05,0x20b8000020a86c50,0x37124490b01a50dc,
0x20e02844a6000607,0x001603055a01502c,0x082c44e400002c0a,0x090016d813002c21,
0xa50200dae01a72a5,0x6dc90500dae01872,0x186dc9050056e818,0x000cb772130056e8,
0x30020015181644f7,0x0a44e8000011000b,0x21502c44f60050d8,0x21482c45220050d8,
0x36372f44e40b50d8,0xe40b5044030144e4,0x1900280050440344,0x0144e4061c002c88,
0x902844d007130016,0x982844be04049021,0x0a44d40517049021,0x41be000028006ceb,
0x428a21a0266ceb0a,0xd70360f233722533,0x5860f30301320344,0x1350f221c8000021,
0x50f221e828449a06,0xf221e028449c0713,0x1601154474061750,0x2244dc0644600400,
0x444d0813140c3864,0x3c0836b401509c06,0x44520813002c0144,0x44540913002c2819,
0x12006dc5055c6405,0x006dc50a44580000,0x13056a2238280016,0x056a22d028448006,
0x7213434008382101,0x150344ab48132f97,0x00002258129c0300,0x447e0813514a2260,
0x7e0913514a228828,0x081c511e22782844,0x3e09130016014452,0x081b4f3022a82844,
0x1a091c001602442c,0x441a0a1c00160144,0x28441a0b13001601,0x0b1eb201064422c8,
0x46c81b1fec020106,0x284432000c280244,0x28444804054a22f0,0x444a0413688f22f8,
0x0513688f0642cd00,0x151eb223702f444c,0x09131eb20f446503,0xc223121eb20444ce,
0x0000235a1eb20a40,0x0344040a09f824f8,0x1eb20443dc081eb2,0x001eb2241c43b300,
0x15601300660c442d,0x43e203131eb20f00,0x0a43fa03131eb20f,0xb20a421a23121eb2,
0x0bba03420123191e,0x9827002a0c455300,0x6a001eb206431123,0x0016031eb2241d45,
0xb20a43d6031eb20a,0xb223d00000235c1e,0x002ae00000234c1e,0x5b1eb20343bdd019,
0x2909f82408000023,0x081eb20344282408,0x9624191eb20543a1,0x0b0015031eb20301,
0x24280000245d1eb2,0x1eb20b0016031eb2,0x820a1eb20400810a,0x0000245d1eb20400,
0x0b0016031eb22450,0x1eb203002c0b1eb2,0x2c0b1eb203002c0b,0x03002c0b1eb20300,
0x24700000245d1eb2,0x1eb20b448e031eb2,0x13002ce80000244d,0xf3031eb209001678,
0x0a434e031eb20a43,0x1eb203439f091eb2,0x14091eb203003e09,0x034431091eb20300,
0x1eb2044419081eb2,0x255d1eb20500a209,0xe2031eb225880000,0x42f803131eb20f42,
0x00002558131eb20f,0x430d06136cbb25a0,0x16016cbb0641db00,0x0454e80a00160301,
0x39b81354e80a430d,0x0542bf0954e80a43,0x4faa0142bf0954e8,0x0642730042c00813,
0x102c42c109134fc0,0x201d42c300002c26,0x6b0542b10818002c,0x6b0200dc26102a6d,
0x8f0500dc2610276d,0x8f03434426182968,0x0100840600160468,0x008401002c08301a,
0x850200160a07c601,0x041e85054269081e,0x002a0b1e85090015,0x010400150a1e8502,
0x0b1e9b0300160b1d,0x00150b1e9b020016,0xab0200810b1e9b03,0x00ab04429b801800,
0x2a0b00ab09001504,0x0400150a00ab0200,0x00950200160b0095,0x160400950300150b,
0x00010029a7490f00,0x0624700304a74d0f,0x8e9d098fc1043fd8,0x4f0d12ce028fc10b,
0x081d009dd9071f8e,0x41280a4733038fc0,0x06138fbf0d003d02,0x8fbf0b8f430d8fbf,
0x009c73681f00a602,0x009c73011e9f4c01,0x4f981b40fa098f47,0x5b201b422100138e,
0x009d5b0241620a9d,0x179d5b01402a4160,0x0317a8060f8f9440,0xbc581f9fbc0a195e,
0x1f019150501f019f,0x9fbc401f01915048,0x301f019fbc381f01,0x180015281c019fbc,
0x3b00003f04432028,0x7e381c9f93781b00,0xbcc01c01cf07139f,0x0901590000b80000,
0x31159070501a9f93,0x0b012501002b43cb,0x9fa8040125029048,0x581b002500020e08,
0x7c0443dba018020e,0x00bb040237b01800,0x00909a0200a6c019,0x9fa7094335008f54,
0x0091b802010dd819,0x1000024c881ba2ad,0x00a3010014981700,0x271ca9990f42c603,
0x0702390442900a09,0x902c02393915034c,0x1591ee001b9d7c00,0x413e007828023b30,
0x0016701900160e13,0xbc00682800160f13,0x750200460c0c1f42,0x0c09a10302bd0b09,
0x1602ab39382902be,0x00047b091f001701,0x1028028423003533,0x0502862213001603,
0x1901994366133aab,0x00313400150215a2,0x321200150602712b,0xf105435600179e16,
0x1d02702c00ed0000,0x49043cbd00702801,0x7501702c92e60001,0x01a0030224881901,
0x2801ca09024e9013,0x13011b0541110098,0x0827011b0b049df8,0x200050534302a501,
0x1302f7039826462c,0x920d03a02a04c821,0x920d002e29462801,0x2200a80400143818,
0x199fae0a00930150,0x26c731642202e370,0x002c0660fd017822,0x1a51f01502fb1d13,
0xe828a32e001bad03,0x011942c101440906,0x0016040ff2033fe2,0x902c4643009e9d0a,
0x730a0016049e9d06,0x9f0aa90b01d82202,0x0002cb0a00160402,0x1745870630284647,
0xad0200c50300160d,0x06416e00461e003e,0x34201099380099e6,0x3530130016021845,
0x1d9a80018b560546,0xad01001600463628,0x081f051845cb00a2,0x5028467300002c00,
0x2846623213001602,0x466228139b300550,0x6233130016026028,0x02e10201cc781746,
0x255d07f028a1f900,0x0000029068004200,0x4679381300160298,0x002b000338082027,
0xa2a1336622467a09,0x0377085027001100,0xb818037300002a00,0x0011009cfa00038c,
0xa265281303b67818,0x02d02703cb02d02b,0xe5281745a4018888,0x1629130016011546,
0x1214002c02e82800,0x1314002c2e1846fc,0x580024db2e18a2a8,0x3832434712f01a00,
0x306e481747120200,0xd828929000049002,0x30109da80027be08,0x411344f60718a228,
0x1346280760289292,0x4796072828475642,0x02a3f017926a4313,0x4613089255280023,
0x040015881300f001,0x2207a2bf3415219d,0x40981a0424321191,0x40a0180425321100,
0x2892a4008ff60300,0x47562a1346fe03b0,0x1b05520046fe0819,0x402a0039374782f0,
0x402b130016011547,0x2a1e46be04282847,0x100b9c9c32129210,0x92104a0030324e92,
0x19476c4b00303243,0x28476c2a1346ea40,0x00162b1746ea04b8,0x064742501301300a,
0x7828479a4a134700,0x6822006e00470004,0xff00a0fc0a931704,0x9013a0fc04982c91,
0x002c002aba06923f,0x002c3411009a981b,0x47b02a13009aa01d,0xb604d02800b0d81d,
0x0014d8180f6d0201,0xf02c41af00279304,0x415208f027277e08,0x2850102134737223,
0xa3060927bf091b8a,0xa30709748a317223,0x78280011004c9903,0x09580faa012b7a09,
0x05132b7a09c80000,0x298cde09e02c410c,0x008cde033f3009e8,0x261d063f1c0040ae,
0xe9048956080ba501,0x142f321340270a24,0x110024bf09896b03,0x3b008d070a582c00,
0x1a8d070a3fe30040,0x3fdd38322f406868,0xe82c3fdc38322501,0xf02c0028002b8e0a,
0x060016e8132b8e0a,0xf82b3ff0001326e0,0x093f51081319a20a,0x1c063f0d081319a2,
0x1c0b48283fbe0414,0x33881d0b0fa40114,0x1378283fa8180030,0xcd053fa81913002c,
0x0a3fa804868f05a1,0x380f3ea75013868f,0x380f3f9104170e16,0x782b3fa905130e16,
0x098948701395650b,0x2a901c0026009565,0x958f0a3fd3881300,0x0016620887530b12,
0x10003fe8a81b3fd4,0xb82205150bb82a00,0xc8290066093d360b,0xd0130066023d770b,
0x06170e16620f0015,0x05010e16620f3fbb,0x043fe80289b70a55,0x0bf0223d64093fd3,
0xbd0b193d8e0a8811,0x043fbc0a3d8e033f,0x9a92023f000b9a92,0x041299023f00181a,
0xd309133fbe053fd3,0x3fd304002a381c3f,0x0289ad3819002a09,0x4d00899568180d36,
0x0ca0273fd30a1316,0xa0273fbe0b131662,0x0d0a43d401032e0c,0x3f0c881b0b36023f,
0xf6023fbc0c09f602,0x1aaebe023fbc0c09,0xacb6323122008198,0x3fbc33312500820a,
0x160b1716620cb828,0x410c1c164c001500,0x2c3fbc040016018a,0x002cb01b1a160cb8,
0x12002cb01b1a1602,0x4742eb0c19682236,0x001800160b003631,0x022e0c01c3006a0a,
0x54000258093fa704,0x8a3b093fbc901b02,0x3615003fa835662f,0x0416360d382a3fa8,
0x00100006c9088a35,0x2c3fa6003fbc581d,0x8943d01916360dd8,0x0a3fd2d81300fa04,
0x620f3fbbe01300fa,0x16620f3fbb041216,0x1a1dfa0a3fd20412,0x10191dfa03896008,
0x5f18130470028949,0x4e000c5bd1001f3f,0x180f5bd10e302f00,0x30185bd1053fc628,
0x0028005bd1053ff3,0x1a481359590e502b,0x25892f0868db0a89,0x0889330089823166,
0x2903001460186941,0x0000f6023ffc0a12,0x13760a0e782b897f,0x8818760a09401078,
0x403a045959044025,0xba03404f09595909,0x31762d00a4981905,0x00130459590f89e8,
0x910300e0b01689fa,0x0a20da038a8c092d,0x89a2081fd20389b9,0x40ac001305596f0f,
0x2c5c01596f0ee027,0x6f0a06ae028a3709,0x0440bb0308320389,0x40b8081ba4010184,
0x0f409e0b00a26612,0x0602409c0f02409d,0x182b920f282b409b,0x2829596f05408520,
0x9c08596f038c180f,0x00390008596f0f40,0x000c596f0f40b000,0x1bda0a40c000004a,
0x58191bda0540e909,0xa82f89fb321589d3,0x00000f5f1070ac0f,0x8a23090f03740f78,
0xac0b413404037405,0x0070ac0a41330370,0x150370ac0f1c41fb,0x40bda01303740800,
0x030014a818037408,0x740f1a4112010374,0x7c1c048b19b81903,0x0c087c1c0a40f703,
0x0a41210403740441,0x70ac0441360870ac,0x110003740300a409,0x000e03740ff02f00,
0x3d0200e0f8160023,0x13556503416d0a06,0x181931300a416b10,0x2520182f9403416a,
0x150a646232722341,0x2f410e0964630300,0x3932250041233832,0x29301310582c4123,
0x18985e0389da1058,0x9818985e053fe690,0xb81a443172143fcf,0x40ad004431038b0e,
0xe01b37650a8afc00,0x00580b55a4030058,0xe028406a1a003233,0x2740531b13002c19,
0x4053141317ed19e8,0x53151316f51bb827,0x031330c31bc82840,0x1d2f801148274041,
0x110033d1038ab303,0x160037fb11602c00,0x701337fb11a82c40,0x4106133753063f6a,
0x810137531208283f,0x0a3f1d0000113002,0x5302002cf01b3753,0x703615002cf81b37,
0x1027939812182c3f,0x1818553c05402f12,0x3ed90993820589c8,0x58273ead00938205,
0x273e96161318cc12,0x89f1171318cc1ba8,0x86031354771bb028,0x03132f5612902789,
0x13276e1298273e96,0x37d312a82c3e9603,0x37d305421a12b027,0x6208721489b0b818,
0x377d06af2a131822,0x7d13582c889c0713,0x377d03002c381a37,0x087c9703002c481b,
0xb705130016018870,0x9501541c1360283e,0x0a0df60388860b05,0x89701a93d6033ea0,
0x885e78134f74033e,0x5d082371010b2106,0x3ecc0b0d0ea70f3e,0x2588ba0a0b0ea70f,
0x1713b82b3ee23464,0x002ac81c0026000e,0x002a15982b002600,0x942c04ade913c827,
0x03942c04b31a1317,0xea13127387093eee,0x2b3ed2000066093c,0x2f899900006614e8,
0x141027140ea714e8,0x18270d0ea70fb4b7,0x1417942c0556ed14,0x281418942c053d2b,
0x0588f508942c04af,0x0ea70a001503942c,0x0ea70ab0ee144822,0x0e7d04b104145027,
0x0e7d14682bb86500,0x1a002a098a126013,0xcc0833490389e468,0xb0e81417942c0489,
0x048987a8180ea704,0xa7090015b0130ea7,0xa702019614b8290e,0x220ea70a0015040e,
0x040ea70aafa314c8,0x81d01a0ea70a0016,0x0a0016040ea70300,0x0ab02714d8220ea7,
0x0ea70a0016040ea7,0x040ea702002ce01b,0x2ce81b0ea70a0016,0x0a0016040ea70200,
0x15902c0012000dad,0x0ea7080016040dad,0x4c9400053f163018,0x54000258b8000015,
0x099400093ed70002,0x00043f68351e003e,0x179400098aaf0394,0x1518940004ba7a15,
0x3f630394000500a2,0xfa0a3f0b0394000b,0x00fa0a8a3e101300,0x942c16302f002800,
0x0e942c0f3f380815,0x6c033055063f3908,0x033f270830550b8a,0x330f8a1b50170470,
0x330f8aa95813090b,0x3f7a000060000d0b,0x0a3f8c68130b330a,0x0b33048ad3090b33,
0x180b33093f4c7813,0xa1000b33033f6188,0x180b33088aaf003f,0xa0130b3303001498,
0x00165b2223093fb3,0x0011000b3316b000,0x15b8130b3316d02b,0x002ac81a0b330900,
0xba080015040b3302,0x0b330300a4d01905,0x09080b330f8b6408,0x76092d1d66138b76,
0x001100076266138b,0x0ac9020015170825,0x0ea70f8b76170826,0xa717182b00240009,
0x3e0440791718270e,0x08933e0940770393,0x0010000ea7034075,0x0010000ea717382a,
0x9c48180ea717482b,0x408548180ea70440,0x09408550130ea704,0xa705408558180ea7,
0xa717702c0027000e,0x0ea70f8c1568130e,0xa717882f0039000c,0x2d850a40d3040e0e,
0x2d8517a02c003900,0x170136088c379013,0x030a72b30f8bde98,0x175c0e72b30f8c5d,
0x3a00037417b80000,0xb818037417c82c00,0x18171272b3058c85,0x0800150372b30a8c,
0x03410717d8270374,0x74030014e0180374,0x10d303415be81903,0xa809037409418503,
0x151808220374048c,0x0a00150372b30a00,0x382f04002a0872b3,0xaa0803740441ab08,
0x41bc090803740f41,0x098cf40462756613,0x73148cf3481932f5,0x7f068a81181262b5,
0x068c670041a50442,0x00148ca10517427f,0xd5078c8e1813674d,0x288c8d190035331e,
0x8c3b031348692e28,0xb80313326f18b027,0x0313326f18b82741,0xa10042e9d01d8c3d,
0x0042e90a414d0041,0x0142931930288c01,0xa4341241330a0791,0x42930b8b1748130d,
0x2c0b429303002c0b,0x0a4175032d050300,0x198028002800991c,0xc82741750013616f,
0x48090d3801322d19,0x1519d02999470441,0x1519d8299947030f,0x711919674236120f,
0x2b41481b00363301,0x4341330a32832e28,0x2a058a5602003173,0x89f20800aa661300,
0x038a060a09057b0f,0x0014028a070a057b,0x58190445088a0604,0x966013057b028a05,
0x8a03681a057b0841,0x0e8a02701a88d002,0x89ef08057b058a01,0xd00389dd0b057b05,
0x057b0a8b4e901388,0x040c057b0f41d204,0xf4040c057b0f41e3,0x89c8b0139ab30a41,
0x0289cab8199ab30a,0x7b0f895ec81e0136,0x7b0f4230d0170205,0x31612f8a040b0905,
0x8a0631612f018a05,0x2b424300057b0201,0xec1af827057b1b38,0x502a89f131662541,
0x0300141018057b1b,0x1b302a89dc00057b,0x1b282b426400057b,0x057b04426709057b,
0x04057b0489d83018,0x8a0209057b0989ed,0x0300a44819057b03,0x1b582f001100057b,
0x0342ca58130e057b,0x8a3b0915d10302bc,0x33338a240a681a03,0x0203880742702c00,
0x341389c99019030f,0x382580841b181155,0x7000287036427037,0x2e282b427016136c,
0x1104301ba82911e9,0x190015b01a11e937,0x14136c9a05001534,0x1a13992e282b8a04,
0x1a13993811003fb8,0x14001533190015c8,0x278a2c0413691500,0x42eb2d13b7561be8,
0x1c18024403002a07,0x001100069e038a2a,0x2e002306ca1c1826,0x1347ea2e282c42fe,
0xfe0047ea0a42fe30,0x0b47be0a8a590042,0x42e80b47be0342e8,0xbe1c902c8a433516,
0x491d0342be701947,0x3301bf038a439013,0x2e282842a92f0038,0x01158a00041747e8,
0xc82c42aa05130016,0x28ef1cd82998fc1c,0x28ef1ce02798fc03,0x89d61ce82247e805,
0x89ec1cf02747e80a,0x15001100070c6613,0x3400303943001518,0x0031e02e282c42be,
0x1331e01d282c8a16,0x0a13477e06001628,0x13477e1db02842d4,0x99521db82c42d40b,
0x2899520a42527013,0xc935642345761d78,0x36352587d01d1959,0x13993d1e602c8934,
0x3f04993d0a4280b0,0x88e6c813477e0a42,0x00898cd019477e0a,0x49040288fd0c3210,
0x472a1e202c88ec04,0x88ac39352f88ac0b,0x2f0188ac30362f01,0x472a030188ac3036,
0x13472a0588805818,0xc603009a04001660,0xf97372238896082e,0x469600415c881901,
0x0016011587cc0417,0x0146960187ce051c,0x00160140f4080266,0xac06877d07026601,
0xac0a405a1ef82246,0x981a054070081846,0x18981a0a85981013,0x7300002c0585ae18,
0xc82819002c481d87,0x8724350039384340,0xe4681346ed2e282c,0x8710701346ed0a86,
0x1f1c86ac0146430a,0x464305407b094643,0x1946430200c5a01b,0x36003139438673a8,
0x0b13020b3d088660,0x2d0185f60485cf00,0xe0721385bd031c6d,0x0b67020015181a01,
0x6c2620282740e700,0x2120302640e60313,0x85d137003731430a,0x0ab9347322842f06,
0x0a00157213408f09,0x15781a057503858e,0x00858c094e650200,0x7343408d031d6b1d,
0x2e2827855e3c0035,0x40e309096e016912,0x2b405f006bb17313,0x408ad819692820d8,
0x03404909012a3512,0x24038543e8187224,0x00bd0200fcf01b72,0x1367fa09401b4813,
0xe001604a05851450,0x2901530585130913,0x1800ff0301d42160,0x031d6077008458a0,
0xb018016835123f80,0x093a357372328456,0x0073722383f2b818,0xa735722383640901,
0x7372233caf221777,0x2258273ea5000116,0x0014834e03175d89,0x00150a0d24015d89,
0x00033eb80a215003,0x0a3ea6003ee00099,0x49020a3ece049900,0x1949020582019818,
0x760093d8048254a0,0x600993d822e82c3e,0x9c22e82742fc053e,0xb422f82742fc053c,
0x0a827004002c053b,0x02008423102a002c,0x28063e0a18130a83,0x4d3e2008406e0143,
0x254e822634357372,0x36723e8213323672,0x3833023500821333,0x020235083e3a3d00,
0x420381b190130262,0x80572318709e0300,0x3d62c818024b7313,0x62d0130040367222,
0x1a04e1020015033d,0xe0130275020015d8,0x34081e43d306814a,0x81340aadf4371381,
0x083d7b0017823712,0x3b18181782020187,0x3d9220184353053d,0x233d932818435305,
0x223ccd09030f7372,0x13815b0a040d3672,0xc40581870302cd36,0x59241a02cd3e10a0,
0x0181110900400201,0xfc063ca23f13a060,0x8080d81903b90308,0x5508806a44003633,
0x1780580000800200,0x45003931430055f8,0x7fdf0e005607805b,0xcd46003239662563,
0x3725004126a8247f,0x4e043cc1007fce30,0x2a3cd3470035332c,0x7f06d01374be2e28,
0x057ef2d81874be08,0x730b7de518139173,0x173c8b017dd40891,0x50043c8b067e6406,
0x381b914726482c7e,0x00580b191c030058,0x4b26702c7e423615,0x73724e7e0758188c,
0x3339723e7e083336,0x7e09095781037e09,0x0157269028578104,0xba007d2800756e04,
0xe326e022756e0a7c,0x120f0801756e067c,0x0713756e067d1026,0x2a756e27082c7d3d,
0x29756e0200582718,0x056a391200582720,0x756e2750287d3a00,0x312750257d390513,
0x097d370304380302,0x0302882758280231,0xa800002760668b94,0x905504a202014327,
0x3912001698000027,0x15a0160011000420,0x0040a018044a0200,0xb02b00110053a804,
0xb82f00110053a827,0x0027e06b0f7fdc27,0x0011007fdc27e800,0x0010007fdc27f02a,
0x0010007fdc27f82a,0x0010007fdc28082a,0x0010001b6e28102a,0x001100124b28182b,
0x001500124b28202b,0x002600124b28282b,0x002600124b28302b,0x002700124b28382c,
0x002800124b28482c,0x39000e124b28502f,0x000e124b28582f00,0x0170c1286028004a,
0x2868000028580bfb,0x0016030bfb0170c1,0xf82c0012009a6b0a,0xfe0f0016049a6b28,
0x28782b1070000d13,0x28882a00110013fe,0x28902a00100013fe,0x28982a00100012c8,
0x28a02a00100013fe,0x28a82b00100013fe,0x28b02c0011001274,0x28b80000285b94a4,
0x28c82b00260011fa,0x28d02c00260011fa,0x28d82c00270092e5,0x28e02f00280092e5,
0xe82f0039000e92e5,0x2c004a000e92e528,0x0187e81b70b028f0,0xb0060187075b3c03,
0x0029103b00120070,0x29182a00160070b0,0x50000029086f0162,0x2f004e000f142a29,
0x0060000f142a2920,0x003a00142a29282c,0x002800142a29302c,0x00270001b629382b,
0x15381301b629782b,0x0029486a142a0800,0x145018142a299000,0x0029586a142a0300,
0x29606b142a297000,0x1100142a29680000,0x7013142a29882b00,0x2a781a0230090015,
0x0800150402300200,0x2a0300a48819142a,0x2a29982f00110014,0xf4a0160023000e14,
0x1602e94c00363000,0x72581f2f0805a829,0xa86f0377735f6d65,0x0a002929c8000029,
0xe00000295b296b03,0x000029b8559d0229,0x00005361120015d8,0x4101015dd017004f,
0x2229f80000295616,0x002800082a01100d,0x4b2c1203003d2a15,0x10000186e8000029,
0x29571b3f2af82b00,0xcf0160292a080000,0x51c32a1a01ff0002,0x97282aa82a002500,
0x282a1800002a106a,0xff2a202600100097,0x00002a562bfb0140,0x5a028d0180242a28,
0x00024f2a3000002a,0x0180382a38260010,0x2a6000002a56059e,0x002a562e74017f08,
0x5b7f017e162a5000,0x624b2a5800002a56,0x8203003c09532001,0x142a68270011004e,
0x00002a57055e0160,0x18142a015feb2a70,0x2a57ba380401072a,0xba015feb2a980000,
0x1a028c0300150818,0x2a57a01b03002990,0x1901377a2ab00000,0x0a51080400150826,
0x0011000afd020029,0x18000100152b1027,0xf0279f2903001509,0x10000f360301eb2a,
0x185500532b082b00,0x761200152000002b,0x2b282f001100027a,0x2b451cd8050702cd,
0x643913003d300000,0xa02b3800002b5b71,0xa02b482b0011007b,0x001560160011007b,
0x00002b70560b0c02,0x11000b0d02001578,0x1b3a020069981600,0x00f9b000002ba856,
0x030be22b194f0504,0xf800002bf0560d50,0x0011000bf7020041,0x645602006b2c0825,
0x0200151016001100,0x2c18260011006457,0x2c285708b9023843,0x50a2030016380000,
0x1200099c0200160b,0xd002381a2c502700,0x2c7000002c58670b,0x002c48311803381b,
0x48027c03002e6800,0x3403002e9000002c,0x002e9800002c487c,0xb000002c48a2b303,
0x17981302ac02002e,0x00009f0213680300,0x0300b52e18260011,0x182d170016001577,
0x002ce8570059020d,0x47b35e0300e2f000,0x68020016f800002c,0x682d102600120010,
0x00162d1a503c0339,0x13006f2d18306103,0x7817001200718632,0x2d28570139020016,
0x5010030016300000,0x0300b17000002d48,0x2d6800002d47b29c,0x14002d0909680300,
0xe102006f0bc73832,0x0016901700120007,0x020016881b037b02,0x16a01600120000f3,
0x0016981b735d0300,0xb000002d47133203,0x00160bd5ff030016,0xb82700120000f302,
0x2d5774aa0301e72d,0xab0301e72dd80000,0x002ed000002d4874,0xf000002d480d3d03,
0x2de85801ea02002e,0x01d403002ef80000,0x0017011602172d12,0x5a0200170a08d901,
0x34b000002e406b1a,0x1ad8090015041a99,0x2a0b1b1702002a0b,0x02002a0b1f320200,
0x20cd02002a0b1f5c,0x2a0b20f702002a0b,0x341f01007e341f00,0x0100d2331f01007e,
0x4020030100d2331f,0x2c09404c03002b0b,0x03002a0943430300,0x087b04001409436b,
0x2b0a103f0400530a,0x05002b0a0e4e0300,0x110102002c0a10c0,0x160b114002002b0c,
0x0200560d11810200,0x160f0200170b12f1,0xae0b155202002c0d,0x0300150a173b0200,
0x1ad302002a0b17e9,0x6b0b1b9602002a0b,0x0200150b1c590200,0x1dd20200150a1cad,
0x01be02002e00a90c,0x00002e706c852603,0x2600160085262ee8,0x5707320208542ef0,
0x0300169000002e88,0x169800002e470a7a,0x00002e4725a80300,0xa01b0960020016a8,
0x0012000d69020016,0x0d4001853f2eb028,0x853f2ed000002e58,0xc800002e580d4101,
0xc60b0d0401853f2e,0x00c6e019554f0200,0x103b0028009c1504,0x0016f0139c15002f,
0x2f5633500310d603,0xda0300412f780000,0x00413800002f4719,0x3000002f5c09eb03,
0x00002f486c85542f,0x002f506c85542f58,0x6e581384e92f6000,0x0084601984e90a00,
0x002f567827303123,0x5a6c0303382f9800,0x06f7361201f82f19,0x0042e000002fd857,
0xe825001200001602,0x110012a10208032f,0x40c9020015f01500,0x1c2ff82700110210,
0x000030579f6d0340,0x577ca803401d3070,0x02002e3078000030,0x6000003050580ace,
0x3058581aa302002e,0x0ae802002e680000,0x1c12d302005c601c,0x30488a1c03005c68,
0x8a1d03002e980000,0x660303af05001703,0x4b30a00000305691,0x2f0012000a23020a,
0x1915010c0d0430a8,0x0d0430c80000305f,0x0000305706ca010c,0x575ab2010d0430e0,
0x010d0430d8000030,0x30d00000305a171d,0x30f82b001000937a,0x0431170028000d04,
0x0000305a01c8010d,0x2b001000961b30e8,0x000030579af631f8,0x0006e4010d043108,
0x25004b8f311a0151,0x41010d0431a82600,0x0431180000315628,0x00003156144a010d,
0x5619dc010d043120,0x010d043128000031,0x31300000315615a2,0x00315608c3010d04,
0x159e010d04313800,0x0d04316000003156,0x5000003156159c01,0x31563b77010d0431,
0x47010d0431580000,0x0041fa03003c0902,0x010d043168270011,0x3170000031571d56,
0x0731181fe8010d04,0x2700110033500301,0x084ac4010d043198,0x00290a0d04040015,
0xb000003157602103,0x15081d7b010d0431,0x0300290a0d040400,0x3210000031572595,
0x00150911ac010015,0x01eb31f027529903,0x080000315b0d0404,0x0000321867005332,
0x5f1d8c010d043220,0x0b0d043228000032,0x30000032470c0501,0x0012000c5b02007b,
0x185d130300165016,0x103bf97012001648,0x0200155816001102,0x4070170011000cf1,
0x1f00a9006fc10300,0x5f0a83010c038a34,0x0c038a32a8000032,0xc800003257018c01,
0x32574b4e01038a32,0xa901038a32b80000,0x002ab00000324634,0xe00000325a068802,
0xb027003900038a32,0x325b1c1601038a33,0x3d00a86e32d00000,0x32d8670014331a00,
0xd901038a32e80000,0x8a33600000325665,0x000032560ab00103,0x56139b01038a3390,
0x01038a32f8000032,0x33080000325617ea,0x00335620c101038a,0x2bf201038a331000,
0x038a331800003356,0x2000003356349c01,0x3356180e01038a33,0xf201038a33480000,
0x8a33300000335626,0x0000335632800103,0x09caf601038a3338,0x001100456e03003c,
0x03c801038a335027,0x038a335800003357,0x030107331803c901,0x3378270011004d0f,
0x001508060c01038a,0x580200290a937904,0x8a33982700110004,0x0400150831150103,
0xc3bc0300290ad647,0x010015f000003348,0x0def03001509159a,0x038a0301eb33d827,
0x100053e81c001000,0x01038a34170011f8,0x34100000345f0576,0x34460e3f010b038a,
0x415b030b31180000,0x0200162017001200,0x343026001200096e,0x343867af7003072f,
0xae030cf034580000,0x002e500000344838,0x7000003448301503,0x003448301603002e,
0x48c01003002e7800,0xfa03002e98000034,0x7a0d4c0200170abf,0x4c0082e0000034d0,
0x0b0d4c090015040d,0x002a0b0d4c02002a,0x4c02002a0b0d4c02,0x0b0d4c02002a0b0d,
0x002a0b0d4c02002a,0x7e341f01007e341f,0x1f0100d2331f0100,0x0b0d4c030100d233,
0x002c090d4c03002b,0xc404002a090d4c03,0x000d4c04001408e2,0x0d4c0081a03b0015,
0x7e0a0d4c03002b0a,0x02002c0a0d4c0500,0x0d4c02002b0c0d4c,0x560d0d4c0200160b,
0x3a0017000d4c0200,0x002c0d0d4c005108,0x870300ae0b0d4c02,0x4c00572a02830024,
0x0052d03a0015000d,0x0d4c03003f0a0d4c,0x150b0d4c02006b0b,0x0200150a0d4c0200,
0x02002d00a90c0d4c,0x00160076d2040068,0xd81084c90034f83b,0x23001891351700ff,
0x46b8000034e06752,0x15e8135222001891,0x6b0bea020c840300,0x1c0f3538000034f0,
0x00803f102c006600,0x1c2535282b001600,0x855e0b002b350822,0x4000563000003545,
0x3557045c4d003339,0xaa0118c135780000,0xc147500000355791,0x001503045a1f1018,
0x57062324103b5605,0x103b5642b0000035,0x6903001503062425,0x5604824e00343000,
0x0306253a60000035,0x35580000355662bd,0x001608214c030016,0x001102104cd97012,
0x07f08d0300156016,0x906f0a18c70f00bf,0x1018c735a8000035,0x3935c8000035986c,
0xc735b80000355b08,0x3935b02b004f0018,0x3935e00000355b08,0xc700362a00280008,
0xb335d02a00630018,0x1436e02a00100018,0x35e8000035d86c00,0xc7361a010b000839,
0x3936902b00250018,0x3935f80000355b08,0x3936080000355b08,0x3936100000365b08,
0x3936180000365b08,0x3936200000365b08,0x3936480000365b08,0x3936300000365b08,
0x3936380000365b08,0x5c083904003c0908,0x5c08393650000036,0x1808393658000036,
0x365c083904010736,0x1508083936780000,0x0300290a08390400,0x36980000365c0839,
0x0839040015080839,0x365c23c40300290a,0x1509083936f00000,0x01eb361708390400,
0xe80000364c083904,0x372a0011f8100053,0x000037086f18c700,0x0024000f18c73710,
0x3010020160371826,0x954737282c001200,0x470037503b039100,0x4737482c2ff00095,
0x3768000037586c95,0x70000037606d9547,0x902d002900a6b937,0x0300177013a6b937,
0x00374603a6030678,0x5f71570300159800,0x0f202137a0000037,0x202137a82b002400,
0x202137b02a001100,0x1ebf37b82a001000,0x202137c82a001000,0x202137d02a001000,
0xa5fc37d82c001000,0x1e6b37e00000375b,0x1df137e82b001500,0xb44b37f02c002600,
0x202137f80000375c,0x202138082c002700,0x202138102f002800,0x2138182f0039000e,
0x38203b004a000e20,0x302c003900887300,0x382b002800887338,0x700000385f3ad038,
0x2f004e000fa50e38,0x0060000fa50e3848,0x003a00a50e38502c,0x002800a50e38582c,
0x40e201018a386027,0x018a38a000003857,0x690800150340e201,0x38b0000038686ac3,
0xf50300147018c45d,0x3898000038786a1f,0x90000038886b0594,0xa82b001100745138,
0x0500159813745138,0x002a0a692e010204,0x8409001504695902,0x001ff50300a40956,
0x0e1ff538b82f0011,0x13003cc815002300,0x100000385f35ce36,0x0038d06b0f251e3a,
0x001100251e38d800,0x001000251e38e02a,0x001000251e38e82a,0x001000251e38f02a,
0x001000251e38f82a,0x001100034a39082b,0x001500034a39102b,0x00395b3ae039182c,
0x002600034a392000,0x002700034a39282c,0x002800034a39302c,0x39000e034a39382f,
0x000e034a39482f00,0x008b9139502c004a,0x008b9139602c0039,0x6f013639682a0028,
0x034a39a000003958,0x4a39702f004e000f,0x39782c0060000f03,0x39882c003a00034a,
0x39902b002800034a,0x39d02b002700034a,0x4a0800159013034a,0x39e0000039986a03,
0x72130014a018034a,0x39c80000395a2531,0xb8000039b06b14a1,0xd82b001100034a39,
0x090015c813034a39,0x4a02002ad01a034a,0x19034a0800150403,0x1100aad00300a4d8,
0x000eaad039e82f00,0xff03003cf0150023,0x153a082500110029,0x00003a5b183b0300,
0x260011000b613a18,0x469b980309c14630,0x07030b0e3800003a,0x3270230016301813,
0x154800003a462062,0x0b4e3a1620620300,0x003a706f0a0af80f,0x786b100af83a9000,
0x6b0af83aa800003a,0x0af83aa000003a88,0x0af83a982a004f00,0x0af83ac82a001000,
0xf8003b983a003900,0x503ab02a0063000a,0xa53bc82b00100005,0xf83ad000003a5b4d,
0xf83b482a0062000a,0xf83b702a0025000a,0x3ae000003ad86a0a,0x3ae82a0010000af8,
0x3af02a0010000af8,0x3af82a0010000af8,0x3b082a0010000af8,0x3b282a0010000af8,
0x1800003b106a0af8,0x202a0010000af83b,0x04003c20190af83b,0x3b3000003b5b589f,
0x3b382b0011000af8,0x0301073b38280af8,0x3b602b0011000af8,0x0c03001550180af8,
0x0af8020029581a03,0x0af83b782b001100,0x1a0af80300156818,0x11000aa502002970,
0xb0190af83bd82b00,0x3bb8270af8030015,0x0010000af80301eb,0x003be06b0053d01c,
0x0011000af83be800,0x24000f0af83bf02f,0x851f030052f81600,0xb9003c1038001200,
0x00003c6808ee019f,0x08ef019fb9003c30,0x9f3a3c2800003c59,0x5000003c5918b201,
0x3c5d0cb5019f3a3c,0x2a00b0fd3c580000,0x5813b0fd3c702d00,0x0ff502043e030017,
0x0200157816001100,0x3c882f00110023f5,0x902b0024000f0afc,0x982b0011000afc3c,
0xa000003c5b99d33c,0xa800003c5a99d33c,0xb02a0010000afc3c,0xb82b0010000afc3c,
0xc82b00110007b23c,0xd02c00150007b23c,0xd800003c5b46063c,0xe02c00260007b23c,
0xe82c00270007b23c,0xf02f00280007b23c,0x2f0039000e07b23c,0x004a000e07b23cf8,
0x1b019233003d0837,0x003d1800003c6738,0x003d5a03ed019233,0x3d106f01363d2000,
0x000f07b23d580000,0x0f07b23d282f004e,0x07b23d302c006000,0x07b23d382c003a00,
0x07b23d482b002800,0x07b23d882b002700,0x6a07b20800154813,0x07b23d9800003d50,
0x6a0afc0300145818,0x05983d7800003d60,0xb23d7000003d686b,0x4d3d902c00110007,
0x1a07b2090015037f,0x150407b202002a88,0x0300a4091b610900,0x3da02f0011000afc,
0xa8150023000e0afc,0x1100126a3612003c,0x0e0afc003ef03f00,0xfc3db800003db06b,
0xfc3dc82a0011000a,0xc63dd02a0010000a,0xfc3dd82a00100009,0xfc3de02a0010000a,
0xca3de82c0010000a,0x034a3d1b00a200b1,0x034a3df82b001500,0x034a3e082b002600,
0x034a3e102c002600,0x034a3e182c002700,0x034a3e202f002800,0x4a3e282f0039000e,
0x3e3028004a000e03,0x003e5802ba01946f,0x02ba01946f3e4800,0x01363e5000003e5a,
0x4a3e8800003e386f,0x3e582f004e000f03,0x602c0060000f034a,0x682c003a00034a3e,
0x702b002800034a3e,0xb02b002700034a3e,0x0800157013034a3e,0xc800003e786a034a,
0x0300148818034a3e,0xa800003e906a0afc,0x00003e986b0afc3e,0x2b001100034a3ea0,
0x0015a813034a3eb8,0x02002ab01a034a09,0x5fb509001504034a,0x11000afc0300a409,
0x000e0afc3ed02f00,0xea03003cd8150023,0x0015e81600110036,0xf800003e5b634f03,
0xc82c00110015f43e,0x582c169a00965c46,0x602c001600965c3f,0x00003f186c965c3f,
0x003f2059965c3f38,0x02712610002c4800,0x002c42b800003f58,0x00003f5c02712710,
0x2c00540091ac42c8,0x2f00540091ac3fd0,0x003f5f15a1883fd8,0x3f5c15a1883f6800,
0x0900a1883f700000,0x0800a18800412b01,0x003f5b07b5411b01,0x003f5b07b53fa000,
0x00d600a1883fb000,0x003fb86b0066401b,0x15c813006640a800,0x003f5f13a1880f00,
0x3f5c15a1883fe000,0x3f5ca1883fe80000,0x3f5ca18840f80000,0x3f4ca18841080000,
0x15f813002a780000,0x0000405da1880b00,0x0a001603a1884088,0x40280000405ca188,
0x2a300000404ca188,0x002a481c00260000,0xee9540502b002600,0xa18840680000405c,
0xa18840980000405c,0x4019a1880a001503,0x001503a188030196,0x900000405da1880b,
0x880b001603a18840,0x0aa1880400810aa1,0x00405da188040082,0x001603a18840b000,
0x8803002c0ba1880b,0x0ba18803002c0ba1,0x002c0ba18803002c,0xd80000405da18803,
0xe00000404da18840,0x41502d002800002c,0xa18809001603a188,0x8000025a0c01ef00,
0x415b63fa41782c02,0x4118a18841880000,0x001409a18803003e,0x300000415ba18803,
0x480000415ba18841,0x0500a24118a18841,0xcee80000414da188,0x41f0000041c86f00,
0xf80000415f15a188,0x0000415c15a18841,0x2c003f0096884208,0x2b00280096884218,
0x0000425f0aef4220,0x004e000f35e04258,0x60000f35e042282f,0x3a0035e042302c00,
0x280035e042382c00,0x2700092f42482b00,0x4813092f42882b00,0x42506abaf9080015,
0x5818baf942980000,0x00425b0aef040014,0x00425b0aef427800,0x001100baf9427000,
0x157813baf942902b,0x002a881a09a90900,0xef0900150409a902,0x5f0aef0400a4090a,
0x0f0aef42a0000042,0x40003ca800004245,0x4256036f4f003037,0x9f0301ef4ab00000,
0x01efd8000042471c,0xe017001600013502,0x004256bcea03021b,0x024702002c435000,
0x072343582f074b00,0x2342e82f006b0014,0x42f02b0082001407,0x44d82b003e0006bd,
0x44e02a00260006bd,0x20000043186a0723,0x302a00100002b343,0x502b001000016943,
0x000043385c006644,0x0f00154813006628,0x602f012900120723,0x2c01400014072343,
0x0000435c86994368,0x0000435b86994478,0x0043706b002a4488,0x157813002a43f800,
0x0043886c07230a00,0x1690130723440800,0x0043986b06f90900,0x43a06c06f943a800,
0x434cf8fe43b00000,0x002600002ac80000,0x43e06b072343d02a,0x1100072343e80000,
0xf013072344182b00,0x96f81a0723090015,0x0a00150407230201,0x44102c00ce000723,
0x07230a0016040723,0x0723030081441029,0x120007230a001604,0x1604072344302c00,
0x002c201b07230a00,0x230a001604072302,0x072302002c281b07,0x120006290a001604,
0x1600062944582c00,0x002800002c601d00,0x00166013002cd01d,0x000044705c072308,
0xf81c028000025aa8,0x45082a0280000284,0x2302003e98190723,0x0723020014a01907,
0x072344b02a001000,0x072344c82a001000,0x5d59960500a2c819,0x5f59964568000045,
0x1407234570000045,0x072345782f003f00,0x005a881600560014,0x9816003f004b4b03,
0x00280053f8030043,0x00455f3e6545a02b,0x4e000f072345d800,0x000f072345a82f00,
0x00072345b02c0060,0x00072345b82c003a,0x00406c45c82b0028,0x13406c46082b0027,
0xd06a0723080015c8,0x1807234618000045,0xe06b0723030014d8,0x5b3b7d45f8000045,
0x000ec845f0000045,0x130ec846102b0011,0x082924d7090015f8,0x150324c103002a46,
0xa446102805ba0800,0x2f00110007230300,0x0023000e07234620,0x713f3713003c2815,
0x12004f700000466f,0x46382b19be000e12,0x46482a0011001212,0x46502a0010001212,
0x46582a00100010dc,0x46602a0010001212,0x46682b0010000352,0xc0701c00110001c0,
0x0146781c00150001,0x000146881c002600,0x00422c46902c0026,0x00422c46982c0027,
0x0e422c46a02f0028,0x422c46a82f003900,0x007ab016004a000e,0x270146a8294c1b03,
0x270246b02899a903,0xd02b001100048a03,0xb10f001504048a55,0xb1d01c1073000d01,
0x01b1d81b00110001,0x0001b1e01b001000,0x100001b1e81b0010,0x00100001b1f01b00,
0x2b00110001b1f81c,0x2c00150001b14708,0x0000475b02f74710,0x2c00260001b14718,
0x2c00270001b14720,0x2f00280001b14728,0x0039000e01b14730,0x4a000e01b147382f,
0xf3430327dd481700,0x29589b0328084719,0x5b473c0328094748,0x0408155a08000047,
0x9301b7dd00160015,0x0047e800004768e6,0x476878047100b7f4,0x01b79c0047e00000,
0x47b0000047590ed3,0x004759ef7101b79c,0x8a5f01b79c47c800,0xb79c004c28001700,
0xd00000475df65301,0x1d00a1d010002e4c,0x000047d87c002e48,0x2ef01cb79c004810,
0x002ef81cb79c0200,0x2829002a001bf902,0x170389e201b71a48,0x00027502048b0300,
0x10048b48302f0011,0x048b48380000485c,0x048b48480000485b,0x048b48500000485b,
0x048b48580000485b,0x048b48600000485b,0x151348680000485c,0x151348700000485b,
0x149948782b001500,0x149948882b002600,0x02da489028002600,0x9800004858180e01,
0x485f20650102da48,0x010a02da48a00000,0x48a80000485f4dbd,0x48462359010a02da,
0xba3412007ab00000,0x007ac81600390053,0x1b00280053ba3412,0x000048b86f0136d0,
0x6c41010b07d54908,0x07d548d80000485f,0x00004858209f010b,0x58c4000107d548e0,
0x0107d548e8000048,0x8af00000484cc401,0x8a49302b00270001,0x0204040015f01301,
0x160218f8107fa800,0x08277cf10001f049,0x6a65437212001449,0x169d492800004910,
0xd549200000491867,0x270011000ab60007,0x030ab50107d54938,0x2a301a0204090015,
0x0900150402040200,0x169d04009008c9f1,0x169d49502f001100,0x003c58150023000e,
0x0000494502d13713,0x606f4e35030ef8a8,0x0b035f4968000049,0x700000495702e501,
0x495a02d001035f49,0x1000093049780000,0x1000e8cb49882a00,0x100065ae49902a00,
0xb801035f49982600,0xd549a00000495b02,0x01d5a81c00110001,0x00015bb01c001500,
0x2600015bb81c0026,0x2700035f49c82c00,0x2800035f49d02c00,0x000e035f49d82f00,
0x0e035f49e02f0039,0x22007ae816004a00,0x0000494667283734,0xfb28373422007af8,
0x01364a080000495a,0x035f4a1f0215f010,0x0000495f0e0d010b,0xf4cc010b035f4a10,
0x035f4a1800004a58,0x2000004a5877cb01,0x4a5777cb01035f4a,0xe501018a4a280000,
0x8a4a6800004a5702,0x0800150302e50101,0x7800004a306a035f,0x0300143818035f4a,
0x6000004a486aea01,0x00004a506b882c4a,0x2b00110048374a58,0x0015601348374a70,
0x681a00a400020405,0x00150468de02002a,0x170300a4092ce409,0x5f4a882f00110002,
0x004a4602d0010a03,0x00515302034a9000,0x34030015a0160011,0x343713126c4a1854,
0xd34ab800004a5f54,0x4ac82b0024000f06,0x4ad02a00110006d3,0x4ad82a00100006d3,
0x4ae02a001000059d,0x4ae82a00100006d3,0x4af02b00100006d3,0x4af82c0011000374,
0x4b0800004a5b0549,0x4b102b0026000374,0x4b182c0026000374,0x4b202c0027000374,
0x4b282f0028000374,0x302f0039000e0374,0x16004a000e03744b,0x3900fab403007a38,
0x6f0203744c782600,0x3e1f040016381308,0x7000004b56574e03,0x4b4750d40323214b,
0x6af4020016880000,0x47a804030016781b,0x0a0200169000004b,0xf74ba02900120002,
0x00004b68181201bf,0x02b200bff7004bc8,0xf74bb800004bb069,0x004bd069035900bf,
0x035c00bff74c5000,0xf74c5800004bd869,0x19017100041901bf,0x4c59040801bff74c,
0xde01bfc94c300000,0x0050a000004c6803,0x004c5df82601bfc9,0x4c382b002e50a800,
0x4c482b002e02008a,0x2a0000b83311008a,0xb800bf754c602900,0x002e681a002a0000,
0x701a002a00828a00,0x176813828c00002e,0x8773391201dc0400,0x0f00393701dc4c1a,
0xde0199b800140016,0x005b9800004c6603,0x00160015091799cd,0xf79010005700bfb4,
0x005800bfcb4c1900,0xbfcb4c1901259810,0x0b5b4cb02a002e00,0x4cb82a002e353121,
0x002a006bd9030b5b,0x0b5b00bfcb4ce829,0x03042c030017d013,0x4cf000004c5fc50f,
0xf82b0024000f042c,0x082a001100042c4c,0x102a001000042c4d,0x182a001000042c4d,
0x202b001000042c4d,0x2800004d577bcb4d,0x4d57935a01042c4d,0x0b13042c4d300000,
0x01042c4d38270015,0x4d4800004d578c23,0x004d58932b01042c,0x5e9701042c4d5000,
0x042c4d5800004d58,0x6000004d5f5e9701,0x5f9cde010a042c4d,0x0a042c4d6800004d,
0x7016004a00004e00,0x4d469f353513007a,0x353513007a880000,0x01369000004d4b9f,
0xa04dc800004d786f,0x004d5f166a010b07,0x7c010b07a04d9800,0xa04da000004d5816,
0x00004d582c440107,0x481c5f0107a04da8,0x8600018ab000004d,0x018af01800270002,
0x040015b013028400,0x4db8660361000204,0x5e0001f04e080000,0x6672120014c81803,
0x4de800004dd06a00,0xe000004dd8670aff,0x4d57dc6c0107a04d,0x810107a04df80000,
0x000204050015039f,0x3237002af01a00a4,0x1907a00800150f00,0x11000aff0300a4f8,
0x000e0aff4e102f00,0x3712003c18150023,0x4f68240011003f9f,0x206f019c38120015,
0x0b035f4e2800004e,0x3000004e5702e501,0x4e5a02d001035f4e,0x100022f74e380000,
0x1000e85a4e482a00,0x100016654e502a00,0xb801035f4e582600,0x5f4e6000004e5b02,
0x5f4e682b00110003,0x5f4e702b00150003,0x5f4e782b00260003,0x5f4e882c00260003,
0x5f4e902c00270003,0x5f4e982f00280003,0x4ea02f0039000e03,0xa816004a000e035f,
0x390002a43512007a,0xa53512007ab81600,0x0136c81b00280002,0x5f4ef800004eb06f,
0x004e000052000b03,0x64000b035f4ed02f,0x5f4ed82800600000,0x00004e5807520103,
0x5b075101035f4ee0,0x00035f4ee800004e,0x13035f4f282b0027,0xf010035f080015e8,
0xf818035f4f1a0218,0x4f0866035f030014,0x8301035f4f200000,0x5f4f1800004f5b19,
0x5f4f302b00110003,0x035f090015201303,0x04035f02002a281a,0xa44f181bed090015,
0x2f00110002170300,0x02d0010a035f4f48,0x03034a5000004f46,0x156000004f46293a,
0x484f6826042d0200,0x5fb14e3866253316,0x0f2bb94f7800004f,0x2bb94f882b002400,
0x1ce14f902a001100,0x6f194f982b001000,0x2bb94fa000004f5a,0x2bb94fa82a001000,
0x03744fb02b001000,0x03744fb82b001100,0x03744fc82b001500,0x03744fd02b002600,
0x03744fd82c002600,0x03744fe02c002700,0x03744fe82f002800,0x744ff02f0039000e,
0x7af816004a000e03,0x00a500a4f4351300,0x1300a60203745016,0x61020aff040016f8,
0x5030000050286651,0x00504721bc030abd,0x1b089c0200164800,0x5046be2f03001638,
0x89ff030016500000,0xc87a506029001200,0x000050686902b000,0x5909bf01c87a5088,
0x01c2965078000050,0x38120aa3501b0995,0x5b020aa3501b0995,0x9650b029002a000b,
0x0000504a236e01c2,0x504a09c301002eb8,0x09c301002ec80000,0xef02015204001703,
0xf002015250c82a11,0xf104015250c82711,0x005d283a00110077,0x01240400150477f1,
0xe00000505573ce03,0x1100462b021bff50,0x462b020015e81600,0x286903404450e829,
0x715120000051186d,0x37133fb351202940,0x516000005156d300,0x00514757b5030083,
0x0be2de0300167000,0x001200033b020016,0x001cec0200167817,0x01c3f55190290012,
0x51b000005168871e,0xa069013300c3f500,0x01c3cb51a8000051,0x51d000005159fa2e,
0x005159016101c3cb,0x78d301c3cb51d800,0x00c3cb511900e100,0x2ee81a002a00002e,
0x0000514a05c70100,0x170305c901002ef0,0x000de20201e90400,0x0201e952c8260012,
0x01520400160478d6,0x2800005256721903,0x5247250b03011052,0x0e66020016380000,
0x00037d020016301b,0x5103001648170012,0x6552580000525903,0x0052607800c800c4,
0x9901c46500527800,0xe352700000525994,0x00528869002e00c3,0x002e00c3e3529800,
0xe352a00000529069,0x29002a00002e00c3,0x00002e00c3e352a8,0xf000002eb01a002a,
0x002eb81a002a0006,0x040017b01306f300,0x52b82a005b020152,0x0016030d2a030152,
0x0003673612002c04,0x3637002c531600fa,0x0d06400f00160d00,0x064052d82b430f00,
0x064052e02a001100,0x064052e82a001000,0x064052f02a001000,0x064052f82a001000,
0x082a53082b001000,0x082a53102b001100,0x07b053182b001500,0x07b053202b002600,
0x0640532828002600,0x3028002700002b00,0x535f07dc01064053,0x010a064053380000,
0x53480000535f1392,0x534613a5010a0640,0xa53512007a500000,0xa402018753482a05,
0x002c581700280005,0x1700120001b33811,0x160d003833002c68,0x535f856253702b00,
0x000f14df53a80000,0x0f14df53782f004e,0x14df53882c006000,0x14df53902c003a00,
0x14df53982b002800,0x14df53d82b002700,0x6a09e00800159813,0x09e053e8000053a0,
0x5b8562040014a818,0x5737bd53d0000053,0x0009e053c8000053,0x53e0270011000161,
0x15d01301600009e0,0x002ad81a14df0900,0x620900150414df02,0x5f85620400a40985,
0x0f856253f0000053,0x466153f80000535b,0x3ee603064653f82a,0x00f7543000005455,
0x4817001200922b03,0x00160b1b8d030016,0x5000005447bb9a03,0x001200036b020016,
0x020c01c81f546029,0x1f00548800005468,0x0000545901fb01c8,0x68082f01c7c75478,
0xc7c7005510000054,0x1800005468082f01,0x59067401c7c70055,0x01c7c754e0000054,
0x54f000005459046e,0x00cd0017c701c799,0x061a01c799005928,0x1c002e591d00ce00,
0x082a002e02008af8,0x000cd23312008a55,0x01c745552029002a,0x2e280000554a0417,
0x0000554a99dc0100,0x170399df01002e30,0x0008e602039f0400,0xe502203dc8170012,
0x0e76660f00160408,0x766655480000555c,0x766655500000555b,0x766655580000555b,
0x766655600000555b,0x766655680000555b,0x039c557000005557,0x782700110000e500,
0x2700152113039c55,0x00002a0003225588,0x0003225590270026,0x559828002600002a,
0x002700002b000552,0x002c00055255a028,0x055255a82f002800,0x0000555f0405010a,
0x0418010a055255b0,0x12007ab800005546,0x120187b01a01b436,0x000187b81701b336,
0x55c82905f8020016,0x160405f8361221f0,0x00064f02002c0400,0x5002206bd0170012,
0x0303bb0400160406,0x5608000055568c04,0x0056478c06030379,0x1b16d30200161800,
0x564786eb03001610,0x0c2c020016200000,0xc9ec563029001200,0x58000056682c9401,
0x592c9601c9ec0056,0x01c9be5650000056,0x56700000565929f3,0x00565d29f501c9be,
0x002a00c406567800,0x177813c40656982d,0x00165e0201240400,0x0201245768260012,
0x01240400160405c0,0xd0000056478db603,0x00120009a70200e2,0x1a1260020016e017,
0x12007bf2030016d8,0x0589030016e81700,0xc4a056f80000565d,0x005720000057087c,
0x18000057106dc4a0,0x000057286dc4a057,0x00573069c4a05738,0x018001e4ec574800,
0xe4ec575000005759,0x580000574a018001,0x002a009f3400002e,0x139ad100002e601a,
0x5803015204001758,0x00b6020152571a48,0xb502002c04001604,0x002cf81700120000,
0x810f0016032bcd03,0x57782c4cf7000d04,0x57880000575b66e9,0x57900000575b66e9,
0x57980000575b2884,0x57a00000575b66e9,0x57a80000575b66e9,0x57b02b0011000481,
0x57b82b0015000481,0x57c82b0026000481,0x57d02c0026000481,0x57d82c0027000481,
0x57e02f0028000481,0xe82f0039000e0481,0x17004a000e048157,0x1b003d36110187f0,
0x17002c36110187e8,0x734e6625240187f0,0x002c581026001200,0x182a001600369502,
0x000058086f016258,0x004e000f38ae5850,0x60000f38ae58202f,0x3a0038ae58282c00,
0x280038ae58302c00,0x270001b658382b00,0x381301b658782b00,0x02f0000230040015,
0x1c58900000584866,0x0014501802ed0002,0x700000585b66e904,0x680000585b66e958,
0x882b00110029e658,0x0a0015701329e658,0x023002002a0a06b1,0xa40966e909001504,
0x0000585f66e90400,0x00585b0f66e95898,0x58a02a504958a000,0x00584692950309d3,
0x007b3f0300f7d800,0x51030016e8170012,0x0003410200160b1e,0xba030016f0170012,
0x091b08000058474f,0x280000594738f304,0x59185838f4030949,0x4b8b03002e200000,
0x4b8c33130977591a,0x008cb4030977591a,0xbb02002e5818002a,0x002e601a002a0043,
0x680000594a0cbb01,0x17601309a500002e,0x56dddd0303150400,0x03031559f8000059,
0x04c80f0016035b92,0xc859780000595c0e,0xc859880000595b04,0xc859900000595b04,
0xc859980000595b04,0xc859a00000595b04,0xe559a80000595b04,0xe559b02b0011000c,
0x6b59b82b0015000c,0x6b59c82b0026000c,0xc859d0280026000c,0x000059580fa80104,
0x5f8a540104c859d8,0x0a04c859e0000059,0xe80000595f0cd301,0x478a4a010a04c859,
0xb4020187f0000059,0x0b86030187e81b01,0x76021de900018707,0x3713298859f82904,
0x661429895917e52e,0x5c602600120074d3,0x0016042a5902002c,0x5a5698b903033104,
0x160202ef5a380000,0x0016501700120000,0x930300160b732003,0x00165800005a47b4,
0x681700120011f802,0x705400c734122a23,0x170200c79000005a,0x00005a4808ed0100,
0x5a48467e03002e88,0x052e02002ea80000,0x002eb000005aa058,0xd018002a00097702,
0x5ab02a097702002e,0x005a56e4f5030a41,0x4f810345575b0800,0x0200161800005b47,
0xd9030016101b0538,0x00162000005b4798,0x301700120002cc02,0x3867055234121f92,
0x02009c5b5800005b,0x5000005b48580554,0x005b48089403002e,0x58089502002e7000,
0x03002e7800005b68,0x1702201a5b173438,0x04001703343a0100,0x5bc85701ae0200f8,
0x4efe0300b6d00000,0x020016e000005b47,0x1c020016d81b0b39,0x0016e81700120002,
0xf800005b48899103,0x5c086709b902009c,0xb902009c5c200000,0x5c1800005c106709,
0x5c2858054f02002e,0x054f02002e380000,0x002e4800005c3058,0x6018002a0004c602,
0x5c482a04c702002e,0x005c56a79d0302e8,0x010e0200b65c9800,0x020016a817001200,
0xc4030016a01a0b0d,0x0016b01700120050,0xc800005c484db703,0x5cd0583e8802009c,
0x3e8902009ce80000,0x002ee000005cd857,0x00005cf0547ff803,0x6101001702176708,
0x2e5d1000005c572e,0x17955d1703df0300,0x17036cdc01001702,0x48ac9d03002e0500,
0x7903002eb000005d,0x002eb800005d4853,0x9800005d48390303,0x005d48390503002e,
0x48ece503002ea800,0xfa02002ec800005d,0x002ed018002a002f,0x03002eb01c02a802,
0x9d1403002e0c2ffe,0x03002ee800005d48,0x01de030017039d15,0x00005d4648413813,
0x12004f17031893f0,0x2f02187e5df82500,0x155e08250011006b,0x270011006b2f0200,
0x6702900200845e20,0x00845eb000005e38,0xa800005e4860ca03,0x005e483e2503002e,
0x483e2703002e9000,0x7503002ea000005e,0x2e60b800005e5769,0x00005e56cec70300,
0x49603613002e60c8,0x12005cd000005e47,0x00005ec857053836,0x2a00c6b603005cd8,
0x4b3f03002ee01800,0x01002ee800005e4a,0x2ef000005e4ae561,0x0400170390d20100,
0x005e5644a303065c,0xcc4303065c5f8800,0x6b0d083b0f001603,0x083b5f0800005ef8,
0x083b5f102a001100,0x9e4a5f182b001000,0x083b5f2000005f5a,0x083b5f282a001000,
0x28155f302b001000,0x28155f382b001100,0x28155f482b001500,0x28155f502b002600,
0x28155f582c002600,0x28155f602c002700,0x28155f682f002800,0x155f702f0039000e,
0x7a7816004a000e28,0x875f702a7c320300,0x170028002a550201,0xbc00c56103002c88,
0xc56203002c601600,0xcf03034904001603,0x495fb800005f5604,0x1700120001660203,
0xc81b2551020016d0,0x005f470b82030016,0x000635020016d800,0x03027b5fe8270012,
0x03050701fb002c26,0x005ff858016e3612,0x487d270303050800,0x2803002e28000060,
0x002e30000060487d,0x5018002a00229102,0x17301339b902002e,0x0060385e002e0b00,
0x00604866002e6000,0x2b2e020152606800,0x7c8102015260502a,0x9c03002c04001604,
0x002c700000604795,0x8607001604309202,0x02002d0807f90100,0x002e0c07f9010086,
0xa00000604864c103,0x609058055102002e,0x078b02002e980000,0x7da403047160a82a,
0xff1c03047160b02b,0x03002ed000006048,0x2ed80000604aff1d,0x0000604a04710100,
0x1703047101002ee0,0x566dd20301120400,0x03011261b0000060,0x0290040016037b0f,
0x1800006156409e03,0x1200086d02024e61,0x1fd2020016281700,0x0007f9020016201b,
0x4103001630160012,0xc86148270012001e,0x0000615773940300,0x5808530200c86168,
0x02002e6000006158,0x8800006170580da2,0x6178570da202002e,0x809503002e900000,
0x03002ea817002a00,0x2e0b001790138096,0x2eb8000061985e00,0x61c8000061a06600,
0x61a82a00b7020152,0x0016038407030152,0x6147fd1303002c04,0xfd1303002cd00000,
0x0601008607001603,0x01008602002d0802,0x4ae903002e0c0206,0x002e625800006157,
0x6217013e005cae03,0x00624862e803002e,0x48a17603002e3800,0x9902002e50000062,
0x002e6818002a0008,0x700000624877d003,0x2e581c034802002e,0x03002e0c13d60300,
0x2e90000062487158,0x0017701337100200,0x62568b4d03029204,0xd303025062980000,
0x5662a00000625541,0x150011006b820208,0x02101a5f020015a8,0x9e020084c8180011,
0x6358000062e06703,0x0ee810039e020084,0x034302002e631701,0x002e300000631058,
0x0000631858034402,0x63578aaf03002e48,0x9f03002e65600000,0x2e656800006357d7,
0x0063605802210200,0x57022202005c7000,0x03005c7800006368,0x2e8817002a00c355,
0x1a002a00c3560300,0x634a030401002e90,0x030401002e980000,0x5b02227c04001703,
0x7d64282600120000,0x0f001604005a0222,0x000063a06c0d086b,0x0000635b5c3663a8,
0x0000635b5c3663b0,0x0000635b5c3663b8,0x0000635b5c3663c8,0x0000635b5c3663d0,
0x2b001100086b63d8,0x2b001500086b63e0,0x2b002600086b63e8,0x2c002600086b63f0,
0x2c002700086b63f8,0x2f002800086b6408,0x0039000e086b6410,0x4a000e086b64182f,
0x7a02018764202600,0x7a02018764182a00,0x002c281700280000,0xf8170012000a1e02,
0x0016040a1e02002c,0x6456a24c03034904,0x9003034964600000,0x0016700000644714,
0xc40300160b23c403,0x0016780000644723,0x900000645723c403,0x986700c702027b64,
0x03027b64b0000064,0x2ea800006448358c,0x0064b858019a0200,0x58019c02002ed000,
0x02002ed8000064c8,0x2ef018002a0028e3,0x0b0017039c6c0300,0x08000064e06d002e,
0x000064e866002e65,0x1b08f40201526510,0x5208d1ab030152f0,0x0085443864663301,
0x7f02002c651601e7,0x010086070016043b,0x8602002d65170f9a,0x002e651b0f9a0100,
0x4800006548839b03,0x006548839c03002e,0x2a089902002e3800,0x2a839e0304716550,
0x0076100304716558,0xea02002e7018002a,0x002e781a002a000d,0x880000654a047101,
0x001703047101002e,0x65568c7f03013e04,0xfd03011266580000,0x020290040016037a,
0xb8000065b0660238,0x12000ab902024e65,0x130a020016d01700,0x471b5b030016c81b,
0x81020016d8000065,0x00c8e81800120008,0x000065f067093302,0x57189a0300c86610,
0x02002e6608000065,0x28000066185807e2,0x66205807e302002e,0x588802002e300000,
0x02002e5018002a00,0x2e0b001730139f80,0x2e60000066385e00,0x6668000066486600,
0x66502a017f020152,0x001604017e020152,0x120000e302002c04,0x722703002c701700,
0x0601008607001603,0x01008602002d0802,0xfa3d03002e0b0206,0x002ef80000669057,
0x0000669867fa3e03,0x48433003002e6708,0x3203002ee0000066,0x005cf00000664843,
0x1000006657a67703,0x66484b6903002e67,0xeb2f03005c180000,0x671beb2f03002e0c,
0x002a00113202002e,0x13113202002e3018,0x9c03029204001718,0x4167380000675615,
0x0000675520c80359,0x4694720308566748,0x6d03001550000067,0x00846800006748ae,
0xf8000067480c3703,0x0067480c37030084,0x484dca03002ef000,0x6703002ed8000067,
0x002ee800006748c7,0x0800006757c98203,0x675779ae03002e6a,0xd602002e6a100000,
0x6818000068086702,0x68106702d602002e,0xef03002e68200000,0x002e280000684886,
0x300000684a86f003,0x00684a030401002e,0x03030401002e3800,0x144b0302aa040017,
0x02aa68d000006856,0x6b0f001603199903,0x50000068486b0d08,0x582a001100086b68,
0x602b001000086b68,0x680000685a264a68,0x702a001000086b68,0x782b001000086b68,
0x882b001100086b68,0x902c001500086b68,0x980000685b57a168,0xa02c002600086b68,
0xa82c002700086b68,0xb02f002800086b68,0x2f0039000e086b68,0x004a000e086b68b8,
0x0ba436030187c817,0x87c81701b3020187,0x1200fe3f66252401,0x0103002c69a02500,
0x0303490400160404,0x69080000685617ed,0x0069471278030349,0x0b364f0300161800,
0x006947ab78030016,0x0001940200162000,0x02b9c96930270012,0x5800006938540ae6,
0x055101001702009b,0x02002e5000006948,0x700000696058016f,0x006948418403002e,
0x002f0f02002e7800,0x1002002e9818002a,0x002e0b001778132f,0x002ea8000069885e,
0x5269b00000699066,0x0152691a01f80301,0x2c04001603ecd003,0x0000694764ec0300,
0x160364ed03002cb8,0x080e9f0100860700,0x0e7401008602002d,0xd058055102002e0c,
0x5102002ee8000069,0x2ee0000069d85805,0x7169f02908990200,0x69f829fc68321304,
0x0008103032220471,0x1102002e1818002a,0x002e201a002a0008,0x2800006a4a047101,
0x001703047101002e,0x6a567fe003011204,0xa00201126af80000,0x030290040016040e,
0x6a6000006a56ba79,0x006a47a5b103024e,0x1b3b7b0200167000,0x6a47a5b503001668,
0x0058020016780000,0x0300c89018001200,0xc8b000006a48de4d,0x00006a48de4e0300,
0x6a48dac303002ea8,0xdac403002ed00000,0x02002ed800006a48,0x2ef018002a003c9e,
0x0017d8133c9f0200,0x00006ae06d002e0b,0x006ae866002e6b08,0x01db0301526b1000,
0xf01801da0201520b,0x0006d46466230152,0x03002c6b18260012,0x0086070016035660,
0x02002d6b17020601,0x2e6b1b0206010086,0x006b305806770200,0x57067702002ea000,
0x03002ea800006b38,0x8800006b60577732,0x6b685885c403002e,0x49b403002e980000,
0x03002eb000006b48,0x2eb800006b4876e5,0x002ea01c03480200,0x03002ea81c034802,
0x2ed800006b48817e,0x0017b81302920200,0x6b560aa503029204,0x160202506be00000,
0x566be82500120000,0x00006b4694e00308,0x6b5794e1030015f0,0x370300846c100000,
0x846ca000006c570c,0x00006c480c370300,0x5858039e02002e98,0x9e02002e7800006c,
0x2e9000006c605803,0x00006c57d9f60300,0x00089902002e6ea8,0x03002e6eb027002a,
0x5cb800006c48e125,0x00006c48e1260300,0x2a00081002005cc8,0x081102002ed01800,
0x01002ed81a002a00,0x2ee000006c4a0304,0x0400170303040100,0x006c5611e90302aa,
0x038c0202aa6d7000,0x6b0d086b0f001604,0x086b6cf000006ce8,0xdc556cf82b001100,
0x24e26d0800006c5b,0x086b6d1000006d5a,0x086b6d182a001000,0x086b6d202b001000,
0x086b6d282b001100,0x086b6d302b001500,0x46256d382c002600,0x086b6d4800006d5c,
0x086b6d502c002700,0x086b6d582f002800,0x6b6d602f0039000e,0x7a6816004a000e08,
0x6d602a3f4f391200,0x0028003f50020187,0x00020e02002c7017,0x02002c6e48260012,
0x753704001604020d,0xa800006d56127703,0x6d471e3c03676f6d,0x2f63030016b80000,
0x6d47127c0300160b,0x127e030016c80000,0x027b6dd800006d57,0x00006de067093202,
0x57093302027b6df8,0x12002ef000006de8,0x00006e0857089932,0x5708993212033318,
0x1203332000006e10,0x3818002a0037f432,0x001703d2a303002e,0x00006e285e002e0b,
0x00006e3066002e50,0x1a0e730301526e58,0x382700b60201526e,0x4f0254d60001526e,
0xed6e602700130009,0x07001703094f0354,0x002e080ea1010088,0x2e0c0e7601008802,
0x00006e48e6d80300,0x6e488dab03002e90,0x089b02002e880000,0xf91b0304736e982a,
0x91430304736ea02a,0x03002eb818002a00,0x2ec800006e4a4f18,0x00006e4a04730100,
0x1703047301002ed0,0x578d570301140500,0x0301146fa000006e,0x029404001703806a,
0x0800006e56040c03,0x6f472d2d0302526f,0x2d2d030016180000,0x6f472d2d0300160b,
0x2d2d030016200000,0x00ca6f3000006f57,0x5800006f57959b03,0x6f48959c0300ca6f,
0x68a203002e500000,0x02002e7000006f48,0x7800006f68580511,0x002a0003b702002e,
0x03430803002e9818,0x6f885e002e0b0017,0x6f9067002ea80000,0x0c0201546fb00000,
0x0c0201546f982b02,0x03002e0500170402,0x2eb800006f4861d2,0x07001703020c0300,
0x002e08020c01008a,0x2e0c020c01008a02,0x1701140077fd0300,0x17037c6d03002e76,
0x5808a102002e0500,0x02002e6800007028,0x020c0400170408a1,0x600000704730c903,
0x708857b7c3030044,0xb7c4030044580000,0x6303002e05001704,0x002e50000070483c,
0x72040017033c6503,0x0000704829670300,0x105827a202004448,0xa402004438000071,
0x02002e0500170427,0x3000007138583465,0x001703499803002e,0x582a963411002e05,
0x37002e2800007168,0x002e050017210034,0x0000719858cd6302,0x1704c90002002e20,
0xc9c63612002e0500,0x37002e1800007148,0x002e050017290036,0x0071f058c6e33711,
0x2b003737002e1000,0x513811002e050017,0x2e080000722058cb,0x0500173100383700,
0x7257cb273912002e,0x1202002e75f80000,0x21002e04001704cb,0x00727857cae73034,
0x00303447002ef000,0xc102002e05001739,0x2ee8000072a858ca,0x0500173b00313700,
0xd858ca153211002e,0x3237002ee0000072,0x11002e0500174100,0x0000730858ca1733,
0x1704ca1802002ed8,0x60003430023e0400,0x16d0000073470640,0x4704356100353000,
0x36300016c8000073,0x0000734703d86200,0x59630037300016b8,0x0086b00000734805,
0x000073e858c86702,0x17490034370086a8,0xd01a381000440400,0x16a0000074180567,
0x4804d26900393000,0x3511005a98000074,0x900000747058c903,0x00174b003537005a,
0x68d0493610002e05,0x002e88000074a005,0x0014001751003637,0x05e16a0030307dab,
0x3000457800007448,0x007448041a520037,0x5300373700457000,0xd23810002e050017,
0x68000075280568d0,0x001759003837002e,0x325a003130007305,0xfc75600000755604,
0x0012000016381105,0x6726f8030294c817,0x005b7d70000076f8,0x2e0400170415c602,
0x77285711c4351200,0x323513002e680000,0x030089050017036f,0x45600000774804bb,
0x00007748526d0300,0x17040a4502004558,0x48439903002e0500,0x1202002e50000077,
0x0300730500170411,0x45480000774804bc,0x007810583f420200,0x043f430200453800,
0x3cbe02002e050017,0x002e300000783858,0x2e050017043cbe02,0x007868583c900200,
0x043c9002002e2800,0x32eb02002e050017,0x002e200000789858,0x2e0500170432eb02,
0x0078c858ce570200,0x04ce5802002e1800,0xcd1502002e050017,0x002e10000078f058,
0x2e05001703cd1603,0x00794804bc391200,0x31003937002e0800,0xe33613002e040017,
0x2e7cf800007956cf,0x0017330030364700,0x4804bc3112002e05,0x3137002ef0000079,
0x12002e0500173900,0xe80000794804bc32,0x00173b003237002e,0x4804bc3312002e05,
0x3337002ee0000079,0x02002e0500174100,0xd800007a0858ced3,0x001743003437002e,
0x7a4804bd03023f05,0x04be030017d00000,0x030017c800007a48,0x17b800007a4804bf,
0x00007a4804c00300,0x4804c03512008ab0,0x3537008aa800007a,0x0300450500174900,
0x17a000007b4804c1,0x00007b4804c20300,0x4804c23612005c98,0x3637005c9000007b,
0x12002e0500174b00,0x8800007b4804c237,0x001751003737002e,0x4804c23113007304,
0x381200457800007b,0x457000007b4804c2,0x0500175300383700,0x7c4804c23912002e,
0x003937002e680000,0xc203007305001759,0xc27c6000007c5604,0x007c5704c2391204,
0x3bd303002d7e1000,0x72df7e5000007e56,0x6000007e47440203,0x00160b3351030016,
0x6800007e4717d203,0x007e5717d4030016,0x1230028cf07e7800,0xca7ea000007e8866,
0x007e905823620300,0x485e2403002e9800,0x2503002eb800007e,0x002ec800007e485e,
0xd000007e4863ea03,0x007e4a63eb03002e,0x4a157801002ed800,0x7801002ee000007e,
0x020aff0500170315,0x7ef0270013000cdd,0x0017000cdd020aff,0x007e6f408e7ef82b,
0x000e5f3f007f3000,0x5f3f007f083f004f,0x007f103b0060000e,0x7f183b003a005f3f,
0x202b0028005f3f00,0x602b00270066627f,0x080015201366627f,0x7000007f286b9c42,
0x2b0400140899f37f,0x597f5800007f5ada,0x7f5000007f486b35,0x7f682b001100540b,
0x620900155813540b,0x666202002a601a66,0x6819355908001504,0x00110035590300a4,
0x23000e35597f782f,0x18d503003c881500,0x03187f9027001100,0xc800007f462a0403,
0x00120091ef0300e4,0x0ba60d030016d817,0x007f472a04030016,0x000e45020016e000,
0x03028e7ff0270012,0x8e801701cf00ecbf,0x00008057f8800302,0x58028e02002e8010,
0x02002e3000008020,0x380000802858028e,0x00804898f103002e,0x4ae99403002e4800,
0x4101002e50000080,0x002e580000804a2f,0x18050017031ef301,0x0000805714c40303,
0x00005c0203188068,0x5f1bfa80702b0017,0x10c7a680a8000080,0xc7a680780000805f,
0xa680880000805d10,0xa680900000805dc7,0xa680980000805cc7,0xa680d80000805cc7,
0x5bc7a609001503c7,0x08c7a680e8000080,0x00805b4244040014,0x00805c424480d000,
0x00805cc7a680c800,0x001503c7a680e000,0xa603002a0ac7a60a,0x09424404002a08c7,
0x00805f42440400a4,0x80450f424480f000,0x199f03003cf80000,0xbc4981082f001100,
0x4981180000815c10,0x4981200000815bbc,0x7981280000815bbc,0x4981300000815b81,
0x4981380000815bbc,0x4981480000815cbc,0x0081500000816bbc,0x81580000815cbc49,
0x81600000815cbc49,0x81680000815dbc49,0x81700000815dbc49,0x81780000815fbc49,
0x880000815f0fbc49,0x000081470fbc4981,0x0017e2301200ce90,0x301300d09817003a,
0x002e0500170317e2,0x2827001300116302,0x1704116302002e82,0x8b6e000d01b70f00,
0x1b00110001b7a81c,0xb81b00100001b7b0,0xb7c81b00100001b7,0x01b7d01b00100001,
0x846681d82c001000,0x846681e00000815c,0x846681e80000815c,0x846681f00000815c,
0x846681f80000815d,0x846682080000815d,0x846682100000815f,0x6682180000825f0f,
0x8220000082570f84,0x89821b24ac030189,0x0500170324ac0301,0x008248f9e603002e,
0x5ab3f103002e3800,0x6f01668248000082,0x0531827800008230,0x3182502f004f000f,
0x82582c0060000f05,0x82602c003a000531,0x82682b0028000531,0x82a82b00270001ba,
0x31080015681301ba,0x82b8000082706a05,0x3103001478180531,0x82a0000082886a05,
0x98000082906b0531,0xb02b001100053182,0x090015a013053182,0x3402002aa81a0234,
0x0974650900150402,0x00110005310300a4,0x23000e053182c82f,0xd02fb84d82d02b00,
0x0082f87a008fab82,0x15048fab00869000,0x03002b0b8f570a00,0x8f5703002c098f57,
0x3e0a8f5703002a09,0x0200150a8e150300,0x8e150200290b8e15,0x15002de50300150a,
0x5103019e84282500,0x3612004084282943,0x60000084585558d3,0x001100640f03002c,
0x1089530200156814,0x0200147015001002,0x3d7816001000368f,0x00849056108c0200,
0x0a3782030015a000,0x001100097f020015,0x84b87bf23184b02c,0x68f2310084d80000,
0xf18384d0000084c8,0xf0000084580bde01,0x845825c601f18384,0xb701f18384f80000,
0x008518000084670b,0x0016030ba501f183,0x8546627e036c4a03,0x75af030156780000,
0x0301408516001500,0x1658000085450386,0x1600110000c30300,0x110000ac02001560,
0x1714020015701600,0x19932d0300156819,0x110092fd03006a70,0xfda2030015e01600,
0x0300159800008546,0xa9d80000854719fe,0x00008546b6cc0300,0xd019019702002bd0,
0x006a0aeb3e04002b,0xf01600110006e402,0x00150a272f030015,0xf800008546a0db03,
0x0085451370030015,0x00adec0301520800,0x0a03001518160011,0x5831840300150a0d,
0x01f2fd8620000086,0x8638000086580b4e,0x008658059201f2fd,0x087401f27b863000,
0xf27b865800008658,0x6000008658319701,0x861201bf01f27b86,0x1fdf01f27b0601ff,
0x4d60045d00001603,0x0603fe636f6c6c61,0x09001c003a00e01f,0x321fe80900052de8,
0x00e9d7321f01e9d7,0x3f03e9d80a001503,0x006904e777301800,0x18e80a0413e9d90d,
0x02e9d9081ee84890,0xdf0a13e9d90c0597,0x0b1304c600d826e7,0x13e83200e02be554,
0xe7e0000127e9d990,0xa01309d403e9ee0a,0xa9a819ea5509ea94,0x41010022e7f502ea,
0x2a001000066508ea,0xea04181398dc0118,0xffff000005340ef0,0x0c007c040001ffff,
0x81ff080028808081,0x0508808080072880,0x1000058207103000,0x1000058410000583,
0x5000058610000585,0x5000330828808080,0x1000232880808208,0x1000232810002328,
0x0587072830002328,0x0589100005881000,0x058b1000058a1000,0x058d1000058c1000,
0x468f1000058e1000,0x0591100005901000,0x0593100005921000,0x0595100005941000,
0x0597100005961000,0x0599100005981000,0x059b1000059a1000,0x059d1000059c1000,
0x559f1000059e1000,0x05a1100005a01000,0x19a3100005a21000,0x05a5100005a41000,
0x19a7100005a61000,0x05a9100005a81000,0x19ab100005aa1000,0x05ad100005ac1000,
0x19af100005ae1000,0x05b1100005b01000,0x19b3100005b21000,0x05b5100005b41000,
0x19b7100005b61000,0x05b9100005b81000,0x19bb100005ba1000,0x05bd100005bc1000,
0x19bf100005be1000,0x05c1100005c01000,0x19c3100005c21000,0x05c5100005c41000,
0x19c7100005c61000,0x05c9100005c81000,0x19cb100005ca1000,0x05cd100005cc1000,
0x19cf100005ce1000,0x05d1100005d01000,0x19d3100005d21000,0x05d5100005d41000,
0x19d7100005d61000,0x05d9100005d81000,0x19db100005da1000,0x05dd100005dc1000,
0x19df100005de1000,0x05e1100005e01000,0x19e3100005e21000,0x05e5100005e41000,
0x19e7100005e61000,0x05e9100005e81000,0x19eb100005ea1000,0x05ed100005ec1000,
0x19ef100005ee1000,0x05f1100005f01000,0x19f3100005f21000,0x05f5100005f41000,
0x19f7100005f61000,0x05f9100005f81000,0x19fb100005fa1000,0x05fd100005fc1000,
0x19ff100005fe1000,0x05811002a8801000,0x8183600005821000,0x8510000584082880,
0x8710000586100005,0x8910000588100019,0x8b1000058a100005,0x8d1000058c100019,
0x8f1000058e100005,0x9110000590100019,0x9310000592100005,0x9510000594100019,
0x9710000596100005,0x9910000598100019,0x9b1000059a100005,0x9d1000059c100019,
0x9f1000059e100005,0xa1100005a0100019,0xa3100005a2100005,0xa5100005a4100019,
0xa7100005a6100005,0xa9100005a8100019,0xab100005aa100005,0xad100005ac100019,
0xaf100005ae100005,0xb1100005b0100019,0xb3100005b2100005,0xb5100005b4100019,
0xb7100005b6100005,0xb9100005b8100019,0xbb100005ba100005,0xbd100005bc100019,
0xbf100005be100005,0xc1100005c0100019,0xc3100005c2100005,0xc5100005c4100019,
0xc7100005c6100005,0xc9100005c8100019,0xcb100005ca100005,0xcd100005cc100019,
0xcf100005ce100005,0xd1100005d0100019,0xd3100005d2100005,0xd5100005d4100019,
0xd7100005d6100005,0xd9100005d8100019,0xdb100005da100005,0xdd100005dc100019,
0xdf100005de100005,0xe1100005e0100019,0xe3100005e2100005,0xe5100005e4100019,
0xe7100005e6100005,0xe9100005e8100019,0xeb100005ea100005,0xed100005ec100019,
0xef100005ee100005,0xf1100005f0100019,0xf3100005f2100005,0xf5100005f4100019,
0xf7100005f6100005,0xf9100005f8100019,0xfb100005fa100005,0xfd100005fc100019,
0x00288081fe500005,0xe915040001090a5d,0x3405480100080410,0x68001f000b760428,
0x033dffffffffff05,0x55055d060424d218,0x0f056905740404d8,0x3affffffffff0568,
0x04103f0ad001782c,0xffffffffff0ad048,0x3604083f05680d46,0x35ffffffffff0568,
0x1c23030ad001fc2b,0x028030055d040424,0x11000c0510e5d304,0x000b910521fa7f0c,
0x00160b1200160214,0x12001605000b9011,0x14000b821100160a,0x1100160912001696,
0x1200160814000b98,0x0424050c01001608,0x110016071200160c,0x0612005805000b95,
0x1605000b94110016,0x0b93110016051200,0x0016041200160500,0x16010a23000b9211,
0x0b97110016031200,0x00160212002c0500,0x00029451000b9611,0x10fcce0000420600,
0x1407002a01001506,0x528a0425003f0000,0x1f3fffffea045711,0x901f000033821f00,
0x000014911f000014,0x14931f000014921f,0x14000014941f0000,0x981f00140700f795,
0xff0738991f000028,0x02cc2a30ffffffff,0x17073827b82c0738,0x16069e1016073890,
0x16069e0f16067210,0x1607640e1600160f,0x3b07640d1600160e,0x0b8211079004040d,
0x0b9a110790901b00,0x0b9b1107900a1b00,0x0b9e110790061b00,0x0550010790021b00,
0x909c1f079002042b,0x1f020790991f0207,0x06073b0102079098,0x033b077a03160016,
0x000b951107900404,0x4507fe0116002c05,0xd81f077e09000401,0x50077e041f14077e,
0xa60f0f083d00022f,0x149a1f00140c1807,0x1f0000149b1f0000,0x00149d1f0000149c,
0xff08080f01fc0000,0x10201c2bffffffff,0x1f6c0f0808001c1a,0x521f50ffffffffff,
0x45ffffffffff1f6c,0x6804203f0568f81d,0x35ffffffffff0568,0x2c871c0ad006e82b,
0x16ea240405b04410,0x17002a1617842a16,0x0016291617842916,0x0016281618602816,
0x1758271618602716,0x002c261618602616,0x0016251618602516,0x8e04244318602416,
0x1617f22316001602,0x3417f22216002c23,0x7621161f6c520422,0xa22016002c211618,
0xf21f160016201618,0xf21e1600161f1617,0x1600166a041e3417,0x16002c1d16184a1d,
0xb054041c34184a1c,0x0bac1100161b1200,0x161a12002c161400,0x208a05000bad1100,
0x000bae1100161912,0x1100161812208a05,0x1200162014000baf,0x05000bb411001617,
0xb5110016161201b8,0x151200168a14000b,0x4205000bb6110016,0x0bb7110016141200,
0x1613120016181400,0x164e14000bbc1100,0x0bbd110016121200,0x16111200167c1400,
0x70421b000bbe1100,0x70101b000bbf111a,0x70101b000bc4111a,0x70081b000bc5111a,
0x70121b000bc6111a,0x70041b000bc7111a,0xce11022200cf1f1a,0xcd1f1a70021b000b,
0x042b06a101021a70,0x021a70a71f1a7004,0x70a51f021a70a61f,0x1f021a70a41f021a,
0x000b9e110222009f,0xc30f3b19eb17562f,0x0c1319c3041f2919,0x1f0000149f1f0014,
0x0014a51f000014a4,0xa71f000014a61f00,0x000028ae1f00008c,0x14b41f000014af1f,
0x1f000014b51f0000,0x0014b71f000014b6,0xbd1f00008cbc1f00,0x000014be1f000028,
0x14c41f000014bf1f,0x1f000014c51f0000,0x008cc71f000014c6,0xcd1f000028cc1f00,
0x000014ce1f000014,0x5800b8043f034700,0x0f231cda041f3224,0x000014ac1f151c8a,
0xff36600f118cad1e,0x17c1504effffffff,0x0100b1da16020000,0x010101000a0efb01,
0x766e2e0af2470001,0x705f67756265645f,0x312e7478745f7874,0x4bb2383532373131,
0x01f024c209000035,0x05030101ed030104,0x280201030100e802,0x80f0f00120740005,
0x1000050d000f80f0,0xf080011860001b83,0x20004e0a007bc802,0x002a3810004e14b5,
0x15000a0100053010,0x000052301f000f18,0x001af01e000a201c,0x16004d0400993013,
0x710b006201001018,0x0b04001901282f00,0x230f0014301e0085,0x038080f0808b1800,
0x00100e00bb200203,0x2f003782f080f046,0x00230f1000758283,0x01389001848019b0,
0x01800100c0020603,0x3003000780f02f00,0x020246003e020381,0xf0f0f05400170120,
0x0001740101f20203,0x03808181f1920020,0x022d02a901080212,0x028b00d420028b10,
0x0102c70f02d9c81a,0xc7019e2502c7c01e,0x0f02fc0f003b0402,0x0300e00201069e87,
0x0f020c381d02f005,0x00f0f08430190235,0x09011b0600f10201,0x00a905030f08002f,
0x18020303f10130c1,0x1400530590028201,0x4403005e000025f1,0x4f00c02c03960600,
0x007d010064801c00,0x0701160312005305,0x05050096181f0052,0x00430f00960b0024,
0xab021100da801815,0x0e301b0d00870f00,0x2f04001a01182901,0x6a84822101670200,
0x803702b480842202,0x03011c0200b08080,0x01005781802a01b9,0x0300f901a02f0193,
0x8817001aa8020231,0x801d020818190006,0x00770f00820b0012,0x07002202020a0850,
0x0074020038090044,0x003301902e003d00,0x00005d0f09008b0f,0xc001a605009c8015,
0x03f1808101200204,0x882d035f00e00202,0x035f02b323035f01,0x8329035f0f06450b,
0xd802040380808187,0x5d030317f4190498,0x80f3f03b00ba0202,0x80803e01a10506ca,
0x2502c428180238f4,0x02003d04004af280,0xe980f380804b0011,0x80f0330038f01806,
0xf21e015f0b005984,0x04df800128350174,0x0a02580004ba301b,0x039c0b00520d03ee,
0x014480802c02290e,0x3ef01d18009cf21f,0x0b0e006df2812600,0x05fef380f1f44002,
0x080124841f010e01,0x80100801b5f0f32f,0x181b007c801603da,0x26821700d6000045,
0x04001d0b01b90d01,0xf0210500170f01b9,0xed0801b50206b3f3,0x4bf01f0055f01908,
0x01302f0057070e01,0xf15004980501001c,0x42020147980282f2,0x01bd0f0005410f04,
0x04b40e0a01a90f1b,0xf4f08101180204a1,0xf180230565f68081,0x0722d802f03e042a,
0xf20107030102917f,0x0007b0f91f03001d,0x181d060a7d80802f,0xe01c07b5c2110041,
0x07fd0f0ac40e0aca,0x4ba0020108e9500c,0xf50d0ab900c02e00,0x79f0f0250a8b0404,
0x1701f10705bd0002,0x1a04a7f01f0036f0,0x099882f02f01c304,0x002d0f0005381e27,
0x0230000272041005,0xe824017f060ae104,0xf05500a805001300,0x201c00e182f00100,
0x8224020703100798,0xf255000f0105ecf2,0xec0b09c3f0808282,0xf028042c03032e02,
0x0602b9f11202ca00,0x01205f0024070314,0x8228020083f182f0,0xef82f282330083f0,
0x23006a04035a0a04,0x24035c010a85f1f0,0x920041020020f2f0,0xf1f18180820101a8,
0x4980f0813305d182,0x7f0f07e181802f02,0xcc81011002110381,0x04c50508a3090804,
0x202f076409009006,0x084a811505084901,0x82802901b6808024,0x000f840120330860,
0x0901f907002ef215,0x055802090c0c01ff,0x030712050100290f,0xbb81110089040054,
0x076ff18101284101,0x848080810100f07f,0xf30205ad020200ee,0x00c5070470301d05,
0x4e03088e86f48032,0xc00294019f801208,0x3b0100d002010302,0xac82822200ef0306,
0x1c06180107290304,0x8025012e0603d480,0x65040c8802006af0,0x0edff51606a20601,
0xb70503c60a05f501,0x06aa031100750100,0x030079f41700bc05,0x00510300b8050134,
0x0800cff01600bd02,0x8011029c061007d1,0x006382f1f5310056,0x00a8f082f3f38554,
0x0a65201c004ef418,0x18020a2906097b02,0x73f08425004e0103,0x0201250d00430807,
0x27031a01a02a0a05,0x00040e0f0bc784f2,0x004202010015811f,0x0c98821f00558112,
0x1200cb0400be080c,0x1c02010f00007c02,0x0510400e01c20200,0x005b0f0b520702bf,
0x310ba5030296042c,0x5c801f0215848282,0x05e30c024f050002,0x0f0bd70402c0f014,
0xf0230031020e00c0,0x09ed80802a052d81,0x0d520f0c4a01202a,0x2b01a82f00700300,
0x35f215002a030b00,0x2100820f06af0e03,0x0005061006001d0f,0x0a0b14010802094f,
0x00016a0a020a130f,0xcc070600b50f011f,0x0138021500990f03,0x050c050606b5051e,
0x01120712ee0b0555,0x047c0b0de501882c,0x0700c50f0d78201e,0x480e0bf00b106803,
0x053f030901280f05,0x061c01280f01c40e,0x740d2401240f00c5,0x105a0c0a032f0f02,
0x090380300802890f,0x133b1802083f002a,0x1709081315851f89,0xca08020c03f05f13,
0x0dfe00000a04b200,0x010c043208020e3f,0x3c010804f10f04ac,0x081101023cf21605,
0x03f2809600350411,0x077f840102b00203,0x090859030402ed0f,0xcef01700bb03080b,
0x00d87e0ce5f11107,0x1f0c3fe002f0f001,0xc5061c2019147730,0x04f417c501262c17,
0x75654e79702f3a43,0x69775f5550476f72,0x003690000e2f326e,0x106e79705c5c3a63,
0x24001e7570673100,0x205c3622000f5c5c,0x6172676f721df000,0x5c73656c6966206d,
0x2061696469766e5c,0x706d6f6320757067,0x6f7420676e697475,0x7c5c5c74696b6c6f,
0x2e38765c5c19f860,0x756c636e695c5c30,0x64754300005c6564,0x632e666675745361,
0x05cfcef8dc010075,0x0068a1001603c288,0x05fe05ceefaad902,0x697665640ef3651b,
0x69746e75725f6563,0x682e6970615f656d,0x8605c3daafe80300,0x6e756601f1001d6e,
0x682e736e6f697463,0xe0001de603007070,0x7265766972640aa6,0x003573657079745f,
0xaed003f90018e710,0x00682e6c69745504,0x29ce05cfcef9cc02,0xfa00d803034018bc,
0x01870d0774c01001,0x13e8400cd103db20,0xea01172e00238301,0x2e0040c40303310d,
0xce03033200400288,0x1002005c011f005c,0x08c305c020005c01,0xf30dcf0001eaf814,
0xa00209df03040402,0x0276a10301040102,0x1203f023001205c8,0x12881d0012b81400,
0x0203230012901700,0xb81107a2b0110d72,0x0602ff090f000963,0xc80277030114f002,
0x010180020b03010c,0x0208bab211000f08,0x085881012833009e,0x8002010350012801,
0x001203d020000602,0x0a8450007c019820,0x75fc21007c05a002,0x007680020131007c,
0x0304047100069814,0xff1200d6b0020a81,0x7d1000f87a110024,0xf20202db0c12037b,
0x1700400100640902,0x140024d8110006c0,0xf5030404800a3de8,0x8b12005804980209,
0x007c080a550400f8,0x010453010709f220,0x0a7f00007c768e03,0x0081711000777b10,
0x30000108d0021f3f,0x2a011e00f6a70304,0x1f01dcc903033110,0x0214d3120201f8b0,
0x62029c210202540f,0x00f0070301114310,0x099c2000a203d020,0xd0e40301044401af,
0x01047004b1f31101,0x41001110027d8d03,0xc4700141c00206bc,0x14cc038301080279,
0x029802024300e904,0x040470028e010543,0x14002e3002099103,0x400051e8140051ef,
0xb114001108027d98,0x01100279cf640051,0x028f029823046283,0x03040471075b0214,
0xee10002ce0020692,0x15fe030e8d02002c,0x007703100be30311,0x0336800203038351,
0x020c0302fc02a823,0x02ec07032304ee01,0xa1c8140b9d058026,0x01bf0200110a130f,
0x0100f0610c63c817,0x0201460272020382,0x52004e00003c03c8,0x4408350103f8027f,
0x0240001702d80202,0x04a020025f04f002,0x300a10002f0007bb,0x0208aa0304048001,
0x0277d64300cb09c0,0xa10011d014001118,0x08ab030404860110,0x3d77d523018ed802,
0x1205009208ab2001,0xa80202310c790300,0x06c802089e50016c,0x11020042e210001e,
0x0353001109b02500,0x6c0000ec02e80203,0x063000e811e8210d,0x001a121103948401,
0x060e802006a71215,0x021203010ec8c100,0x00f47fa4030105f0,0x114902d00200e754,
0xbf000167f0027f31,0x943f180281201d03,0x082501110125f004,0x0610011108030b13,
0x030034020000081b,0x3b063a0c3f134908,0x0b330840870a0206,0x0013490101030000,
0x5e2f134900210400,0x0b3e08030024b079,0x70000b060000060b,0x1f0700000b3e060b,
0x87012e080000a000,0x4a00004208030840,0x0a4001120111b400,0x2000150005090000,
0x00160aa000560a02,0x870b000008031349,0x00c9001c060b2001,0x0d1c080300280c00,
0x0b205600480d0000,0x00005700420e0000,0x006504001f002e0f,0x11300052003b1030,
0x1200004b0012010b,0x7100111317007534,0x3d31011d14000006,0x000006590658a300,
0x1610002931000515,0x290018065522001a,0x0027181100360517,0xba00131900000666,
0x1b2100c7131a2700,0x38b0000d0001490d,0x000f1c00000b320f,0x27261d2100591349,
0x99000039a2005201,0x65676c010801f001,0x474445203a65666e,0x07a20f88ed2e3420,
0x000108073b2f1909,0x5c1600365c3a433b,0x006d4363026107d8,0x2467b700121fd192,
0x30001b0000390309,0x00aac202239e0304,0x6f6c6605003f0000,0x6e6906312c427461,
0x4563020500747071,0x0042061a0042d300,0x0041df0304004557,0x00656c62756f6471,
0x00384663023629fa,0x040046d30038071a,0x0073786449466302,0x0023081b00230132,
0x013f030443001e01,0x050002bf06f1005f,0x64656e6769736e75,0x070074726f687320,
0x7500734b44006802,0x4b190046091a0046,0x536302003fd60043,0x706d6f436f546765,
0x220600340a1a0034,0x6f6f42630204c600,0x002f6c65646f4d6c,0xf3002206002f0b1a,
0x536c655263020400,0x020e007374726174,0x2206002f0c1a002f,0x3b00052100990700,
0x1d0039646e453700,0x3a0000200100390d,0x2b72656874615701,0x002003013c0e1b00,
0x0063655654009102,0x0000550f1d002a99,0x240812008b07001f,0xd400493400a40101,
0x22030124101d0038,0x003b0912003b0700,0x111d0039646e4537,0x0204300020010039,
0x654c7942c3016363,0x03420032336c6576,0x260902a5131b0031,0x4400012402100800,
0x45141f0045461d00,0x02044f0027050100,0x35151a0001aa4c63,0x0a00310300230700,
0xa105002f161e01a0,0x30041923003c0701,0x0b4c1f01a5171b00,0x4c05033904100202,
0x003d181f003d0500,0x6e6f5350006e0400,0x1b02a30501c76f4e,0x0480002104017519,
0x56a4006d656d7302,0x001c01032e021d00,0x07000004af030881,0x72616863612cc0aa,
0x076c4d07039e0600,0x29226c470313000b,0x40130048016b2705,0x2270099c0145000a,
0x910b000039828200,0x0600235500019670,0x1c34c229001c7309,0x053a0a0006086200,
0x726f727245956cc0,0x9601000d0b00745f,0x035d9c10003a0004,0x6363755373001700,
0x002501000e737365,0x6e697373694d01f0,0x756769666e6f4367,0x200100270c206172,
0x4179726f6d656000,0x1c0216001c0200c4,0x616974696e499100,0x007402001a7a696c,
0x614c00f6001f0316,0x6c69614668636e75,0x3c00190400657275,0x37051c001e697250,
0x756f656d69549c00,0x4f01f80019060074,0x6f736552664f7475,0x8f07007365637275,
0x4464696c61766100,0x002d0cec46130ced,0x091f00ec0a002108,0x00190a002d040041,
0x0b0065756c61567d,0x6863746950520018,0x5387001d0c1d001d,0x530d006c6f626d79,
0x666675427061e001,0x7463656a624f7265,0x210e006465460103,0x0200236d6e553f00,
0x736f48df005d0f1d,0x7265746e696f5074,0x0020040400c91000,0x786554400020111d,
0x05001a121f017d74,0x676e69646e69429e,0x616803fd01441300,0x637365446c656e6e,
0x1400726f74706972,0x70636d654da20024,0x16018a6572694479,0x64644104f6002215,
0x6f43664f73736572,0x1600746e6174736e,0x654653007d03001d,0x1e171d00fa686374,
0x756f42746f4ea600,0x5389001b1800646e,0x916e6f7268636e79,0x6946900098191d02,
0x897465537265746c,0x4e4400201a002d0f,0x2a1b18001e6d726f,0x4551015365782303,
0x1c1600d475636578,0x7472710878000020,0x180135616f6c6e55,0x776f6e6b7601d11d,
0x4e04fc00131e006e,0x706d49746559746f,0x6465746e656d656c,0xad02520103751f00,
0x656772614c6f6f54,0x8903050400a82000,0x2100656c646e6148,0x796461655278005d,
0x667573b100352200,0x44746e6569636966,0xd1013b2300270ff2,0x697463416e4f7465,
0x1e04256f72506576,0x616672758802cb24,0x2e03006a25006563,0x4345800014261603,
0x01f8726f636e5543,0x0068271708e66110,0x02d6646572616852,0x46746f4e41031a02,
0x00030026281f01c9,0x5229180206030465,0x6f7070757301f601,0x696d694c64657472,
0x7544d0001c2a0074,0x5665746163696c70,0x614e6f0081697261,0x040000212b00656d,
0x202c1f002000024c,0x00200100f1030000,0x8100f30100202d17,0x6c696176616e5573,
0x4bd8012d2e1d00e3,0x616d496c656e7265,0x190701312f006567,0x300028004c461400,
0x7461621226000040,0x439701a9656c6269,0x3100747865746e6f,0xcd41726565410543,
0x2001eb726c413005,0x3200643f00886e45,0x20746f4e34010024,0x00400300c7331c00,
0x36006573556e4978,0x724212c06f1005a5,0x1c371e003a736944,0x4e0604746f4e3500,
0x5e03002238006465,0x0064654f07be0100,0x70706f7708002239,0x737704253a006465,
0x03fc3b0074726573,0xd9796e614d6f6f60,0x0000183c00733600,0x004e0106a9040507,
0x65747369676552cf,0x0100273d00646572,0x3e16002305032101,0x061865704f300023,
0x6574737953676eaf,0x7d0701014f3f006d,0xfd06a100c0003c02,0x7470654478614d03,
0x6564656563784568,0x6946900023c10064,0x6965706f6353656c,0x00080020c2002f05,
0x04e400c3003a0282,0x21003fc41d005f0a,0x756f435505b76550,0x2000c5290027746e,
0x74696d7265506004,0x53150019c61a00c2,0x48d20019c71700db,0x5365726177647261,
0xc81705596b636174,0x67656c6c49d2001f,0x757274736e496c61,0x61210865c91a05ee,
0x003d05f9030c906c,0x20001b03033100ca,0x0020cb1e04637053,0x040073cc0063504e,
0x4e000031cd1f0051,0x47840017ce007874,0x5673636968706172,0x6c765a0100cf1803,
0x7ed01804be6b6e69,0xb670752402c80001,0x704133001bff1708,0x6573614273001769,
0x0889000a0bce9000,0x72747441746547ef,0x1600736574756269,0x21451f09a9000300,
0x218e1d0022000e0a,0x39942c001c63150a,0x03eb020085010a21,0x040017001f007108,
0x1600874a1c004900,0x0408e77611008768,0x6145008b9f1d0026,0x28bf2b001f727474,
0x2105168a0912008e,0x0c130021130c2900,0x05187465473300af,0x4f1c003700000e0a,
0x1a009d00f825009d,0x7816009e02002764,0x634fc2005e02009e,0x4d79636e61707563,
0x6c4200f206f37861,0x4d726550736b636f,0x3f07017069746c75,0x77001b002e00726f,
0x3bc016009e541c00,0x05003b6d756e3201,0x3f601700a102002a,0x1a001f0517a30001,
0x6209060840001f94,0x24657a6953450040,0x10e90024130c2900,0x696d616e79640906,
0x29002a6d656d5363,0x010e181f002a34c2,0x6c4668746957af1d,0x0024003700736761,
0x200f01be591d0089,0x581f012059150501,0x1f01205915010120,0x0120591506012058,
0x2059150c0120581f,0x6609290120581601,0x20a2004a551a00b7,0x666c6965630d0006,
0x9b400d6d00000600,0x0e01391227000002,0x5f5f0d0041001078,0x5f746e69328b1233,
0x002c00000f007a72,0x0e014500ad044f22,0x10003d0100116e69,0x0047040528126205,
0x004975170048751b,0x00490500ac046422,0x0012160500496415,0x660da53be8010052,
0x0066656469766964,0x05bb240017000009,0x0e290010611900c9,0x3e04003f05000f62,
0x0005c457001e0100,0x29001004003ddf00,0x0f0005f5000f620e,0x4e495f39334e5a5f,
0x315f4c414e524554,0x635f0af013bc5f37,0x315f69695f317070,0x3138666636656261,
0xdf6874636e797331,0x003c007645734f07,0x147b267b7f041329,0x0fff04462815141d,
0x5f080064696f7610,0x65726f666542385a,0x5074614d4834554c,0x001700745f305364,
0x0053b31302c60004,0x4602dc2715053706,0xef200026614d6e49,0x02d87df026024b37,
0xdd20001e50487535,0xabc9c8b38d3a5d37,0xb412001962090202,0x001b050805010019,
0xe4b09007b3111600,0xd4c0110204d793cc,0x0011050081581316,0x125104001126a02f,
0xb513004e78644950,0x69e6b1900640004e,0x6e49421141131000,0x001fb613001f6564,
0x7275431341000100,0x4a1241001a0d122a,0x001b491108076d75,0x0054b6120054b715,
0x727543490032691e,0xcfb9900732001642,0x001b4a1b001b0000,0x6a132e001be2b321,
0xb522002b741b0049,0x0d0104f01c0115e6,0x13001103002b0011,0x2f0011701c001190,
0x04502c0500111458,0x3015000905120011,0x2c0d0011061f0011,0x0009081200110720,
0x4875136100112013,0x00c02300e8316d50,0x17621500fb00034e,0x0701f20017c41300,
0x0204d6b390e6b490,0x290b58000013a714,0xf70002990e102300,0x2b13c52013d00004,
0x1521002be4b62100,0x11000eb712000ed4,0x003210f022003a00,0x3ac516003a13a826,
0xb812003ae6b72800,0x58113b035c05000e,0x1f0011b01f014814,0x736c03001115702c,
0x01fa531202c35014,0x01fab21201facc15,0xcd1500196e451231,0x1a0328e2b4230019,
0xd01c00110e004319,0x2d00091a18220011,0x018bd01f018b2638,0x8be216018bd31603,
0x201600cf1db82301,0x06720151d1140151,0x015002ab99c8b590,0x8903000db6900631,
0x3825160189221301,0xc3e21901c3d41700,0x0001060189e21a01,0x536b42355a5f0896,
0x0000030204c56275,0x6c0005001a0f04e2,0xe5f81f04e5dc1c00,0x802604e5dc150104,
0x001d58502504e57e,0x001846502b04e409,0x190605150404e303,0x0019060515b51a00,
0x676f4c460019b612,0x050477dc1b05196e,0x701f0518e81c04f6,0x5f12051801050011,
0x1c02051ae01b01c9,0xe2b218001c321b00,0x654e6b0499e11804,0x0732004d44497478,
0x1b001f04028db290,0x27001fb512001f32,0x1725e710037aa716,0x172d000100075d0a,
0x166811004b001362,0x11701c00110d00e3,0x0560140011a81300,0x6a5850646c4f6301,
0x7207fd00ee2200ba,0x1d020195ccb19005,0x1600220600dc0900,0x1d325f6a3b0022b2,
0x00220c003fb31d00,0x007e46140022b415,0x001db516001df415,0xb618002206007e09,
0xb81d001d321b003f,0x22b91000220c003f,0x723331a103310700,0x5f6c756d69536e75,
0x305366d903200214,0x53336d697453345f,0x1a002f0f03466d69,0x035b011d2b007a00,
0x1d2400035b87202f,0x035b7ca027035b01,0x224d736d61726165,0x220c000037e95600,
0x1d56090601d05900,0x5990e2b090075000,0x1b6d697473095502,0xd857003838db2900,
0x7929001f73090601,0x09060290eb001f39,0x626f6c47746f4856,0x0060b71300606c61,
0x0900256d654d5340,0x6d614b03cb05001f,0x6603cc02001a7370,0x0036657366666f17,
0x070de01123034704,0x86982f001187102b,0x2101711210040011,0x004b2213004b4449,
0x120602b04100c607,0x234f1e02410319f9,0x23321f0023b21500,0x70120602b4810500,
0x018f010a66547265,0x1e002f000c5f4d11,0x130602b670002f5b,0x6c7532009a726550,
0x1400e72917010375,0x052e01212a04fd12,0x052f02001962122d,0x00e86e131ecd1211,
0x4b4e1204ad013e2b,0x05820c67013f2201,0x1613020195e4b390,0xf3009e2410680000,
0x0060411505a70204,0x1846502b0060b712,0x0523060018b81300,0x052308050701452a,
0x130523b312001c06,0x4e007d4817003576,0x73b30015325f7613,0x6e65727275436d75,
0xe4014b2600347374,0x2176442f001f0804,0x129a646e6f300500,0x1f00237974697647,
0x2576442f0400239e,0x88321f0088040500,0x1f0f0088321f0d00,0x0000250f11008832,
0x3c641f02013b641f,0x18019e6945250201,0x3219001801026056,0x019ab59006320018,
0x0bf50100c5617020,0x0c001f0801003b0f,0x550001f8b9120042,0x25001d636f4c3104,
0x0006eb030ca00163,0x1f6165724141001e,0x133105b001642900,0x1e72652114b97464,
0x6413220079651700,0x722400e0661802ae,0x1f016b6e18021468,0x03036e0001001544,
0x004b09001f0701a2,0x4b321f01004b321f,0x1221004b321d0b00,0x065000650b20e967,
0x1e03011e98eeb090,0x1eb112001e321b00,0x01e064696d564b00,0x1b001cf0b4900646,
0x01001cb511001c32,0x18170be260130a1f,0x090000012a5a0be2,0x0a54b9900631082e,
0xb19007330832091a,0x000012a514630a32,0x32004dd01b0045c0,0x97981103c712bf15,
0x201000001316530a,0x4412002b10182b0c,0x130ac298e6250ac2,0x002b16502608c998,
0x0d0b2f0500a3351e,0xf82400a4b51800a4,0xa403004e0a08fd16,0x18402300a4b71700,
0xa402002b181b0079,0xcf62002be8b02200,0x2600231b70000012,0x21028600002b1b78,
0x002bb2120056fb15,0x80e8130b85501123,0x0564701309f60390,0x0e0024601b068d01,
0x14050011f01f0011,0x000929a8220011d8,0x112b1f09b32f8024,0x1f00112e30230400,
0x657213710d0011b0,0x7b1700b1646e4963,0x599813002e0200b1,0x8218002e34b82e00,
0x08ad35401133002e,0x0011901b00113a13,0x000d03002c681420,0x51941001513a1826,
0xecb220017c881101,0x11000d9715210151,0x2e030ef801000db3,0x110b00e73f002400,
0x0d3ee822005c0100,0x1802005c3ef82f00,0x09005cb814005cb7,0x160b50019b2f0b50,
0xbba0100038681627,0x971828001188138c,0x86842811004a0142,0x0171d71c01430808,
0x02268e34140a5f00,0x6650200a27011c22,0x0a2b030a3c010a29,0x060118002b00742f,
0x5715f0250a570c0d,0x09fcdc1309fc050a,0x030a567dd0910b4f,0x1d03092409a0dc13,
0x29003e7309073747,0x0f063828003e3979,0x140020050ab4050e,0x70240058060a9158,
0x7b070a540b005802,0x0724a90000230500,0x0061050961050dea,0x461f00250602a831,
0x110602aa630a0026,0x0501180302ec09e8,0x17050011b01f0011,0x129401e02b0a9c12,
0x00195e0b16002100,0x04b223238a05195b,0x001976654430237c,0x38000a3178614d32,
0x2001002b16fd0117,0x6d69446f00160100,0x593f04001a020058,0x005a3b04001a0300,
0x6469724741001a04,0x3f030019051f004d,0x5a3b030019060059,0x021fa50200190700,
0x25081800be051d50,0xe26c61746f545400,0x2109002800290221,0x0b25707261574100,
0x2b235201005c0a1b,0x061db30400160b00,0x431000220c18012d,0x0065746152690013,
0x41101fe50200860d,0x0e0028216b001c81,0x764f757047c9001e,0x6f0f0070616c7265,
0x18c5501418c50000,0x0021100028089201,0xab04220a00037a02,0x6e4970001f111824,
0x191d486172676574,0x614d6e615600a512,0x001e1300291e8a70,0x2c081f6510322001,
0x9f00c80202291400,0x0068746469574431,0x001f321303001f15,0x65488f05001f161f,
0x0020170074686769,0x1f181f003f331303,0x20191f003f030500,0x7e1a1f036e020500,
0x1f7379614c300500,0x0c00261b1f006502,0x0c00271c1f006c03,0x271d007338000701,
0x1a01f50621ba0300,0x09bc636e2201671e,0x1f1f00733801c602,0x18212f6363453400,
0x42696350ab001820,0x0016210064497375,0x220064494903ea02,0x0423696363290279,
0x02ad0601f80100c2,0x0204f601028f2419,0x0128737542320023,0x43324c7100222518,
0x261f033765686361,0x002802bf0a06044c,0x62190e4110002927,0x02d8656e69676e45,
0x696e5555001e2818,0x1f24c9001fa96966,0x1f01cd0905028929,0x1f01a6030c00262a,
0x2b8b47110501cd2b,0x0b00252d1f004c02,0x0a02c32e1f021803,0x02c62f00746c415f,
0x02c9301f0023000b,0x01ed311c0022000a,0x6b496e69616d6f64,0x0604b90104660a23,
0x7203005e331f0276,0xed70616d65627543,0x64090a0024341f00,0x690311002b351f01,
0x03120205af361c01,0x03001f371f043f04,0x05001f381f043f04,0x030020391f017c03,
0x05001f3a1f043f04,0x0500203b1f003f03,0x0500bc3c1f043f02,0x0c00263d1f010e09,
0x0500cb3e1f010903,0x0c00263f1f004d09,0x002800c02f00b903,0x0028c11f0075030c,
0x0025c21f01fa0904,0x002cc31f00a0090b,0x8d00c42f007e0312,0x6661656e69430603,
0x0706055900c52f03,0x030c0026c61f0026,0x020c0027c71f0119,0x74060026c81f07d2,
0xef7070616d70694d,0x79030f0029c91f00,0xff00074100ca2f00,0x6c69626170614302,
0x726f6a614d797469,0x6e696f0c0025cb00,0x0b060136cc00726f,0x53610029cd19009d,
0x562cd46d61657274,0x2e25417365697469,0xbf314c2205db00ce,0x0025cf1900250505,
0x2f000024636f4c3f,0x22890b0b097c00d0,0x2c0b08093900d12f,0x616e34002cd21b00,
0x001cd30029005967,0x7047bd003b734921,0xd4006472616f4275,0x4799001c04093000,
0xd500444970756f72,0x614e2008f5000023,0x21826f744130222b,0x810151d61a00e005,
0x446f54656c676e69,0x6963657250e03324,0x667265506e6f6973,0x002fd70029174b52,
0x0307ad6567615040,0x00d82f2ee2022801,0x260300e1030307f0,0x5060010217d91f00,
0x0617b3706d656572,0x3709c400da2b00a1,0x6f46362d7c657355,0x6d654d03f7284f72,
0x0034ce0a0000db00,0x79745f657a697300,0x0005676e6f6c4121,0x0c191416a5070020,
0x3480001326090726,0x0dce1a0000042c50,0x5e69003450d00023,0x34d000157d651b22,
0x0011661b250dc501,0x8b4e1b22352f4411,0x1b01107326120313,0x47100023e300734b,
0x736d431b01730ea9,0x4154d8000013e900,0x731512944e1b0120,0x012840ff8100003c,
0x1100160601164e1b,0x33cb621b2511d84a,0x3032fb7400005904,0x11002e0405c01b01,
0x041b961b1686434d,0x013a445f5f000019,0x00005f0433806e1b,0x436e1b013cb225b6,
0x001f726f466c6c61,0x1416d85011001e05,0x511100d40400351b,0x180431bc1b1516c1,
0x3d1b161325531100,0x34e5ff0000190432,0x00170432191b0150,0x0800175811e45800,
0x016036e1d7000046,0x581100190433c81b,0x170433a81b142719,0x1c1b161201591100,
0x56585a1100190435,0x04015364694d1b42,0x018042daba000077,0x0000160435c81b01,
0xd61b0101884ad83c,0x159ded00001e0433,0x00001f461c001e90,0x6e1b01019850d120,
0xb26211013f0521bc,0x0001124c1b013e10,0x1409001ba813cdf4,0x004ab010cbe90001,
0x10ca5400004b4619,0x1100004c0f00b4b8,0x4d09001c0326f666,0x0101c850c7b40000,
0x8b1c0c21114e1c00,0x0a0c6114c31c100f,0x1a1002ec00003507,0x0002f238002310cb,
0x1519254e1b22b8a0,0x0002f97012007e69,0xe071100013043357,0x14052d3a1b012036,
0x6e1b863c39721100,0x02657464666f6d75,0x611b010640036300,0x741200699e131681,
0x00b149746438033b,0x041aa40103407512,0x643603427612032f,0x0343771200147275,
0x7813001404034001,0x7911006474150340,0x0037f90a00610323,0x6d69531a6300e600,
0x26aeba00001e2000,0x00e57f120040561b,0x00a4801200406416,0x166c616e69465465,
0x1b010ca5a77f0000,0x17737569736c6543,0x524e8600bb821200,0x00fe657469536365,
0x181b012513378310,0x00d8841100ec0400,0x98000038e50a0060,0x1c101bec881c2000,
0x0634e71c0c40123a,0x121d1000129a1000,0x000c3312bd1c1000,0x074122f504118fe8,
0x04502d23b4b29000,0x1c0019e8b0290019,0x151b21f004001914,0x19001915702d0019,
0x001926682b0019b2,0x001905257f26682a,0x0008031a0001001c,0x042233b990000741,
0x1e001926982b0011,0x005be6b92f005b98,0x0741000807202a01,0x0011040084b19000,
0x14282d001914282b,0x130200b6b11f005b,0x01750f28271cdeb8,0x00f80f282e171200,
0xd02a00420c238a01,0xb390000741000819,0x26402b001104006b,0xb31f00f8401e0019,
0x221731a01302009d,0x90000640000821a8,0x009c21a82e186ab2,0x12801301009ce21f,
0xb310004109382500,0x0d78250010040041,0x10040018b7100018,0x5901009a11c02600,
0x074f22a011c02a00,0x9814020072b79000,0x5ab4100072060293,0x0072901600100400,
0xd816001004193501,0x72d81e18aa020072,0x702a020072b91f00,0xb690000741000816,
0x02012616702d143c,0x02005b27682d0019,0x25040001001f0019,0x0392b81100291060,
0x00b6122026001104,0x682600110402ba01,0x1104001901005b13,0x1901004b18582600,
0x0519902b00110400,0xc30f20b819902a03,0x1700290af8230602,0x101d008d0102aa10,
0x13020360b31f0042,0x020f25d8260268a8,0xa82a0010041b0600,0x195329a82a001829,
0x1a00300001410610,0xd80d003004007182,0x70b81800701c1d02,0x982d00187f982a00,
0x010058b81f00587f,0xf2b02700581d202d,0x2d001881102a0058,0x58f2b02f00588110,
0xf026005830130000,0xf02d042501054f34,0x4199c8b13f004134,0x0101cc3510260700,
0x1f004135102d0041,0x7234f826090041b2,0x0081f81e1b370001,0x000f008198eab63f,
0x00800f004000019a,0x282c090040b71f00,0xb31f00410e052735,0x11004138160900c1,
0x010041381e0041b3,0x04000d00820f0431,0x0000810f00c20002,0x000f008198eab83f,
0x00800f0040000481,0x582d010040b91f00,0x2a02b4b918025c1f,0x5854002e00185400,
0x58d81e0102b40f00,0x58a82a02b4b11800,0x0f027358a82e0018,0x13290b38130102b4,
0x7f05b20810062c68,0x1a216809aea799c4,0x0c001a87202c0d00,0x4200b623602a005e,
0x1204002ab8900008,0x282f001a51282c00,0x1f0078070d001a51,0x7825002d030078b8,
0x27d82d0078b91a00,0x070d001a271f001a,0x2d030078b91f0078,0x01a6b21801a62540,
0x74601b001827602a,0x03f0271e00300500,0x0825602a0101be0f,0xc8e6b59000079400,
0x82e02b001104d791,0x0205ed82e02d0019,0x082b1a08f20d0019,0x0400290006a30100,
0x2d00192e282b0011,0x005bb61f005b2e28,0x260000082fa02a02,0x2b00110400290108,
0x5b34b02d001934b0,0xe01302005bb71f00,0x11002946c0250029,0xd8250011040440b9,
0xd82d2bef01015255,0x0840ecb22e005a55,0x00294b4025005a06,0x2500110409e9b011,
0x19e8b82000194c80,0xb30f05354c802e00,0x1c001fbc181b0104,0x183a202f01ed0005,
0x580f0018871a0c00,0x1100994758250500,0x102600110400b2b1,0x102e009900060e5a,
0x06010cee1e084b5a,0x0af509101d01005a,0x110019d817001103,0x0f057f501e09a7ea,
0x206c35402a01010c,0x100300dc0105e700,0xf01e001850f02a00,0x0302010cb41f0058,
0x00024142b8270040,0x00093f42b82f0099,0x004250130100f40f,0x002900098142d027,
0x0042b21f0042d01e,0xb32f00c450f02d02,0x0018b9100300c4ee,0x0040b51f1000400f,
0x302a010643b11f04,0x45000a5c01000884,0x1986902b00110403,0xb81f00db86902d00,
0x69033181040303d2,0x0c1022051a58130d,0x50130bbf98130008,0x983f0bb6e0130a6b,
0x6d58130200010014,0x08d813015c101301,0x2203003045902f00,0x0008b01300084aa0,
0x4f702f00084f6022,0x48ea030a24030030,0x47d2010b2548f400,0x02e0274797015422,
0x29468c027026460e,0x3501df2944e00425,0x46ec124877b41247,0xf93b4622030b2d48,
0x03045428395f000f,0x043aab000ec53f45,0x290535080014813f,0x5d04ba2948180181,
0x2a35b90013e43fb1,0x03e62b475202a529,0x368a0423d400461e,0x01b029466b03b928,
0x3b01000f4a3f4881,0x0066200044681605,0x26f03f37df022662,0x89021a2719237900,
0x8123486b02452748,0x2a4a5a7113464004,0x0010573f47430388,0x47ba034f2e1c3a79,
0x913f381e0c26f100,0x19603f1d2e98001c,0x0b272b0008321100,0x3a200011653f38cb,
0x65762e4000010825,0x302e35207017f572,0x2074914302742e00,0x60202c35335f6d73,
0x101ea2612e00326b,0x353436203117645f,0x2030413673692000,0x752e20212275632e,
0x622e20342001ff3e,0x35325b6d43632038,0x38120500273b5d36,0x3231355b455f0027,
0x0b0026461f0e0026,0x4f03c90000263213,0x6f0e002a3034365b,0x00273832315b734b,
0x12002e0f035a050e,0x0512002e0f02f005,0x002d32315b3f0282,0x11002b0f02db0011,
0x5f1400560f02f903,0x120109315b636556,0x2d30325b3f040502,0x002b0f053d001100,
0x38335b4f05230911,0x0033461f14003234,0x4c1f1a016b4c1f19,0x301f005b0819016c,
0x460f005c0213002f,0x024d040619031001,0x206e726574786591,0x11002d041c8c732e,
0x5bc004e100002d31,0x6165772e00003b5d,0x2020503db72e206b,0x2e20602851702e28,
0x5fa6001320323362,0x29306c6176746572,0x0026002825062520,0x165f110018343627,
0x0b00202c305f3f00,0x2e007b0029003170,0x093103b46c1a4aaf,0x65645f9100165f5f,
0x040c315b30746f70,0x094c004a67657232,0x114c150010505325,0x7225092032339a00,
0x64726000233e333c,0xcf0104b13b3e343c,0x306e696765626200,0x752e766f6d530b14,
0x007d202c333a0025,0xa661747663003b62,0x2c50534000260300,0x646c003b42002b20,
0x2c314e003f0500e2,0x002a5d1f01095b20,0x316201002a321f00,0x7100247473003b5d,
0x6b5d302b5053255b,0x1738120017311b00,0xf30200bc3b322200,0x3b3033202c316200,
0x00e46578653700df,0x002b3a30706d7451,0x02003f3210011e03,0x3362580096020055,
0x007a0301e85b0932,0x3b746572003b3270,0x7f005b3a31230042,0x32007d003a30646e,
0x023d0e089b0d1b02,0x2b0f02480e00230d,0x311f1c02530f0600,0x0f0253311f460253,
0x011f0e230253311f,0x0f01290e10025e0f,0x1f02693112460269,0x026933162e026932,
0x0a280e1f0269311f,0x6b0f00240e026a0e,0x0b002c32332f0002,0x98321f18002c311f,
0x1e220298321f1402,0x1e0298331c029835,0x1f0298321b029832,0x0298321f07029832,
0x0299090b014d0f04,0x1f0b00350f023b05,0x0035321f00003531,0x33290b02ce321f0d,
0x312400160c02ce32,0x331f02e407028232,0x1902e432120202e4,0x1f003e341002e434,
0x02e434161002e433,0x02e4321f02e43516,0x0502db0e0e08051f,0x027a0f018504001b,
0x320511385b333f14,0x0f0279331f02790d,0x00eb0d230279331f,0x1004bd0f0502060f,
0x04bd361f01d93312,0xd9331f01d937162e,0xf90e160d8b0f1f01,0x07560e16003b0f01,
0x0f05020e2500430f,0x2f0086321f1e0043,0x5b344f1402e2331f,0xe3341e1f02e33233,
0xe3341e02e3351c02,0xe3341f02e3341b02,0x0f0402e3341f0702,0x0f02080c0f2201d5,
0x0f01058b0f24004d,0x010099321f250099,0xbd331f24004d331f,0x07361805f00a1e08,
0x5d343234002e0506,0x2f321f042f070984,0x3819042f34120204,0x2f0f040b3313042f,
0x3916042f33160e04,0x0548042f341f042f,0x44052804380f11ba,0x27004c0f04410e00,
0x1f004c0c30044a0f,0x0098331f38009832,0x354f1404a8341f38,0xa80d320a0430345b,
0x351f0f04a8351f04,0xb10f02450d4c04a8,0x04ba0f024f0d3204,0x3204c30f02580d31,
0x0f000af00f02620d,0x4d0521341f2e0100,0x170b40331f002f09,0x4130312f05383512,
0x3511108f31172e0b,0x18b40f053302053a,0x340a03a200282128,0x00c80b0334361203,
0x2e72616240001600,0x0092300920320040,0xc507009f050c1d00,0x16f30505d936130e,
0x060119960f00a903,0x002c0f04210805a0,0x30325b5a03430403,0x0a00310f04f55d38,
0x01321a18002c311f,0x09890f03002c0f05,0x0c6d0f00b137111c,0x25095714b3701016,
0x36312004e4313c70,0x3e34343c735c0239,0x110013323625050a,0x343c64665e004c66,
0x213733313c051f31,0x33313b0521371e05,0x070523371f052336,0x0f0404243633313f,
0x1f01045a0f0b0191,0x0304900a0d003634,0x0d003730322f0111,0x2c1f00e109047100,
0x36a803d7090c025f,0x6461003b30202c31,0x290301000105ae64,0xf200290201af0400,
0x7262203170254009,0x325f374242092061,0x6e752e617262003b,0x00003b3141001069,
0x2e8001533a100008,0x553233732e343673,0x8236100150351000,0x363201b36c682504,
0x00823312001b202c,0x017d371200187313,0x9c08018102000601,0x5b202c3864726001,
0x1f00673b5d2c0027,0x4a30312101006739,0x6331120068391d00,0x1f3018006f321200,
0x13051e02001d0005,0x0602013006003438,0x7074655100650000,0x70250944053b6c2e,
0x0128363221001a32,0x0128311b01283216,0x893a322c01283213,0x3a34280551371304,
0x69745205510001a6,0x31753200f1782e64,0x4731737233007436,0xeb3a352b00340005,
0xe70318f12c322802,0x02030f0718600102,0x0276050f980200fd,0x025d311401623112,
0x3200e5321103a004,0x0f5f030072313273,0x0102243311003705,0x2200393a3729001b,
0x0039331200393933,0x0fa70001013a3822,0x004632332000d201,0x734b022972250931,
0x40361200183b3933,0xf365120176301400,0x025e0200c0701101,0x02b0746f6e003b55,
0x018a337021013400,0x018b341b02b23417,0x220c0203018b3413,0x3436753302bb3931,
0x0093343164350079,0x10015e351f036809,0x029135312b02e202,0x090246341102e103,
0x0038202c38370292,0x019634130196371a,0x1d3034220196381b,0x5d30322302080201,
0x007801015d351d01,0x1f00e43b3034734d,0x05047e000200e439,0x32130200e20f1b05,
0x280200e2301a0343,0x0000e20b00570102,0x02780b0038070224,0x5d33323c00e23512,
0x351c00e338120200,0x00d80101fb010200,0x210143000200381a,0x038a361702003570,
0x130200361304b30c,0x00793a312b16ee36,0x756d640135393325,0x7602040b6f6c2e6c,
0xae32332c001f0001,0x31732900df341100,0x370201153411043c,0x381104bc31342d00,
0x12014a32342a00c6,0x311a001d00021238,0x1d352c39383b019d,0x04fe39120201a20f,
0x813912018839382a,0x01883819001e0401,0x31393d0188363322,0x65022a331200da5d,
0x00db627573003b36,0x311d001c00032401,0x9c341302cc0104a3,0x12027c0b09540002,
0x1200f8361a045439,0xf80b001d00022839,0x0f1e852c34393700,0x1b003d35120300f4,
0x1e0403570200f434,0xf4371300f4331a00,0x04950300f4361e00,0x1f00d90200f4371a,
0x220200020100f435,0x0391331300f53634,0x039234130391371d,0x16371401163b312d,
0x542c382500fc0901,0xdc39120300fa0f1f,0x0704030703381c00,0x020a30130473371e,
0x0117301a07073913,0x020c30312f076d03,0x0b38332603950200,0x0206560203950207,
0x4f010398341b00dd,0x3117059a31702205,0x13039b30312b059b,0x1c039b3813039b38,
0x013e393425039b34,0x0203613512019807,0x30312103640b047b,0x03011f30352c026d,
0x08250c001f000707,0x0022641402dc3011,0x2a050a8a04023602,0x1a05059534302307,
0x2b646623006a0000,0x313602f935322e07,0x0308b00900c03530,0x00008e35302f05ff,
0x008e361a008e3719,0x01ad371d008e3314,0x100202012d31352f,0x3031200366311d01,
0x140306d7461f026b,0x020162381e022c30,0x311304c7351b096e,0x09870d001f01096c,
0x312a005703098204,0x312e06f80400d631,0x0200d6331f00d632,0x00d633352e01b301,
0x00d645632f029a00,0x331f007f34312303,0x352c01ab010000d6,0x311f01aa0300d634,
0x570507e6040001aa,0x00d6351401ac0b00,0x023a3612023a371c,0x1e3a362a023a3512,
0x1e3212001e371200,0x1003360304540000,0x0000173812001009,0x722e766964660334,
0x5e0603ae0000396e,0x3a39310029371200,0x840000260506d800,0x0200340101740201,
0xdd3310001e040158,0x0e002c0102680201,0x0302d438312f0849,0x2a0c002002086202,
0x312102d430322801,0x110b8966150b8939,0x3b1d007d00102d32,0x010201ff351f0a2e,
0x02040235352f0196,0x14066f351b087a02,0x00a031322f08b231,0x32322900a0331800,
0x322b0402331401c8,0x120402331201c833,0x0aec30332e040233,0x0142010200be371f,
0xda020300be37352f,0x04024d0005df0c02,0x02a40200be0d001f,0x00be35322a028603,
0x00be36322c043204,0x2f0bb23312020202,0x37322f0004c03133,0x2003026a010301ec,
0x008e3919008e0d00,0x2e031404008e381a,0x0205ed0f03ea3932,0x0305ed0f046e3612,
0x05ed36722c02ae01,0x8b0c001f0401b200,0x332a03b532332a04,0x000d19361400a131,
0x083f00033808048b,0x333a07fa02013607,0x2203830201543a32,0x03bc331a001e3233,
0xbc34332e09243312,0x020065060a850103,0x9e080654331003e5,0x010146020a5b0103,
0x33332f039e0e0034,0x1f00ef33140301b2,0x01b2351800011333,0x353322039e34332b,
0x010095303422039e,0x0c9e040041011361,0x030a202c23067904,0x048b0207e93a372a,
0x4330312d0e153314,0x030007000ce10200,0x2c020043391b0043,0x32312d0cfb341405,
0x2b040e59391f036d,0x0108c5040e5a3031,0x30312a00360102dd,0x37702101c60008c3,
0x0e0d0e5b381708c1,0x1e8e03110f331411,0x34322f0e5d31342d,0x461f0e5d00030d79,
0x322b03d9030c0e5e,0x321e0678020d7c35,0x0038040398030e5e,0x321d02db030e5e0b,
0x02d3020ff4030e5e,0x63341d0163323424,0x3b322d01ea311301,0x3324030e600f00e7,
0x03060e610f00e730,0xa80303c5331b03ad,0x02e3020e61321e03,0xe5030e610b003805,
0xe731130e61331e0b,0x0203020e62371c00,0x0acc32312b00db01,0x0acb397022023c00,
0x2411f10c020b3017,0x2c173203020b3531,0x3d3331250acd3334,0x2f048b020e680a01,
0x35312f010e683331,0x3703089502000e68,0x03ec020517351d00,0x03e602015136312b,
0x04f400093434332d,0x030301aa0f2b6b0b,0x75020190361b0a9a,0x0190351a001e0402,
0x019038332e0c5e03,0x05f0383229065d02,0x0d7537312f085f02,0x051d311202650201,
0x12850406b134342e,0x01045e0200fb391a,0x04b40000fb0b001e,0x020200f40f2d4504,
0x02028434642b031c,0x0d520b001e050f25,0x0284341f00f43012,0x00f4301903270300,
0x00f439312f091f02,0xf430322202360201,0x34342f000c650f00,0xef0e05d5030300f4,
0x0479631f0ed70001,0x3634643b0dd9020b,0x001e0401ea0200f6,0x341c09270401ea0a,
0x26731303ca02045f,0x0f0000c336342f09,0x642e0de8020301b7,0x631f0ccf0001b734,
0x642b0cf602090455,0x1e050c4d0201b735,0x1c092a0301b70b00,0x2902142004151435,
0x053f090b91341009,0x341507f402113103,0x3213053f361d06e5,0x0200193b332c053f,
0x02049b34312c0123,0x9c321c0038020496,0x9d31120f68321104,0x049d391c168d0804,
0x3c167e03049d3714,0x9b331500823a3934,0x1e00fa0102990800,0x52030d80000d6732,
0x027e020301800f30,0x0bbb02049d34352d,0x02530201eb34322b,0x740201b30c001d00,
0x2306d30a00510402,0x13045e0e01b33433,0x0200d1341a11d332,0x21020211d30f007e,
0x0bcd351e07060305,0x005235332a0b0d03,0x020bcd321f00a001,0x020bcc321b0ad202,
0x2718af35642e0ad2,0x993036290c873136,0x4c31362c035e030a,0x2e035c02099c010e,
0x00b5391f00b53135,0x0b55321f0b380201,0x078f0c028c361102,0x08113f0200953613,
0x06104734362f020b,0x13a6361b01b53612,0x0a001e04089f3612,0xa5361e0385031170,
0x020200cb31332f13,0x010200cb311f00af,0x0200cb32332b01b2,0x1f00cb37362e0252,
0x01b5371206103c39,0x01b237121565361b,0x9d030ced0a001e04,0x0bbe0201b3371c02,
0x030c41351b0c0c02,0x0c3f0b001c020fbc,0x000c3f0f00333513,0xc1030059020c3702,
0x0c9a030ff8351b02,0x1309c0371d000601,0x12012c331a048237,0x181336371e01f737,
0x1301c4371a133537,0x105d5d342a00f939,0x1a0ceb020cbf3112,0xca5d3437320c6738,
0xf933332f10040e02,0xf9331f2085020201,0x332b025b37110101,0x371f02780200cd34,
0x371a137408001c90,0x0c00ce31312311c7,0x7c03037b311311c6,0xb835332f05ef0e03,
0xbc331f0086010200,0x332b029b37110210,0x371e0f520200b836,0x2a0dba3038271159,
0x2c034a0300b83937,0x220ec20200b83038,0x2f16b40e00b83331,0x009c020200b83733,
0x030738110204e90f,0x0767381204e9331b,0x373338281171381e,0x3531231170381a03,
0xf7010f82331b00b9,0x3a0e120200c0060a,0x030b0200de3a3835,0x0343391a03433113,
0x4330362e09483612,0x020065060a790103,0x2f001116361f0eb3,0xcf381202032b3438,
0xa0381811a1381e04,0x393123119f381a11,0x1401032c361b00ed,0x0a009d010020020a,
0x03032e363822032e,0x040f5132362d0a18,0x33362b0f510407d0,0x1400183631220f51,
0x020044391d08b034,0x1c00443234250414,0x3623049202004435,0x0009313224004436,
0x050e21331400910d,0x02900210250c004d,0x9e34322709403614,0x9e371f2977361723,
0xa10f023b490f0223,0xa40f00002f0f0923,0x311f0b00340f0e23,0x1b002f321f1b002f,
0x08341c1b002f331f,0x0b351f0b002f0f24,0x0f24240b381f1424,0x23f737312600240a,
0x31313c664d046301,0x14241d34322f241d,0x1d381f241d31312c,0x1f241d30312b0024,
0xe730312f08241d38,0x01ac0f049e000023,0x39361f0124200f0e,0x0f012423341f1000,
0x0f2425351e110039,0x331f2d370a0e02e3,0x132428381b272428,0x002428381f242838,
0x02053c0b0c523712,0x283917053a0d060f,0x3113002428381f24,0x0019d15d392f0f6a,
0x0f1a89040100690f,0x1b242b3318001804,0x24435d3325242b32,0x0d1f333227118807,
0x2c33322e00242c0f,0x13012c09011c0124,0x1803242c0e012c32,0x291f242c30372f1d,
0x0034351600343137,0x332e235b0324ec08,0x4b00237103116b32,0xb802391f3a322d00,
0x2f031e002c990c25,0x16920c04235f003b,0x180018d00f18d103,0x010d06351f198d36,
0x371f16fb0c377401,0xa90f18aa03020067,0x0bba0a18a8090018,0x1933391c00673213,
0x087933372a0d6d07,0x7734372a0bba3417,0x35372e08ac371208,0xbb030b9735170877,
0x30322f0011220f01,0xdd0d239c050100dd,0x322a014432322700,0x083d323222083d31,
0x0b1007030001ac0f,0x03070de3321f0fee,0x1682040fd00c1a98,0x380316bd04186e0e,
0x0016a2040b6c0a00,0x0cdf67656e3b0b6b,0x0117381f1676361e,0x0b30321e01da0202,
0x0b30321a0b303318,0x01865d302214a904,0x000cb50501df371a,0x391201df381b001c,
0x02000a56391f0017,0x00270200c10209c7,0x4f050014b930382f,0x001d000017040f24,
0x033415021704331f,0x4b33332c01e00817,0x0f142e030069070d,0x8d0800690c06161c,
0x1f020d1a35332f03,0x6837332f00038e33,0x00680c162b060200,0x006838332a038e08,
0x28038f331c038f03,0x3a31383f0d823331,0x382a039302020ce8,0x2f0a6f381201b432,
0x0394020001b43338,0x381f039602005e04,0x00e530342f00166f,0x9634642e1b0f0201,
0x96341b0396341803,0x97311f0396341303,0x02006933342f0003,0x280365341e012e02,
0x4f34342a03653534,0x6635342b03660301,0x2f03680e0d3b0403,0x1626040200803634,
0x2a01ce381700800e,0x16283817007f3734,0x0601b7351b015900,0xb7361b001e000cf2,
0xff37382f0d980201,0x00c6030d32030020,0x07166f381f036d03,0x2700ce0b06166e0f,
0xb730352a00ce3135,0x9b080d8a31352601,0x0d319b021a880114,0x37732b16800206ab,
0x00810c169d060081,0x0012b5351b116c08,0xf835132cda0b151a,0x381f009435352a31,
0x381f01e302090094,0x021598331f061598,0xfb00940915973415,0x37303634202c3907,
0x3038383134323831,0xa638303437313030,0x3b39353932cd0300,0x382a2c6439152c65,
0x7312081a022c6439,0x383f1e0b391201da,0x36312f042b06335f,0x1e1e08361c032a63,
0x3b072c620f2a6233,0xc0341309c0365f38,0x3a31393f2c610309,0x16bb363129021e99,
0x1eb20c018d30312d,0xb331191c2a30312d,0x1c2b0b021ce00f1e,0x0215220c1cdd331a,
0x1688030b260b1a7a,0x16000017f830362d,0x040315f10f497a02,0x02260215f10b1626,
0x040109311a001e04,0x3a030108341e16da,0xfe35312422120a0a,0x143214001b2e0f1c,
0x1f8e321d018a001d,0x910701076835362f,0x2f14190817920c16,0x8b361402281a3636,
0xcd7a7420048c0027,0x662509480024000e,0x008e33392e282131,0x0c0216a10c08bf03,
0x30372808c0361e07,0x26321308c00a008f,0x1805008f30372f07,0x01296d3913265832,
0x1500273436200023,0x001c3b312f25f909,0x1f1ffc0e07510102,0x2e1652020208bd37,
0x08bd371808bd3764,0x371c02273532372f,0x1226b736322913fd,0xb70327340c005335,
0xa434372f06c20e26,0xf8371e0721020200,0x35372b08f8371808,0xb2371d137e0416ac,
0x331f0203ec361f02,0x0b144e37150803ec,0x1feb021f090203ec,0x036904041e49371f,
0x391e0039021e4809,0x2fca0b0f7c02165e,0x2c3937642e167402,0x42371a03b7393728,
0x25c90e18de31142e,0x141b7b311b1ce703,0x140003b70f1ccb32,0x351d029a001ce135,
0x02020969381f0329,0x18096938642e1676,0x032a6d381b096938,0x05032832382f0880,
0x1e008e00291a3315,0x970b0d2503008e36,0x8f38642e16180223,0x8e0a008f35382809,
0x8f351f1601321409,0x8f00298b34150500,0xb7020203b7371f00,0x0102001c3b332f29,
0x0f00c73b342d0487,0x642e30a5020209d5,0x1a07f2381807f238,0x00c632332309d538,
0x25014d022736381c,0x0403b70827183133,0xa40c288a30152883,0x30f2050209ab0f00,
0x391b1d420812310e,0x180009ab391309ab,0xa4311f0430a40f1a,0x0adc0300690c0630,
0x392f28e50c306908,0x030ff5030501d334,0x392f0262381d06a7,0x0c30df0702061935,
0x361f008f3718008f,0x0606a8391f0228d3,0x3a39393228d33618,0x0115987a742401c2,
0x62361f00b401055d,0x1c550e0021010302,0xc20402015538392f,0x0fa008002efc0f30,
0x2c2730142c27391c,0x290c30e403006a0e,0x0d001f02300e0302,0x30312b068708006d,
0x36331f3116052bf5,0x313e29ab38180501,0x2934302f36583030,0x0020023017030204,
0x301b2bcd0900960d,0x361f009639142bcd,0x012a1b3915050096,0x920201cd311d0096,
0x01ce391f00bd0110,0x6530312f2a650202,0x03030165371f0001,0x29001365301f1364,
0x01d3381c00cf3930,0x3830312d2a5c3919,0x2a1a38040752051a,0x1a3938131aca3031,
0x36180c1134303133,0x381f49b930173dd7,0x0f1b55b60f021a3a,0x0f1c00440f021a4f,
0x1f2300490f071a64,0xd92c322f30004431,0x5d36355b335f3700,0xe40f480901380050,
0x1f300044351f3000,0x1b9c371c30004436,0x1bb1381f2000440f,0xb13231335b395f14,
0x001bb237332f201b,0x35392e1bb330322d,0x3e1bb439332e1bb3,0x39323c1bb5303131,
0x004c7e391f1bb530,0x80391f1bb539382b,0x001b7c39382f084c,0x0f23035b0f053800,
0x004f30312f011bca,0x1f01430340030925,0x342b334f26009d32,0x0052341f0200a038,
0x33312f0245e10f28,0x005232332f270052,0x322f270052321f02,0x0052311f02005234,
0x1f01019936312f27,0x41ec381f27005138,0x51361f2800f40f02,0x341f2800f30f0200,
0x0f2801960f03428e,0x2702dd311f010051,0x004f361f0201e40f,0x0300f2322b343f25,
0x36301f280052371f,0x27005132332f0002,0x5131332f0202870f,0x332f0104710f2800,
0x0304700f27005130,0x0193351f2601440f,0x009e0f2603780f02,0x4f092600ef351f03,
0x03220f3346381600,0x1f01005135352f24,0x0200a20f28005135,0x5133352f2805fe0f,
0x352e2805fd0f0100,0x0b230b2d0f229932,0x1b2722af341f22ae,0x1f22af391322af39,
0x1c134d020022af39,0xc40e3aed042a4b32,0x312f22b43032270e,0x2e1638040022b539,
0x6f32322f22b63032,0x10880e4354040200,0x33322a22b7343227,0x31322b4c00041962,
0xb9341f2fd70322b7,0x270122ba341e0722,0x0137321301370901,0xdb30134c783a322b,
0x0203d8010fc20219,0x378d5d3831360019,0x732d4cc302001a0a,0x94023c1e02003431,
0x001a3213001a0b46,0x32124ce1051f0103,0x4d123832663c00fa,0x4d2c31642e4cfb03,
0x1a010023fc5d302f,0x1a33312c00ce0300,0x341c001a36352300,0xce03008136130081,
0x0101040018381500,0xe45d39250019331c,0x00ff371400190945,0xb85d31250019351c,
0x0097391400970a37,0x013239140132361c,0x0099381100b1371c,0xca0200193233663d,
0x8f02001931332d00,0x3735007f30332c11,0x1d0f830123bc5d32,0xe3073e950124da36,
0xf4791f24a0371357,0x334500ca371b0535,0x357d0e34355d3430,0x357e3815041b580f,
0x0d173639141b2308,0x1b3b0e359906379a,0x0c1ba432171f5d02,0x352238202c3f39b6,
0x0417350f01870300,0x173805008431332d,0x140001267e32332f,0x27680500009e0f04,
0x373b3a2303009e0c,0x3d3932293197202c,0x343626018b38173a,0x303124168a0435c9,
0x1226021f84022e3a,0x312c350e05232902,0x30202c30982d9f30,0x0b00013032303464,
0x430122bf311521d7,0x001931142dc40b00,0x633217012dc6311f,0x507b311022190330,
0x222433180417eb0f,0x5c03006b3231313c,0x7026004233312412,0xc402133001004369,
0x1285000029331416,0xb2013daf0213720b,0x0f00f23134663406,0x332f22720200137a,
0x2fb9361805189835,0x361300ad3531313c,0x7a72222641040019,0xd10200ad751400ad,
0xfc05002933662435,0x35a033143506072f,0x590d213f05002201,0x03c2361657760b35,
0x5d05028a0202c00b,0x3a05381502f70b35,0x5b0235390302db08,0x0306c00235aa0e35,
0x00255039312f0288,0x213aea0935fe3015,0x02103f03653f2c31,0x0b256f752e2c655e,
0x04001d202c27249b,0x1f04773a302a523b,0x19008d0407047735,0x332f25f30200e435,
0x2d01850201045c30,0x003fc70303be3133,0xf3062574381e0020,0x25e4040125c30f36,
0x013bd8361503d80e,0xcf030030f40f00db,0x011b093a11331c25,0x0d03450000403713,
0x321504011b0f4978,0x00ff02011b084979,0x32870202011b321f,0x332f26420304d90e,
0xc030342f01011b38,0x00420125ab060300,0x0125ac3815011b0e,0x250204f3331f00db,
0x0300260149273431,0x023b0426500c4fdc,0x1e0179321403b80c,0x3f0232f40f04d036,
0xc4060604d1373231,0x006c381c00290125,0x04d139322f033503,0x2f01ce04181c0107,
0x055f010004d13033,0x010d04d10f002800,0x051cda39332f008e,0x3133313b336c3018,
0x32332f06450400ad,0x3f04057e020604d1,0x140004d133332f18,0xc70f002201360c39,
0xe20940bc32150127,0x6732342a02dd0824,0x2f0807cc30342f08,0x35fc06044e523533,
0xfd3334240007b30f,0x0e27e80702da0b35,0x0200bd35342f1dc6,0xda0d3e060627b202,
0x18013de331342502,0x3733222e30351901,0x6472625837062585,0x332f0abe32312b35,
0x09462b060028a337,0x3b37290145092341,0x74633f026a0109f7,0x22035304072ecd61,
0x1502810304543633,0x7a0c243605094a34,0x7a31342f02c50102,0x313c286532180502,
0x1b001904027a3733,0x01027a7316027a38,0xd20402a334140305,0x231b86045e5b080a,
0x0000be0304113034,0x1c0808fc6616316b,0x333466331f7f0100,0x37142f7b311b0039,
0x2f990c001e015bd9,0x1a001e0159ee3814,0x303830342f0b6433,0x0b00380350b70306,
0x0302303b311f549a,0x1402303d311f50eb,0xb40f00500150e833,0x03022a50381f0140,
0x038b090b8a021c2c,0x1829a33114299c02,0xe8053e0404020c3b,0x04020202014a0338,
0x4d300321c70e012c,0x850e403a0526fc0b,0x3235290085331800,0x1803403c351b0085,
0x3534663320aa0100,0x30292aeb371e0085,0x090c0211070b0a64,0x2a0b510b00440338,
0x026b391a001f3132,0x0288351b024f3618,0xdf0f3e3d00026c09,0x3ca90c005904004e,
0x5b331a001f33322a,0x1d341a005b381900,0x02200f001d391900,0x2aea0c2ea6351500,
0x150340770f6f2a05,0x1f012ac60f2af836,0x405e361f06405e34,0xf20f405e32342701,
0x030e9532342d0041,0xde0322ca341e10c5,0x311f06400c331f4a,0x400d36352802400c,
0x05400e341b009a05,0x9a341d067a03009a,0x2e5e341f10780300,0xf20c038e32362e00,
0x29d5040029cf0f3f,0x36132c8f0e3f440b,0x0a03a135362a1287,0x36362f03a10e0207,
0x361e01cd02020133,0x1b009838362824a1,0x020085381f008537,0x3a372a0085313929,
0x04070abb361f07e6,0x4591040cd30d0205,0x3424019901544c0a,0x031454670f552b33,
0x3ced0007a6045064,0x04080b5a0f009f08,0x0a0553d4371f0790,0x6e0f53d0391a0084,
0x6c3514009f070953,0x0c0d8805009d0153,0x342f58e8311b5293,0x0c2f1c030700b838,
0xb132165a06020085,0x0069022dbe671914,0x393b0f2dc033352f,0x14c6331314c6345f,
0x653036313a4bc403,0xeb020800ad391f01,0x4b0300ad39342a01,0x1235130801d10f52,
0x0a0095013e600106,0x341f0a5f35140279,0x351d031702005312,0x001f0004e7020a5e,
0x0d01210201aa301e,0x352a145e31131347,0x00f632352f0ae031,0x4b7a351a02420208,
0xfd0208003233352f,0x30362f46f9351d04,0x352404fb0200032c,0x040f2eb40c4fdc39,
0x2eb40d43a105025e,0x2eb14b632f2c8200,0x022ca20f2ca50503,0x3527057d0a001e04,
0xbd0200cf0b2ca334,0xa30200d034352a02,0x1332362f01360102,0x048403001a020002,
0x59351f027f323629,0x35733a0589020810,0x030804b50f00a035,0x1f001936352d2f00,
0x02056b0200041636,0x012c5036362e0034,0x062d5437362f007f,0x015604022d54311f,
0x371f4db90300b60b,0x9e0a0270030000b5,0x1d00840202070359,0x9e03001e02015638,
0x8104035f33362b08,0x317c035d6b321d04,0x793419003a383523,0x091862000398050c,
0x050b0409690109ea,0xd435135f3835362a,0x142dc30300690932,0x35150ce30a00a435,
0x010a5430382b0ce3,0x37195fa235140999,0x1a5fa23037260baf,0x140e9732126aee36,
0x01047b391300a437,0x13ac023311095265,0x5fee0165e6353323,0x394b0e5d7d3a302f,
0x5c3613055c30345f,0x313731325d7d0305,0x19980544080702dd,0x39312f0543693b1f,
0x02436a311f06436a,0x270262381a445f03,0x0233a20b436b3336,0x28065d33362307cc,
0x2f010a03501b7165,0xe7391c11501c3339,0x040105375f39335a,0x04010532372a61fb,
0x01050e1a690007c6,0x0d2d02040105381f,0x032d1e040d2d381e,0x0435130d2d092dc9,
0xed04030254391f01,0x018c391735530e01,0x0e03103415015408,0x0e361a2cc60306a9,
0xcb3539262cc50205,0x006b024cee6e1a07,0x393b124cee36392f,0x016e3813016e395f,
0x513a342a016e3814,0x8b3131250378032a,0x04030c3537313344,0x33030f185b010314,
0x3515329c32392b06,0x45463364305b329c,0x2f010100480f0dcf,0x060332c637382f04,
0xe1090334570f5a1f,0x6d152af037312259,0x332c02b537150161,0x391236100202d132,
0x394c105db60f11df,0x1f2e051f2d38315f,0x953a372b01633114,0x00680c0443311609,
0x0068353122043a01,0x006837312c043c07,0x04e33231291e5f04,0x04e30c6485383927,
0x371505bd03025d02,0x35362f06000b01cf,0x733d2ea0020813be,0x020159035ef53536,
0x340100d8391b0064,0x381700d837312256,0x341400d8361c00d8,0x3e120064930400d8,
0x006c34312519350b,0xfe3531323f54150e,0x003b042d2b020133,0x051932120054190f,
0x32bb3213541b321c,0x035653321c002001,0x4f34180022034f7a,0xd1351f5653381504,
0x37ee09419105001c,0x04ee040a1d05351f,0x058c0201123b352d,0x24011a7d0b002202,
0x3d03031a7f6e1f11,0x2130322e003f0351,0x002137121d610300,0x1ad9331f005b311b,
0x92333223511e0306,0x00e7361f00e70900,0x0c1bb2011b440309,0x005c0401c5020055,
0x031b4d32131a340a,0x1700003f321f00b3,0x03003d331b02a438,0x0d620a0044030103,
0x6909043730333239,0x0d070e035280031e,0x02903233323f3a7a,0x18003e031c4b0301,
0xed02029004383933,0x2503029033332c00,0x0602900d00200042,0x209808002b0243d2,
0x33381320c9647224,0x0097001a4016000f,0x1c00305206007503,0x1468c60403a30a40,
0x0400093614044133,0x2240053471071022,0x023a30302f78b70a,0x0b00220232ae0305,
0x00230332b30301a6,0x331f3c1d3533323e,0x3e05326c0300016d,0x1a3913016d331d00,
0x321f0634e3341f00,0x34e43139290234e3,0x0e34e3341b084803,0x321f0734bc0f34bd,
0x0834bc36150234bc,0x0301ce37392101cf,0x01883438313450fb,0x153516016d3a382a,
0x3712061535382b06,0xcc38150f740300fa,0x03b40f0616391b01,0x3636733d33990309,
0x0066030317030617,0x7022049b0108b80b,0x1c0a2732170a2731,0x254f303224108832,
0x0a29371906183014,0x5d362f00a1373226,0x371c06a0030021f3,0x39e30e21f3045c2f,
0x3337322439e43213,0x1f39e70439e60b5c,0x05ae30140139e832,0xf5321208813b3428,
0x4f32332a001f0133,0x089a0a1886311705,0x920c003c03557f03,0x3733702203b5015d,
0x32322c0837331708,0x313224089f040147,0x3115075f381e0147,0x2f00bd32332a01b4,
0x598c030605083231,0x020023760f579504,0x0304d131322d3aa9,0x0004d130382f47aa,
0x04d0311c07613219,0x02be383823441802,0x04d932322d08d404,0x2c04d90300d53715,
0x240e6d0304d93039,0x2f1eac0b00463139,0x2239181118933832,0x301a610539312c3b,
0x1e311a49290b001f,0x1b42ce01181c0a00,0x6302001b03241866,0x0e3c260003c6030f,
0x56361a0056055708,0x1d3719003b371900,0x600b001d33392900,0x3a392f00af331b19,
0x0600659604016403,0x1a001e054a310e38,0x3f00793817009631,0x3b04024a50323032,
0x3b39352919600a00,0x1d34392901440a00,0x0c37c9076e260e00,0x9e0a427a381504e5,
0x0100390309460203,0x0d9d0104e50937c8,0x0d9d0704e5313222,0x9e3514039e36322c,
0x281e32105f280303,0x321f383203038007,0x313f3a5302041f25,0x54321f063a543930,
0x0f0e09065f03033a,0x07bc01394f303624,0x230114860120e50a,0x3843323466306f00,
0x361f264402060dcc,0x3cdd323629051e6b,0x0e3b5734173d9d0c,0x2b013cb13315003c,
0x021e3014680c0c01,0x7270706169680e04,0x0100610200c7786f,0x5232111463030085,
0x0066361303020d27,0x01361f041c303124,0x023a0d2349030062,0x820305023a31312f,
0x3a311b0007301244,0x3a3332220e770102,0x3a38322c0e770702,0xca37322411470402,
0x32312f023a311a6f,0x311f09750409023a,0x033c24321f093c24,0x18015a033c24361a,
0xad01023e0c3c2335,0x020f023e35362f04,0x37150602020f3d58,0x361f01003d0f3e2b,
0x1c3dd838180a023e,0x080206a60128dd32,0x04680107023e0f00,0x002f383623008502,
0x6b03046f0c28e301,0x1b023e3531323415,0xb10867410366bd38,0x0067403631323e5c,
0x3432363035eb1143,0x4639413146324444,0x3c3d7939184f8543,0x00190400d7373132,
0x67303429006b230f,0x254f391f00b40467,0x323c3c9f30372805,0x03061e0267913032,
0x1f490b00250340c7,0x87321c00b0323429,0x4c8b0f0038321401,0x030067061c310100,
0x0600b034322f6c13,0x351f005304002903,0x0312c734120312c7,0xa134185c980b17ee,
0x0102427036322f01,0x00413439663a1ccf,0x010e3534295cbd02,0x321c3f190e2a6405,
0x6d432f1fe1006e92,0x4e0d038504046e93,0x03c00d3f4e37163f,0x3718003d043e9b04,
0x1f03c232372403c2,0x2f213f0203244638,0x9e37130403613237,0x28371303ff361d01,
0x4137343f03ff0114,0x372f2184020603ff,0x2b01940305006234,0x0f024d0402343b37,
0xa3030bd2010705f9,0x27f6321152800300,0x8202002807147201,0xa536372f02e90100,
0x5137130449010300,0x860f0d3730332b6e,0x0e175a313123081e,0x03011f27311f46c1,
0x341b4ab731146f87,0xf9311f470e02001e,0xfa0c67c93013036d,0x331c707e3031266d,
0x05077105311f702f,0xc9046ff9311c562d,0x5ff805582832196e,0x5bd533312b41a604,
0xc701014f02047702,0x046a350e01500124,0x351600ca331c011d,0x36312a02eb0c6cbd,
0x0402eb35312902eb,0x0302eb36312f42d0,0x0289381f02013512,0xeb30352d05750205,
0x011402eb30382f02,0x434f3038663f1e83,0xeb31352b04bb0205,0x3233323f2a050302,
0xa3030d42010602eb,0x331e002f31382300,0x05240314ff0102eb,0x4b010300a532382f,
0x3433323b521d0300,0x030902eb381f02eb,0x730f001a381e75d1,0x0037031888030121,
0x327b03690731312b,0x003503036ef9311f,0x642f006a0349cc0c,0xb639312b0156f031,
0x3b1a1b0453660a02,0x02af0202b6393131,0x011b356424011a02,0x45853216000c570f,
0x322d03d5020a030a,0x701414ee01180e31,0x0a070029e6007309,0x0a0730332c0fdf07,
0x1d64391a0a073914,0x3733323b50383616,0x08a5040182035039,0x04cc5f392c6e8a03,
0x67a60309343e371f,0x4a1203004f7a371f,0x390213950201c50d,0x03001e3332313b00,
0x02037209341f0117,0x0165036dfd0c0201,0xe4040057f631642f,0x044af90a717c0472,
0xf5081bab311113b4,0xf7020900f5311f00,0x371f001a31372e12,0x37031681020105c1,
0x02001e3732313b00,0x00f30f00250002f4,0x036a080c05f60201,0x00584f31642f0147,
0x5d0a00f304731904,0xd4351b726f35154b,0xed356422104d0202,0x0103040d35352f08,
0x021ba639382a05b0,0x35643f001d030fb7,0x030532030504d036,0x2f21d739332907aa,
0x3231030801743237,0x74311f001a32372e,0x003703177f020101,0x5602001e0972d201,
0x0203017432332f01,0x56035d29331d01a9,0x321f073536322e09,0x73f939322608783a,
0x21050786035d600a,0x073535144c420a00,0x36240306a130332f,0xa6021d7b08018d30,
0x362b016d3564220f,0x03671832180a9130,0x0f018a30342a061a,0x372e592f03094f9d,
0x09548c3514001a33,0x6fd203014e03016c,0x2f05b602001e351b,0x0ea0020374cd3633,
0x331f74b20515bf0c,0x331a4ac409015eb5,0x33313b20f1044ac4,0x0900f3341f03f133,
0x001a34372e052b02,0x333d020106c7391f,0x1e3933313b003703,0xf330342f00d50200,
0x74ae0e0128020300,0x004b21331f08e803,0x4b210a00f3363329,0x65500c00f3343624,
0x2f0bb30202053613,0x0416010302643436,0x0f840303f131392a,0x1f9736642f001d02,
0x012a79012a4b0205,0xc80f0267311a0267,0x372e328231130825,0x020174331f001a35,
0x0c00073212013803,0x06580f552103001e,0x7435342c02850303,0x083b331f083b0301,
0xa10b03bc39332a00,0x391f01763836245b,0x08015839140403bc,0x10a7030f5d0303bc,
0x014f030b2c39362b,0x342b0f81035d4002,0x090156361f07b032,0x0f001a361e06bb03,
0x37032b1a020206bb,0x02001e3734313b00,0x030306bb341f06bb,0x670306bb341c0306,
0x190007ae34312f33,0x31145c100c07ae34,0x0f03bd32362a5c11,0x0e063a3513090d6f,
0x0202063a351f0d6f,0x35312c0037032b6e,0x3a351f063a025769,0x3a0c001e34130306,
0xae34312f34af0306,0x313c530a34180007,0x1a786b0300f33434,0x03090b760f00f237,
0x1f001a38372e2b83,0x032b3e0201033b35,0x001e3535313b0037,0x0305a2351f031d02,
0x00f237352c021a03,0x0000f2361f85ef04,0x00f2371c01e53819,0x2f21270a00f23813,
0x05a2030900f33937,0x0205a2351f78ea0e,0x313b00370259e503,0x1f05a202001e3935,
0x0d02f6030305a236,0x5d2f0f3392048972,0x0b63c105026b0300,0xa9005d3231145386,
0x74434c3c7b002725,0x65723043ee706d65,0xfa6c6c613130a867,0x202c6029a6d90f0b,
0x7d40006c29002800,0x657393bafd202f2f,0x763020646e452071,0x0d03180359990e82,
0x0d328233352f12a1,0x030317641e025903,0x01320a034e0472c2,0xba0a003d050fb403,
0x0e351f18a8381428,0x79381e2c74030002,0x0c00200002cc0217,0x37322224ac011775,
0x4d331c24ac071775,0x3133241d4d33141d,0x1600012e341f83a4,0x381f01300a2fe737,
0x00ec39352307818d,0x312f3314037eeb0c,0x0533160300068935,0x13d10573250b003d,
0x372f03068931362f,0x2213ae02010a4533,0x7d33372a0a2e3764,0x2ddb02090d1e0f01,
0x341f001a3138733e,0x39032d4e02030e13,0x873112291c311b00,0x020312e136312f2d,
0x01323636313c01eb,0x190033ac0f036b03,0x24736d311b33ad31,0xf45d342a01303537,
0x14806413143e0208,0x0144df0305a9371c,0x35362654260c712c,0x02e60300a70a020e,
0x3736313b005d680f,0x37372456c40a01d9,0x0f019e5d372a00a9,0x733e005502090d48,
0x019e381f001a3238,0x0b033b0304ef0304,0x36312f306402001e,0x0c7aba3613031194,
0x36312f5dcf031194,0x311b5dd1090056f1,0x30372c13b4055dd2,0x3a37120cef021448,
0x3037230655371c09,0x35342410ef03019e,0x311300899e0f10ef,0x32372f0de50c5dbf,
0x312c3127030e04ec,0x5b01741d031b5337,0x0630200304ec0c00,0xb50401d1341a003d,
0x02005d2c35372f0c,0x0304ec33382d00ab,0x770104ec311d4626,0x072239393270320e,
0x09053408331d2380,0x36940e04ec331434,0x012e0c337e373123,0xb237140704ea371f,
0x2f237d0303110c26,0x73db030008383731,0x130468ae0b003d06,0x382f040f2f381f06,
0x22152a02010b7331,0x7b31382a0b7a3864,0x762103090e170f01,0x0a331f001a34382e,
0x003703020302010f,0x0602001e3337313b,0x2e02030ca3371f05,0x2a030ca337312c23,
0x19000f0a38312f23,0x550574530b0f0a38,0xfa0104e833382b02,0x0b011f010021022a,
0x382e694b3813034a,0xa50d309f0304e834,0x0ebc381f02e00300,0x0d0b01d536382a00,
0x361b00a735382474,0x9203090e3d0f04e6,0x371f001a35382e02,0x5a0304a80302019a,
0x2f0294020ce70b60,0x299902030ce73731,0xd10400f50a028d01,0x3938280007b40f00,
0x0400f338382a04e4,0x76021676381d8570,0x35382c068938120f,0x6f38145a3a03019a,
0x41e20f04e437140f,0x0209d03039313f00,0x39130e04e431392f,0x39030b02391c0274,
0x0304e40c005b0129,0x08530b003d06293b,0x4aa434392f00f504,0x2136382d00ab0200,
0x0926430303160227,0x313322237f0104e4,0x36332c237f0704e4,0x353324237f0404e4,
0x39313f5e7e0e04e4,0xe636392f0409d035,0x39313c29c7030704,0x391f021c03012936,
0x3d058e94040007f7,0x1f070204021e0b00,0xd039382f04105939,0x3864223f76020109,
0x0f017d39382a071f,0x0e06613813090f40,0x03083232382f0f40,0x382b04b304047802,
0x381f050602001e32,0x63b0303223027aa6,0x322f8fb1034fee0c,0x10353018006fd930,
0x5b391517e330322a,0x33e10204e8321b50,0x23611a0c12a46413,0x85da391f106c3032,
0x130309d033302f00,0x6fe630322f8f3832,0x323a01d935302900,0x00a9331400a93430,
0x090fec0f04ea351b,0x1a3838733e055b02,0xb00204019e361f00,0x3638313b00390204,
0x37382f050a02001e,0x382c05210203019e,0x361f00d30400f738,0x2a717838180000f7,
0x2b2b4c0400f53730,0x0203710104ec3830,0x019e0c011d010021,0x241b283913102503,
0x02722b0f04ec3934,0x2b7a010109d0391f,0x992f32140b04ec0f,0x4dfa03726830312c,
0x7539040095ef301f,0x382312af0a003d05,0x01d133312f00f539,0xec39382d00ab0200,
0x04ec391e03560304,0x33172631023dd502,0x0404ec38332c2631,0x351e263133142631,
0x09d00c332e0361a4,0x030404ea0f336201,0x0361d832642c3368,0x0074d532642f3243,
0x1c0b003d0732b803,0x228b311f334a0402,0x010109d037392f04,0x002401003e02055c,
0x091ccd391f017b09,0x001a30392e071203,0x303f03010836311f,0x02142a0b51123913,
0x02142a39312f070d,0x2d1639312c337c03,0xc10d002001552c03,0x0833b7016f750874,
0x31322b025504012e,0x02806430312304e8,0x1474fb38392c0d22,0x570362e00e731c31,
0x557e321509d20c33,0xd734322a00557f0f,0x2855010f61321a01,0x019d5d342a00aa02,
0x2e396e030910570f,0x021a770f001a3139,0x313b003703315d02,0x1f050502001e3539,
0x3c348c030214d539,0x00d20400f6373931,0x6d17080000f6351f,0x321400f409348701,
0x36038201371d00f4,0x9b301d2806301346,0x20680301a0371476,0x3a382f04ec313524,
0x2533fa31196c1430,0x092c3f013e453232,0x32392b15bf05001b,0x34382b10b00501f7,
0x36372c54ba060035,0x50381b022d06001b,0x1500850c1cbe0600,0x001b32352c006b33,
0x050086341d003605,0x86050086331d0e05,0x8805001b38322c0c,0x0970050087321d19,
0x1d07ed050087311d,0x391c014204008730,0x38382c4d7a050086,0x30382c012604001a,
0x83371c010b04001a,0xa0361c010a341400,0x01c2361c01080403,0x001930362b010604,
0x0401a4351c010404,0x650400cc351d0102,0x0038180033341c00,0x1d011804007e0844,
0x331d00980400e434,0x00e40b34370500e4,0x009a090622303129,0x9a0401650d00b404,
0xe63118004c301c00,0x2f30580404d10c00,0x66350f0c03c43b31,0x08672e0200130101,
0x1b5b09343642a674,0x3834323fa72f0400,0x3428a73904040021,0x0021363125002137,
0x004330302f5a8005,0x2236342f5b4e0504,0x34323f5a5d040400,0x3f5a650304006635,
0xa103050021393973,0x34150500c9391f59,0x03040043341f00ca,0x00213739733f5a95,
0x2136392f4a0c0305,0xc70f00a636140400,0x341f00a636140500,0x1f012c36150400a6,
0x012c371504002233,0x01d5050501b3321f,0x010c05050022311f,0x3f5b0a040501b40f,
0x3124040022393332,0x002338332f00ab30,0x371f002332312405,0x0023303224050023,
0x00ae04060023361f,0x331505002335332f,0x31250501590f00af,0x2505015a0f00af34,
0x02ed321f00af3531,0x0600450f01e20406,0x05017e0f00ae3615,0x68301f00ae373125,
0x0f00683438230500,0x00ad3931240501e5,0x3032240501a2321f,0x697d08245400015c,
0x1403009f0f000b01,0x000033331f041331,0x0033321403008d0f,0x000b01699f3b3429,
0x3303001602aaed0d,0x0f087e0810b80100,0xd40208590101c3c0,0x31140009202c2200,
0x331f000932140009,0x2f087b321a03087b,0x30352f06087b3934,0x087c30312f05087b,
0x2f06087c31352f07,0x30312f05087c3235,0x087d33352f07087d,0x2f06087d34352f06,
0x36352f06087d3535,0x087d37352f06087d,0x2f06087d38352f06,0x30362f06087d3935,
0x087d31362f05087d,0x2f05087d32362f05,0x34362f05087d3336,0x087e30312f04087d,
0x2f05087f30312f05,0x30312f0508803031,0x088135362f060881,0x2f05088230312f04,
0x36362f0608833031,0x088337362f050883,0x362f060883311f05,0x8339362f04088338,
0x0c01023131280408,0x08830f45f7040883,0x2f0c088339362f4c,0x83311f0d08833836,
0x0d088337362f0e08,0x312f0c088336362f,0x8530312f0d088430,0x0c088535362f0e08,
0x312f0d088630312f,0x8830312f0d088730,0x0e088930312f0d08,0x362f0d088934362f,
0x8932362f0d088933,0x0d088931362f0d08,0x352f0e088930362f,0x8938352f0e088939,
0x0e088937352f0e08,0x352f0e088936352f,0x8934352f0e088935,0x0d088933352f0e08,
0x352f0f088a30312f,0x8a31352f0e088a32,0x0f088b30312f0d08,0x342f0e088b30352f,
0x088b371f1f088b39,0x01290f0108f10f1f,0xa20f0908f1331f03,0x1f0908f1341f0301,
0x08f135150208f135,0x00cac60f08f1391a,0x140009041708f40f,0x030906351f000934,
0x21fc0f05ef00332a,0x0e002500195c0308,0x590301290b0f001b,0x0919590100380319,
0x14e10f9b8703001e,0x14e10c0035371303,0x19c937322f961f03,0x1b00220351070400,
0xa70f437805134431,0x04fc011ebb03067c,0x34f13a322d132a01,0x2704000603161f01,
0x331f01463a332a00,0x331e24c604090146,0x350301295f0f001b,0x3530323b00380319,
0x148a0f7e8203001e,0x44c00d0164371303,0x018a4e371f156403,0x2486ea0b01463519,
0x067d5e0f01463530,0x2d195c03619d3814,0x021c4f0201463435,0x5a0f002738140006,
0x4e220d377f02043b,0x240f001f033aa502,0x31663c3abd02144e,0x302366dd0316e236,
0x0500db371f000838,0x352d240703007404,0xc6044da706443236,0x00f0044432371baa,
0x527030342a353204,0x7839352b35763116,0x005a371311f50147,0x55311b0042303624,
0x22770309614b0f37,0x00630403a3bd361f,0x5f393c0fa3bf321f,0x234e61341423f134,
0x2a31362c1a213234,0x880e006833372546,0x0200498a34372f4d,0x34372f0038020292,
0x818535372f048185,0x3518028185321f06,0x83321f4985048184,0x004d7c36372f0681,
0xbe0309016931362f,0x2e009b026a800d38,0x7639372f4d773737,0x003b0320c502064d,
0x02051701001e391d,0x382f6fd9381a00a4,0x011f6902054b3532,0x32362f4d6d0b0020,
0x362d23a6030800d8,0x5603015301005032,0x1e4e0201c3341900,0x003935382d00a602,
0x51024bbd0a027b08,0x0266d40a003f031e,0x05340a0021021ceb,0x02b267381f1b5302,
0x8b0200026231392f,0xe931392d0037021b,0x832d391f017c024b,0xbd0302832d321f07,
0x23487f0348800c1c,0x1548760e03c63235,0x332b03ea04010f38,0xbe0400190403693a,
0x36322797dc34184b,0x656f7da3391c7da3,0x17d41e207972746e,0x1800400f027da00f,
0x7c007cc3097d9c05,0x2c312f1e00440f0e,0x0f7cff321a33008c,0x0f7e74331b2a004c,
0x2c0040341f2200d9,0x400f03c4007d8807,0x1f2c0040361f1e00,0x685b302015ce7537,
0x7d3c0e207d3d0f70,0x361f1198ee32332f,0x0fceb2391d00ceb1,0xceb438342c00d106,
0xaa38342f08d1080f,0x03270f75e5020179,0x004a0f0277c00f1c,0x4c331f037a400f22,
0x341f0279eb0f2300,0x0f0179940f23004c,0x0f03793e0f23012d,0xbe8536312f2400e3,
0x7d520f2400e40f01,0xf10f23004d351f03,0x0f2401ca361f037d,0x0f2402620f017b64,
0x21004d371f037f2e,0x00490f017b58311f,0x00004b382b323f21,0x7bef0f23004b341f,
0x720f24004c351f02,0x0a23004d391f027e,0x004d0f81960b7d2a,0x4e0f038195341f1e,
0xdf0f03804a0f2100,0x960f027ccc0f2203,0x960f02017b0f2300,0x1f0100e1371f2300,
0x007c1b0f22017938,0x7d090f230389381f,0x040f24004c371f02,0xff0f24046d0f017d,
0xfa0f2405060f027c,0xf40a2009af0f007c,0x0895a65d35353579,0x17371b14dc030017,
0x170894f15d332500,0x79d1351b17350300,0x18047aff0c3a8b03,0x2f186a047a660c7b,
0x18341b03c8753b35,0x661ac88d36312800,0x49047bdc661cd3e3,0x1c00e90300170b6b,
0x900b7a0c037ad833,0x1fc9450c165c046b,0x2b164603037c9e30,0x0d03371300a23973,
0x661c16980200170b,0x7c2c0c371b037bfb,0x9f983b382b7c2b04,0xc738382f047ec60f,
0x237ec830312b0d7e,0xca30312f7ec93031,0x3ff60cbc0902017e,0x180038390f0dfc02,
0x058158331f7ec834,0x0100a17e0f002a01,0xee0f04c3160f0f03,0x6bba0ba17d080134,
0x5d0c077c4f383126,0x1e057ec20f696502,0x300a011f027ec035,0x3a322c0130321401,
0x7d440d1ac1057d2a,0x0098b8311a1ab904,0x301400d9650f0145,0x33154894361b125c,
0x5c590b001f018fe4,0x191e6b0d1fe33115,0x830393940d661a30,0x0973310a1e6b0a7d,
0x75351b001a0428ac,0x27ef341d5faa0634,0xd1092686095cf509,0x09673a091f700965,
0x1e030c678d051f6f,0x0f0082301c1e3605,0x3616297b0e07297c,0x331f0320ff0f9ffd,
0x0420fd331e0620fe,0x332d0620fc0f001a,0x1a038ecc0720fb34,0x0d20c30501ba0c00,
0xa0341c20c2051f89,0x331e052148391f01,0x001a0287e0082147,0x21600fc8125d302e,
0x29db0f0729dc0f02,0x02215d0f88ea0800,0x332b04215c38332f,0xa20a695906215b39,
0x0220870fb5d50720,0x342c04208631342f,0x09b5ce3616208532,0x29040992f8062084,
0xbf0f06a503c90607,0xc6f50f06a60100c7,0x00b9910f06a70100,0x4b0a77f00720c807,
0x0906aa02b8dd0922,0x18b80422610b6387,0x312c01510a00a704,0x0fa0363616227630,
0x3100acf4060529c2,0x089702b7dc381700,0x3529007904001809,0x352a819b05001834,
0x322f21b705001833,0x219b331f4a219c5d,0x322f0d219a331f0c,0x2198331f0c219932,
0x322f0d2197331f0d,0x9530322f0c219631,0x1f0e2194331f0c21,0x2192381f0d219339,
0x361f0d2191371f0d,0x0d218f331f0c2190,0x8d331f0d218e331f,0x1f0d218c331f0d21,
0x0f218a0f0f218b33,0x0f21880f0f21890f,0x0e21860f1021870f,0x0f21840f0f21850f,
0x21820f0e2183351f,0x80341f0f21810f0f,0x311f0e217f0f0e21,0x710f09fc0053217e,
0x00ed0f94e5010604,0x0e879a04218b0402,0x200e87d332190020,0x00200e880c341900,
0x0511ee0588453619,0x29371f0c9a022a96,0x4a341f0d8a040422,0x21321f0dc3050522,
0x31342f04ce040400,0x342f0e3504040021,0x090e6d030400a230,0xa304001e38150121,
0x2604002031332f0e,0x0100200fbd485d33,0x250200200f881d07,0x0601e10f84775d35,
0x1f0a23390fde7f03,0x0ed534140200df35,0x043e0204001f301f,0x600205001f39662f,
0x9077010305860fa0,0xc005009e0e89c508,0xe50f0002f4341f01,0x8b190123d9040303,
0x150304a10f00340d,0x000034361f010736,0x0034371503009d0f,0x75381f002475371f,
0x7308d84d38160224,0x24880f0fef6c0f24,0x000936140009042f,0x24a3381f00093714,
0xe038190dcd341203,0xe98a3113b4bd071c,0xbc63657330ef8a03,0x5f8fef782e202100,
0x01007b206f666e69,0xffffffffffffff00,0xffffffffffffffff,0xffffffffffffffff,
0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,0x62618f2f017d1d04,
0x030f7b2076657262,0x20636f6c5ff6ffff,0xffffffffff08a77b,0x7365676e61728f85,
0x75706e1600317b20,0x060f00336d616e62,0x040000739cffff03,0x0422001018000823,
0x1700181013000c11,0xb022000c00001826,0x0000181517001802,0x131700302013000c,
0x1117004813170018,0x082347000c050018,0x22000c0000182a00,0x00180d1700180110,
0x0018271700300d17,0x0a17003003000c01,0x300813000c000018,0x9008170018081700,
0x000c000018251700,0x0018011700d85813,0x40000c2810000c00,0x2400000df000081c,
0x000600080a03f100,0x1903014401400000,0x8400300c17040144,0x0009f00001420007,
0x0010400006390010,0x21f0000138000575,0x0010300004390010,0x41f0000060000384,
0x0040000275001003,0x000148002081f000,0x8000010100300038,0x1000041e0400e1f0,
0xc800101c02f20098,0xe8000015d8000015,0x6300b815f8000015,0x00c4014800000138,
0x0cc2003405013004,0x0027f00000277800,0x0050220018280800,0x0df2002040110008,
0x146000001438001c,0x2678000026580000,0x2760000026a80000,0xf800005427700000,
0x0160530124301301,0x01b867006c700000,0x1d50004c01c80000,0x09fa001c19f00004,
0x34c800002e380018,0x86a0000082f00000,0x8728000087180000,0xffff4000010000b0,
0x00042613019cffff,0x0008111300080d13,0x0004271300082a13,0x4002300400140d13,
0xfd400008fffffffe,0x07f2220053ffffff,0x31022007c9220030,0x080122022c00080b,
0x22003c07dc220040,0x0007e83100480810,0x02e40008053102c4,0x003818000007fa53,
0x140201a800467033,0x640000103a4c2600,0x3c00001034e42600,0x540000102f7c2600,
0xd00000102a202600,0x1b00001022182600,0x9c0000101ae02600,0xb400001015782600,
0xcc00001010102600,0x340000100aa82600,0xfc00001005402601,0xa00c130040a81300,
0x1250001017382200,0x141602e829000000,0x0fe02a0104000020,0x2600100ba02a0010,
0x2a032400004007f0,0x1025382a002006e8,0x1c16004020082b00,0x1bf82a0240000040,
0x1000101a28260050,0x6600101916002437,0x0010187000000036,0x0000d00700a03510,
0x17001016d026017b,0x3210001000010033,0x3110001014160020,0x0d1a00f0131b00b0,
0x2a00b00a482a0010,0x0110581700b00950,0x001006782601eb00,0x0010051600802e10,
0x1004880000002d66,0x10031600202c1000,0x807e1602102b1000,0x1076d02602000000,
0x106fd02602200000,0xa06c382a02400000,0x386a00106b482600,0x2a00206798000000,
0x9062f02b002066a0,0x5e502a0020611a01,0x2a00205d582a0020,0x2054a02a00905d30,
0x702600104be02a01,0x202b033b00001047,0x260010411a018045,0x00803910003022a8,
0x4015e02b00801d1a,0x1000070003200300,0x8d2a01d00b004024,0x03c00b4e2a03c017,
0x0ac52a03c00b062a,0x2a03c00aa82a03c0,0xc003862a03c006e5,0x152a03c003512a03,
0x03c0008a2a03c003,0x06082a03c0003c2a,0x2a00b003a32a00b0,0xb0036b2a00b00387,
0x492a00b003512a00,0x00b001ab2a00b002,0x01732a00b0018f2a,0x2a00b0014f2a00b0,
0x2028962a00b00133,0x188e1b01a0b01300,0x30851f0348e81300,0x1b0400307d1f0400,
0x1f0030b813001874,0x18275c2a0400306c,0x18541b0030f01300,0x08f9e71300010400,
0x1202741e1000cc00,0x017826cb2a00100e,0x18c31b0010869822,0xb81b001084282200,
0xaf1b0288f9130048,0x9e170018b9130018,0x800000001f530018,0x77130030941b0090,
0x35130018811b0030,0x50130048661b0018,0xf82200a8341b0048,0x1300182c1b00103e,
0x2200181f1b0018e8,0x0018171b00103f00,0x00300e1f07007013,0x3020130018061b04,
0x1813001825d82a00,0x00130018d01b0018,0x03004825c32f0018,0x103590220018bb1b,
0xaa1b040030b21f00,0xa42a003040130018,0x1b03e8c213015025,0x1b07e0b813003088,
0x1b07e89813001880,0x1b00486713004876,0x00102e302200305a,0x102bb0220018521b,
0x411f040030491f00,0x040030381f040030,0x003070130018301b,0x00c080130018271b,
0x30161f0400301f1f,0xa82200180e1b0400,0x220018051b001029,0x1824fd2a001082d8,
0x18f41b0028f01300,0x30ec1f0030e81300,0x1b040030e31f0400,0x1f003060130018db,
0x0030ca1f040030d2,0x0c1301c824c52a04,0x1b040048ae1f01c8,0x1b004850130018a6,
0x1b08f07813001887,0x1c0018701300187f,0x541b08f00300485c,0x311b001840130018,
0x291b06e000130018,0xe32b0918f8130018,0xdb1b001803006023,0xb81b091898130018,
0xb01b076018130018,0x188d1b0a98040018,0x18851b0540d01300,0x60401c0018c01300,
0x0018381b00180300,0x9822bb2a07986013,0x189c1b0d17dd1301,0x18871b0018831300,
0x18701b0018291300,0x18511b0060d11300,0x183c1b0018771300,0x18251b00181d1300,
0x18111b06789c1300,0x21982a0018241300,0x5d1b0ea9ac130018,0x451b00184e130018,
0x2f1b0a70f6130018,0x191b00189e130018,0xf42a00185e130018,0x1b00181e13001820,
0x1b0870dd130018d1,0x1b00189c130018b0,0x1b00185c13001891,0x1b00181c1300186c,
0x1b0b10db13001849,0x1b00189a13001828,0x2a00184213001809,0x0b48ea1300181ff4,
0x00187a130018771b,0x18381300181efd2a,0x1b0307c81e452f00,0x1f0180e01300183d,
0x00302c1f04003034,0x8710220018231b04,0x1b0400301b1f0010,0x2b09b0921300a816,
0x2b00480306c01d05,0x2a00010303f01cfd,0x1027602209c81b85,0xf0a81300187d1b00,
0x3070130018741b03,0x00300300186c1c00,0x185b1b040030631f,0x30521f0030681300,
0x2a0400304a1f0400,0x0aa8c51301081b44,0x001853130018311b,0x00010408e81b162a,
0x50371300301acf2a,0x1b0300901a802f01,0x1f0060c013001878,0x0030671f0400306f,
0x30e81300185e1b04,0xaa2a040030561f00,0x1b0030f813001819,0x212a0001040018a2,
0x1b0660a8130bb819,0x2a0478f013001819,0x03587013001818e9,0x0268b8130018e11b,
0xa81213013818bc2a,0x7538130030a11b00,0xe818130018991b02,0x3050130018901b00,
0xb8d0130018881b00,0x771b0400307f1f00,0x6e1f0030c0130018,0x040030661f040030,
0x20231c0400302b1f,0x00181a1c02880301,0x030018121c003003,0x1b040030091f0c48,
0x2f1078b013001801,0x17f02f03003017f8,0x040030e71f030030,0x30d61f040030df1f,
0x58130018ce1b0400,0xa8130018981b0030,0xf0130018901b07f8,0x101300185e1b07e0,
0x20030060561c07b0,0x7513025817312a07,0x20130030161b0e30,0x280300180e1c0090,
0x3030130018051b05,0xf004003016fd2b00,0xec1b030030161f06,0xe31f06a850130018,
0x040030db1f040030,0x30ca1c040030d21f,0x8016c12f06c00300,0xa8030030b91c0301,
0xa81b040030b01f06,0x9f1f04e090130018,0x040030971f040030,0x861f030228168e2f,
0x1300187d1b040030,0x130018751b0030a0,0x0400306c1f003000,0x0468f0130018641b,
0x30531f0400305b1f,0x13025816362a0400,0x001815ed2a0258b7,0x0018bb1b00181a13,
0x00180b04e000bf23,0x009015682f000104,0x05d0040018601b03,0x304f1f040030571f,
0x58130018461b0400,0x2a0400303e1f05ed,0x00306813001814c5,0x2a0001040018bd1b,
0x2b111f0311f81471,0x2a00010400186900,0x0138f81311c811e9,0x2a0001040018e11b,
0x001dc013127810c9,0x2a0001040018c11b,0x0018f8131258102b,0x2a0001040018231b,
0x0060681312c80f8e,0x2a0001040018861b,0x184c401412a80f07,0x2a00010400180e1a,
0x1b003004135804e6,0x96170001040018de,0x6e13001824170018,0x1804149004130018,
0x1832170018401700,0x1831170018031700,0x2c17001803d32600,0x2b170018a4170018,
0x331700186f170018,0x2d1700182a170018,0x17001802f9260018,0x170018c01700182f,
0x170018881700182e,0x1700185e17001837,0x1700183317001834,0x001801fa26001836,
0x0018cb1700183517,0x00189c1700183c17,0x0018681700183b17,0x0018221700183917,
0x1800ff2600182917,0x18c7170018281700,0x1885170018301700,0x00502600183a1700,
0x061700181b170420,0x732a00181c170018,0x1b00106b1b0ba00e,0x1b0010521b00105a,
0x1b0010391b001041,0x1b0010111b001019,0x00100df92a001001,0x0010d11b0010d91b,
0x0010b91b0010c11b,0x0010901b0010981b,0x0010771b00107f1b,0x00104e1b0010561b,
0x0010351b00103d1b,0x00100d1b0010151b,0x10f51b00100cfd2a,0x10dd1b0010e51b00,
0x10b51b0010bd1b00,0x109c1b0010a41b00,0x10831b00108b1b00,0x105a1b0010621b00,
0x10421b00104a1b00,0x10291b0010311b00,0x10011b0010091b00,0x10e91b18f0f11b00,
0x10d11b0010d91b00,0x10a91b0010b11b00,0x10901b0010981b00,0x10771b00107f1b00,
0x19a00c0010561b00,0x0010361b00103e1b,0x00101d1b0010251b,0x10f41b00100afc2a,
0x10db1b0010e31b00,0x10c21b0010ca1b00,0x10991b0010a11b00,0x10801b0010881b00,
0x10671b00106f1b00,0x103e1b0010461b00,0x10251b00102d1b00,0x100c1b0010141b00,
0xe41b001009ec2a00,0xcc1b0010d41b0010,0xb41b0010bc1b0010,0x9c1b0010a41b0010,
0x721b00107a1b0010,0x581b0010601b0010,0x3e1b0010461b0010,0x241b00102c1b0010,
0xfa2b0010021b0010,0x0311c8081f15f008,0x1b0010ce1b001004,0x1b0010b41b0010c6,
0x1b00108a1b0010ac,0x1b0010701b001082,0x1b0010561b001068,0x1b00102e1b00104e,
0x1b0010161b001026,0x001007fe2a00100e,0x0010d61b0010f61b,0x0010be1b0010ce1b,
0x0010a61b0010b61b,0x00107e1b00109e1b,0x0010661b0010761b,0x00103e1b00105e1b,
0x0010261b0010361b,0x0006fe2b00101e1b,0x0010e51b00100b01,0x0010bd1b0010dd1b,
0x0010a41b0010b51b,0x00107c1b00109c1b,0x0010641b0010741b,0x00103c1b00105c1b,
0x0010241b0010341b,0x4005fc2b00101c1b,0x0010e31b00100b05,0x0010bb1b0010db1b,
0x0010a21b0010b31b,0x00107a1b00109a1b,0x0010621b0010721b,0x00104a1b00105a1b,
0x0010221b0010421b,0x00100a1b00101a1b,0x1004f22a0010021b,0x10ca1b0010ea1b00,
0x10b21b0010c21b00,0x109a1b0010aa1b00,0x10821b0010921b00,0x10591b00107a1b00,
0x10401b0010511b00,0x10171b0010381b00,0xa0fe1b00100f1b00,0x10e51b0010f61b20,
0x10cc1b0010dd1b00,0x10b31b0010c41b00,0x109a1b0010ab1b00,0xa0711b0010921b00,
0x10581b0010691b21,0x103f1b0010501b00,0x10161b0010371b00,0x02fd2a00100e1b00,
0xe51b0010f51b0010,0xcd1b0010dd1b0010,0xa41b0010c51b0010,0x8b1b00109c1b0010,
0x731b0010831b0010,0x5b1b00106b1b0010,0x322a0010531b0010,0x1b00102a1b109002,
0x2a0010121b00101a,0x0010e91b001001f1,0x0010d01b0010d81b,0x0010b71b0010bf1b,
0x00108e1b0010961b,0x0010751b00107d1b,0x00104c1b0010541b,0x0010331b00103b1b,
0x00101a1b0010221b,0x00100b011000f92b,0x0010d81b0010e01b,0x0010bf1b0010c71b,
0x0010961b00109e1b,0x00107d1b0010851b,0x0010641b00106c1b,0x00104b1b0010531b,
0x0010321b00103a1b,0x0010191b0010211b,0x0010001b0010081b,0x00100b0c8000982b,
0x0010801b0010881b,0x0010601b0010681b,0x0010501b0010581b,0x10301b031000382a,
0x10201b0010281b00,0x10101b0010181b00,0x04031a2000082f00,0x001d2f1098080010,
0xffffffffffff0001,0xffffffffffffffff,0x141c04050af2c6ff,0x1b9c0002c0880000,
0x001c041e86400000,0x3220b33cdb681c00,0x0032c010ca030012,0x002ee4c03c00049c,
0x1c002a310008059c,0x00181c000e310008,0x310008039c001e40,0x22261000081c001a,
0x1c0022e4c03c6114,0x007f9c0402900008,0x3c7020d612e08000,0x00087f9c0016e4c0,
0x0030161300201213,0x203e642400683a12,0x001000071c10a100,0x221300089c1416e2,
0x7004009026130070,0x21ea0e1000800400,0x021000b00400a007,0x1032e4c03c501872,
0x9c1436e084b30088,0x001832e08040007f,0x202000089c003631,0x1021e580b3217630,
0x2826c0840000041c,0x2820182200780c00,0x0028081c10194000,0x2100900c00281e13,
0x1019e45f0028180c,0x2828120900280c1c,0x28101c1011e55000,0x01200c0028161300,
0xc002300050100022,0x0150027423249a1f,0xd802016004000804,0x3222463cc0803201,
0x001003015003fe19,0x1c003ca10010181c,0x603c0212007ffffc,0xbcc0150008851f00,
0x0608a0b800b0a010,0x04055f01b8089c00,0x0140100250012c1c,0xa0108f00a0941c04,
0x021808a0a0108010,0x181e1602181a130d,0xa010b10210031002,0x141608a010b8a010,
0x130038321300109c,0xa01fc00245003836,0x14027c9000510128,0x1000180ee62300f0,
0x0d08a0a070003ea0,0x0240040090011c0c,0x140e2100300c0e22,0x4000301ae623243a,
0xc0040028021c1819,0x0894a052003e0101,0x1c14c24b0030181a,0x0400300318003003,
0xa0400028c6130028,0x0030070080b8a0a0,0x0030e21100300418,0x80081900207ca027,
0x288a082100410200,0x280c180028a81800,0x20101000203a1e00,0x2808140041a01200,
0x48141800282a1e00,0x003d000020221b00,0x181c181948008000,0xbc1000b8e6160028,
0x1800381962250028,0xea1600800c00e8c0,0x5806180028040038,0x013f020020ee1b00,
0x19022d011808b82c,0x000101880a1f0048,0x060880b8806501bf,0x010140c01f01b815,
0x1fc0823000f8a213,0x0010801a74324053,0xaa08500241b8b821,0xa8822200183c1fc0,
0x27fb1fc0aa300018,0x0a300068a8aa7432,0xc0aae65828b71c15,0x00c010130018411f,
0x0080ca1300200e13,0x68ca130048c8aa22,0x80600350c8c92001,0x110090191c00cac0,
0x10a07c80420020ca,0x0000520018010140,0x00380600080522e6,0x0030040200381c1f,
0x382608803d003f02,0x130900381a9c2f00,0x103702c00100302a,0x0a00380f007008a0,
0x0030d01000682e16,0x08a010b053040000,0xce3100380403d8ce,0x1c11223000089c00,
0x01001141e6302917,0x4005181546c08442,0xa0400020281c0142,0x0146310180b010b8,
0x169e41202000109c,0x00389c1122e08053,0x0030040200381c1f,0x003808b826003f02,
0x381a1f0070251c23,0x003f020030040900,0x00389c112208b051,0x2e1300381c112931,
0x88251c012a410038,0x202200089c012106,0x0330112120003829,0xa01043003ec08421,
0x1c01224100302608,0x00089c0121066824,0x21e451003020e421,0x00280b0690141c11,
0x00300400c0b8a022,0x101f06c01d202034,0x0206c028130906c0,0x06a02108a03300bf,
0x182038250500300f,0x8110120028081807,0x20882f0030081c00,0x120140b813130748,
0x05d821e4200030e0,0x0028c4120800300f,0x0140021c1021e259,0x0030c0160400300f,
0x014005010058011f,0x1300300c13003003,0x130500580f082822,0x281f014007002800,
0x1f0110a0160900b8,0xb821042511014026,0x0025110140241f00,0x090030221f014021,
0x0140201f0168ec16,0x401c1f0030e81611,0x00b02503bf000201,0x021300e8a8130140,
0xd02c1c10114803d0,0x1c07001fc01eb008,0x40043000003c8480,0x081407c300901012,
0x1480231b5b020850,0x1008182212230898,0xa0da981c3c005026,0xa00383a0a08c3000,
0xc02600019c202508,0xc240004300080db7,0x222100280407c822,0x9ccc26e0580288c8,
0xa010b8107500c004,0x202a2200c080a080,0x70040d00780f0578,0x7808a02f007f0200,
0x143f007810130600,0xa01050010160049c,0x013803472fb8b0a0,0xc01400089c000130,
0x000d1c001dc209d0,0xa07800003cb3101c,0x01200401285c1109,0x941c301141028004,
0x22030a38341f0168,0x1c30114802501108,0x3c42d91010002895,0x300c13003008a0b0,
0x00005201b8021000,0x30114a0938166ae6,0x0c02c0020040901c,0xc55f004068120040,
0x040900988c1c3011,0x881f0030801602c0,0x580b000c12090030,0x0f02c0841c3011c2,
0x1f00588816050030,0x0404000401005880,0x7c1f003020160030,0x0088122022090088,
0x090030781f018007,0x0140741f00582816,0x40701f0030401611,0x6c1f003048161101,
0x002810c025090030,0x30c816110140681f,0x40221b0058641800,0x02c810120df00401,
0x0430601c3021c551,0x05f003030458341f,0x5c1c303e0540c515,0x00580004880d0030,
0x0505400f00285818,0x58541e0030210025,0x0030081605400e00,0x28a016090030501f,
0x00300f05404c1900,0x584b1e0030a81604,0x5822242206800e00,0x00884a1c30214f02,
0x214f028022282a09,0x2c16090030491c30,0x16110140481f0058,0x110140441f003040,
0x0030411f00e8c016,0x40401f0058441609,0x3c1f003048161101,0x1f0088c816110140,
0x0280211d0a028038,0x884c16090030341f,0xe816110140301f00,0x251101402c1f0088,
0x0030181e00302200,0x1c3021c45f08780d,0x1f03380612028014,0x0030a01611014010,
0xc0881e0900880c1f,0x58060a02b0081f03,0x6025110140041f00,0x110140031f00e822,
0x0030021f01a06416,0x40011f00286c1609,0x2223003080131101,0x160c01400f0a1030,
0x090088281f006084,0x0170261f0140381e,0x0140241f0058060a,0x40221f01408c1611,
0x201f0030a0161101,0x140028a416090030,0x0140b0102601401c,0x020e220030020a22,
0x00e81e0820310030,0x2208404d1c1a6a40,0xc0360e240dc83209,0x020a4309c0dc1100,
0x210008010038411c,0x06aac05200380a08,0x00381c190038411c,0xa02c003f02003004,
0x2f0038ae15003808,0x0030040100381a9c,0x003808dc24003f02,0xc830312200380a13,
0x1203142834362f0d,0xb88010c040142830,0x2cd2043208310001,0x0602210af836e623,
0x02f005ea7a300a48,0x400320064e7aa840,0xa840035805e27a90,0x7aa832039005ca7a,
0xd0064a08300001b8,0x100806467a904003,0x40040805c27a9040,0x9060016806427aa8,
0x4000081d1c062e7a,0x264000081e1c062a,0x00400400081f1c06,0x7aa84001b805aa20,
0x0a7aa840022005a2,0x05027aa861028005,0x04b8041000882c1c,0x6804e804e27aa840,
0x0080381c04127aa8,0x7aa840056004ca20,0x4a7aa861059804c2,0x3005100080441c05,
0x06f0052a7aa84006,0x63072006227aa840,0x0040541c05227a90,0x98058a200b401010,
0x07c8040e7aa84007,0x61080005827a9040,0x0070641c056a7aa8,0x2c1808582c1c0033,
0xb825100180100860,0x580c15d00c0900b8,0x0060681c06864116,0x6e400100691c0638,
0x06664000106a1c06,0x0806622000086b1c,0x0940042a7aa04009,0x20741c048a7aa861,
0x7aa86109a8041001,0xc00100c07c1c04aa,0x0a20040208b84012,0x7001c810027aa042,
0x10800000821c0402,0x109c130010411200,0x83100020559c2300,0x805300c1a0110010,
0x9c1100181c100208,0x0c100503380c0018,0x549c002a41001803,0x10a0801084a10930,
0x4000101c002e0880,0x35c00008519c0032,0x3ab7803408001e88,0x003e390010071c00,
0xb8a000180400089c,0x820880b8b800b8b8,0x07fe7aa8630b1004,0x01808c110008881c,
0x657aa0230bb00610,0x240268003c11303b,0x0210b82116001200,0x380f051618081f00,
0xa505100008044516,0x02080c1016300f53,0x091860121b024004,0x0de0050170070db8,
0x4000202e13164803,0x2e311638051c202a,0x160ad80400089c24,0x8002007004006026,
0x2c1e2f0608281200,0x2217c820130317c8,0x0500280f06e82819,0x1017c80f00281013,
0x04054f4917c8081f,0x01700f110180041c,0x17980400a81a1305,0x040170221303c00c,
0x106115f81a100190,0x0d00089c1c1ee200,0x1c1f0160181317e8,0x511900041f2e0138,
0x8010b8acb0a01091,0x0f01480f04400508,0x1a981e1306480e13,0x1318c0b800801040,
0x1302a816131ab01a,0x04f004462002b812,0x4204e004427aa040,0x800404d8040a7aa0,
0x08a09c3f047e0101,0x1044117d002502f8,0x88421303000880a0,0x19880c00a0461300,
0x8c10a0106600100c,0x0405b00c17c010a0,0x2c641c0c01300208,0x30011100a80ac023,
0xb010801040009d01,0x12400400c0acb010,0x402c2e2f03702a13,0x130a1240ac1f0512,
0x0c11c83613005832,0x08800000bd0007c8,0xc03600019c3035a2,0xc8321311c8300db7,
0x1c20324100280411,0x88069c24301c3806,0xc8102000483a1300,0x00283e088c34007f,
0x3a7a283300783810,0xc80c00783e130078,0x3e00019c383d8205,0x0d08a042007fb7c0,
0x0500783a13007838,0x0078071c283005e8,0x090078079c2c3e43,0xacac5f1240010048,
0x80c1231240383008,0x6208a0a08000a0a0,0x9c003002586e1c04,0x622200400402c010,
0x0e0748661111f824,0x42080200a0200020,0x66131a50000108b8,0x30721c0456400030,
0x7aa0600778521100,0x4a110008761c044e,0x0220227aa0330780,0x1302282613028004,
0x131de04e1602b84a,0x5213000801024802,0x7d00003056130038,0x2c19b00102000101,
0x9c100da21c48e600,0x601001b7c0160001,0x0001680100200701,0x120880b48061017d,
0x9c2416e0580c3820,0x680410d80c10e002,0xc280a02002b00400,0x0300702608a03401,
0xd805141001151418,0x04e0020500011502,0x001080560b000414,0x1e6003171f382208,
0x1200980b0550c51e,0xe00406a80c030000,0x0880041fa01a1601,0x80001a0000006809,
0x0020021300280c01,0xb000502810056005,0xadb9999fc00ee550,0x981c5200d01e7401,
0x04700c01c08010dd,0xd80401c80a1dc00e,0xe008a02400400200,0xc02e9301482a1300,
0x1012741ff800001f,0x841f1ba01c162100,0x8c10a0a06f000480,0x1002130404a00e08,
0x0000102d03180100,0x0880400001a41102,0x2ae5413000603c32,0x282adb8028700e40,
0x1c2812910008051c,0x15c82adb80100002,0x00051c3032e400b3,0x8001002812db8020,
0x8c12048080a02804,0x12002e5d71000480,0x1320a0029c230090,0x400c004001018000,
0x001c2820d0021505,0x283400b802100510,0x00b0a0200190cc00,0xaa9fc00e08809302,
0xdda06301980002aa,0x041800804400003c,0x16000005c80c0658,0x040a0b780f068003,
0x82000001800f0a40,0x78040d0628081f02,0x0f007e0000400d04,0x7a1c045e40000040,
0xa0240ba85a110428,0xc00408700c03787a,0x1e00019c180da205,0x280703781801b7c0,
0x1048481103780200,0x0858039c4c1ee058,0x08a02d0cc010a020,0x02100404500f0860,
0x01c0051e00000298,0x0008b010bca0806f,0x30781fc002400509,0xa0011e90000e2300,
0x00600298e0842100,0x20044280a0107ca0,0xe08040430de71e08,0x0f00405e1300405a,
0x08a080dc631104c0,0x04c01c1204c01812,0xc53000d80303700c,0x00e0411500283c1a,
0x053808b02f053f02,0x7f0000705012221d,0x5416088000106f00,0x020502200f0b0538,
0xb8071780801504bf,0x0404b80904f80c04,0x08802f04bf0204b0,0x80061a00051d04b8,
0x0230051a04b80f06,0x1d04b80f00409c12,0x2f04bf0003400e15,0x04b0041d04b808a4,
0x04b808802f04bf02,0x3f04bf0104b0041d,0x40051d04b8088010,0xb808a02f05800103,
0x04bf0204b0041d04,0xc0061d04b808802f,0xb80f0640b8002803,0xac00280500061504,
0xc0051504b80f0280,0x0040a01508810102,0x0504a00f0504a80f,0xb810a09c80b01085,
0x3f04a8501304a808,0x182f0a0d00039c54,0x03c048152b03c09c,0x4c1608a080b8109f,
0x101824011a00029c,0x140205109c1f08f8,0x0c1404300f058080,0x08802f08ff020428,
0x400f01080c0d0430,0x04409c1fc9ffff04,0x4304400f08e80e2b,0x2f16000008005816,
0x04480a1508785c16,0x041d08780f0d4004,0x008c3f0d40010448,0x220a500215087808,
0x407a20270a607a20,0x0104480f0a80090d,0x410185ffff0d400f,0x1404480f06000e04,
0x0d3008b82d127f02,0x520c80011408880f,0x2f1e0040110880a0,0x02c2210a2eb84416,
0x08802f04000c0038,0x400008b0041d08b8,0x00401a131d400007,0x08c803042e401e1f,
0xdca0103100a8e51c,0xa80c1500b00f13c0,0x089c803f08ff0100,0xa00300a8051504b0,
0x0501c00e25800103,0x2eb80525800400b0,0x2e981c1821009004,0xb080acacb0b004f4,
0x1c00021c0c1e08a0,0x0015201e001edb18,0x121304c812144bd3,0x1e17010019130038,
0x30b80f0f00000100,0x102f00180ec23204,0x12e1c0184300e00e,0x800200700e100ae0,
0xf0030e80b0a02016,0xd00d14f00c162200,0x0814120108101302,0x2c00000f480e1301,
0x011f01c098a0a030,0x240f480e13091848,0x001348020f480c22,0x90089c80b042097f,
0x019c1c1e7ca06f00,0x00050f200c0102b0,0x07c000a0a0dc4726,0x0c0da200f8100c2a,
0x240ec88003ffff9c,0x021f101812160010,0x16021815130106c0,0xc00c01080a021011,
0xc00f0680dca02102,0x403f012822100506,0xa4a05f0708807400,0x2a20060880a08010,
0x902ee54031007038,0xff9fc026e340a11a,0x00ae0058741c07ff,0xa0a0b4a48c107478,
0x503007b001068000,0xdc081c6005b81ee5,0x60e5144a921c2c12,0x15800301002a1400,
0x0f01180401301213,0x4000044001150110,0x1501100f01180b00,0x0f0980a41e06c001,
0x2201102e130518b0,0x4c02800001102c32,0x100f011808a0b4a4,0x2001109c30210e01,
0x3403c006320000a0,0x19400900781c002e,0x001c1011c800080c,0xa010a4a0c34081fc,
0x0f00a02c12222800,0x40070100090d00c8,0x00889c1f1cc00e0a,0x9008140081a0120a,
0x03c0011d00880f00,0x01102a150006c00f,0x161b03380b003803,0x480b0e03380f13c0,
0x80a41103c0321505,0xf830102333f00400,0xe400004108780009,0x0080e3802f17d822,
0x002a400602a00b2e,0xb8201301800630bf,0x7021130570161305,0x0103235044262f05,
0x02e008a0a033057e,0x12e6006004a8c212,0x3016140570021c14,0x0758074b7210100b,
0x0000be0005681012,0x000f0d05700f00c0,0x22008810102a1505,0x9824322305001011,
0x203c05009c182f00,0x050c380f0140dc10,0x00480c1c0500261f,0xe5405108c8382220,
0xe8161303f09c2026,0x0b700d0500121b03,0x081ee550300ad001,0x041c243803f00001,
0x1c2f0500221d0500,0x00dc102e25050006,0x002a1f050d480f05,0x10261300480c1c05,
0x0500051c242a4801,0x3f0e01100f01180c,0x3806010500049c28,0x00080c0b301c1900,
0x006805050014152a,0x1e500f04789c2c21,0x040500030d00050d,0x000f0112280f0d00,
0x9c182f05880d6105,0x0405002a1b3a0500,0x1205002810230568,0x803603c802050020,
0x1940031f0c101ae3,0x6019160c181d1301,0x0519400f01700a10,0x0e19400c0c80b812,
0x80020303100f0570,0x0f0d00f008dc2f0c,0xa02e138002050310,0x001303100f042808,
0x04280e134000043d,0x01043d001303100f,0x0e150c04280f12c0,0x090200019c2f0920,
0x10019c2f02000d15,0x134002053f011101,0x1401100e1f011809,0x2808802f053f1011,
0x150110019c280704,0x802100a00201100e,0x050428081f0102a4,0x043b580504280e13,
0x4080311f20000008,0x2008a4a03d043ee3,0xa00c0d2200080b00,0x982c122100100403,
0x09300e1580e51400,0x151380081709400f,0x20040c900a17c00e,0x00200203200d1503,
0x031f1380022a3f01,0x0a13800e1d190f38,0x3f011502100f0218,0x0f03280e31c00006,
0x0202a01021120210,0x090707480f07000e,0x081c0741a0120210,0x24290602100f0218,
0xd80515000402101c,0x3980021c07480f01,0x18d00f032808a02e,0x024002011012130b,
0x080515067008a42f,0x31043f0201100314,0xe3402f05702608b4,0x1c0741a0121d0748,
0xd801000804043808,0x050318e340803f0e,0x2808a02f06c1a011,0x102f0903000f0d03,
0x0402b804170d40a0,0x03280f0a00040320,0xa010400503200f0d,0x0503280f24400000,
0x801c003c8c24d004,0x8c1227b812007ff7,0x2013271808120001,0x1327387a20222728,
0x1324802013247020,0x24a07a2022249020,0xb8233dc08c7a2030,0x24e87a2022250080,
0x28400f27d07a2022,0x9415000180b8200f,0x400f1d28400f2b40,0x10881080108f2d2b,
0x32130d2b20088094,0x00081618361501a0,0x1c03080f09800702,0x0880ac8044003f00,
0x20202264b6021570,0x1021155020130410,0x06402ff8222138db,0x1165920e740ff842,
0xb806160000047fe5,0xb8202a2125300928,0x8622002082e42316,0x0326703a1016c82c,
0x983e101600000080,0x0020821327180726,0x00100e1300188613,0xc03a1516c80c0d22,
0x08a01080a4a46406,0x300b183c2a200038,0x803073277832e541,0x5e0008061c3032db,
0x010540db80380007,0x10051ba0081f0102,0x3a203fc04112b088,0x1c881e741f600470,
0x0001103a13011007,0x3e08a4a4a45316fe,0x5e1a9c383a300118,0xf08613010882e523,
0x822109d0803a2227,0x1c282ae450052038,0x88d100be00009010,0x00061c282a088010,
0x503000c032db8080,0xdc581c3f32b01ee5,0x83841080300d1d48,0xb8821318a808142e,
0x0468040ea086130b,0x030088111c003241,0x90682ac03e1410d8,0x2217c0b8acb4b8ac,
0x8000042217c001e8,0x381e1230567b0014,0x200018dc10270090,0x2effb8102880018c,
0x4001e8102208ac42,0x22130018c41c003c,0x3f4005502a101a30,0x401c4318381e741f,
0x01302e1301382adb,0x2a221880a09c8031,0xa80229f006119028,0xc0801101302a1400,
0x80031c288ae45012,0x0128111c3c8a4018,0x08a010b48118be00,0x300318a0101c383a,
0x2241002830222200,0x1c20910150041c3c,0x202832dc201c0011,0x115f422c36e53100,
0x1319c010110c7ee5,0x232b70061702b806,0x48282222008822e4,0x1c00801c201d8400,
0xacac10310030b5e0,0x3032130038040040,0xf012156a3b3c1200,0x710040019c283105,
0x48b5881c20001c0c,0x0341ac742c284003,0x0e2203d8031dc000,0x2e1419200413a80c,
0x5812131110030608,0xc0020170281a2201,0x1002131400a41d1a,0x3cd80619f80d1300,
0x8010300398061c25,0x08b4a4a45305ffdb,0xff1c00018602782a,0x1c142b00ca0003ff,
0x3c32420030012b18,0x3301d00002a0061c,0x2022310b0010dc20,0x030024262202f81c,
0x108820292000900c,0xffff9c242dc884a4,0x0e00010128c88043,0x0448983608b0b046,
0xc0051500c80448a8,0x00081dc20000401a,0x3e001728b3201c34,0x80302a2200800001,
0x322a0ab0342e2207,0x004020392000b028,0x887f9c243ec08468,0x4080b42503bf012b,
0x0128121300c80c04,0x0200f80610144007,0xc0b810e500420210,0x3c4200782c262201,
0x04f0023ef8441c00,0x02882a141bb82613,0x80040040002d1000,0x80b4a4aca8805620,
0x1b481c1303880720,0xa208782a1331f001,0xb4681fff801c281d,0x00ac004100801822,
0x0400801c120d40ac,0x78070e4022131a68,0x2f1180071b08091a,0x07400408168080b8,
0x1f2f80064607000f,0x014ab009142f8088,0x4ab808b8b83f2f80,0x804a132f804e1305,
0x3042132f8046132f,0x80a08020093e012d,0x4ae80f2f98701808,0x20063d002f90040d,
0x1348d8053400809c,0x014af0051f4af005,0x0f40400530184214,0x1f00104a13032f80,
0x2f808818072f804e,0x02009002151c280c,0xac1f0741c00f2f80,0x261319f0035341c0,
0xc8102203e8042d38,0x28222203f00441c0,0x0078010500072f80,0x1705502d104c100c,
0x130078281241c02e,0x90004ce80500782a,0x0201900030800001,0x2f80040048090078,
0x0053272f8028202f,0x600c2f306a0800b8,0x1c08042f506a132f,0x1c106e132f506e13,
0x132f607a13370004,0x132b4072132f6076,0x7e1c0462402b4066,0x5a1136e85e130008,
0x8c00b87aa0b136e0,0x36405608acb0b0a0,0x232b7086122fb001,0x0210b8011c700d9c,
0x98631c60381809c8,0x041300ac12000011,0x2b380f00380400d0,0x2b3f10110268040d,
0x30041d2b3808802f,0xf00f124010b0232b,0x1000401de00c1416,0x0150721307808c00,
0x4189a7041002c807,0xd80f00180e1c180e,0x081e1cc1a0120400,0x22130b2c100f00e0,
0xc0000280981000d8,0x0f00e00c02e0031e,0xc0001dc0000d00d8,0x881e100d1ec00f01,
0x2000010001c00a0a,0x0201c0091880ac1a,0xc0186131d00100f0,0x380100f81c180ec1,
0x2f18800304d80c21,0x02000f0f188080a0,0xf008a02f20800047,0x0001220110041501,
0x76140880001318d8,0x01e80e9c183e0368,0x0e1ec0060700d00f,0xa013112e080f01f8,
0x02c00f01f80d02c0,0x081c02c2a0a02114,0x9202d0247a2d00d8,0x1c18021500000688,
0x102200e80203d80f,0xa00412800c290080,0x01be000d1f980f1f,0x0c051fa00f01c000,
0x01c00202d00c1f98,0x1f980c0e01c0b01f,0xacb0db1853049002,0xd00702d80a2840ac,
0x02c00e01180f1802,0x880f02c009270005,0xa04f2f0040180e22,0xa00e0b1380441608,
0xf00f14000f1c2823,0x1c403523a0051527,0x1e08a08052008003,0x0c0534480f115044,
0x08c0020080063538,0x1d04c80f01200d13,0xf80920c0a098a034,0x1a07d00504c80c01,
0x041f35400708080c,0x354080a02f263540,0x0400f80431500c06,0xc1012f05c00f00f0,
0x261300f822082b52,0x661500e8621300f8,0x800c1a03500336d0,0x0e02000f00680c02,
0x1e2f318006111801,0xfd2d400f0b020024,0x100e130c2d40021f,0x2f05200612300400,
0xff017bff2d40001c,0xe8581300408c161c,0xf0e3812418080110,0x3b80040529080f03,
0xd0441e2f0d05680f,0x070500a080220319,0xc80c0a06700f3638,0x70031531408c1f00,
0x02067e0106680c06,0x98041206700f0180,0x4080a02336c00600,0x1d04880f00a00102,
0x1e2008002c25c002,0x013bc0071504880f,0x3b500f3e080c00a0,0x220880430080020d,
0x040e204c1a0e2048,0x1307082820251208,0x0003400414070804,0x0eb80f01200c0240,
0x0f0240050098040d,0x00986022230400a0,0x00dc22030098641f,0x06e00200a0042c00,
0x0002152e90e4002f,0x152e900f07000e21,0x05a00e598080a022,0x3e59c001132e900f,
0x2e900f05a008a09c,0x0f17400e18800413,0x05828c1021132e90,0x132e900f32e0081e,
0xa0081e10c280a421,0x10a022132e900f05,0x2e900f05a00e0d40,0x0040ac1202400013,
0x01102e900f05a00e,0x05a008b8003e3000,0x2f018001132e900f,0x0598041e1f40ac00,
0x111f80801f003e00,0x0f1c400c0405900f,0x260d1c400f1d3bc8,0x1c40f91f1c407879,
0xb0a08c65003d0000,0xf8042f0028707108,0x950311100f000028,0xa0acacac8010db18,
0xf8220238070c8080,0x0c2d88ec18023808,0x11280e0b80041120,0x2e0d7f02130a880f,
0x1310480f0f2808b0,0x080010004f053f00,0x001120621e0d0e68,0x0412008c152308b5,
0xa02e2012000f2138,0x580e0b680d31c098,0x113d003312000f0c,0x070d11280f01c000,
0x400211200c180e50,0x0f0d112808b02f06,0x280e020005051120,0x009c1e1802000f11,
0x2a00021410500f02,0x022b0d112808a02f,0x8026230007308024,0x480f2fe80e31c09c,
0xb02e11ff10110b10,0x070c10480f2fe808,0x10380f29c00002c0,0x2fd066132fd00415,
0xd00f00d80c07c004,0xd00f0540000f1500,0x08002c02bf021500,0x141a0e11080f00d8,
0x880f0132a80f00c0,0x809816077e011113,0x00c0061d03880f05,0x011570041b12b80f,
0xd07608b0b04312be,0x12b0401204600700,0x880c158804139002,0xa80e0b80acac2216,
0x0c10d80c00380203,0x06e00d1480040120,0x0100f81a1300f803,0x14162200f8076270,
0x08b02c33000200f0,0xb8181321380d0fd8,0x00500406b81c1206,0xb80f62c00002c005,
0x0ac00e13e0041814,0x0034c009130c780f,0xf0041c0c780f0ac0,0x0f0d00060c7f0109,
0x2f13801e18160c78,0x0b580c0e1100a080,0x1580801f3615800f,0x050cd00f12680c03,
0x136008802e09ff02,0x290f40050b00f80f,0x0d0d700f4480a080,0x0f03c0221b00f804,
0x222a00f80c054bf8,0xa045617f02062020,0x3004134480242608,0x12600f1268041813,
0xa02f0cc110dc2005,0x0e0cc80f04126808,0x121d0cc80f2dc00c,0x0f1268081e0cc110,
0x80020cc001130cc8,0x100cc80f12680e02,0x0d12680f10001013,0x0cc1a0120512600f,
0x0cc80f011268081f,0x08802f0cc1a41111,0xc80a1d98060d1268,0x118006027fa0110c,
0x0cc1a0111d0cc80f,0x121d0cc80f25c006,0x0f1268081e0cc1a0,0x1e0cc1b812130cc8,
0x12130cc80f126808,0x0d1268081f0cc1ac,0x0f211850132fd805,0x0018401a172c3f40,
0x300f05601e1602c0,0x2f01e012c521012c,0x000f3fff1280e381,0x5c1f120058134d12,
0x35000ec9ffff1200,0x0f0148400f30400e,0x1637202213190480,0x3e005d80023c2026,
0x43f8056680001605,0x0308e3812c0b6001,0x11f0747522052804,0x1f590000b810b843,
0x18606125011220c8,0xac11012e80881f12,0x6d2506408c151241,0x0030ee5c2f00306c,
0x7042132e600a1300,0x132658022ec0042e,0x68132eb001266820,0x84102eb086132eb0,
0xc8201323b8020008,0xe008b82200400423,0x7a203323f0201323,0x132ef06e132ee06a,
0x132f10761344f072,0x1359ffa0112f107a,0x0f1757300f2740a8,0x120080c4113527c0,
0x808540dc3f2c8000,0x2216155a800f5d00,0x02e80903500403c0,0x0527f00f1d27f80f,
0x0e2b90040572d00f,0x041f0672980f6a98,0x0f5cf01111117298,0x10455aa80f0f7270,
0x0f1001800fb06905,0x642674e0034d7478,0x1f01980613019836,0x7478021f11747806,
0xd800166174700f00,0x282f0901d80c1f01,0x5b48101f165b4810,0x7438581f2bc00749,
0x408a1401108e1311,0x0884330dc0881020,0x130178ae130178ee,0x0c0168a6130168aa,
0xf00c052c000f5f38,0x5001041c04765206,0x082258c801062229,0x2200080a102c1001,
0x1c0446522080b8b8,0xa8010e222c18010c,0xc80111000810105b,0x0c055ba0c0802f05,
0xa882135ba80c2100,0x0010135ba086165b,0x19800f098010152c,0x0f80721402280c10,
0x08dc8010dc10dc84,0x01d81c047402c876,0x041a8d02087a2000,0x22107a280001d41c,
0x10200018d01c0430,0x2a404ac00e003f80,0x03100d0020cc1c04,0x08040018c81c0430,
0xdc10dc80dc108403,0x00040e2003100880,0xa29004f87a202432,0xc27a100001c31c04,
0x10c21000100260b8,0x00dc130010c61300,0x0018c11c04a2403b,0x0010c0100028ca16,
0x0c01f8040010ce13,0xc0060c7f10116140,0xe2142d28a4a1222f,0x0008151c00300048,
0x00109c110010e615,0x0010a0220010ea13,0x00101d9c00a24001,0x00e8dc100080ee16,
0x9c004e3400104a13,0x0a130098e8100018,0x10dc5301c0000018,0x008e3133608a08dc,
0xa27000100c00089c,0x63d0000001db9c04,0x1c04a2e6412fd000,0x80a04501c0010010,
0x18da9c2000180608,0x00100100280a1600,0x0368a11100100e13,0xbf000080a2400034,
0x0298a60880ac446f,0x04b8801202780113,0xc008032df884862f,0x222df80c0d400022,
0x9d20ae3172a000aa,0xae130148aa130d40,0x00019ca8ad640140,0xa8a90880420d40ae,
0xa0aa2000280c09f8,0x9ca4aee084636510,0x0173501513735015,0x410e42c480210008,
0x40052df81d28aa08,0x102a130078211273,0x292db173202e1300,0x2925b7c12e00019d,
0x137400a01300709d,0x2a4173a80400202a,0x9c853f2df8251c81,0x6828a8220173c825,
0xb0512dff10a02073,0x221309f89d20a908,0x0b2df8a81d2f00a0,0x2086136d8040812a,
0xb880102536b80c44,0x6ec00e4b606d1e4a,0x1c4011e25f6db003,0xc010cc2a094b906c,
0x00306e1c40114f72,0x406f1a0058c41609,0x006e68076ec00e4b,0xc00e0058701e0030,
0x4011e45f18d8036e,0xc83016090030741c,0xe8441f6ec078194b,0x407c1c40114f0b06,
0x801f003020161101,0x7540101827090088,0x00841f0140b01020,0x219c1002e451104d,
0x00c0861c40344558,0x430c00380f4bc000,0x9c2b00381c1002e0,0x380946000e018086,
0x871e0070209c2300,0x00700746c00e0100,0x01c0879c2f003803,0x1c40114f00380411,
0x0160381609003094,0x48e0161101c0921f,0xe4161101c0901f02,0x130900888e1f0248,
0x8c1f0300070028e8,0x1a0058ec16090030,0x80a0a0004e018088,0xc800096088142c40,
0x4f1d480431d00705,0x16110100981c4011,0x21024f600f010000,0x081dc00f2982dca0,
0x183f0008017cd802,0xb0b03e002fc0c1c0,0xc4300c400200c08c,0xa217fc50000801c1,
0x01a014300010140d,0xd81ea213fc400008,0x101f80d0040c300a,0x14510ae801514080,
0x0e2200a09ffc02d2,0x142c32b802002014,0x0013c0021860a0d2,0x441e2f0210037c40,
0x800200d8080a0ad8,0x6280b0151b81011f,0x110048040519680f,0x0801c1c4301ca021,
0xb08cb0a217fc6100,0xe0021c1c0d412ec0,0xa213fc5200080000,0xd8180e2b00c01826,
0x181c1200d81c1300,0x0f2e00004e7f0000,0x027ea80115005400,0x4802131be0011d80,
0x00e5c04100c80249,0x102c1208307682b8,0x121c0466e5407200,0x090008141033b001,
0xd062742010435030,0x6200030ac0661400,0x000f4ff80536000c,0x18b80f1ac0020e44,
0x0a700e1954c00f01,0x0c54c00b1447c00f,0x77400e39080c3ea8,0xc80c6b600954c005,
0x043b180c1430043a,0x32101430221354c0,0x302a223df8070b70,0x06114c5032161438,
0x54c00f0028031440,0x828826153c00040d,0x1f2754c00f00a805,0x0f0198091a54c020,
0xc8074e000c5554c0,0x1f37400268e8042b,0x46c0021f03160000,0x10161143a012132c,
0x1643980ee3403305,0x2546c000164fe002,0x0143a006306008ac,0x3f014d8802104fe8,
0x020360040f200a99,0x40a8201c80034aff,0xc3408208005c3d00,0x00012a00080c0030,
0x0408030f78054b00,0x0e07c0081950000f,0x480f2b4d400f0148,0x31a80a5240070d01,
0x54feac101401480f,0x014800368080a026,0xf0040728e5808c34,0x45000907480e1305,
0x016881a0e1c01841,0x40042580011825c0,0x0548161c046e4000,0x520008181c046a40,
0x1038e8011a1c0456,0x801526bf0200081c,0x3508093a78072400,0x030445400f24180d,
0x84a00484a80d0608,0x4e006e1400386a13,0x7c28521320800012,0x0d57500f7c285613,
0xe004268006240804,0x0d55900f07f00224,0x0701b01207e01d13,0xe0191007e80d0823,
0x07e80da0140c4307,0x08d0041831147001,0x07080ed2140c433c,0xd004106107d81210,
0x07f00206808c1080,0x1c2804401ad21435,0x130524a00f1ee804,0x520507280f3040b0,
0x103ab0011e1c045e,0x410126800e000820,0x28685a2229400501,0x0148029c6c5e4f18,
0x26280e1d40dc1311,0x34093e011301480f,0x01480f01500880b0,0x08a0240141b0111d,
0x7e011d01480f0150,0x08700f2780001908,0x1c001a570460040a,0xa8721e103400000c,
0x022040061808380f,0x400e1d08380f4500,0x3400042346800f03,0x040830041d08380f,
0x221b1d08380f3400,0x000e1d08380f3400,0x34000f1408380f34,0x380f073400201f29,
0x380f5934000f0908,0x0241023400051508,0x20c0051d0838081f,0x1d0838081f500102,
0x002f083f0206e804,0x130830041d083808,0x041d08380f0840a0,0x380f0100a4130010,
0x09800f4e00081d08,0x08380c5e400012aa,0x06206213052bd00f,0x1000013c806c6628,
0x092c480f0770921e,0xb02f0e7f020e8002,0x0620021310077008,0x0620021006200213,
0x100d0880300e7f02,0x06200c1007700f00,0x07700f01008c1022,0xb010003206200c15,
0xb80e140628030cc0,0x64162f7fa0601285,0x2c80b4e42f0a0110,0x706e1301706a130c,
0x1110129c00024801,0x180a08a03608ff02,0x80c4151113480f11,0x3008a02f523f0172,
0x4f000e03280c1503,0x5480021f2303400f,0x5480081d04780f2c,0x16047808b800ac4f,
0x1c04b24003286812,0x4000c8d900095022,0x400e1b0630b21b3c,0x18000b1c005a5200,
0x900a1173880b132a,0x0056084174410201,0x241c04b64000109c,0x000444c812130058,
0x04ba480260b61301,0x07003e010020261c,0xc080339100025740,0x281c04be410030ba,
0x5740169c183f0030,0x401c1f52201c130b,0x741c26c070130357,0x5b000b0080023100,
0x04d2420020bec423,0x80171c2f00802a1c,0x00800c2880014400,0x707f9c285208d215,
0x0110069160d61100,0xe80207380741c004,0x0c00b0092ef00603,0x00b898a0a0410280,
0x281016232c28032f,0x122500b09c18212c,0x281200b8023ed010,0x40059c2c16454710,
0x280d7540b0102d05,0x0002a0025c580403,0xc001150099146288,0xe21f0a79f0441f08,
0x0f0634000f050180,0x9807544004140090,0x00900f14889a1e00,0xf80f2a00169c2b01,
0x133400581a2a1a5b,0xc80f01f00c69401e,0x043d000010220d1d,0xda410420d61324d8,
0x01380314402e1c04,0x0f3d001d1b59f80c,0x1f295858130659f8,0x050641020456d05c,
0xde400080da130080,0x0d800f0080301c04,0x800d0403a08c200e,0x246468020160040d,
0x33b8de1333b8e088,0x010060321c04f240,0x081f07c08c1101fe,0xa0210250041907c0,
0x150068081c00c1a0,0x65381b9c2f63f0f2,0x01a0dc200b000501,0x5004056538081f66,
0x481c3c02081e1000,0x40acacac313828db,0x270c0001a7d30201,0x100ec00f38300028,
0x34e808b010ac005f,0x430b480401300405,0x15130198341c04f6,0x380f2e00dc110380,
0x183408e00e101401,0x1f1940076510e1c0,0x6780e21f1001809b,0x130078071ac00e00,
0x190719000f00781a,0x0c0d02480f19008c,0x5dc00f02ff0109a8,0x35f8261b04500301,
0xc00f34400212080c,0x0c1e24055003002a,0x2235f8039c283440,0x015d000f35f01416,
0x00200c26118e380f,0x0101a00402c00148,0x01a0f6e088330008,0x0f01f0361c04fa40,
0xc00c03c0020702c0,0x0e62c00f01780402,0x200c08a04b017f01,0x0c0e2003600347a0,
0x02064600881f00f8,0x20222346000638bf,0x3528049c243300f8,0x0300041f05d80413,
0x080411c0b0102e05,0x04fe430108fa1301,0x02806d1b02f8381c,0x130502800f004001,
0x3a1c0512433698fe,0xb82f0040701d0040,0x0112c43305004000,0x12c03c1c05310230,
0x00581516224dc803,0x3e1c051a43374004,0x231003488c1f0060,0xc0b8002200581ac4,
0x1c051e400bb80424,0x4000201e13004840,0x3a400010421c053e,0x0536400008441c05,
0x1c0532420008461c,0x085085c20124c048,0x9a4000104a1c049e,0x04964000084c1c04,
0x1c04924000084e1c,0x521c047e40000850,0x08541c047a400008,0xacacb04118f00600,
0x00002e949b04c0b0,0x096a88161d1c1e15,0xa010431fe00c3b40,0x035cb80f4700b480,
0x04015d90229c183f,0x580c0c4010133750,0x0304d00f37500e37,0x1e08b0af3dc1b011,
0xc8db281c00019d1c,0x941b05989c13003d,0x802705407c130598,0x061d00c80f1dc0b4,
0x1c1f5b381c136180,0x010500d80f025b38,0x02200505000e02bf,0x21b8191300781213,
0xc0acb02f0206c00f,0xd00001d858181406,0x10c0ac00ac12412d,0x23081515224e4004,
0x231c000e5f067004,0x0f638004085fd800,0x802f0d80081d5cb8,0x4c63e0000f6f40a0,
0xa0120d18c40001ff,0x160d0e38081f5d41,0x400f31800d15381a,0x0e400f639804215e,
0x040e400f4a400171,0xd823130e18013225,0x30c0040c28101106,0x3e102a380c148003,
0x1f08db681c3468b0,0x240068e8102a600d,0xb8e80e201300e610,0x42538816e6103000,
0x8417008816e5c008,0x4007ffffff556630,0x0ec8029c28301490,0x0cb00c1a20004004,
0x3000d8e81ae1c040,0xc004419d601ae601,0x50e080219d6816e1,0x0200280300100000,
0xc1b010e088406950,0x063010160880421f,0x0c10db30236f4802,0x01200e140018e51c,
0xb02214c00015c005,0x0411042800d80b08,0x150038e80e202ab0,0xc51ffc1630097801,
0x500070a812e225b1,0x1633c0b0db583100,0xe52f0670024240b0,0x1220e0020c14080e,
0x024280b01f428028,0x020c2704b8021822,0x887f9d1c1e4804b8,0x0000acacac10690a,
0x50285bc05c131ec0,0x1c2916480542b801,0x0021058003586800,0x1d1348151fdd6b00,
0x011f08800270c001,0x0a21f00d13090638,0x0f63c0e0802409d0,0x0d390fa0040d7080,
0x070e000263501c10,0x641f0e3860131200,0x1c1816c4450a3f80,0x22c00e7300000b00,
0x326be006020e380f,0x3440001cc0161c10,0x641116d8003e4001,0x6c00036bf80005e8,
0x031778051cf81213,0xc001254021160038,0x6c580d0509a00f0b,0x0140141200581813,
0x58023a0002573d00,0x1d1c15416c680400,0x16140010033840f0,0x6c000e6c880b1180,
0x020b6c000f11080e,0x00070514600f45c0,0x01013380fed02f62,0x28180439c00614bf,
0x022598040d07900f,0x0108010600090180,0x0ee080004304f001,0x82800f1e580400f8,
0xa81c1e38a81c1307,0x083e000907c00f38,0x0078c41425c08c1d,0x400202c80c16c00c,
0x7803662008002d0c,0x000a41886c162f15,0x0140b00010361f80,0x9000004e0603e80f,
0xb00f56800e03e002,0x11800356800d0c53,0x1101c0941f095807,0x1e2f57400142c007,
0x010188041b417800,0x0e00c080002f7600,0x1a15070003089805,0x6580040240020700,
0x3406783e1036b004,0x08f80c1790db681c,0x121107009ce81639,0x1c301ae610300630,
0x1403b01ae5c00842,0x070018192200d084,0x00075ea000a2c005,0xe1c05100d81e1107,
0x181e3107009ce81e,0x009c181a3107009c,0x1307009c181a3107,0x000607180200281a,
0x1e110f20141a2207,0x140016db303107b8,0x18123f0018e5002c,0x0607e0021207009c,
0xe4739ffc1a300700,0x9c0c1e3602c8e214,0xf80e1255c0070700,0x050c6a1012e52f00,
0x01c0050bc1021640,0x13020bc80f07a802,0x3106d8141806d81c,0x0660051900008010,
0x0c01e8161308e803,0x183e310290047850,0x9c80a0a04201e09c,0x02026e609c1f6f00,
0x08f016e610330890,0x1e2201e09c281e31,0x000301c00501e01c,0x500501e81c1d2241,
0x223101e89c28211d,0x10e8222001b89c14,0x041c1c22e601600f,0x40b011627f0101d0,
0x1c1ee0328ef00086,0x000200301e1308f8,0xc89c181ee0885202,0x1adb303202980101,
0x904c01fde5101f18,0x3ba00300200800ac,0x01e010180140e517,0x01fde6012002c002,
0x1e40044080a0b035,0x28b80501e8021ffc,0x12220c3807027000,0x092040161602401c,
0x70010269000f2880,0x0680070307e00f06,0x0507e00f0a07e80f,0x1404000e193f1011,
0x88071e80032db0bc,0x0193407ffd7c3806,0x15c00c6800050118,0x0921200634487214,
0x0500410000210250,0x7a130b70361300c0,0x921300187e130020,0x3a13001096130010,
0x082403018c120028,0x701f9c1836091802,0x185813020ed00f05,0x81ac100a1850100a,
0x1b0be80b25800827,0x000605780406101e,0x050be80f43c00203,0x1e130be004030004,
0x0c1f1e03000f0be0,0x0403000c1d1c0300,0x20090503000f0bc8,0xe0040c03000e1f00,
0x0000190003000f0b,0x1c022a0300001a03,0x1cc00f2340020be0,0x08800f092cd00f07,
0x6c3c0708681a2319,0x030180081000039c,0x401c0001c46f2d68,0x0f0fc00410209016,
0x1f020f400f150f30,0x0f0f20040f924080,0xb00f6ec000010040,0x08041c382a430d58,
0x046ec0040f20097b,0x68000701380c0f28,0x167b08030f200311,0x29c0a0a0272bc002,
0x70c800221c000e5f,0x10f01a1321c00418,0x0e1040031e25000f,0x00400f01300e4c78,
0x0701300f21c00203,0x1972001e1b6ff002,0x300c12400672001a,0x72000c01300e1301,
0xac0000a040047004,0x84004205e8025180,0x0505080472180002,0x04e00b1650040a98,
0xe80800103f07fe01,0xe00c0f004c180804,0x0d04e80f2d800404,0x10809c140504e00f,
0x0504e00f0c04e80f,0x0f0c04e80f050005,0x2f09c1a0110504e0,0x04e00f0d04e80880,
0x65c00809c1101205,0x1204e00c0a10c80f,0x0f04e8081e10c1b0,0xe80f0fc0041310c8,
0x00050504e00f0d04,0x04e00f0c04e80f16,0x1d25780f74800405,0xb80f74800404e004,
0xe80e95001a1b1d03,0x05c0040c72800f04,0x0f0d04e80f26c003,0x19c0b4a4220504e0,
0x0504e00f0d04e80f,0x0e0d04e80f154004,0x409c1f06000804e0,0x0f1c73c00e1f1e01,
0xe80f73c0040504e0,0xfd000504e00f0d04,0x0d04e80f44800004,0xac2309c00404e00c,
0x10100d28049e4000,0xc012e38104f350e8,0xc016746978d4fe1f,0x009a741fa831269f,
0xffff9140009e2f0a,0x78a8063c2bc00fbe,0x008ac00d0305000f,0x77980880003c08bf,
0x1305000477900213,0x0f1c901a4103b03e,0x0380131c003b03a0,0x1bdbffff0380131f,
0x1e03801616038012,0x000b08800f038002,0x80031e7320075a80,0x80269c2f08800803,
0xff02051e500f2108,0xa8041e4d00001f00,0x00271c3f7ec00607,0x8018807e00607ec0,
0x400404a010123800,0xc02a150536d00f18,0x0c7280055b82015a,0xc8321324c80448c0,
0x005ac00878680124,0xd02e089c804028be,0x2025330071200f00,0x0271d81c1f71d81c,
0x23f82822232f8004,0x00c41e0a24f02c1f,0x7022131302000f7d,0x0a8000013c400f01,
0x0c0d00100f00180c,0x3a1b1d00400f0a80,0xe32ba2003e120a80,0x8007a2880c0a8036,
0x1380020a8006120a,0x010a80071c3c0e4f,0x408223d01d182184,0x400400080c0080c3,
0x38202122ac40047e,0x1f8b280200300501,0x0f11c0040500d0e5,0x14001032130500e8,
0x0005013803002036,0x0ba3680586c00348,0xa03a1100100c4b20,0x8bc0383ee5404f79,
0x1320e8017878071b,0x80ac10a031013022,0x0274c00501180c04,0x041c0c0e84517708,
0x8000019d3c787f88,0x80a4a02e0280e2c0,0x0480041502880f02,0x041302480f02380e,
0x362f27a831132b00,0xd0300c2a034c6844,0x5c4004042032131a,0x052b00061c0c0e48,
0x0403a5380c1f0278,0x300d2d3b4004a530,0xc80704700618a4c0,0x60000201d87f1802,
0x13047006188bc001,0x05b0b83212047082,0xe0019c3436480470,0x1302200527400400,
0x50079c3433a53030,0x0008014750071347,0x79a8018e48803823,0x600e136880e38124,
0xa5a87f1200c00712,0x1c380d3fa5a81c11,0x2a1304c00402a5a0,0x080ca5a82e13a5a8,
0x132b04c0280c2f05,0xc00276800e02382a,0x0d00100f00180c04,0x0c0d00300f04c00c,
0xc0071c3882437df8,0x8608b4a480807204,0x0c04c02e1b04c080,0x506903783a117750,
0x3f04c0051c381ee5,0x29130104c0101c84,0x00080c00900404c0,0x292200100404c004,
0x9801003005013828,0x040500e0e5402f0f,0x80041500f80f04c0,0x0c04c0024c40068b,
0x38040500100f4c58,0x38048b8080862a01,0x051c2f01382a1501,0x0401302a13090138,
0x04c00401180c04c0,0xc0051004c0282a25,0x40e2c02f10800204,0x400912f82a132535,
0x880f014000a02e01,0xc0391304c0041402,0xa8e80c04c03e1304,0x03b004460038002a,
0x0414e00012610005,0x0d1b0da9800f59c0,0x3805a9800115a980,0x130450030ca80200,
0xe004a9f804045036,0x1000b0a000dc7404,0x240920c512a98090,0x0f25a8041b90e381,
0x7e000cb0000125a0,0x052950042b400025,0x78f6152c280316a8,0x1105e80c2fc00267,
0x05a008a02c2f0110,0x1e9c26013030002c,0x15800401280622c8,0x05f00d130dab280f,
0x11158007ab200115,0x58130130027f80b8,0x0130069c5c3fab28,0x0201f00401280401,
0x1701f808a02f01ff,0xc1a0e08832239008,0x012a1d01f8081f00,0x3a2301f80c8c8038,
0x0b06485c1f064858,0x1002280217c08013,0x3bc0001a2f036081,0x04400e03583a1320,
0x1b8010130b04500f,0x802482c80200180c,0x040509580f0dd0e3,0x70020509700f4400,
0x0a44000f04b00184,0x071109700603380d,0x0dd00404b0030dd0,0x1508c00f0008d613,
0x0400161f0002d00f,0x08c0041502d00f09,0x700403040030012f,0x1608c00c00500963,
0x322a63700c014010,0x001c34364d637030,0x1e08c0a0102f08c0,0x131d05c00f026804,
0x4004506804026882,0x0f87380c5070041c,0x0444c0a4130d0010,0x0e0308183a228540,
0x8c13034bd00f3270,0xa81f1e05d8072200,0xb0a02f0b65400f04,0xc00436d00c176540,
0x0f26680361580d50,0x3e00c1dc120d00c8,0x00c80f06a0180008,0x4058162c78000f0b,
0x1300d0032b400168,0x1360f88e1400488a,0x5f5d108012273088,0x202f00001b1c0002,
0x000352a00502380c,0x0090021d02380f2f,0x140d1af80f2f000e,0x0004001003b80882,
0xe5404f02808a112f,0x3c8244131278888e,0x2303c0002f00101c,0x111c8c381278801e,
0x400f0008da1304a8,0x080f21408c1e0735,0xc0014163000f0802,0x9c343302d830139d,
0x0204b00313046003,0x02000f9918030208,0x05480c0200321325,0xc80f0fb80e020004,
0x00038fe81a120b0f,0x04380e48008c1340,0x0c2340040d50080f,0x23400f04380e0818,
0x9500061d04380f0b,0x3814005004050002,0x9c2f2605000fb800,0x0f8f800d4a050016,
0x000fb8c805030500,0x5c1e2f5340018f05,0x0e0a3a400f0b9370,0x121b0e00c80f7100,
0xc00f016d680f03c0,0x92b80fd1400015af,0x1b18100456c8040d,0xf00e87c00d400002,
0x81c004025ef80f6e,0x0e00b0121108b80c,0x81c0052d500c6ef0,0x020d6ec80f4bc00b,
0x087540b3282f8b88,0x4001d82a2bb0e013,0x0fc00476401b1875,0x107340071d00f80f,
0x0f0d00f80f054080,0x01131a400507a980,0x88141f0120021818,0x22132b09c00f0568,
0x40a01f14400a0588,0x7804058080132614,0x20002f0d3bf00f68,0x480f0e600e060580,
0x7be80f0580051069,0x482e1669482a130c,0xb480256600051569,0x0113e02820251080,
0xbb7004bb58040860,0x83801b1fab002016,0xf804048010122a29,0x08400f0530b00f02,
0x534d08401e9c2f27,0x13061822088080dc,0x120462800f061826,0x6dc0e381253098c5,
0x056dc0058a020011,0x04a00f27b80ba6b8,0x1503b00f71c00405,0x0f7700a01303a80c,
0x01073b400f0d04a8,0x0f0d04a8081f2d41,0x1b80acac220504a0,0x2e04a8d400003c4a,
0x0405980e00f81e1c,0xf0041d00f80f7640,0x04a80f2f00801400,0x7180040504a00f0c,
0x001b1c2f0704a80f,0x04800f04a80c212c,0x40a0b02f1cfe0105,0x00040504a00f0e1b,
0x0e580e0d04a80f13,0x0c156df00f13000a,0x08802f18800204a0,0x020504a00f0d04a8,
0x0704a8088c2f3f00,0xf80c2982c01e1c2f,0x050abf0204a00c02,0x2f270b80c51f4640,
0x04a00f490b801f1c,0xa808ac2f6c000205,0x00040504a00f0d04,0x1d09480f09500412,
0x480f03b00e7ac004,0xa00c2540c00f0b09,0x1d08a03034ff0204,0x09480f04a80e34df,
0x48c000350a400f0a,0x021309480f0a400e,0x0f04a808802e02bf,0x780e2bc006130948,
0x0480011109480f15,0xc0061e1fc0809c2f,0x0f04a80e0e00028a,0x480f0e000e130948,
0xa00c2b8b400f0d09,0x1c000d0941101204,0x85c0b4151509480f,0x041509480f0b980a,
0x09480f58000c4840,0x2f0ec00c06000415,0x2e800e1b19001800,0x0e0600041309480f,
0xbd001309480f04a8,0x0f04a80e9c400304,0xbc2f0cff02100948,0x0203a8041d0cf808,
0x0f0df008a02e823f,0x000e3c0001130948,0x04a00f000df00f9d,0xa808170941ac1203,
0x490a400f09480e04,0x0df00e0c00908021,0x00a010231309480f,0x1209480f0df00e31,
0x480f0df00e1ec004,0x00b01e9eff021309,0x1b80041409480f0e,0x0c1309480f0df00e,
0x80041d09480f1b80,0x1309480f0df00e1b,0x0df0081f09418012,0x0f29c2401e1c2f0f,
0xf00e1400070504a0,0x04a00c8019000f0d,0x480fb2000e060002,0xa8046780ac131509,
0x1c40114f12a00404,0x48060004113fc864,0x480f0130601c4019,0x1fd8284021230503,
0x4802b8030cd80044,0x800c0030581c4021,0x2202500468c00479,0x1c882e16d8304029,
0x28139e6004024801,0xc0501c4031481748,0x4031480d25780f67,0x041f18041ce04c1c,
0x4818001f200f68c0,0x4004051c080f2110,0x4804d7a840812201,0x708e1319708a136c,
0x4089221a08801319,0xa21301408e1b57d8,0x88226e70a6136e70,0xd77840a1220030a0,
0x6e38aa130030a613,0x12d440056ed0ae13,0xd77840a9220030a8,0x6dd0c2130030ae13,
0x28c0a8226dd0c613,0x0140341c40c14800,0xa230ca100030c613,0xc012000801e20002,
0xd77840c9c532e240,0xe228e2130028ce13,0x22e230e613014004,0x7840e1220030e0c8,
0x00ea510030e613d7,0x089c116fa0001c1c,0xe9220140e8e02a00,0x310030ee13d5b040,
0x0106226fd01c0102,0x8042f8f6e8116fd8,0x45062ad5804101c5,0x28201c010a400140,
0x2200089c010e3100,0x5041092200300900,0x2122e1b8450e25d5,0x02da80211ae1e000,
0xb01f1c4121410030,0x801203e210451f02,0x1e1c4121c2590028,0x84160400300fd6c0,
0x400e00581d1e0030,0x881c1f00308816e2,0xda801d218c3a0900,0x780c0030181c4138,
0x4129c532e2f8036f,0x600c01402e1b5278,0x29c2580030a0126f,0xe3500c0030141c41,
0x180030a416014004,0x1300304213003010,0x58e3b82812003046,0x1301400c1c4141c5,
0x13e3e84a13003046,0x0030494022e3e84e,0x284e1605d0414922,0x014e310140291800,
0x580030a81200109c,0x130030041c4149c2,0x3900286613003062,0x41622202801d6148,
0x6a22003066137170,0xd530016e22d53001,0x9869130030696022,0x00005340456e2601,
0x00302d1c016a4350,0x5000306812000801,0x4306502d1c196ac2,0x9001d5d8001c0562,
0xd540081c05aa48d6,0xd6982a13d6984213,0x05a243d69005a622,0x22d69001d5f0151c,
0x1c058a48d690058e,0x1e1c05864300401d,0x900a13d69801d5f8,0x04ea43d6900213d6,
0x13d69001d680281c,0xc213d68004d690ca,0xa213d698aa13d698,0x8222d6908a13d690,
0xd690043a22d69004,0x5200404c1c043245,0x22d698040e0880c8,0x90042222d698042a,
0x041a43d6900213d6,0x16d69004d6f8601c,0x0a1f31400182800a,0x1f06b80b130431a8,
0x220200030231a00b,0xff07000f01800022,0x001d1f55ffffffff,0x1f07000b1b35ff07,
0x06b80a130407000b,0xc080130440c00a1f,0xf00a1f06800a13c6,0x1806780b1c2303dc,
0x05074180120fc80b,0x400f0748321e2fc0,0x28101f2280000f5e,0x581b3ea2000f0b2c,
0x021f0cc9000fb580,0xc00f55e00e2cb580,0x00251d6f880f0346,0xbe200010018f0000,
0x0e7670c01eac37bc,0x171f0510c00f6588,0x780f4bc00e110178,0x13be405c162f1b01,
0x437240048d71000f,0x231f3198001cd0d2,0x300fc080025b6a00,0x004d4a00261f0859,
0x021f1559300f2880,0x800401d00c2cbf00,0x1303480f59300e33,0x3423c0801d54bf02,
0xd1742f4e309d1d1d,0x0003148004019a50,0x72a0201372900288,0x007a202270f02013,
0x7a202272c0201371,0x40068290201372d0,0x5da0201382a80288,0x5dc020135db02013,
0x5de020135dd02013,0x0040065df07a2022,0x67707a2022679802,0x7a202266f87a2022,
0x2264507a20226670,0x807a202263d87a20,0x2262580200400663,0x707a202260707a20,
0x20225f387a20225f,0x5ee87a20225f007a,0x0040015ea87a2022,0x20135e9002ee8001,
0x20225eb020135ea0,0x800f8290065ec07a,0xc0ac135208013854,0x50800f0558680f93,
0x5868081f7d81014f,0xdca0250558600f0d,0x600f0a58680f4ac0,0x58680faf00040558,
0x04410107c4c00f0d,0x58600c0d5868081f,0x1940800022009801,0x0f587001c1808c11,
0x060558600f055868,0x600c13c5b00f5700,0xe0088c278bbf0258,0x10038bb8fecc2f51,
0x600185e002028810,0xa0b83203000c15ba,0x1386202013861008,0x7bd07a20227bc020,
0x7a20226b707a2022,0x0186f07a20226b20,0x08a480b8105f8c80,0x800fb3400e158af8,
0x2c0001001facffe5,0x000018031f041d00,0x30067a2e00084013,0x00400b1f00010800,
0x091f2f0038ba1304,0x000000135f0b0040,0x080fe02200004002,0x0024034b16b81000,
0x0020080000002353,0x0054af1f00081813,0x0815982200010000,0x0a00800189c93f00,
0x9f6122040040c71f,0x0b00c046982f0016,0xf92203004005702f,0x004017c52f0016e5,
0xbe220400409c1f0b,0x0c0180201f0016fd,0x03de22040040b81f,0x0b0040017c2f0156,
0x055a22040040c61f,0x0b004039a62f0040,0x3f0022040040e31f,0x0b00400e942f0040,
0x4d9422040040ee1f,0x0b004000b02f0040,0x4422030040061d2f,0x0040030e2f00404e,
0x5222040040421f0b,0x02402a402f004051,0xc0701d000729120b,0x31201300797b1200,
0x0028041b03240400,0x7cb4220400406f1f,0x1f0040000c260032,0x4001162f0000402a,
0xac170040c0130300,0x2f0000402b1f0040,0x7d6c2e030040020a,0x1f0000402c1f0080,
0x0040781f0400403d,0x741f0000402d1f00,0xe8037d8439040040,0x00400e8fc4031103,
0x409c13040040ef1f,0x402f1f0040081700,0x03004003352f0000,0x004028170040a413,
0x40b81f000040301f,0x1f000100cc1f0400,0x40041a2f00004031,0x1f000040d81f0300,
0x00406e1f00004032,0x331f000040e41f04,0x040040da1f000040,0x00402c170040f013,
0x055c2f000040341f,0x00807e1c2e030040,0x805e12000040351f,0x0040281300400d03,
0x0040001700405017,0x061c066c2101d804,0x6e1400400f02800e,0x00010009000000d4,
0x0e000480037ec839,0x0810130038051700,0x3903004001802f00,0x0380040028037f78,
0x004002972f00400c,0x00602a0040881303,0x03552f00400c0300,0x000040e813030040,
0x00400c02c008c005,0x282303004005122f,0x0c0200011a008081,0x2e040040841f0040,
0x0040061f01408288,0x382e040040a81f00,0x000040071f004083,0x010001025405d22e,
0x0040150026004003,0x80fc1f000840091f,0x26004098e8220400,0x00800a1f00400f80,
0x39030040060b2f00,0x2c0313063103a868,0xc0062d2f00400c09,0x1f0500a9682e0300,
0x575eb5100000c00c,0x004080130009440f,0x0106000f00198417,0x082203004002bb2f,
0x00180d0a2b0040ac,0x1c00e3321300280b,0x160280b9130a4006,0x401b62a10000c002,
0x23040040e51f0028,0x004016160040bb80,0x2f0040ac0000254c,0xd1c02303004001ee,
0x00084c01800701c0,0xc002292f00400c00,0x0a4c0340d31e0400,0x40541f00400a0000,
0x160080d480230400,0x1a0000274c004028,0x23040040c91f0040,0x004007160240fd00,
0x2f00402400000d4c,0x0404220400400318,0x1c08400027280108,0x1a0040761500401f,
0x2600402b12014010,0x0000115e00400080,0x0301400f00a74002,0x80131f0180042c2d,
0x0401c0043a2f0001,0x4c02400702aa2d13,0xa51f00400e000015,0x1600802f13050040,
0x6b0000264c004087,0x0400c0054b2f0040,0x00c0181a00c0b71e,0x0000000000000050,
0x000000d001010001,0x0000000000007560,0x000000400000755f,0x0000002300050000,
0x00000029000000a0,0x0000000000002047,0x0000000000000000,0x000000000002d277,
0x0000005000000048,0x6c69706d6f632d2d,0x2d20796c6e6f2d65,0x746e6f642d2d2067,
0x622d656772656d2d,0x636f6c6263697361,0x7465722d2d20736b,0x652d74612d6e7275,
0x6e65672d2d20646e,0x696c2d6574617265,0x206f666e692d656e,0x0000000000000000,
0x75654e79702f3a43,0x69775f5550476f72,0x6f7275654e2f326e,0x6475432f36555047,
0x632e666675745361,0x0000000000000075,0x2e25f400020a0d2a,0x206e6f6973726576,
0x61742e0a0d302e35,0x5f6d732074656772,0x75626564202c3533,0x726464612e0a0d67,
0x657a69735f737365,0x6915ff003a343620,0x632e20656c626973,0x6c612e2074736e6f,
0x622e2034206e6769,0x35325b6d43632038,0x38120600283b5d36,0x3231355b455f0028,
0x0c0027461f0f0027,0x7864498f00273213,0x0f002b3034365b73,0x283832315b734b6f,
0x6f546765539f0f00,0x9f13002f706d6f43,0x65646f4d6c6f6f42,0x6c65528013002f6c,
0x0f008d7472617453,0x2c646e453f12002e,0x65687461466f1300,0x6365565f16005872,
0x00b10113010f315b,0x12002e30325b494f,0x0013002c646e453f,0x76654c7942df0164,
0x3438335b32336c65,0x1a0034461f150033,0x744c1f1b01734c1f,0x30301f005d081a01,
0x014d0f005e021400,0x01a86f4e6e6f4111,0x65747865e4025a03,0x726168732e206e72,
0x002e3111002e6465,0x3b5d5b6d656d7371,0x6b61657709f003a9,0x2820636e75662e20,
0x2e206d617261702e,0x08f5001220323362,0x306c61767465725f,0x614d616475632029,
0x270a0d28636f6c6c,0x5f11001934362700,0x00212c305f3f0016,0x0d290a0d3100fa0c,
0x636f6c2e0a0d7b0a,0x155f5f2103cc6c61,0x746f7065645f9200,0x6572320425315b30,
0x105053253c004d67,0x32338a00114c1600,0x00233e333c722520,0x973b3e343c647263,
0x203320636f6cc104,0x00e20a0d31203436,0x3a306e6967656272,0x20302033096d001b,
0x6f6d0a0d72002930,0x2c332b004d752e76,0x76630a0d3b7200a5,0x3100260200ce6174,
0x0d3b52002b2c5053,0x003f04010d646c0a,0x1f01345b202c314e,0x002a321f00002a5d,
0x747321002a311001,0x2b5053255b710024,0x0017311b006b5d30,0xbc3b322300173812,
0x202c3163011b0100,0x78653e00f93b3033,0x33203636b200fe65,0x393a30706d740a0d,
0x004d321001540200,0x625800a402006303,0x890302235b093233,0x7465724100710000,
0x006c3a312400453b,0x0d7d3f0051646e20,0x754602fe1c02730a,0x747441746547636e,
0x7e73657475626972,0x0f02890e00240e02,0x1f1e02940f07002c,0x0294391a46029431,
0x94391f060294311f,0x0e230294311f0e02,0x530e10029f0f014a,0x0114074702aa0f01,
0xaa321f02aa313723,0x311f02aa33173102,0x69766544682202aa,0x0f02ab0e01096563,
0x2f0102ac0f000025,0x2d311f0b002d3233,0x1f1602da321f1900,0x02da351e2202da32,
0x056e371b02da331b,0x6e371e0502da321f,0xda321f02da321b05,0x0f0402da321f0702,
0x7d0402db0a0b0179,0x35311f0b00350f02,0x1f0d0035321f0000,0x103233280c031032,
0xb532312500160c03,0x0326331f03260602,0x05d0371401600703,0x004c341003263419,
0x263418110326331f,0x26321f0326351703,0x0121746547322203,0x04001c0500031d0f,
0x333f1602ba0f019b,0x02b90d320593385b,0x0602b9331f05930b,0xb9331f0e02b9391f,
0x02460f01150d2302,0x00c00711053f0f05,0x053f361f053f3814,0x19331f0219371731,
0x7563634f1afe2202,0x78614d79636e6170,0x6c42657669746341,0x4d726550736b636f,
0x636f727069746c75,0x0f0239726f737365,0x440f08190e17003c,0x00440f05840e2600,
0x331f300088321f1f,0x32335b344f160325,0x1b0326341e1f0326,0x1f05df381b032635,
0x05df381e05032634,0x0326341f0326341b,0x020f040326341f07,0x4d0f0208d10f2202,
0x990f01060e0f2400,0x1f010099321f2500,0x0982331f24004d33,0x068a36190673091f,
0x495d343235002e04,0x0472321f0472060a,0x068b3814020c0703,0x044d331404723819,
0x047233180e04720f,0x0472341f04723917,0x6c46687469579f4b,0x450529047b736761,
0x28004d0f04840e00,0x1f004d0c31048d0f,0x009a331f39009a32,0x354f1604ec341f39,
0xec0d320acb30345b,0x04ec351f08120b04,0x351f0e04ec391f06,0xf50f02730d4c04ec,
0x04fe0f027c0d3204,0x3205070f02840d31,0x0f000bb70f028d0d,0x4e0565341f2e0100,
0x180c07331f002f08,0x2f09ee3914029c07,0xd93118310c083031,0x057602057e351411,
0x5f39334e5a5f2ff4,0x4c414e5245544e49,0x616475435f37315f,0x70635f6666757453,
0x61315f69695f3170,0x3131386666366562,0x65726874636e7973,0x0a0d287645736461,
0x20345a03750703e2,0xda36140376383631,0x002a050376341900,0x3130003107010b0d,
0x7261624000233037,0x00d3302023007d2e,0x3220313800233218,0x6d3617101e0800ef,
0xf700fa0318e40506,0x65726f6665423805,0x5074614d4834554c,0x090635745f305364,
0xaa0402002d0f04af,0x885d3830325b5b03,0x2d311f0a00320f05,0x2d0f0595321b1900,
0x37111e0a610f0300,0x7010170d880f00b6,0x78313c7025481697,0x737225203631ac05,
0x3626059e3e34343c,0x5e004c6610001332,0x3905b331343c6466,0x20313c05b5373331,
0x1901ec37140dc831,0xc909002a05024031,0x1f05b93633313b0d,0x3633313f0705b937,
0x0f0b01bf0f0404ba,0x0d0036341f0104f0,0x322f013b0205260b,0x080507010d003730,
0x090c028e2c1f00e1,0x03342c313631046d,0x0001064464646137,0x0301d90300290401,
0x2031702540d00029,0x5f37424220617262,0x752e6172627104b9,0x01aa31110010696e,
0xe101553a11000a01,0x3233732e3436732e,0x00702c3564722509,0x01e06c6824049f00,
0x3313001b202c3632,0x3723001873120085,0x180200240000cc2c,0x38647260019f0701,
0x3b5d2d00275b202c,0x21010068391f0068,0x0069391d004b3031,0x260000f52c313134,
0x02001d0005b90800,0x34050034381405b8,0x5100650100060201,0x4405d56c2e707465,
0x3222001b32702509,0x1b012d3215012d36,0x2d012d3215012d31,0x5202d40704e33a32,
0x2804ba3120313831,0x5305ef0001bc3a34,0x320104782e646974,0x7372340086363175,
0x351800360005e531,0x022f080db501004c,0x030c041b282c3228,0x1e020334061a9401,
0x22029b0410da0301,0x0302820501252c31,0x00202c32323203ef,0x3804109404008003,
0x009305024a331200,0x3729002936203632,0x302c39333200483a,0x313a382400480300,
0x3113003f3a332901,0x5200643233200100,0x1c00402c35722509,0x150052361200193b,
0x110236651201b830,0x3b6402a20200e270,0x0002f7746f6e0a0d,0x1601cc3370220165,
0x1501cd341b02f934,0x14009c341801cd34,0x008b3a392300db38,0x316436008b343623,
0x351f03c00800a634,0x312b033702100191,0x341203360302e535,0x2c382802e608029a,
0x341301c9371a0038,0x343201c9381b01c9,0x2501810200202c30,0x00e5351a01813032,
0x00402c372201810d,0x00f6391f00f63b1e,0x0f1d800504e80002,0x1a03a932130200f4,
0x5701026d0200f430,0x0702680000f40b00,0xf4351202bd0b0038,0x2202255d33323d00,
0x0102250d00222c38,0x25381a00db010220,0x2535702201570002,0x051f0c03f1361602,
0x0140361702253615,0x31323c03df303923,0x0149393326008b3a,0x846f6c2e6c756d63,
0x2d001f00019b0204,0x00f3341100c13233,0x32343504b6317329,0x053731342e00382c,
0x5f32342a00d93811,0x001d000239381201,0x2c39383b01b2311a,0x39120201b70f1fc8,
0x38019d39382a0579,0x9d3819001e2c3139,0x393e019d36332201,0x232c332200dc5d31,
0xdd62752400a80000,0x1e001c00034c0100,0x341402f501050d31,0x313d017b321802c5,
0x04bf391202a23620,0x024e39120109361a,0x393701090b001d00,0x0301050f212b2c34,
0x01050b002a2c3522,0x05331a001e2c3628,0x05361f0105371301,0x05371a04e1030001,
0x0105351f00e90201,0x0636342302140202,0x10371a03cb331501,0x03cc341303cb0d01,
0x2a3715012a3b312e,0x0d2c382501100801,0x2c392203010e0f22,0x07a40307a30c0028,
0x2c31303704bf371e,0x012b3030313a003a,0x023130312f080e03,0xac38332703cf0201,
0x0206d70203cf0207,0x9d0103d2341b00e0,0x311605f931702305,0x1503d530312b05fa,
0x14014a381803d538,0x00923a342d03d532,0x1201be0601523916,0x9d0b04c803039a35,
0x352c029530312103,0x1f00079a03013330,0x0314301108d90c00,0x03025e0300226414,
0x34302407bd050b6c,0x2c3222001a0405f5,0x05eb08022a030021,0x2705d20c083e3911,
0x0309730800d03530,0x00009d35302f066e,0x009d361a009d3719,0x01d0371e009d3314,
0x200202013e31352f,0x303120039e311d01,0x14030747461f028f,0x000173381f025030,
0x130511351b0a3302,0x4c0d001f010a3131,0x312a00582c32290a,0x312f07690400d831,
0x00d8331f0000d832,0xd833352e01c50102,0xd845632f02be0000,0x002400085b020300,
0x2c01af010100d80f,0x1f01ae0300d83435,0x050859040001ae31,0xd8351401b00b0058,
0x2c3622024d371c00,0x3a362a024d030021,0x3213001f3712001f,0x3725026c371b001f,
0x1300200910036c31,0x300fde3817002838,0x696465110e383734,0x382800596e722e76,
0x1f00383713007f2c,0x0407570000006039,0x0101a72c39240036,0x001e03018a030044,
0x2c01029d2c303334,0x38312f0008dc0f00,0x200208f50203030a,0x0a303228015c0c00,
0x66140c8239312203,0x7e0011b132110c82,0xf435392f0b330700,0x01020240351f000a,
0x03045635352f01d6,0x1406eb351b091c02,0x00af31322f095431,0x32322900af331800,
0x322b045633140209,0x1304563312020933,0x018a303328045633,0x00ce371f010bc20f,
0xce37352f01600102,0x06570c032c020400,0xce0d001f04029e00,0x2a020f9c2c362300,
0x2c04870400ce0a00,0x1302220200ce3632,0x00ce3133280c9a33,0x37322f010524371f,
0x200302a90103021a,0x009d3919009d0d00,0x2f037404009d381a,0x06620f00044c3932,
0x06620f04d1361202,0x6236722c02df0104,0x0c001f0401d30006,0x2a041732332a04ef,
0x0e21361400a33133,0xdc0003690704ef01,0x3a08950301470708,0x03c50201663a3233,
0x66331b001f323323,0x3313041e38302901,0x0d041e34332f09e2,0x56030086060b5601,
0x0700006035332f04,0x0179020b3b010400,0x2f0004000f004401,0x2133140301e63333,
0x3518000145331f01,0x22040034332b01e6,0xa630342304003533,0x1309b20905430000,
0x31240db403005030,0x372a036c0400072c,0x3316050e0308b23a,0x6a00553031290f50,
0x0057373432203838,0x00570400072c3024,0x1605e4030057391b,0x3e0b6c31170e2634,
0xa8391f03e6303032,0x040fa930312c050f,0x00380103480109b5,0x022e0009b330312a,
0xaa381609b1377022,0x12a5331612a40d0f,0x0fac311300a03318,0x34322f0fac31342e,
0x461f0fac00030eb6,0x322b0464030c0fad,0x321e0754020eb935,0x0038040414030fad,
0x321d0355030fad0b,0x034d031176030fad,0xe7341a0187323426,0x023431130be30d00,
0x0faf0f00f93b322e,0xb00f00f930332403,0x51331b043903060f,0x0fb0321e04340304,
0xb00b003805033d02,0x0fb0331f0d0e030f,0xb1371d00fa311300,0x2b00de010228020f,
0x230262000be13231,0x023030160be03970,0x023035312613a70c,0x3d0be20401493518,
0x51331600923a3334,0x2f052a020fb70901,0x35312f020fb73331,0x3803099702000fb7,
0x045b0205b8351e00,0x045502016636312b,0x0595000a3834332d,0x030301bf0f2f4c0b,
0x382801a5361b0ba1,0x0301a5351a001e2c,0x0001a538332f0d88,0x0693383229070102,
0x0eb337312f093102,0x059f3113027c0202,0x0765331f02c63419,0x010c391a14300400,
0x0c0b001e0104bb02,0x0f313c0405250001,0x642b035402020105,0x1e0510840202aa34,
0x010530120e8d0b00,0x034e030102aa341f,0x2f0a020201053019,0x024b020201053931,
0x0282090105303223,0x0534342f010d8e0f,0x02110e0666030301,0x0b04c2631f103600,
0x073634643b0f2302,0x0c0a001e2c382801,0x04a8341c0a0b0402,0x280a0a7314040102,
0x00d2351f00d23634,0x0f30020301d70f01,0x0e060001d734642e,0x0e2d0209049b631f,
0x0d820201d735642b,0x0d0301d70b001e05,0x15c70416ee351c0a,0x00d03734280a0c03,
0xbe0305a50816db01,0x0783341708d30312,0x13000b120f010809,0x001a3b332d05a532,
0x050034312d015202,0x321c003a0204fb02,0x311310e232110501,0x02391c18a8070502,
0x00de090502371605,0x943a392d05023714,0x02ea0700ae331600,0x000ece321e012c01,
0x01b20f349a030ee7,0x0134352e02bf0203,0x1e34322b0ce20205,0x0c001d0002950202,
0x0a00522c382801e6,0x0f01e6343323075e,0x1a137532130004c2,0x750f007f0200d334,
0x0793040587020313,0x17360f013d303528,0x6235332a0c250300,0x0cf5321f00b10100,
0x0cf4321b0bea0203,0x1aef35642e0bea02,0x3036290dbf313627,0x31362c03b2030bb0,
0x03b0030a81010fc5,0xc5391f00c5313528,0x020100c5391f0000,0x11030c7c321f0c5e,
0x3613082a0c02c136,0x022e0712db0300a5,0x36120611d334362f,0x3638156a361b01d7,
0x03130c0a001e2c36,0x2f001569361f03da,0x00b0020200cd3133,0x01c5010300cd311f,
0x02760200cd32332b,0xc8391f00cd37362e,0x361b01c737120611,0x001e2c313738173c,
0x371c02c1030e180a,0x0d23030cb60201c5,0x031127030d6a351b,0x322901e2331b001d,
0x0f004535140d6836,0x007a2c37260e0d68,0x00005d351f030404,0x06010df3030e1a07,
0xeb37130a8f371e00,0x2b3712015e331a04,0x0537181506371e02,0x2b391301f8371a15,
0x1b0111e95d342a01,0x381a0e256466220a,0x240023ca37110d90,0xdb31322f118f0600,
0x02023a33332f000c,0x02023a331f23a302,0xdc34332b029e3711,0x1f24371f02bb0200,
0x1393371a15440800,0x13920c00dd313123,0x0803cf0403ce3113,0x2f000c1c311f0677,
0x0095010200c83533,0xec3711031257331f,0xce0200c836332b02,0x3038271303371e10,
0x0300c839372a0f02,0x0200c830382c039d,0x0800c8333123103c,0x0000c832312f0699,
0x1f0acf0202055c0f,0x0368381103055c33,0x081f3812055c331b,0x98333828131c381e,
0x353123131b381a03,0xe101110c331b00c9,0x3a0f460300d0060b,0x034c0200ef3a3835,
0x00ef391a03a43114,0x2f361303a3333629,0x010d03a330362f0a,0x101b030085060b81,
0x038a0b005f31362e,0x381202038a34382f,0x3818136c381e0562,0x3123136a381a136b,
0x01038b361b011d39,0x00ad010020020b1b,0x00276e3811038d0a,0x0ef40200ef030026,
0x0410c7381b094608,0x33363b10c7050897,0x362604aa0308ee3a,0x5a0058391a099c34,
0x2400583934322031,0x1c00580400072c32,0x3625053703005835,0x000b313226005836,
0x312036591182321a,0x260cde0300633834,0x0311d90c00633933,0x32280a563616030c,
0x182708371901c934,0x082708371f2d7536,0x4a6275536b423566,0x07270b0f00030224,
0x0f270e0f0000300f,0x0030311f0b00350f,0x331f1c0030321f1c,0x0f2774341d1c0030,
0x162777351f0b0030,0x27760f242777381f,0xef00276337312700,0x278931313c664d04,
0x312b14278934322f,0x893032323a278931,0x2a03052789381f27,0x2789301b1ac10b00,
0x30312f082789381f,0xda0f055300002753,0x361f01278c0f0e01,0x01278f341f100039,
0x2791351e1100390f,0x1f317d0a0e03140f,0x2794381b27279433,0x2794381f27943815,
0x05c40b0d90371201,0x391718910d06c702,0x13002794381f2794,0x1c765d392f10fa31,
0x1d300401006a0f01,0x27973318001a680f,0xaf5d33262797321b,0x5e333228132b0627,
0x33322e0027980f0e,0x0131080121022798,0x0027980f01313215,0x003432323302e307,
0x2921279830372f0f,0x0036351700363137,0x332f269803286c07,0x0026af0400132032,
0x993211176b08004d,0x052948033e510a0f,0x30cf0a0e7f010023,0x3316002307035200,
0x18e10c26b50d0a0e,0x18001b620f1b6303,0x010e70351f1c2f36,0x371f194b0c3ca702,
0x2d0f1b2e03020068,0x0d130a1b2c09001b,0x1bc6391c00683213,0x097133372a0ed808,
0x3a3437390d133418,0xb53713096f0b0118,0x030d096f35372f09,0x36372e0d8c081a3c,
0x0d301f17850c005c,0x010d0d2711050101,0x31322a0175323227,0x0f09353232220935,
0xaa0b11c3030e01eb,0x6903070f7c321f11,0x0e18c804118b0c1d,0x0038031903041afc,
0xc10118e8040cc20a,0x1f0e5567656e3a0c,0x0126381f0018ab36,0x0c77321e02190202,
0x0c77321a0c773318,0x01a55d302316c904,0x000e1c06021e371a,0x130b021e381f001d,
0x0e0b8d391f002739,0x00360300e22c3026,0xa5030e021f30382f,0x1d00021969311f10,
0x3416021969331f00,0x33332e021f071968,0x33130302200f0ee1,0x770c06187a0f166a,
0xaf35332f040b0800,0x2f01040c331f020e,0x188a060200693733,0x332a040c0800690c,
0x331c040d03006938,0x3f0f18333129040d,0x1103020e6f3a3138,0x130a01f332382f04,
0x01f333382f0b8a38,0x1403007e2c35280e,0x2f0e01f534382f04,0x1dfe020101153034,
0x143418041434642e,0x1434130414341b04,0x342f0e0415311f04,0x182c342402007733,
0x03e3351800770c19,0x03e403018d34342a,0x0eee0403e435342b,0x8136342f0003e60f,
0x00810e18a2040200,0x8037342a020d3817,0x01780018a4381800,0x000e780701f6351b,
0x030b01f6361f001f,0x0e249f37382f0f3e,0x03eb0400e72c3028,0x190c030f01f6381f,
0x2700fe0b06190b0f,0xf630352a00fe3135,0xeb050f3f31352701,0x251712061b5a0103,
0x0207a60e36da2c37,0x06008f37732b192b,0x138e08008f0c1948,0x0b1792001509351b,
0x3519373835133180,0x381f00a2341a0298,0x381f022f020a00a2,0x02181e331f06181e,
0xfb00a208181d3416,0x37303634202c3907,0x3038383134323831,0xb438303437313030,
0x3b393539381b0300,0x323330f6391930f7,0x3a39383a206f3533,0x02140300b2021a50,
0x30f53818214e3914,0x2f042f740f003e00,0x4b361d042ed03631,0x30f40f2ecf331e21,
0x150b28365f383b07,0x381304ae090b2834,0x21ef3a31393f0b15,0x312e197336312903,
0x312d22080c01c030,0x0f2208311a1f4930,0x331b1f4a0b022012,0x1d870217b90c200e,
0x362d1931030ca30b,0x85021899001ab430,0x18bf0403188a0f50,0x001e2c3428188a0b,
0x1f198304010c311a,0x0a0b7a0300010b34,0x0f201f35312425d4,0x0020363215011e3c,
0x362f22d8321e0191,0x0c192e0701083b35,0x36362f1673081a3f,0x002bb53615022c53,
0x00107c7a742004f1,0x5b31662509490024,0x0300009133392f2c,0x07d302193f0c09c5,
0x9230372809c6361e,0x07ed321309c60a00,0x321906009230372f,0x25012dad39142a81,
0x0915002934362000,0x03001d3b312f29f4,0x1f00233c0f081b01,0x2e18c30202099837,
0x0998371809983764,0x371c022b6332372f,0x132ab4363229163f,0xb4032b610b005335,
0x34372f0007500f2a,0x193e2c35240200a5,0x372b09c60800a50c,0x371e159104191e35,
0x1f0203fd361f02bf,0x166337160903fd33,0x231a2c382603fd0a,0x1d321a052166371f,
0x391f003a2c302610,0x5e0b110b020018b5,0x9337642e18cb0234,0x371a03c839372830,
0x9c0f1b86311432c1,0x47311b1fc8030029,0x03c80f1faa32141e,0x02a5001fc1351501,
0x0a0e381f0337351e,0x0e38642e18c10202,0xa6381b0a0e38180a,0x3632382f0916032e,
0x91002d2133160603,0x3d03000091361f00,0x2e18360226f50b0e,0x923538280a293864,
0x181f32140a280a00,0x953416060092351f,0x03c8371f0092002d,0x1d3b332f2dc30203,
0x3b342e049e010300,0x3002020a730f00cc,0x3818084438642e35,0x33230a73381a0844,
0x022b13381c00cb32,0x072af43133260154,0x7830162c710403c8,0x020a1a0f00a50c2c,
0x090813cd0e357e05,0x1a39130a1a391b20,0x341f08b23433270a,0x311f352d0301246f,
0x890300770c06352d,0x2f2cd30b34f2090b,0x1140030601e73439,0x00913a382e06d204,
0x356b07020641351f,0x1f0092371800920c,0x06d3391f022cc236,0x3939332cc3361907,
0x17747a742301d63a,0x361f00b801058201,0xed0f002201040278,0x02015c38392f001e,
0x080033550f353e04,0x3014304a391c10d2,0x610300006b0f304a,0x02347703023f0c35,
0x06af08006e0d3580,0x359305300a30312b,0x7f381906013b331f,0x00983a3030314f2d,
0x7403020448341f00,0x0900990d34e50234,0x39142fd5301b2fd5,0x16060099361f0099,
0x311d0099012de239,0x00c10111aa0201d5,0x2e2e020301d6391f,0x371f01016c30312f,
0x351b2c382503016c,0x302c14df0900d30d,0x2a2e25391a01db38,0x1a0c2f001d0a3031,
0x4f050790051d0a33,0x38141d0b30312a1c,0x0c85343031351c50,0x435836342a0f0208,
0x1c51381f50513018,0x6e7572333100f208,0x6974616c756d6953,0x305366df19166e6f,
0x53336d697453345f,0x00450f0d1c666d69,0x004a0f081c7b0f1c,0x322f310045311f23,
0x355b335f3800dc2c,0x4e61013900515d36,0x0045351f3100e70f,0x371d310045361f31,
0x381f2000450f1db6,0x31335b395f161dcb,0xcc37332f201dcb32,0x2e1dcd30322d001d,
0xce39332e1dcd3539,0x3c1dcf3031313e1d,0x35382a1dcf303932,0x2e061dcf391f1dcf,
0xcf39382b53213538,0x382f085323391f1d,0x0f059a00001d9639,0x2f011de40f23038e,
0x45890a25004f3031,0x26009d321f016d02,0x0200a038342b334f,0x4bfd0f280052341f,
0x2f27005233312f02,0x52321f0200523233,0x02005234322f2700,0x36312f270052311f,
0x270051381f010199,0x00f40f024772381f,0xf30f020051361f28,0x0f034814341f2800,
0x1f0100510f280196,0x0201e40f2702dd31,0x2b343f25004f361f,0x0052371f0300f232,
0x332f000236301f28,0x0202870f27005132,0x710f28005131332f,0x27005130332f0104,
0x2601440f0304700f,0x03780f020193351f,0xef351f03009e0f26,0x253815004f0a2600,
0x35352f2403220f37,0x280051351f010051,0x2805fe0f0200a20f,0xfd0f01005133352f,
0x0f24b332352e2805,0x341f24c80b230b61,0x1524c9391b2724c9,0x0124c9391f24c939,
0x042d3d321c13d902,0x3032270f2d0e3f79,0x0024cf39312f24ce,0x24d030322f16d004,
0x0402007032322f00,0x34322710f90e4874,0x041a3433322a24d1,0x0324d131322b5220,
0x1e0824d3341f3330,0x3c08012c0224d434,0x3a322b013c321501,0x2f031ab03013529b,
0x3700190203df0010,0x001a093b855d3831,0x003431732d52e602,0x1a0a4bfc0340ae02,
0x207004001a321300,0x3c00fd3212530404,0x531e035335383266,0x5d302f534f31642e,
0xce03001a01002619,0x3523001a33312c00,0x130081341c001a36,0x381400ce04008136,
0x19331c0101040018,0x19084b195d392600,0x19351c00ff371400,0x97093b9e5d312600,
0x32361c0097391400,0xb1371c0132391401,0x33663d0099381100,0x332d00ca02001932,
0x332c11fc02001931,0x9b5d323736007f30,0x26f5361e0fc50125,0x9c074aae022e6d08,
0xc1791f26b837135e,0x334600da371b0639,0x00590537d35d3430,0x180f39480c26b501,
0xe20739493816051c,0x3b790d17e439141b,0x02001bfa0f396406,0xbb0b1c653218209e,
0x0038de38202c3f3d,0x2d0517e30f01a603,0x2f17e60500863133,0x0437000128bb3233,
0x0b29a7060100a00f,0x0b25482c382400a0,0x183e4439322934f1,0x880412e400019d38,
0x420812e632642539,0x20b502369e391531,0xbf0624f80212bc02,0x309830a630312c38,
0x303230346430202c,0x60311623690b0001,0x0078391b00440124,0x2a31152156303229,
0x32170f30ce311f00,0x31313e23cb0433ba,0x190418d80f006231,0x3a3231313b23e633,
0x2304009c35302b00,0xd3361023ea311713,0x6469702600630467,0x1517cb02141a0100,
0x000063341f003933,0x4d01427202146d0a,0x0f01543134663507,0x332f244702001475,
0x333536190619b835,0x371c007d3531313a,0x730800293614017b,0x1200e03632313657,
0x0200e0751400e07a,0x1e003a33662539e4,0x331539260c006337,0x23070700320139c2,
0x0339890f3f663312,0x0a048936175eb30b,0x398c06033f020376,0x073e9a381603ae0b,
0x0f397c2c39270392,0x3e04079b020039db,0x9e0f00b539312803,0x90083a3f3016023e,
0x2d046dc02c31213f,0xc5752e2b6de00211,0x001d2c1826e20b27,0x0b0084301858f405,
0x08054f35332f2326,0x0201033519009c04,0x04940f39ba002858,0x9431332d01b50200,
0x1f28650044ec0304,0x0f3b45070027cc38,0xaf0f283d0400281c,0xed01409036160004,
0x3d300600ed311800,0x341940c20c28370d,0x3218004f3714013c,0x3c371f068b0c004f,
0x3c074f8c32160901,0x013c321f011f0201,0x0305d00e36760203,0x3b382f28db0028ba,
0xf40600d10d0527f3,0x00013c0f00430127,0x1800ed0127f63816,0x0305eb391f00ed33,
0x0035014f38343126,0x7e0528ba0b567d04,0x9e371a0055351a02,0x361f01ba32312547,
0x3e0237130f0e05c7,0x04e70f0062373231,0x1a003901283f0703,0x311527b80b003938,
0x1605c639322f03c6,0x332e023f0519fc01,0x950105c50b006230,0x0e05c50f00370006,
0x1eeb39332f00be01,0x33313a37ac301906,0x050179321b007c31,0x1605c532332f07ae,
0x332e1a4f0506a502,0x391505100c006333,0x06d7070032013abd,0x342601051031332f,
0x9f08278108465a32,0x0b00460545410103,0x09098430342f04d2,0xbb0604553a35332f,
0x33342501096b0f3a,0x2ae307039b0a3abc,0xcd35342f0020230f,0x437d062aad020200,
0x435b31342604d70e,0x2932153519013801,0x7931332128363733,0x3564726260430517,
0x3733280ca732312b,0xca080105110f0028,0x0901720925d40853,0xf5010bec381a0046,
0x0832dc6174633f02,0x0201363328042f05,0x00030c0201bb3913,0x03050f0d7b0500f5,
0x0531342f03600104,0x313a2b9a32190603,0x0539342b006f3733,0x3d503c0800290503,
0x0573160305353031,0x033f341503b30103,0x0566f90b0063391e,0x02052d3034241e33,
0x10661735d20000f1,0x0637180201d0040b,0x3466342255010029,0x322b03db08004733,
0x01645d371533b332,0x33322b06c208002c,0x2c0162803815002c,0xe635322a03d00800,
0x030734c030342f01,0x5c900b0047045844,0x5879030234c3311f,0x7633150334c5311f,
0x2f06450800520158,0x00381f0102c53832,0x0b2ded2c3924022e,0x2331142d1c032970,
0x43ee0402883b182d,0x7d020186023e5d06,0x0024e00f015a0502,0x59052a2d0b548603,
0x0087331800870e46,0x5b351c0087323529,0x3423bd0100180246,0x9d371e0087353466,
0x5d0a0d6a6430292e,0x1943c9082fc10202,0x0dbf34312b2e7030,0xc6391a002031322b,
0xe4351b029d361902,0x0e44280102bb0a02,0x42830c005c055657,0x5e331a002033322b,
0x1e341a005e381a00,0x024608001e391a00,0xbc3516014854331f,0x0f797a052e820b32,
0x0f2e903616034688,0x06466e341f002e50,0x32342801466e361f,0x32342d48270e466e,
0x02341f137a03113a,0x0b331f51f5030026,0x2902460b311f0646,0x1c009b04460c3635,
0x5803009b04460d34,0x132e03009b341d07,0x03c30f0283353428,0xef0d03c332362e01,
0x0b2d39042d330e45,0x4e361330360e453f,0x250b03d635362a15,0x36362f0003d60f02,
0x2d162c3724020143,0x362b27ea08009a0c,0x020087381f008737,0x06b908008731392a,
0x79361f08e332342b,0x0ed20e022504080c,0xb9015c1e0a4c0404,0x390f5d0d33342501,
0x08a20557fd03145c,0x1c0f00a307429a01,0x96371f087204090d,0x91391b00880a065b,
0x00a307095b1e0f5b,0x0800a1015b1c3515,0x5a420c28b50707a8,0xca38342f6107311b,
0x00960c32ea030800,0x19179f3217623702,0x352f006b02315e67,0x345f393b0f316033,
0xae0817b4331517b4,0x362a640d35342407,0x0900bf391f018930,0x00bf39342a021202,
0x140901f80f5a0a03,0x9002441401067f35,0x0f2c341b0bdc0800,0x5ae4341f0b963514,
0x0b95351d03600201,0x301f58ad00054102,0x470d0145020001df,0x313527176e311316,
0x352f0c26351b0472,0x1a02860209011732,0x003333352f526c35,0x4d87351e05660209,
0x650200037630362f,0x750c575c39352505,0x49f9050266ae0f32,0x632f30370032750d,
0x0f305a050332724b,0xe80a001e04023057,0xd10b305834352805,0xd234352a02f40200,
0x362f598a2c332500,0x04001b0201023832,0x00710745950104e1,0x3a05ea020912880f,
0x05060f00a4353573,0x1a36352e32c20309,0xcc02000463361f00,0x0736362f00350205,
0x37362f0082010030,0x02310f311f06310f,0xb50300b90b015d04,0x7b030100b8371f54,
0x02020f0361c30a02,0x1f02015d381e0085,0x0419361809240400,0x04cf0402f935352b,
0x2435560365d8321d,0x2903d10800483835,0x0003d0050dac3635,0x0a0e010a9f091ba8,
0x67e635362a057605,0x9435150eba39352a,0x1531a70300850440,0x352a0e320800ce35,
0x381b0e3205008638,0x3566252e81010bac,0x372a0c933719686c,0x053e383625008630,
0x151030321274b80a,0x2c04ee391500cf37,0x2637470a00403a35,0x0102f50400402c35,
0x394b0c66210f4212,0xf3361505f330345f,0xb5393624010c0805,0x7106034c31372300,
0x49a33b1f1d2b054a,0x1f0649a439312f06,0x1a4ac9030249a431,0x49a533362802ce38,
0x3624088c0237da0b,0x5783716528070733,0x578433392f011e03,0x5f39356364391c11,
0x3725092e08011837,0x260118321a011830,0x0001180f1e0f2c37,0x0e4502040118381f,
0x033147040e45381e,0x1735130e450931f3,0x1205030299391f01,0x4d69371f03ac0802,
0x01760701ae391800,0x01780e1f422c3426,0x0205a3361a04fe02,0x1a089735392730ed,
0x392f006d0254136e,0x395f393b12541336,0x5a08019038150190,0x342a019032372515,
0x312603ec032e6d3a,0x63353731354abe31,0x51303128036d0603,0x0237730f0dbb0500,
0x0b3515370b32392b,0x1845463364305c37,0x04c5010100490f0f,0xbd0703373637382f,
0x625f0a0338cf0f62,0xf137332143cb3118,0x1501956d65723404,0x032732332d030a37,
0x0f13ef39133a9d02,0x38315f394c0f6689,0x1238082321072320,0x0a42c60104f43715,
0x790c04be31160aa6,0x7935312304b40100,0x7937312c04b60600,0x7f323129225e0600,
0x3716057f38392a05,0x02b302057f0c04ca,0x2c02123717069204,0x1f031e0700413a33,
0x3e332b0209160435,0x2c372767fb353673,0x4a0100fa391b0076,0x381600fa3731235e,
0x341600fa361c00fa,0x9a381507440800fa,0x251c8e0a43bf0104,0x005c050f007c3431,
0x020138be3531323f,0x5c090f003c0431af,0x0b321c05b6321201,0x002001377432135c,
0x752c35265e6a321c,0x1504d93438323817,0x0120e3351f5e6a38,0x351f3cc00847a106,
0x352d057a040b2118,0x220206290201163b,0x1f12b8011dda0b00,0x0358dd03031ddc6e,
0x03002130322e003f,0x311b002137122174,0x03061e36331f005b,0x08009233322458ad,
0x030a00e8361f00e8,0x00560b1f40021ea2,0x1d720a005d2c3628,0x1f00b4031eab3213,
0x02b9381700003f32,0x442c3928003d331b,0x3033323a0eab0a00,0x2c3127227d080480,
0x2f00d130332e0040,0x1fb9030102953233,0x043d033319003f03,0x33332c00ef020295,
0x00200047fb030295,0x2b0249e60602950d,0xff64722424ce0800,0x45ac011092381424,
0x00a833342a042409,0xc10134ec07008503,0x1672660503cb0945,0x18000b3616047b33,
0x4c060e640503df37,0x2f83ba0a26990539,0x3773030502603030,0x780301cb0b002202,
0x3533323f00230337,0x000192331f004119,0x331e003f05372f03,0x341f001b39130192,
0x0239b2321f0639b2,0x08fc0239b331392a,0x0f398a0e39b2341c,0x023989321f073989,
0x2101f50739893616,0x36587c0401f43739,0x3a382a019b343831,0x38250675351a0173,
0x220675351b058d36,0x0700550400312c37,0x0700423a392c01f0,0x80030a03fe0f0676,
0x2806773636733e38,0x01097f0b00782c39,0x160b1031702304e7,0x26121b321c0b1032,
0x2509310829d03032,0x0b12371900eb3738,0x5d362f00b3373226,0x371c071103012662,
0x3f020e26620464a5,0xa93732243f033213,0x1f3f06043f050b64,0x060c3014023f0732,
0xeb321209273b3428,0xad32332a001f0138,0x09400a1a9a311805,0x1b0c003d035d6a03,
0xcc33702304010166,0x32322c08cc331608,0x226209094506015a,0xd2381e015a393825,
0x32332a01d7311507,0x06057632312f00ce,0xf80f5fa40461da03,0x31322d3fd7020127,
0x30382f4dfb03053e,0x1c07d3321900053e,0x382449eb02053d31,0x840a096a0602f438,
0x0405480c02f60056,0x30392c0548060225,0x3139260fcf040548,0x38322f223b0b0059,
0x1aba34392c0c1aba,0x2b39312c40723919,0x4fce0b0020301b6a,0x011a3f0a001f311b,
0x1b0228af661c487a,0x0104220410e60200,0x0058065f1b0d417c,0x003d371a0058361a,
0x1e33392a001e3719,0x00b4331c1b8d0b00,0x1405016d523a392f,0x0650de0d3d3f016f,
0x3818009b311a001f,0x50fe3230323f007d,0x2a1b8d0a003d0502,0x2a014e0a003d3935,
0x2f114007001e3439,0x3d100800178f3034,0x0a47ff3816054a0c,0x003b0309f70203f0,
0xc901054a083d1102,0xc906054a3132230e,0x351603f036322c0e,0x00c00100a90e03f0,
0x3d8b0303d23a3628,0x3fb502052241321f,0x1f063fb63930313f,0x0906f803033fb632,
0x3fbc04165300105c,0x01165b0124523b1c,0x43323466306f0023,0x1f2ad702070ee638,
0x5732362a06214d36,0x40be341843190c42,0x01422c3316003e0e,0x6e0b0148371a0131,
0xc70a025630322525,0x260a323120304271,0xeb786f7270706168,0x0400a70100820200,
0x00683930323e1659,0x2600953614035e0c,0x0291361f048e3031,0x1a0c163a3031250d,
0x5e03060291311f00,0x91311b000730124a,0x913332230fc60102,0x9138322c0fc60602,
0x9137322f12ec0602,0x2f029131312a0202,0x0a68040a02913231,0xdc321f0941dc311f,
0x8d0241dc361b0341,0x02950b41db351901,0x02950f00232c3623,0x0702570f4314020e,
0x01003f0f43ec3716,0x9838190b0295361f,0x0b02953231323f43,0x953331323f0bff04,
0x00a7020506011602,0x95341f003f383624,0x2d391402c8020a02,0x1228a30813020600,
0x372d747b08618834,0x2f3631323e65892c,0x363035eb12f80071,0x4131463244443432,
0x74391956f3434639,0x2b00773731323a43,0x0f00290501173835,0x71553034290e7573,
0x0f0062391e00e405,0x42c33037290229b5,0x010901123032323f,0x01bc0406a804246c,
0xee321a06c631322b,0x150b00ee32322f00,0x010e53b80f004932,0x76c1040087061f48,
0x39031500ee34322f,0x2f067d0800720500,0xf834120414f83431,0x1965db0a1ad30414,
0x430f04e601021e34,0x34392a002e010100,0x35342a14c9020043,0x28520f021d09014f,
0x0102234830312f01,0x79756d43633f0d83,0x1645d40d04560404,0x382a04910d45d437,
0x2404933718003d2c,0x2850381f04933237,0x0f4d550124bc0204,0x361d01d003030190,
0xd201166c371304d2,0x0704d24137343f04,0x006434372f250202,0x573b372a01a90306,
0x09770578e6311b01,0x0d8301160721321f,0x32185a8e0400c503,0x16e70100690578ef,
0x7b0100b302003806,0x010400d736372f03,0x332d79443714054b,0x0e0f0f1a07021630,
0x0f1a263131230922,0x0122b3311f004db3,0x1b51ba31147aab03,0x311f4e0102001e34,
0x0c71fe30130478dd,0x1c7ba530312678de,0x077c2d311f7b5533,0x2a7b1e311c5ead05,
0x146b570a00212c33,0x64de33312b487234,0x9b02016002052b02,0x0074800f01610128,
0x1600cc331c012004,0x312a03330c778235,0x0333353129033336,0x033336312f49a104,
0xcf381f0216351204,0x30352d064c020602,0x15033330382f0333,0x233038663f21db01,
0x31352f052702064a,0x323f2ee4040c0333,0x0f28011503333233,0x003f31382400c503,
0x1767010e0333331f,0x00d732382f05c003,0x3f5a0604005c0104,0x381f090333343332,
0x381f8163030a0333,0x030125430f00001b,0x31312b0038031b6a,0x04311f390703736f,
0x51060c003603047a,0x5f7931642f006b03,0x710a02fe39312b01,0x3931313b1d1f045b,
0x012b0202f70202fe,0x070909012c356425,0xab323127006e600f,0x2d042e020b830a4c,
0x151775011acc3132,0x88002e9c017e8670,0x8830332c1209060b,0xdb391a0b8839160b,
0x32342520db361a20,0x20e4092e860185c1,0x381503dc05577c03,0x76321c05480909f2,
0x71f1030a3afd0f59,0x5178030156f9371f,0x3a0216190201f90d,0x03001e3332313b00,
0x02047d59341f013a,0x018a0378c20c0236,0x440400608331642f,0x0452630a7cbd047e,
0xf8071ed431121638,0x59020a00f8311f00,0x1f00001b31372f15,0x03192e0201064037,
0x001e3732313b0038,0x00f60f00252c3924,0x0374780c06760202,0x0060d131642f014b,
0xc70a00f6047e6c04,0x0b351b7db3351552,0xc335642212660203,0x0104045635352f09,
0x021ead39382a0630,0x35643f001d0311ca,0x0405af0306054b36,0x017a0730cf01085d,
0x3f7e1d030927280f,0x311f00001b323773,0x38031a310201017a,0x24001e087e190200,
0x02017a0f00252c33,0x25662e331d01b002,0x1f07ba0c7fb62c37,0x433932270883e732,
0x212c302a6665097f,0x07ba351453ad0a00,0x362504072430332f,0x9a02208907019330,
0x362b017235642211,0x04711732180b6c30,0x0f018f30342a067a,0x372f617b030a5719,
0x5c3f351500001b33,0x7f03015203017108,0x2c3724001e351b7a,0x410202801a0f0025,
0x1f7fff05181c0c10,0x1a521d090167bf33,0x313b244a04521d33,0x00f6341f03ff3333,
0x1b34372f054d020a,0x0201070c391f0000,0x33313b0038033913,0x00252c3124001e39,
0x0e012c020200f60f,0x0d7fd42c35257fcc,0x62e40b527a0900f6,0x6ee60c00f6343624,
0x1349646623288f01,0x250104026c34362f,0x270303ff31392a04,0xac36642f001d0211,
0x2ea5022e77020622,0x0f0270311a027001,0x2f37ac3113092997,0x7a331f00001b3537,
0x073212013d030201,0x1f5cb503001e0c00,0x2c028f0204017a34,0x1f088603017a3534,
0xca39332a00088633,0x7c38362463f70b03,0x39150503ca391f01,0x10950303ca07015e,
0x0bc039362b124e03,0x283b040f3d2c3126,0x3732343b35893218,0x030a0168361f07d9,
0x0f00001b361f06e1,0x38032f47020206e1,0x02001e3734313b00,0x030406e1341f06e1,
0x940306e1341c031f,0x190007d734312f38,0x311464480c07d734,0x0f03d832362a6449,
0x0f065d35130a0e17,0x02065d351f000e17,0x312c0038032f8d02,0x00252c33245f1235,
0x0c001f030200f60f,0x34312f39e103065d,0x3c5a9d34180007d7,0x83a40300f6343431,
0x0a0bd90f00f5371a,0x001b38372f2f9203,0x3c02010353351f00,0x3535313b0038032f,
0x0f00252c3724001e,0xc30c003d030200f5,0x6539311f65380305,0x1c01eb05025c0300,
0x0a00f5381300f537,0x0a00f639372f2403,0x1f0083f20f05c303,0x026195030205c335,
0x001e3935313b0038,0x00f60f00252c3124,0x04960c0d03000202,0x72030065310f3814,
0x145b190b6cb10502,0x030c003818653431,0x7443538d7b189aa6,0x6572314b16706d65,
0x6c6c6163410c4c67,0x289b570a0d2f0c60,0x0a0d280a0d202c83,0x2500887d1653bd29,
0x00615a0f8e743333,0x352f13ac0d033603,0x1e0274030d36f533,0x6c057d4503033464,
0x3d2c362a01490903,0x1adb38142c4e0a00,0x307b03010228351f,0x02e902001968381f,
0xb70119640c002100,0xb706196437322327,0xe533161fe5331c27,0x1f0141083f3d081f,
0x3438371701014134,0x078d8b381f014309,0x3c0b00240002d702,0xce35312f37990301,
0x003d05379b030006,0x362f14ef057da90b,0x9833372f0406ce31,0x37642214cb02010a,
0x0f019133372a0a81,0x733f31f6020a0d7b,0x73341f00001b3138,0x003a03316502030e,
0x319e31122ca3311b,0x01020413bd36312f,0x0301363636313c02,0x31190038270f0399,
0x37247de5311b3828,0x09425d342a013435,0x1c159e6413153c02,0x61024c1e0305dd37,
0x133536275bcb0c7b,0x0f02fe0300a80902,0xde3736313b006544,0xaa3737245e750a01,
0xa30f01a25d372a00,0x38733f0056020a0d,0x01a2381f00001b32,0x0b03530305200304,
0x36312f348502001e,0x0c85bb361304122c,0x36312f65ab03122c,0x311b65ad09005ea1,
0x30372c14920565ae,0x0100212c39241528,0x30372301a20b0120,0x35342611660401a2,
0x6a0d03e0321d1166,0x2f0e51083dcb0672,0x355a030e05183237,0x7e76031d5b37312c,
0x4c0305180c005b01,0x01e5341a003d0634,0x651235372f0d1c04,0x1833382e00ac0201,
0x0518311d4d6c0305,0xfd393270330ee501,0x3872331d26570624,0x030518331f387307,
0xd6373123003b350f,0x0516371f01410c37,0x03380c29e3371407,0x089137312f265403,
0x0b003d067e280300,0xae381f06520471b4,0x010be431382f050f,0x0beb386422160902,
0x0e920f018f31382a,0x1b34382f808f030a,0x02010f88331f0000,0x37313b0038030219,
0x371f053202001e33,0x312c25f602040d18,0x312f25f2030d1837,0x0f883819000f8838,
0x382b026c057e940b,0x21022e3401051433,0x1303720b01220100,0x051434382f722538,
0x0300a60d34770300,0x2a000f38381f02f8,0x247e1f0b01da3638,0x0512361b00a83538,
0x2f0298030a0eb60f,0x9e371f00001b3538,0x68590304d3030201,0x312f029b020d4e0b,
0x022cd202040d4e37,0x00d40400f8090295,0x103938280007e80f,0x3f0400f638382a05,
0x2c3724173a381d91,0x019e0c011e010021,0x160fec3815620e03,0x331f188b08051037,
0x0a2830392f021dd4,0x020e051031392f02,0x55860c002b002c5c,0x051030392e00e203,
0x970b003d062c6003,0x0734392f01060408,0x36382e00ac020152,0x292204032d022a11,
0x3323261d01051008,0x332c261d06051031,0x332d261d06051036,0x820f015a01013835,
0x0a283539313f0066,0x0307051236392f04,0x013c3639313c2cfe,0x00084a391f024003,
0x420b003d059b1004,0x10f6391f07520402,0x02010a2839382f05,0x2a07703864224479,
0x0a0fcc0f01913938,0x000fcc0f06a13813,0xa30203088632382f,0x1e32382b04de0404,
0x8533381f05320200,0x880c6bd730322303,0x1e30322f9c310357,0x322a10c430180079,
0x1b57f63915189b30,0x641337d102051432,0x30322369330c1349,0x3f006e0a391f10fb,
0x3213030a28333032,0x00791e30322f9ba5,0x30323a01de353029,0x1b00aa331400aa34,
0x020a10790f051635,0x001b3838733f0588,0xdb020401a2361f00,0x3638313b003a0204,
0x0f00252c3824001e,0x382c054e020201a2,0x361f00d60400fa38,0x2a7ac138180000fa,
0x2b2e570400f83730,0x0203790105183830,0x01a20c0120010021,0x261c08391410b203,
0x0518361f05183934,0x010a280c2e5c030d,0x32140b05180f2e95,0x037bc230312ca664,
0x0400a2be301f5584,0x13530a003d057f02,0x33312f0106393823,0x382e00ac020101e5,
0x391e036e03051839,0x28a4034297020518,0x1838332c28a43316,0x1837332f28a40605,
0x030069cc351f0205,0x36f1010a280c36bd,0x2c36f7030405160f,0x2f35cf036a003264,
0x364403007e733264,0xd80402400b003d07,0x392f05242d311f36,0x02058901010a2837,
0x018f09002401003f,0x0753030a1db1391f,0x311f00001b30392f,0x391333a60301088a,
0x074f0214e20b58b6,0x0c030314e239312f,0xf303303639312c37,0x087e320d0020015c,
0x0132073747027829,0x051431322b026c04,0x23010022022cbd02,0x7c4e31147e6c0c01,
0x0c36e703006b090f,0x460f5d4532150a2a,0x1a01dc34322a005d,0xab022acd010fe632,
0xdf0f01a15d342a00,0x31392f3d7d030a10,0x02021b510f00001b,0x39313b00380334c7,
0x00252c3724001e35,0x2c1f6f030101a10f,0x1f00d50400f93739,0x02757a080000f935,
0xf7321400f708381a,0x2c33258ccd371d00,0x01a40c0122020023,0x2621840401a43714,
0x2f2a980805183135,0x80381a7414e93733,0x290242ec32322537,0x2b169005001b082f,
0x2b114f0502123239,0x2c5c7c0600353438,0x1b024806001b3637,0x850c1db306005038,
0x32352c006b331500,0x86341d003605001b,0x0086331d0e7c0500,0x001b38322c0cf905,
0x050087321d1a6205,0x34050087311d09bb,0x0142040087301d08,0x2c5382050086391c,
0x2c012604001a3838,0x1c010b04001a3038,0x1c010a3414008337,0x361c01080403bb36,
0x30362b01060401c2,0xa4351c0104040019,0x00cc351d01020401,0x190033341c006504,
0x1804007e0748d138,0x00980400e4341d01,0x0b37870500e4331d,0x08064130312a00e4,
0x01650d00b404009a,0x19004c301c009a04,0x550404ec0c00e631,0x0f1103cd3b312f33,
0x4e02001301016e51,0x09343642b46e096f,0x323fb53804001c5b,0xb543040500223834,
0x3631250022373429,0x30302f6268050022,0x342f633a05050045,0x3f62470405002336,
0x5003050069353432,0x0600223939733f62,0x0600cf391f618d03,0x0045341f00d03415,
0x3739733f62830305,0x392f4f4503060022,0x00ab361405002236,0x00ab36140600cd0f,
0x3536150500ab341f,0x3715050023331f01,0x050601c0321f0135,0x05060023311f01e3,
0x00040601c10f0114,0x0500233933323f63,0x38332f00b0303124,0x0024323124060024,
0x303224060024371f,0x04070024361f0024,0x06002435332f00b3,0x0601630f00b43315,
0x01640f00b4343125,0x321f00b435312506,0x470f01f004070303,0x890f00b336150700,
0x1f00b33731250601,0x6b34382306006b30,0x3931240601f30f00,0x240601ae321f00b2,
0x08256f0101663032,0x00a40f000b0171b5,0x35331f0432311404,0x32140400920f0100,
0x0171da3b342a0035,0x001702b90a0e000b,0xac09112e02003503,0x08870301b5370f08,
0x000a202c2300de02,0x000a3215000a3115,0x30342b0208ad331f,0x0608ad39342f08ad,
0x312f0508ad30352f,0xae31352f0708ae30,0x0508ae32352f0608,0x352f0708af30312f,
0xaf34352f0608af33,0x0608af35352f0608,0x352f0608af36352f,0xaf38352f0608af37,
0x0608af39352f0608,0x362f0508af30362f,0xaf32362f0508af31,0x0508af33362f0508,
0x312f0408af34362f,0xb130312f0508b030,0x0508b230312f0508,0x362f0608b330312f,
0xb430312f0408b335,0x0608b530312f0508,0x362f0508b536362f,0x08b5311f0508b537,
0x2f0408b538362f06,0x3131290408b53936,0x4a410408b50c0102,0xb539362f5208b50f,
0x0e08b538362f0d08,0x37362f0f08b5311f,0x08b536362f0e08b5,0x2f0e08b630312f0d,
0x35362f0f08b73031,0x08b830312f0d08b7,0x2f0e08b930312f0e,0x30312f0e08ba3031,
0x08bb34362f0f08bb,0x2f0e08bb33362f0e,0x31362f0e08bb3236,0x08bb30362f0e08bb,
0x2f0f08bb39352f0f,0x37352f0f08bb3835,0x08bb36352f0f08bb,0x2f0f08bb35352f0f,
0x33352f0f08bb3435,0x08bc30312f0e08bb,0x2f0f08bc32352f10,0x30312f0e08bc3135,
0x08bd30352f1008bd,0x1f2108bd39342f0f,0x0209270f2108bd37,0x0927331f0401330f,
0x27341f0401b00f0a,0x15030927351f0a09,0x0f0927391c092735,0x051c092a0f0096cd,
0x351f000a3415000a,0x312f5b120b03093e,0x001a0f0309230531,0x4c0f00001c0f0026,
0x0039031a0d03012a,0x7e03001e081a0d02,0x36371304156a0fa7,0x2fa1a203156a0c00,
0x562b04001a7e3732,0x0513c9311b002203,0x9d0307857e0f4734,0x2d13b0010526021f,
0x062c382636a63a32,0x4c3a332a00280500,0xd8040a014c331f01,0xa30f00001c331f25,
0x00390319eb03012a,0x6203001e3530323b,0x6b0304014c361f87,0x1f15f20348820d01,
0x014c351901944037,0x014c353024905e0b,0x68c638140786380f,0x014c341d01243514,
0x38150006021d0f02,0x30362f1e11080028,0xaa0d397d02043db1,0x0f001f033ceb0252,
0x663c3d04021552ac,0x236eef0317833631,0x00ed371f00083830,0x2925290400760406,
0x2038365a47f23635,0x05521f0647f23435,0x120547f2371bb810,0x8630342a36dc0601,
0x3137253731311a57,0x9c014b92391b1a28,0x303626006c371412,0x0700413a312c0053,
0xa6030a680b0f3944,0x750404b04d361f23,0x393c0fb04f321f00,0x52fd34162534345f,
0x323c550d052ff909,0x783337254a313136,0x34372f0052020f00,0x390202ea02004dda,
0x2f058abf34372f00,0xbf321f068abf3537,0xde038abe3519028a,0x372f078abd321f47,
0x7e31362f0051f636,0x730d0d3ac2030a01,0x51f137372e009d02,0xf1020651f039372f,
0x001e391d003b0321,0x381a00a502057801,0x054f8932382f788d,0xe70b002001208002,
0x030900d932362f51,0x26005132362d24e8,0x01c7341900572c35,0x382d00a7021f6202,
0x120a029008003935,0x0a003f031f650250,0x0021021dec026e6b,0x381f1c3f0205910a,
0x026731392f03c025,0x2e0038021c780200,0x1f017f02503e3139,0x8c68321f078c6839,
0x034c8d0c1dae0302,0x0903ef3235244c8c,0x4c810c03e6004c81,0x2b04230501213815,
0x06001a0503913a33,0x373439b03c085023,0x86b736322886b735,0x6e65500186b7391f,
0x3400f17b12797274,0x5550476f7275654e,0x7b096c656e72654b,0x090d017b0b665020,
0x0f0486b40f090803,0xd40a86b005180041,0x1e00450f0f440085,0x321b34008e2c312f,
0x331c2a004d0f8611,0x341f2200dc0f878b,0xf500869c082d0041,0x41361f1e00410f03,
0x2017deab371f2d00,0x2086500f793a5b30,0xa41b32332f864f0e,0x391b00dee7361f11,
0xdee93637343b8636,0x002b03058637301f,0x0fdeec381cd1460a,0x82bd38342f08e181,
0x1c035a0f7ef80201,0x22004a0f0280d30f,0x004c331f0383530f,0x4c341f0282fe0f23,
0x2d0f0182a70f2300,0xe30f0382510f2301,0x01cd1e36312f2400,0x0386650f2400e40f,
0x87040f23004d351f,0x770f2401ca361f03,0x410f2402620f0184,0x1f21004d371f0388,
0x2100490f01846b31,0x1f00004b382b323f,0x0285020f23004b34,0x87850f24004c351f,
0x3d0b23004d391f02,0x1e004d0f8aa90a86,0x004e0f038aa8341f,0x03df0f03895d0f21,
0x00960f0285df0f22,0x00960f02017b0f23,0x381f0100e1371f23,0x1f00852e0f220179,
0x02861c0f23038938,0x86170f24004c371f,0x86120f24046d0f01,0x860d0f2405060f02,
0x83000a2009df0f00,0x17079f875d353536,0x0017371b15b50300,0x0017079eb25d3326,
0x0382dd351b181e03,0x842404840b0c3c89,0x352f195a0483720c,0x0018341b03d7a43b,
0xd96619d7bc363129,0x71a00484e8661ce3,0x331c00e90300170b,0x71e70b83080383e4,
0x301fd8740c173804,0x732b1720030385aa,0x0b0d5f371300a239,0x34662c1773020017,
0x85380b843c030017,0xaaad0916a5363526,0xda38382f0487d90f,0x2587db30312b0d87,
0xdd30312f87dc3031,0x420f0cc9dd020287,0x18003a090f0e5b02,0x058a6e331f87db34,
0x0101acab0f002a01,0x970f04d15b0f0f65,0x72040bacaa080136,0x61e806855f383127,
0x1e0687d50f6f7802,0x350901240387d335,0x3a322c0135321601,0x86570d1bb405863d,
0x00a2a0311a1bab04,0xa70801e9a40f0149,0x3636323b64d8054a,0x2001997733164aea,
0x0261300c2e180800,0x1f8a0a86ca03b3ef,0x039d530c6be8301a,0x7a4e0b1f8a0a86b3,
0x0a87fd2c1629fd08,0x40086a22351a004e,0x0a27d70861cc0a29,0x6d240a208f086b6e,
0x220c6d8505208e08,0x0082301c1f55051f,0x002acc0f072acd0f,0x03221e0faacc3615,
0x1c331f06221d331f,0x221b0f001a030022,0x5006221a34332e06,0x0501ba0c001a0398,
0x21e10520a80d21e2,0x2267391f01a0341c,0x1707002266331f05,0xaa5d302e001a0291,
0x2b2d0f02227f0fd6,0x922107012b2c0f07,0x7b38332f02227c0f,0x05227a39332c0422,
0xc2b30621c10b6f43,0xa531342f0221a60f,0x1521a432342d0421,0x970521a30ac2ac36,
0x03d79d062a550a9c,0xca0100d6240f06c9,0x06cb0100d5480f06,0x0621e70800c6a70f,
0xc5e108236a0b7f47,0x800c68860906ce02,0x0a00a70419940323,0x15239530312d0151,
0x07062b130faa8836,0xcc3816003200b8cb,0x0400180908bc02c4,0x050018343529007a,
0x05001833352a0382,0x5022bb5d322f22d7,0xb9331f0d22ba331f,0x0d22b832322f0e22,
0xb6331f0e22b7331f,0x0d22b531322f0e22,0x331f0d22b430322f,0x0e22b2391f0f22b3,
0xb0371f0e22b1381f,0x1f0d22af361f0e22,0x22ad331f0e22ae33,0x331f0e22ac331f0e,
0x1022aa331f0e22ab,0x1022a80f1022a90f,0x1122a60f1022a70f,0x1022a40f0f22a50f,
0x22a2351f1022a30f,0x22a00f1022a10f0f,0x9e0f0f229f341f10,0x0257229d311f0f22,
0x76010504940fb208,0x22aa040300f50f9e,0x321a00210e90f405,0x68341a00210e912e,
0x91a2361a00210e91,0xec022beb05123f05,0xdd0405234d371f0c,0x170506236f341f0d,
0xf404050022321f0e,0x0405002231342f04,0x0500a730342f0e8b,0x3815012a0a0ec403,
0x31332f0efb04001f,0xca5a5d3327050021,0x0f9173080100210f,0x8d075d3526020021,
0x0fee76040601f00f,0x0300e6351f0a2465,0x200fa31405989800,0x39662f0460020200,
0xb20faa5f02060020,0x93320999eb010405,0x341f01ce0500a30e,0x040404050f01030c,
0x00360d948902250a,0x011036150404c70f,0x00a30f010036361f,0xac371f0036371504,
0x170325ac381f0125,0xc40f25aa09e7d738,0x0a053625bf0f0f97,0x0a3715000a361500,
0x0e210125dd381900,0x1d9336382b385908,0xe893303126c09b08,0x22203109656c69c4,
0x64129179702f3a43,0x000e2f326e69775f,0x632ee038612f3625,0x39303531202c2275,
0x35541edb36353431,0x32a0004838303637,0x79705c5c3a632220,0x4975706731003b6e,
0x3638000f5c5c2400,0x004c6812004b5c5c,0x3439a13937353741,0x4a3313004a363637,
0x0001af676f723000,0x6e5c5c7312f00014,0x7067206169646976,0x7475706d6f632075,
0x6c6f6f7420676e69,0xf2eaa65c5c74696b,0x5c302e38765c5c00,0x6564756c636e695c,
0xc1f421645f220015,0x5f656d69746e7572,0x3462007c2e697061,0x3553363736313438,
0x7e341f007e383034,0x0178000079033500,0x70682e7358022d00,0x3654270500007970,
0x351f007a30313738,0x65766972ba36007a,0xed73657079745f72,0x353137202c338400,
0x01b5361f00733430,0x682e6c697455660f,0x35412690381001fa,0x6573210243363233,
0x6265642e20d000dd,0x206f666e695f6775,0x3431300363000b93,0x321204ee00250037,
0x2e03001a30130007,0x7665726262616200,0xfa0100073812001b,0x001230140009014f,
0x0931130009333024,0x321b001230312400,0x331300353513001b,0x0300083936230019,
0x13002031372a0018,0x0008363423000835,0xb307c42d00003003,0x362a00c820382300,
0x0093373424006837,0x2d00623213008a04,0x14002c0500b63837,0x130096311a000934,
0x0008353822006d38,0x4d39140029353924,0x30352a0103351b00,0x352a3100770f0089,
0x004b37362c005434,0x0011391300323013,0x2b36312d01a33814,0x016b040009321b00,
0x016c07002b393927,0x696c4f022734362c,0x32392f03017f656e,0x017f32392f74017f,
0x0a0d323a027c093b,0x39304a0191050133,0x36343135035a0a0d,0x0008030011020349,
0x6a0303000300d404,0x13005b6d43633f01,0x5a0a0d3334030205,0x1300130603050500,
0x003e33362b002d37,0x381b02110a0d353d,0x0e02463739270111,0x2f0386323325007c,
0x003c0c0501910a0d,0x05014d351f003506,0x443131323f01440d,0x1e030144361f0301,
0x3f0b013a0f005145,0xe40522013a333232,0x3538392d025d0c00,0x381f040143311f05,
0x010730372f040107,0x461f030107371f16,0x7a0f0107050a0051,0xe8331c0008010200,
0x9d351c00f1321500,0x1f0402e830332f00,0x0fb8590004009d38,0x3f0001cb0f2d0078,
0x313b0601cb393133,0x2d01d30d00f33139,0x02db351c02c03731,0xb2311b06f733302d,
0x341d003e32332d00,0x1405035e341f022c,0x1f0501a10f01f137,0x8733372f07018735,
0x2e030187391f0301,0x30016a0f005b734b,0x382d0d053333362f,0x381c001203013c33,
0x27013b37362c012a,0x1401010f06673930,0x535003010230312f,0xa00fda316f546765,
0x362d0703740f5000,0x1e0443311b021f36,0x381f02800e006737,0x030110311f170110,
0x646f4d6c6f6f429f,0x01110f5100a16c65,0x0f01003b32382f07,0x035237392e0208dc,
0x3632353f0603210f,0x030110321f040110,0x0f5000a00fda3b05,0x450f003d0c1c0366,
0x1f04c439362d1801,0x0134331f20013430,0x3f008d0fda9d0006,0x6437392c0f06b50f,
0x057a301e057a0501,0x06c8341f1800eb0f,0x3f008d0fdd5f0204,0x001a361b22031b0f,
0x3536363f094c391d,0x0601cc351f0400e1,0x0f3500826365563f,0x280647381f1c02e2,
0x2633372c1703870f,0x0401263432373f01,0xef2002060646361f,0x1c01430f4f009f0f,
0x03980f270143391f,0x32371f1f01320f01,0x008c0fef42000601,0x07a80f0107640f3e,
0x1d0eb70506e60912,0x0502fc381f03b036,0x2f0bba0d10f43514,0x09970f05011d3338,
0x7200c60ff2780904,0x0f0cf70c250b6b0f,0x52019e301f330196,0x5f0409019e30322f,
0x07210f7a00cf0fe4,0x321f640959361f08,0xa90fe85706040a69,0x340f0901200f5800,
0x07010f32322f5309,0x093d36372f09350e,0x30314f4d02240f59,0x0a4a0f0401163934,
0x6000b30fea7d0704,0x0e14280f1c04f50f,0x570f42026c30372f,0x0f080157341f0801,
0x590276301f00026e,0x0080040e5333382d,0x0f000ad90f148a0c,0x040ad9321f160ee9,
0x0e4600950f58d404,0x5a391d120f0700fa,0x3838313a163b0e01,0x000a11cd321f00d3,
0xe9051e00680fab67,0x0210311516480719,0x392b13320c02e40e,0x0f09035e090cda39,
0x0bdc070199361803,0x372b0d18cf39392f,0x16b438302f005c37,0x49005e0f00df0c06,
0x34150d5804027700,0x363615a732180f14,0x00123018383c2034,0x46002930646e6547,
0xe00e0c5d35312038,0x3734350600700f12,0x790902110a146e32,0x00503515149a0438,
0x351f007409019607,0x743630353f1000e4,0x3b050074381b1f00,0x3833333f02670604,
0x341e0483061501b7,0x35392f15640b19d2,0x720f002b0005156c,0x460718ef0d1e3d00,
0x7b32312f01e70501,0x04186233382c1700,0xc3311f03e10d0404,0x007a0e01f4050615,
0x0737372d3301670f,0x3a06061747351f1a,0x1e580e0b3b331e06,0x0f07ce0c0617850f,
0x010059351f001175,0x0e57011b0f02070a,0x04420418120d0c18,0xf60f10049235362f,
0x0e4e00f6321f2800,0x7f0f00a8351e192b,0x32322f002c040605,0x052603ad0f1900e5,
0x840d4801110f0705,0x0d07510d1a710c0a,0xd4381e030406144d,0x00da0f081c6f0f1e,
0x351f008430382d4b,0x8001e0351f7e0106,0x0709b5301f1a5005,0x361f1f930e1e610d,
0x0100b7391f8102bb,0x0c6b32302f001a09,0x1f0700fd35312f05,0x1d4c0d1b0906fd34,
0xd138312f5d04e30f,0x0f250730302a0e04,0x0400e4351f0111f2,0x040f07018030372f,
0x0f8b0121381f2006,0xba023b391f680814,0x8600dc0f0b730d1e,0x312f05002b36382f,
0x00d3311f0600d337,0x06110e0609010f8b,0x00fe321f2100fe0f,0x0afe050ada331b8b,
0x062023311f252a05,0x392e550b9d33312f,0x0e0d293f0f17ab37,0x301e00db371c1dca,
0x08de0f05a90b1229,0x0f0cbc0a24640910,0x391f0db40e4f09dc,0x8a032e351faa0132,
0x1c090c0e11d03715,0x0a297a311f0b6e36,0x361f01090a01700e,0x0f35011a0fbe091f,
0x062248381d8b0a39,0x2f170d10361f2924,0x048b09c400e63831,0x128e301f0012730f,
0x0b22391f01240a0a,0x2aa8301f17810e93,0x580c060361381f07,0x84321d000fcf0f03,
0x30322f0611510f01,0x2f0613960f8b056a,0x4e361d0530ca3939,0x220d890f027a0d00,
0x144f064e0ac1321f,0x16470d342f1bb50e,0x0d9c0f0fb32e1e09,0x1837392f06b00d0a,
0xc70f1f1938110c30,0x372d2a044f0f4c08,0x9d0f0bc20e012330,0x8c010833322f3008,
0x2c2436312e0bb20d,0x0f0500ef0f2f4f0e,0xb10e0c7d0d4f0abe,0x8e301f0800460f12,
0x1e8c0aa7321f6616,0x090a09610f158b30,0x01470e03460d018d,0x1b36322f0807950f,
0x2f0619dc381f8b01,0xd5371f3b01093930,0xb10f32f8321e5f1b,0x05005739362f280b,
0x0f221add0f074706,0x0e0f39880f4e0adc,0x37770f0f4b0e2463,0x39322f200aa60f00,
0x311c07d50e601005,0x12331f01970d39a2,0x382f0606a10f4f0a,0xae33372e05037439,
0x00470e0707b30f29,0x1f0607e00f0e5a0e,0x1414760f831e6c33,0x371f340c0d084009,
0x0e8433302f062763,0x990f8c14bb331f05,0x050b0832372f321a,0x332f0e3a2b30302f,
0x0e00ff0c68033333,0x341f00b0321d049e,0x101478351f6001d2,0x0e03c9351f06830d,
0x381f070f0838362f,0x0add35332f0e1246,0x05051d6331302f56,0x1f0f0e9e351f0a84,
0x0f00820c06134e38,0x189e36332f192479,0x03b80b000cf50f93,0xa537332f071b530f,
0x331f2a1c030f5e03,0x362f31130b4f091f,0x069e391f04084937,0x73391f16115b0f00,
0x57038e39332f173f,0x0b340c060709341f,0x231b4f0f1a18fd0f,0xb730372f0b05e30f,
0xb4014c30342f200f,0x391a6c0f0126a30f,0x0d0e5f0b9931342f,0x4088321f15b40607,
0xa3361f0401570f0a,0x341f062b5a0f0724,0x371f079c064e09d8,0x0e2928351f070bb5,
0x6b0f07f20e0b010e,0x0675060365081004,0x1f33342f0605800f,0x190f3214350f9c01,
0x0f9c0119341f1101,0x1f2801170f19083e,0x1811bd0f56011735,0x371e07d50e046b05,
0x07c30f053e0e0989,0x351e8c13f8341f1d,0x372e0e1b850f3fdf,0x1f0d0f350f215533,
0x4900dc0f5f0a6e34,0x0ae8341f0408870f,0x392f5f1ee3341f30,0x01183c0f0e3c0439,
0x240e8b0f07065d0f,0x0b12ac0f1ba52e1e,0x391f0607cd30322f,0x00cc31302f562e40,
0x33081a32fc351f06,0x10d1341f189b0700,0x0801301e00bf0a12,0x3a30352f150a000f,
0x170f011be70fa301,0x0f8106cf311f3901,0x381e04080d2a022f,0x31980f30910d34fd,
0x0cd0321f04960660,0x1f0620f634312f0f,0x00f7351f2801fe35,0x34db0f010f360f94,
0x24361f09012d0f42,0xa70f29033e0f9502,0x371f08012c0f193f,0xe90d00a707e2012c,
0x72381f0802590f0f,0x080f003a080f5624,0x56230a39352f0f51,0x0519b1371f1aca0e,
0x0a0e16077731322f,0x3d0f4f1cfe361f17,0xb10f3a3a8c0f092c,0x0e0549d8321f1902,
0xcc0f02223d0f3c2b,0xa5015931362f0e02,0x5601360f011b7c0f,0x0490391e4f1d7c0f,
0x0e3e240c18359d0f,0xeb0d0801010f25cc,0x0fa30b8c33362f42,0x062cee0d1a4b15e2,
0x950c7f3a500f5e1b,0x321f072478321f05,0x810e24700d05517b,0x01310f54c1301e01,
0x301f880131331f08,0x1b8533382e0e0892,0x0b112f980f08420e,0x0fdf0117341f0117,
0x890c01200b0b160a,0x033e0f612aff0f45,0xcd0e870227361f70,0x1a44cf0f32410e05,
0x4401560f002f050f,0x1e69276c0f006a03,0x0f0a1c3d0f089030,0x6f00dd381f1706a2,
0x00a00346077f331f,0x001cef0f560c280f,0x001f790f29c5301b,0x1f02c0060d0fb50f,
0x0f008b04292f0137,0x0812c6301f573446,0x0e268e0f11ce331e,0x0f49c10b007b361d,
0x49cb31302f1b2cd4,0x13611a0f1b070e6e,0x0e01090b2d34840f,0x720f81379d0f0aa7,
0x26860f035e062a35,0x0e301f0183321416,0x30323f4fae0d9241,0x3602c60f9103f234,
0x04ab069901ae351f,0x00ca361f0499321e,0x321d07107c371f91,0x35312f1a250c5fa2,
0x09a530322f3a1d53,0x0f31d50e02eb0e5f,0x1a3830323f6d29a6,0x290c11581a0f5d0d,
0x35322e334c910f02,0xa60c4d178b0f0402,0x0057012600ca0f18,0x3e061cec0f013b0d,
0x4a8c0e042d343431,0x154b060f0d00fb0f,0x361f052f1a31372f,0x381e27f40e070c77,
0xbf0f084c750f3684,0xd5391f55f108b000,0x290856d5311b1056,0xd539161d56d50f00,
0x1f10566134332f56,0x7339392f1456d531,0x1f007330342f1100,0x0f1702ca0f56d40e,
0x0e58021d0f214e04,0xf907ae00c80f02d3,0x1b1002dc34372f01,0x0e02dc321f02dc32,
0x00930f1d4bbc381f,0x028c313537344f02,0x371f1502ff321f10,0x3f0f008e0f08014d,
0x381f20008e333430,0x27d030302f065a62,0x38344f0100a00f26,0x32312f1f009f3637,
0x0f0102be0f2e03ba,0x086a00790f2a28b2,0x331b1105f80f015b,0xf70f031c331e031c,
0x1e1c0325391f4201,0x0b2c01f70f032533,0x29e60e3ea70e1bb9,0x1ad231322f16630c,
0x36362f2837ad0f05,0x351f3db3070d5a26,0x1f3ede371e0d15a7,0x3828321f07008c38,
0x8e0f0514022e1f24,0x381f03850780ff01,0x1f0421341b11073d,0x2f0b150d0e073d34,
0x00b60f23014c3930,0x34341f1d07600f04,0x070bcf32302f1561,0x8e30342f11008e0f,
0x392f0607600f1f00,0x9033382f16012d38,0x790e0600b90f0828,0x36312f1900b80f07,
0x371f1cab0e0f0819,0xf30f6e3b0e051a3c,0xf50e3100ee0f0064,0x34322f1200ef0f62,
0x1f0096018eff0671,0x1e20350d072bc537,0xdc0f10090e32cb38,0x2e0f042208cdff01,
0x351f070d351b110b,0x1f1d0b480f6e070d,0x1d11870f4a070d35,0x0d391f75070d351f,
0x1eab070d351f1b07,0x2f1900ef0f070d39,0x03830f0802363432,0x0097393439344f31,
0x7a0604100c331f1f,0x0d263b0e23900e5c,0x30072000350f25e4,0x1e83d93736363c6a,
0x18003f301f5bf131,0x0f6b1f351b00d60e,0x0f856a2e1714840c,0x005736312b002502,
0x820f01230d2cf406,0x6931130131076c00,0x0901720d03cc0a02,0x7c0c0e004a0f006d,
0x220317852a351f01,0x3c01b80f85310685,0x8b0f2b01c137312f,0x34322e0180097c00,
0x322e2301ca0f0410,0x0f4c84340f01ca34,0x05021a371f10021a,0x0709e3301f017f07,
0x2aa80d07284b351f,0x1f015c083b00510f,0x3f37392f1004e134,0x380f07f734181a00,
0x0e380147301f1700,0xbe092e00480f013e,0x350f88b536372c00,0x01350e003f0e1a01,
0x614c301c1300380f,0xab0c02a504049605,0x33372a0028371a7a,0x381b2c63381b0028,
0x1a2bca35362b8bc4,0x0f048b351b8e2435,0x5c1935392f3b8d27,0x391e008832312a05,
0x160f00b2351e03fe,0x870e8df2311a0321,0x229e0c8f19351c00,0x0f82860e0858e60f,
0x206c35312c1035c3,0xe4ff01f80f65a00c,0x7cf6383625041e08,0xfb361b0efb33342d,
0x312d030efb361f0e,0x1f0063c40f1d4636,0x2c02870b07223430,0x0f0694080f2f3635,
0x2a54c9301b042da3,0x1f32372e92983538,0x32150b042ef70f3a,0x0f05768b0f448800,
0x391b83f409b200c1,0x371b0111130f0211,0x0d0c1113371f0218,0x00920f00c40e27fa,
0x0e23313334314f10,0x371a167930371f11,0x12008530382f015a,0x2503251d0b136805,
0x392df5052efd0700,0xec321e95be313731,0x30382f3a008a0f10,0x0f1534520f25008a,
0x371d01ab050d009e,0x381b623636140126,0x323c952731142c3a,0x67da2e177d873531,
0x31706d7420343686,0x002239362f000c34,0x9805160022381f0e,0x020f0a90d7381f04,
0x0e010231382c0401,0x9e331f00e7040228,0x7fe00f66c9061401,0xf4301e0042de0f0f,
0xbf321a0700bf0f37,0x8e636f2c963c0700,0x110f286637362e00,0x2b162100860f1b85,
0x34372d01ab0586a3,0x041b31ae391f080f,0x331f0500920f013c,0x01d732382f0e01d7,
0x22010c0f00940126,0x0196381f020a3215,0x0f16006636362f0f,0x03b935382f0003b9,
0x34372f10009c0f26,0x322f057b0529009c,0x1f0185071d009c36,0x3933343c24018536,
0x2b016c31312f00e9,0x2305250f024c311d,0x1e00220f0503371e,0x2239170e0022381f,
0x342f0d0022361f00,0x2230322f23002230,0x332f000c31160e00,0x0022321f02002238,
0x57070e0022331f30,0x780f026836332d06,0x39342f04b4090108,0x0fce32392a06023c,
0x381e854b0602890a,0x3b0d20006d0f085b,0x332f06086a371f10,0xa934312f06039430,
0x3547823d32160102,0x027007013e313330,0x75341a009439322d,0x9f31362f003f016b,
0x9f0f04b4321b0500,0x36372f0060081700,0x250060331f050060,0x4433180c0106301f,
0x06371f0106351d02,0x060f01a5331e1a01,0x1f250060341f3a01,0x2f03770a2b000730,
0x31342f0d04873034,0x0e0022321f520022,0x0a7834362d044307,0x060f030e0644331f,
0x0644381e0b07140f,0x0f5032081e07b00f,0x0f06cf351f05008b,0x2106cf0f079f301e,
0x00220f013837342e,0xcf080e0022381f1e,0x22033905bf321f06,0x33353f0505bf0f35,
0x0f9e76033805bf30,0x05bf36322f1305bf,0x351d000c34352735,0x1f0804b9391f0101,
0x2e0cc40506090736,0x0d04b00f0b533335,0x1c00570f000baa0f,0x047a36180d05ad0f,
0x06b3321f0188311d,0x361f4c06b3361f23,0x0f7100070f1d05ad,0x1f1375331c071436,
0x135a381f05898237,0x17144b0f00180e45,0x1f934409c700d60f,0x1460381b10146030,
0x009206481460381f,0x1460381f1514600f,0x007c381fa68e0514,0x12c1054a14570f08,
0x144f0f080082301f,0x2d008b0f15640e4a,0x008a0f4f1564311f,0x6f0625008a321f14,
0x15870f2065311e26,0x3912ae0f00c10631,0x0606f23717092409,0x341f0800230f1352,
0x081b15810f100023,0x322f0809060f0473,0x2000a30f40159134,0x381f2a00a330352f,
0xd83532323f41145d,0x2f104f32382d0912,0x33372a0e644d3837,0xce0f2201a40f02c4,
0xbd0f1f0c430f000c,0x2900bd30352f3800,0x322d2500bd31382f,0x726d01a4060a7332,
0x0599917365676e61,0x920b2122570f143c,0x381f004d35392d0c,0xbe3930373f25004d,
0x0f042f39382e080f,0x002330392f1f0023,0x02250e002331180f,0x07d1301e29ea391d,
0x1002e20f6aa42e18,0x86351f24bb38332c,0x27020a021c060604,0x4903b70f2200ab0f,
0x00d5381f1100d50f,0xab30352f01800d47,0x0f820180391f2a00,0x00d530382f2b00d5,
0x2f1f030030372f3f,0xab311f0f00ab3434,0xd50f4903000f4100,0x2f580180321f1100,
0x80341f2a00ab3035,0x351f2c00d50f8201,0x0544108f0f0d00d5,0x2c760d23e90d26e4,
0x357539302e31d10e,0x26100a0f1980bb0f,0x32352e0b0fda321f,0x352f0400bb0f2787,
0x4711450f0700dd31,0x03ae087eff018c0f,0x391b1011fb35382f,0x2f4911fb391f11fb,
0xfb391f1c11fb3538,0x1c0694cf391f1c11,0x00a737372f2a0630,0x1700a70f5a140513,
0x0600b0311f4d9805,0x25d40f1a007d361f,0x0c0ce00f0eb90d08,0x0f0802c80fa0be0a,
0x1c3535353f0f009f,0x0c011c36312f2001,0x1f1400900f32140e,0x0f4d6b062101ac37,
0xe10f044a080901ac,0x0e0633c9311f0068,0x382f2b01f90f48e5,0x8333382f2e01f933,
0xdc0f0600f20f0763,0x1f3f144e331f1c03,0x9535312f06827737,0x78073514590f1400,
0xc0321e0068d20f8a,0x12180f18013e0f67,0x03020f5931392f02,0x35362f21ba030a90,
0x180024341f100024,0x080706f20f1f200e,0x391d0402e00f0a4d,0x372e1a03a80f1524,
0x910f00a70e03a836,0x333f150c6c0f0ea8,0xaf381f2b00af3533,0x4500af30352f4000,
0x970f0d00af30382f,0x1f313634382f0866,0x3e75371f1707b20f,0x1837342f01180521,
0x0d040118321f2b01,0x03370e41ca0e087b,0x0f0b2207100ae40f,0x2baf37392f0704d7,
0x18381f009430150a,0x0e422f7c381f211a,0x7d0f11008b0f2163,0xc2f50f16a10e422f,
0x0b04ec0f2cb60911,0x2f4919043831333f,0x31332e0e06513837,0x322f0713810f416e,
0x2b66391f0b108138,0x0b101d3032333a10,0xb1381fc3df060295,0x02010f442703171d,
0x1a4f0f0201331e0d,0xcc052c0083301f1d,0x06ae0f481ad20f11,0x021ad20f1a580c08,
0x1200a30f6a1b750f,0x38312f271b75391f,0x0a02aa381f17012d,0x2f0e005e3835323f,
0x34332f25005e3035,0x0f46c2351e002ca1,0x5c0f5f3f0e0d2fc0,0x1708f035312f008d,
0x34314f091a4b311f,0x7bc8065f00b73433,0x39392f3600c8381f,0x0fb3c6311e2200c8,
0x064958381f1864a7,0x590f1f00da31322f,0x00da3436353f0302,0x2e00eb0f01c50e82,
0x2f6703443832363f,0x39363f25027c3035,0x2700c80f78034432,0x2f8a03443735373f,
0x32383f2502593035,0x2800eb0f9b034432,0x4d0f4b490eb79505,0x00673035393f3807,
0x30323d3d07560f00,0x443639362e041233,0x380e341f1f09590f,0x78381f138831150b,
0x342f28092e0f0000,0x2e31382f0e092e32,0x04530f6cd40e2809,0x015a0f103aea0f08,
0x0f015a082754033e,0x1f2c01980f5600b6,0x0d17950f260b6935,0x64391f0128ce2e1f,
0x103e1f35352f0701,0x1100b70f2f25e80f,0xc00f09121c35362f,0x0f371ff1361f0500,
0x1f7281361f010480,0x0f0100b80f94c40e,0x303433324f0a11a1,0x1f0f0f630f000095,
0x5736342e0b050535,0x0c140f139c311e00,0x324d0a265f361f17,0x5d381f0575353438,
0x0f005d33392d3500,0x0f3a09350f011688,0x4f0201830f1900b6,0x2f20018335323033,
0x31334e2401263035,0x35005d0f01833331,0x2f6001830f6f2305,0x39323d2501833035,
0xcf7933302f04a033,0x10d30e26020d0f19,0x352f08a105055f06,0x3a00b60f04060d32,
0x371f2a00b630352f,0x76bc36382f2600b6,0x0f260a5630302f06,0x00a430342f0915f7,
0x1f2a00a430352f48,0x0636f20f1c00a431,0xf40d000d04032a03,0x212c840f1e6a0536,
0x1c37b30f0208c50f,0x08900f212cb0391f,0x3de20f372f371e01,0x0136333737344825,
0x050143341f000d09,0xac3937343f37d707,0x38d40f01db0e1614,0x0092040d8434130d,
0x11009f371f000d09,0x0f06326f3233393f,0x322802810b2e009f,0x333f009f0c000d36,
0x3b2a0f1a02813930,0x31382f35028a0f48,0x2e2f59321846028a,0x19028a0f014c3033,
0x33283d028a33382f,0x0f009f331e000d32,0x321f07020619028a,0x009235312827009f,
0x1afb391f000d3818,0x3935383f009f0a03,0x0b23009f0f061917,0x352f434536182143,
0x3836333b18341438,0x37353f0b0a0b1bab,0x0073391e03007332,0x2431372f2100240f,
0x37180346730f1d00,0x03002434382f0243,0x24331f1d0024371f,0x0e250024381f0300,
0x33372f758c0d0b98,0x372f01be080c9dd5,0x874b36100b01be39,0xf538312822435f0f,
0x2f4400c131392f02,0xe50a050b00c13638,0x481035180448250f,0x0024361f0400240f,
0x033f391903e00800,0x2f03e00c000d3019,0x30302f0146923034,0x0f0983361e0e03e0,
0x07ff35312f0e40d3,0x01f10f1c00570f06,0x1f000d04011b0310,0x0024311e03002435,
0x0308f40808014c0f,0x382f27014c0f06ae,0x4c34382f42014c33,0x2b3c1037ba0f3101,
0x37bd311f01013038,0x37be313833334f38,0x00e1373434334f37,0x3d00e10d01e50405,
0x52361a00e2383231,0x3f00710b01e30762,0x312f00002b333135,0x3c37372f01002b35,
0x28743935323e2b48,0x3137343f3e04dd0f,0x485e3633220a04dd,0x4b0d322f34327b0f,
0xa30f229c440f36e7,0x30b40f30f70d1830,0x30c50f1631530f09,0x016b0f325a2e1e28,
0x39361f0335095aff,0x1e7ace30312c1032,0x063030720f69a930,0x7a780f307208008e,
0xa808613236301f0a,0x00a7391b2e6c0500,0x4b61f09f34315a34,0x20f17e6c656e7265,
0x03f19301f1806650,0xba04fa0b7413f182,0x0099082931230f02,0x061901410f312306,
0x310a39340e0f9957,0x382f200098391f01,0x5a01a70f07336038,0x0f63323a0f555304,
0x0f00d3351e4200d3,0x0631454b0f0eddb5,0x02140f2db10e00cd,0x0f33d00e0f890311,
0x00cb30372f1900c3,0x4a0a052f95371f72,0x24391f31be361909,0x1f180024381f1000,
0x3038343f3d32ec38,0x1f0a0a820f48585f,0x0c7f8a0f4b806c31,0x8ba9050bd6ed0d1f,
0x170f3100a732312f,0xd10f0073060f1080,0x8f0f0a72db0f2731,0x160fd66f0d1e1a71,
0x362f18724e0f7201,0x0fe7a90e060a0d38,0x0fd62a391ebc00e1,0x310e0c8b00ba00e1,
0x8bb60d7300e10fd6,0x1f18029b0f1cd90e,0x0f9cde0db500d935,0x371f028b0db400d9,
0x0f1bb4950f7700d9,0x1f4106700f22bd8f,0x1e34382f5e014238,0xc8480f914d0e050c,
0xec0d1e2201660f2e,0x74371f5a01210fd5,0x001d3a1b321f068e,0x301f7803240f0012,
0x0fd5be0d1e12d4eb,0x2ca377321f7400c0,0x5f095b0f4b0a3b0f,0xcc0d177b4437362f,
0x33312f068c520f2c,0x2f22b6c40f670495,0x7eaa0e1998f93536,0x096c311f0675ce0f,
0xa5b1371c0ffb0e60,0x0d48bb0e06b2540f,0x0f670966311ff8e8,0x0e2cc0d70f0b8063,
0x230a192d6a0f0650,0x18140f6009b00f01,0xe0c20f09c9a00f21,0x331f6009e8311f3a,
0x0fa8b0331e10c7c1,0x6605ae381f179fd0,0x322f0e16c637392f,0xd5430d1e46aada0d,
0x0715100f6306b40f,0x122c9c0f0295140f,0x7d12e30fd4e30d1e,0xa610341b2106e10f,
0x16290f35f437382e,0xa7010f0fd4c70e0c,0x321f31010f30352f,0x82de32372fc5010f,
0x2f05ed0e0f260c07,0x27311fb601183332,0x0fc5010f341f3102,0xc50118351f2c0227,
0x0fd4f70e201b860f,0x322f11e10cb8044e,0x2903730f11b2d031,0xb00f03ff014c371f,
0x04ff0155381f2c03,0x0fa6260e18003d0f,0x0f19c6d40f60149d,0x0c4630332f551127,
0x1b3a100f815d0e70,0x00d1580f280f890f,0xb0391e5f0112311f,0x32332f36c2150f92,
0x0fd414301e5f02ea,0x331f272e0504e8c9,0x7800c0331f0600c0,0x0800da0f2021eb0f,
0x026a0d6615ad341f,0x6814990f2bd5920f,0x4917740f131c000f,0x0d0f67166a36332f,
0xb00f2901310f1128,0x331f280a1e0f0003,0x1f087a361b600a1e,0x0f06610c05076a37,
0x0f09d5f80f011c2a,0x0a64180a0fcc2592,0x351f6014f30f0167,0xe30e07ae0d168a13,
0x2218e60f08890e1c,0x351e5f063930342f,0xb4a10fc5a20ec79a,0x342f14e1ab2e1f3f,
0x5f0fc50fc5163131,0x0f03ff014c32342f,0x0fc433342f2a0e70,0xdb0e06092a311fc6,
0x351f290297341f03,0x2f2b12530ff90143,0x7f2e1fed182a3634,0x440fd614361e03c9,
0x381f1501320ff518,0x1f1501290fed185e,0x5c31312f8010d939,0x33372f09850c06d8,
0x0f9c26860f07d59f,0x1f4c158a0f12fe49,0x0d4fd70db60ac235,0x32312f025e0e9793,
0x013b32352f28081a,0x33352f5f0c290ff1,0x2a0c550f2fff0178,0xde0f8031c534352f,
0x352f4125240f111a,0x3225220fb3010d35,0xf60fc3010d36352f,0xb4011637352f2b0c,
0x0d38352f31251e0f,0x391f2c02230fc301,0x2f22251a0fc30116,0x092a0fc306603036,
0x01ff014a31362f5f,0xe232362f2a08fc0f,0x331f5f029c0fc406,0x1c06460f01ff014a,
0xff015b0f06d9f10f,0xda1a0e1a03f70f02,0x5e112c0fba015a0f,0x0fe701410fda440e,
0x7e0fdaa20e5f056c,0x0f1b04450f25ff01,0x0fcd1ee90f06db21,0x1d9537392f08227a,
0x2ea40f06db160f22,0x4b381f50014b0fcd,0x1f2d09890f01ff01,0x1aef0f02ff029f39,
0x014a0f00dc370f10,0x06c40fc134371ecd,0x2c35400fe2b90e0d,0x0f1cff016631302f,
0x0f06dcf20f1c355a,0x054077361f9c3f4c,0x3c0ebf1e0e32220e,0x36302f05c4ec0f76,
0xff0143331f10e04f,0x0a01440fbc710e02,0x055c0fcd0a90341f,0x5e37fb0f0d7c0e72,
0x0c0c0e2f940d362f,0x0e0790c334312f5e,0x2f062d8d361f001b,0xdeb00e4ce5683531,
0x02ab361b8a33110f,0x4e01410f10321a0f,0x31aa361e670d4d0f,0x0f0d3a0e9801380f,
0x0572d46d0ff052d5,0x0fe1508d301faa57,0x770dbb311f730183,0x36030e331fcb6f0e,
0x010f0d4a0e00f50b,0x0f1f0206351f5e4d,0xc7fc36362f075045,0x311f06051a341f06,
0x0a5200f50f6e1a89,0x1f073754341f0045,0x1f0131000a8d9932,0x104e320f66013133,
0x0e10d2740f52240d,0xceeb0e0d2f0d007a,0x8434312f4507aa0f,0xb20e07f25e0f6e0b,
0x1f2f290e59720df4,0x0d0bca0e0e419431,0x9cb00f06770ee7d3,0xbe321e0ff2050f01,
0x019b0b089d070f3e,0x0806150f670d1f0f,0x30fd800f0f42f90f,0x0e01300b14fa370f,
0xae0fad45420f0cee,0x371f31014b0f2207,0x0f0703da0fa31244,0x0e038d321e010287,
0x2b0e4e05810f03e4,0x35382e6d55440f0d,0x382e1607130f681c,0x191385910fc8d730,
0x240fd8e10dea332e,0xa50b140ad70f340c,0x025e920b0d340c01,0xab351fc9d206d62d,
0x740fa3922e1e0a42,0x1f078cf5381f53d1,0xd1a90d1f1b002c33,0xece20f50cf381c01,
0x0008044fec090f31,0x3836303c01ca3514,0x166f2532372f508a,0x1d00083614bab906,
0x6b6431302d4f8d36,0x870d00390896a304,0x0049321f00490e05,0x0600490f2e990412,
0x890006004838372c,0x0d5bd509ec473619,0x00060167351f0047,0x24050052371b0098,
0x361e060052341f78,0x312c01005b0f71d1,0x0f4b6f321d005b33,0x1c85a52e1f0100f4,
0x2d0001290fd9a00e,0x0f007c0e44183337,0x1d1900730f1006f0,0x391e00ef0c422c34,
0x010a0f00de0c03d3,0x7e351d1001da0f15,0x22cb400f01da0d3c,0x3364371d0000fb0f,
0x0f45b6470f02970d,0x0d31cf381d00008e,0x68301f3bb20503b5,0x391d13020e0f1f40,
0x362f0600850f3031,0x0795381f06f65a37,0x00b80f2300c10f07,0x03b50d2e4d381e0d,
0x0102b40f3301340f,0x0f048e361e7c0304,0x0e5d36382e20a1fa,0x067233161100850f,
0x0f06ccd20f00850e,0x071301140f20f5ed,0x820f1e008f0f1553,0x1c1b007e301f0049,
0x0f12010d0f6ce036,0x361f0310042b0181,0x810f0a8c0d0f0206,0x12008e33372f1801,
0x18008f0f047c381d,0x1a007e0f0101810f,0x0d1f010d0f068c08,0x900f0b06ed0f11ad,
0x5a0ed056391e0f00,0x076c0f001e8c0f07,0x1f84050200880f29,0x0f0e04b00f019f04,
0x041b00740f019f81,0x05007436332f0041,0x0f21290d1977eb0f,0x1fd8f52e1814d087,
0x7624361c1200b930,0x00c1301f3b00b90f,0x07db0f82dc371c4e,0x07080f11d27e0f09,
0x6030362f09ab050d,0x2b5f0615361f0e02,0x09009f0f79b23939,0x2f0030064e06250f,
0x01a80f1701a03637,0x0934382f002e0632,0x14066701b10f0f04,0x0f0f00a832392f50,
0xe80ca5ff0c5801ba,0x2d8df5085d720b02,0x077bad0d001c3231,0xbc321fe14006001c,
0x1b0fe935372f0111,0x811d33382f101d08,0x311f010536352c18,0x2f29aa870f000e1d,
0x32312f1002b93530,0x590f57950e0f105b,0x0e880f01d3041100,0x620f180806391f07,
0x03e60f0eeb040100,0x2d187d069ff90e0f,0x0d63361f02b53230,0x0000e90fa1a60618,
0x009b380f0d22620f,0xb5361f006138352d,0x0f9d3330312e0d11,0xd80f0132052d0393,
0x9c0d1b093f0f0900,0xdc34322f079a0511,0x00660f04fe0e1100,0xea0f081203391f14,
0x322f0200660f2111,0x0f142e0e1611ed30,0x113b31322e0101f8,0x3233344f0516750f,
0x0f04bb0e1d048539,0x00a232332d0b04b2,0x013536382f14d10d,0x35301f1014da0f1c,
0x381d0e14e20f1a01,0x83b10eeb520cf107,0x0f066c070a00720f,0x0b02025d0f0e14bc,
0x007e0fb03e0e0086,0x1f0f158c30332f08,0x8239392e0407c138,0x18050b0f172f0e1f,
0x0f0110250fc54705,0x2e0204bb0f420085,0x0603390f04563233,0x0a1403033536353f,
0x65383237344f0847,0x08820f8976070608,0x4b09001e35332f00,0x391f001e36343734,
0xc207003307000059,0x0a0d7db407ce06ed,0x6e6f69746365732e,0x6572626261858d2f,
0x728b0d01147b2076,0x0348065e110a0d2c,0x331e78bf048dd807,0x029a06004c0e0026,
0x1d005f321e072205,0x4606034f05000930,0x372e070079301f4e,0x2d0141410f00a933,
0xa139352e008e3835,0x332c7a6b0a0d2d00,0x2307007d05141635,0x331e0700d1311f50,
0x410e0900be0f011b,0x1f637b0600790500,0x1f55240709004230,0x2f001b0507005635,
0x1592071001683633,0x0067361f0000f50f,0x530f1a0067361f07,0x11016532362f0000,
0x00420e1c0124371f,0x050f578c07008405,0x026c0f00c50e1102,0x035b0f1d02ba0f0b,
0x16b4070013381d01,0xfd391d0700e4301f,0x470e4100c7301f01,0x00300614032b0f03,
0x331f1201c732322f,0x3208007106100451,0x01090f1002820f0c,0x2f21ca0600790e1b,
0x6c57071001703034,0xa8331f080055331f,0x1201ce32332f7002,0x007a0f53026f341f,
0x25301f0125351e00,0x311f3903b90f5d01,0x1a0305301f00007d,0x00aa0f0005c0371f,
0xac381e0000550f1b,0xa2391f7c04510f07,0x1f060804100f5d00,0x342f015e39322d0b,
0x00b5381e25024239,0x311f11008f39382f,0x018539342f07039f,0x2e1c00f832322f38,
0x2500e50f00d23538,0x6602000f06f3331e,0x00540f240171341f,0xde0f000510351f09,
0x58391f75a7075206,0x23331f1025075b07,0x352e13007b0f240c,0x02f330352f065136,
0x08c90f0b83381e12,0x0782061c034a0f02,0x000901240ae7381f,0x636f6c58000e250f,
0xe84e0d1ba27f7b20,0x0fd670301e91ec05,0x630fe8a50e1ceaee,0x630fa3eb361b0e00,
0x42006339332f1f00,0x00630fe4ce39332c,0x1f18006332342f3e,0x6335362f2e006338,
0x0ff30b35362e4200,0x0b0008301b3d0067,0x0b007338312feb93,0xf60f1ce60735382f,
0x2e420063371f00eb,0x3d00670f013d3736,0x0c33322c00013d0f,0xa3371f0801b00f00,
0x63371fec23082303,0x670f013d331e4200,0x351701013d0f3e00,0xb10f1d05430f0083,
0x03540f0057080daa,0xda0f160067301f21,0x0f000c38342c0000,0x230491391f080073,
0x420063331f035408,0x00670f013d33362e,0x01351800013d0f3d,0x01b00f9a1e3619e8,
0x004e0813afcb0f00,0x0e36322f20020e0f,0x37372fad1f082902,0x1900d1391f0c00d1,
0x005a31382faa4f08,0x2719005a33382f0b,0x01f8351f000c3138,0x0057051f01270f0d,
0x1f06067d0fe59b0e,0x2f00830733018e33,0x8e301f0c01343837,0x32382e0393071a01,
0x4e0821b2840f005a,0x0127361e000c0300,0x0f0057082ab05d0f,0x32018e351f18018e,
0x0800730f000c391d,0xdfc70f1c9d3a321f,0x5803420064331f01,0x3900680f013f0e00,
0x5e01d6ea0e013f0c,0x341f0c007a391fb3,0x0065313128220c8d,0x290f0d028531322f,
0xac0fb3963219230a,0xaf082400650f0e01,0x0f0d012f34332fb2,0x1f000d3319230065,
0xe335332e430b5835,0x7c75035009b90fd8,0x3c0f08e10e021904,0x00dd0f0058092bf2,
0x3118320bd3391f18,0x07560fa2a805f395,0x004f0913b9060f07,0x1f37005c0fb25509,
0x0480361f00b2c836,0x004f030a005c0f15,0x0f3000bb0f018c0e,0x190183361f020183,
0x35323f260183341f,0x0e004f0339005c33,0x270f30005f0f0127,0x05180127371f0201,
0x1f012732342f115c,0x004f0339005c351f,0x0f30005f0f01270e,0x392f10e208020127,
0x220e690f0d128334,0x1e1800d40f005803,0x081900d40f0a0137,0x0d05f736392f078e,
0x0f03f60e2400d40f,0x180100d40f350d8e,0x04c135392f000d35,0x391f1202cf331f14,
0x341f005f061c0273,0x72050ec408210273,0x00cb0f07052d0f5c,0xcb0f1d058c371f1b,
0x31302f03ba082b00,0x6a0e0058034211a7,0x00d40f300f270f02,0xdf33302f13b70802,
0x0d0e2400d40f0d0e,0x00d40f350e6d0f06,0x0679321f007c0902,0x004f031902730f0d,
0x2b02730f1906d80f,0x0f4a341f007c3518,0x05a80f1b00cb0f0d,0x0f2b00cb35382f1c,
0x2708ca351f1a08ca,0x4f0339005c39332f,0x30005f0f01270e00,0x1a08ca0f0201270f,
0x31342f2708ca371f,0xf60e004f0339005c,0x01270f30005f0f07,0x1ffbf60408ca0802,
0x5936392c16133038,0x1d411f042d810504,0x0b5e006e0f006139,0x5d0f4200710f014b,
0x00028432362f0101,0x00ef0f061146381f,0x006e381f03bd0a2c,0x5e006e0f0061034b,
0x0f3f00710f01cb0e,0x1901cb361f0201cb,0x37313f3801cb351f,0x006e351f4d006e35,
0x3f00710f01cb0e62,0x1a061a0f0201cb0f,0x37313f26061a381f,0x01a7331e3b005c33,
0x0f0f400e36005c0f,0x1d0201830f35005f,0xba0f0b2e0e000d39,0xee351f00240508d5,
0x65371fc5ce0a0813,0x14530e0058034200,0x0101420f3900cd0f,0x16d70f000d39372d,
0x0065092301420f09,0x382e43006532382f,0x0f3d00cd0f014232,0x0f000d361d0222a5,
0x082400dd0f091c2a,0x43006530392f0065,0x00680f014230392e,0xb839180101420f3d,
0x0f0d1bde36322f0a,0x322fcd4908230ef4,0x040d312f0d0cef34,0x1c013934322f181d,
0x29221ca20fc71e0e,0x0e27880f23e43931,0x040058061f22410f,0x0fbe0f1b5e0e0a0f,
0x0cae0e1b00650f05,0x0201390f3520330f,0x0811d20fc91b381e,0x5c30312f1a0d790f,
0x005f0f128d0e5000,0x06fa080201270f2d,0x02600f0e257b321f,0x321f034a37322823,
0x1f1b03990f0d14fd,0x0399381f251c8632,0x341f033430322929,0x0d040058063f25da,
0x65341f1629fa0f00,0x0f1d1360351f1b00,0x351fccd80b290399,0x081b033d0f0d1497,
0x3a005c36332f005c,0x005f0f155236332e,0x2de3090101270f34,0x0399331f0e20f20f,
0x3d0f2c1fc3311f24,0x1f00853731282403,0x2400dd0f0d20a032,0x00dd0f1d07b3321f,
0x0618028536332f33,0x1f420285381f2038,0x3500cb0f0f005f35,0x372f4a00cb31382f,
0x0d36322e2915e537,0x0de30f0908e40f00,0x0065331f00650a23,0x3e00680f19db0e44,
0x020040b30f014207,0x121808329108cf14,0x38270e1708220b08,0x38270ad707000c30,
0x381f2a5408000c34,0xc50909df09090442,0x03a9321f0b320808,0x4409000d38322809,
0x0115331f02a90914,0x6d616e6275706412,0x42381e56fa010117,0x666e6955cf2706c5,
0x42343524425e0d6f,0x50a30f6c1a361b4b,0xe54f0134472e1614,0x002c351f0046301b,
0x0f43f53633373e06,0x363b00570a2152b2,0x1b540c0f00573432,0x313630314e004e0a,
0x690a324d0a0f0118,0x0f00b73937343e00,0x381f00d20b334e0a,0x7305002306049f12,
0x0c01bd0700f40c05,0x3a0b59525e0f00af,0x165e5a3938303f01,0xa63536312f61f90d,
0x1fba190601550727,0x3f03580b33581439,0x060f375f3e313837,0xca0a475f580f0101,
0xd20b393432354f00,0x0f63200e27be0503,0x2f024b301b07634d,0x039c0c1dd1713538,
0x2e0196070ed16a0f,0x3356f60f04c23538,0xff0f0fee05025f0b,0x312f0e5bba0f1001,
0x3930354f06026831,0x0388371c03019e32,0x6005aa1b0b006704,0xe332382bab360b4a,
0x00e7ab0f0038045e,0x2f00180892292e13,0x33382f0d00f93736,0xde05cce10d0676fa,
0xa60c0565b9391f00,0x00b2351f635d0702,0x352f05835d391f03,0x73a6351b05008734,
0xe20e16a4c839342f,0xeb361c19a6420f5c,0x1f024105074007be,0x1500680a3c5ad839,
0x4d550b391f75f439,0xee0ee3070202e40c,0x30302f0bf1c50f51,0xcc3335393b0605ff,
0x32332b3c081d0f00,0x61b60f6f710c076e,0x3431393f04d30b27,0x0e5c067b0f43cf53,
0x3f052e01f00fdd41,0x0000ea0fe4070e00,0x150000400f7c910e,0x4cffd9190f009c39,
0x0b6c38332e04020b,0x09a5351c3003a70f,0x0607ff0b2662970f,0x2e07c268311f14ea,
0x0ba5331e00383930,0x7902391504002c0f,0x3e3415530587391f,0x0be10b1008d40f14,
0x150e056d7939392f,0x321e0d813f391f6f,0x73b70e02e90e6f1c,0x8878880f1dd0810f,
0xdb3734383e01990a,0x022c0b5d5f800f0d,0xd80e052707e8cf03,0x361a067684381fac,
0x6e850f5a00070058,0x321e728e35392d06,0x0c05bd33312f10c1,0x1b0f0d940c03dd0e,
0x74290f02060e0705,0x200d010f0058090c,0x06090f050552321f,0x05cf0f0905f80f1e,
0x0ac1072c05e70f05,0x1c040e623639343f,0x0471c9371f03b633,0xe10f270e4738392f,
0x030e0feb3e044e00,0x34343f2b03050f34,0x37382f7aff05c735,0x0c5aeb341c075939,
0x0607ae33302f0457,0x000a0d7d0a0d3060
};
#pragma data_seg()


}
#line 3807 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.fatbin.c"


extern "C" {
#line 3811 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.fatbin.c"
#pragma data_seg(".nvFatBinSegment")




__declspec(allocate(".nvFatBinSegment")) __declspec(align(8)) extern const __fatBinC_Wrapper_t __fatbinwrap_17_CudaStuff_cpp1_ii_1abe6ff8= 
	{ 0x466243b1, 1, fatbinData, 0 };
#pragma data_seg()

}
#line 3822 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.fatbin.c"

#line 5 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.cudafe1.stub.c"
extern void __device_stub__Z14NeuroGPUKernel4StimPf3Sim4HMatS0_S0_tt(Stim&, float *, Sim&, HMat&, float *, float *, unsigned short, unsigned short);
static void __nv_cudaEntityRegisterCallback(void **);
static void __sti____cudaRegisterAll_17_CudaStuff_cpp1_ii_1abe6ff8(void);
#pragma section(".CRT$XCU",read)
__declspec(allocate(".CRT$XCU"))static void (*__dummy_static_init__sti____cudaRegisterAll_17_CudaStuff_cpp1_ii_1abe6ff8[])(void) = {__sti____cudaRegisterAll_17_CudaStuff_cpp1_ii_1abe6ff8};
void __device_stub__Z14NeuroGPUKernel4StimPf3Sim4HMatS0_S0_tt(Stim&__par0, float *__par1, Sim&__par2, HMat&__par3, float *__par4, float *__par5, unsigned short __par6, unsigned short __par7){if (cudaSetupArgument((void *)(__cudaAddressOf(__par0)), sizeof(__par0), (size_t)0Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)56Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(__cudaAddressOf(__par2)), sizeof(__par2), (size_t)64Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(__cudaAddressOf(__par3)), sizeof(__par3), (size_t)96Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par4, sizeof(__par4), (size_t)304Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par5, sizeof(__par5), (size_t)312Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par6, sizeof(__par6), (size_t)320Ui64) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par7, sizeof(__par7), (size_t)322Ui64) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)(Stim, float *, Sim, HMat, float *, float *, unsigned short, unsigned short))NeuroGPUKernel)); (void)cudaLaunch(((char *)((void ( *)(Stim, float *, Sim, HMat, float *, float *, unsigned short, unsigned short))NeuroGPUKernel))); };}
#line 476 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
void NeuroGPUKernel( Stim __cuda_0,float *__cuda_1,Sim __cuda_2,HMat __cuda_3,float *__cuda_4,float *__cuda_5,unsigned short __cuda_6,unsigned short __cuda_7)
#line 477 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
{__device_stub__Z14NeuroGPUKernel4StimPf3Sim4HMatS0_S0_tt( __cuda_0,__cuda_1,__cuda_2,__cuda_3,__cuda_4,__cuda_5,__cuda_6,__cuda_7);
#line 486 "C:/pyNeuroGPU_win2/NeuroGPU6/CudaStuff.cu"
}
#line 1 "c:\\pyneurogpu_win2\\neurogpu6\\x64\\debug\\CudaStuff.cudafe1.stub.c"
static void __nv_cudaEntityRegisterCallback( void **__T23) {  { volatile static void **__ref; __ref = (volatile void **)__T23; }; __nv_save_fatbinhandle_for_managed_rt(__T23); __cudaRegisterFunction(__T23, (const char*)((void ( *)(Stim, float *, Sim, HMat, float *, float *, unsigned short, unsigned short))NeuroGPUKernel), (char*)"_Z14NeuroGPUKernel4StimPf3Sim4HMatS0_S0_tt", "_Z14NeuroGPUKernel4StimPf3Sim4HMatS0_S0_tt", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0); __cudaRegisterVar(__T23, (char*)&::cCm, (char*)"cCm", "cCm", 0, 256, 1, 0); __cudaRegisterVar(__T23, (char*)&::cE, (char*)"cE", "cE", 0, 512, 1, 0); __cudaRegisterVar(__T23, (char*)&::cF, (char*)"cF", "cF", 0, 512, 1, 0); __cudaRegisterVar(__T23, (char*)&::cFIdxs, (char*)"cFIdxs", "cFIdxs", 0, 640, 1, 0); __cudaRegisterVar(__T23, (char*)&::cKs, (char*)"cKs", "cKs", 0, 128, 1, 0); __cudaRegisterVar(__T23, (char*)&::cSegToComp, (char*)"cSegToComp", "cSegToComp", 0, 128, 1, 0); __cudaRegisterVar(__T23, (char*)&::cBoolModel, (char*)"cBoolModel", "cBoolModel", 0, 128, 1, 0); __cudaRegisterVar(__T23, (char*)&::cRelStarts, (char*)"cRelStarts", "cRelStarts", 0, 12, 1, 0); __cudaRegisterVar(__T23, (char*)&::cRelEnds, (char*)"cRelEnds", "cRelEnds", 0, 12, 1, 0); __cudaRegisterVar(__T23, (char*)&::cFathers, (char*)"cFathers", "cFathers", 0, 12, 1, 0); __cudaRegisterVar(__T23, (char*)&::cRelVec, (char*)"cRelVec", "cRelVec", 0, 18, 1, 0); __cudaRegisterVar(__T23, (char*)&::cSegStartI, (char*)"cSegStartI", "cSegStartI", 0, 20, 1, 0); __cudaRegisterVar(__T23, (char*)&::cSegEndI, (char*)"cSegEndI", "cSegEndI", 0, 20, 1, 0); __cudaRegisterVar(__T23, (char*)&::cCompByLevel32, (char*)"cCompByLevel32", "cCompByLevel32", 0, 384, 1, 0); __cudaRegisterVar(__T23, (char*)&::cCompByFLevel32, (char*)"cCompByFLevel32", "cCompByFLevel32", 0, 384, 1, 0); __cudaRegisterVar(__T23, (char*)&::cLRelStarts, (char*)"cLRelStarts", "cLRelStarts", 0, 12, 1, 0); __cudaRegisterVar(__T23, (char*)&::cLRelEnds, (char*)"cLRelEnds", "cLRelEnds", 0, 12, 1, 0); __cudaRegisterVar(__T23, (char*)&::cFLRelStarts, (char*)"cFLRelStarts", "cFLRelStarts", 0, 10, 1, 0); __cudaRegisterVar(__T23, (char*)&::cFLRelEnds, (char*)"cFLRelEnds", "cFLRelEnds", 0, 10, 1, 0); __cudaRegisterVar(__T23, (char*)&::cSonNoVec, (char*)"cSonNoVec", "cSonNoVec", 0, 128, 1, 0); }
static void __sti____cudaRegisterAll_17_CudaStuff_cpp1_ii_1abe6ff8(void) {  { __cudaRegisterLinkedBinary_17_CudaStuff_cpp1_ii_1abe6ff8 (( void (*)(void **))(__nv_cudaEntityRegisterCallback), (void *)&__fatbinwrap_17_CudaStuff_cpp1_ii_1abe6ff8, (void *)&__module_id_str, (void (*)(void *))&____nv_dummy_param_ref); };  }
#line 2 "CudaStuff.cudafe1.stub.c"
#line 1 "CudaStuff.cudafe1.stub.c"


